<?php
namespace Sample\BusinessApp\Renders;

use Dcp\Core\DocManager;
use Dcp\Ui\IRenderTransitionAccess;
use Dcp\Ui\TransitionRender;
use Dcp\AttributeIdentifiers\Ba_fees as FeesAttr;
use Dcp\AttributeIdentifiers\Ba_categories as CategoriesAttr;
use Dcp\AttributeIdentifiers\Ba_wfees as MyParams;

class FeesTransitionsAccess implements IRenderTransitionAccess
{

    /**
     * Get Transition Render object to configure transition render
     *
     * @param string $transitionId transition identifier
     * @param \WDoc $workflow workflow document
     *
     * @return TransitionRender
     */
    public function getTransitionRender($transitionId, \WDoc $workflow)
    {
        return new FeesTransitions();
    }
}


class FeesTransitions extends \Dcp\Ui\TransitionRender
{
    /**
     * @param string $transitionId
     *
     * @return \Dcp\Ui\RenderOptions
     * @throws \Dcp\Ui\Exception
     */
    public function getRenderOptions($transitionId)
    {
        $options = parent::getRenderOptions($transitionId);

        return $options;
    }

    protected function getLimitsValues(\Doc $doc) {
        $docRef = $doc->getFamilyParameterValue(FeesAttr::fee_limit_values, null);
        if ($docRef) {
            $document = DocManager::getDocument($docRef);
            if (!empty($document)) {
                return $document->getArrayRawValues(CategoriesAttr::cat_t_categories);
            }

        }
        return [];
    }

    protected function getPeriodString($period) {
        switch ($period) {
            case 1:
                return "an";
            case 2:
                return "mois";
            case 3:
                return "jour";
        }
    }

    public function getTemplates($transitionId)
    {
        $templates = parent::getTemplates($transitionId); // TODO: Change the autogenerated stub
        $doc = $this->getWorkflow()->doc;
        $outgoings = $doc->getArrayRawValues(FeesAttr::fee_t_all_exp);
        $categoriesRules = $this->getLimitsValues($doc);
        $exceeds = array_filter($outgoings, function ($o) {
            if (!empty($o[FeesAttr::fee_exp_exceed])) {
                return true;
            }
            return false;
        });
        $categories = [];
        $ids = [];
        foreach ($exceeds as $e) {
            $catId = $e[FeesAttr::fee_exp_category] - 1;
            if (array_search($catId, $ids) === false) {
                $ids[] = $catId;
                $categories[] = $categoriesRules[$catId];
            }
        }
        $message = "";
        if (!empty($categories)) {
            $message .= "Vous avez dépassez les montants forfaitaires pour les catégories suivantes :<br><ul>";
            for ($i = 0; $i < count($categories); $i++) {
                $message .= "<li><b>".$categories[$i][CategoriesAttr::cat_name].
                    "</b> (Limite : ".
                    $categories[$i][CategoriesAttr::cat_max].
                    " € par ".
                    $this->getPeriodString($categories[$i][CategoriesAttr::cat_period]) .
                    ")</li>";
            }
            $message .= "</ul><br>Souhaitez-vous <b>confirmer la demande de dépassement temporaire</b> ou <b>annuler l'envoi et modifier les dépenses ?</b>";

        } else {
            $message .= "Un mail va être envoyer à votre supérieur hiérarchique. Souhaitez-vous continuer ?";
        }
        $templates["body"]= "{{>transitionHeader}}<h6>$message</h6>{{>transitionMessages}}{{>transitionButtons}}";
        return $templates;
    }
}