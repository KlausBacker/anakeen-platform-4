<?php
/**
 * Created by PhpStorm.
 * User: aurelien
 * Date: 19/12/17
 * Time: 13:54
 */

namespace Anakeen\Sample\Routes;
use Dcp\Core\ContextManager;
use Dcp\Core\DocManager;
use Dcp\AttributeIdentifiers\Ba_fees as FeesAttr;
use Dcp\HttpApi\V1\Crud\DocumentCollection;

class Reporting extends DocumentCollection {

    protected $_reportingYear;
    protected $_debugLog;

    public function setUrlParameters(array $parameters)
    {
        parent::setUrlParameters($parameters);
        if (isset($this->urlParameters['year'])) {
            $this->_reportingYear = pg_escape_string($this->urlParameters['year']);
        } else {
            $exception = new Exception("FIXME");
            $exception->setHttpStatus("400", "url parameter year is needed");
            throw $exception;
        }

    }

    protected function prepareSearchDoc()
    {
        parent::prepareSearchDoc(); // TODO: Change the autogenerated stub
        if (isset($this->_reportingYear)) {
            $this->_searchDoc->fromid = DocManager::getFamilyIdFromName('BA_FEES');
            // $this->_searchDoc->addFilter("%s = '%s'", FeesAttr::fee_account, ContextManager::getCurrentUser()->fid);
            $dateBounds = Reporting::getDate($this->_reportingYear);
            $this->_searchDoc->addFilter("%s BETWEEN to_date('%s', 'YYYY-MM-DD') AND to_date('%s', 'YYYY-MM-DD')",
                FeesAttr::fee_period,
                $dateBounds['begin'],
                $dateBounds['end']);

        }

    }

    static function getDate($year) {
        $nextYear = intval($year) + 1;
        return array(
            "begin" => "$year-01-01",
            "end" => "$nextYear-01-01"
        );
    }
}