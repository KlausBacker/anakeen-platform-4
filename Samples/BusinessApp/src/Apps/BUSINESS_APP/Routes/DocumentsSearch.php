<?php
/**
 * Created by PhpStorm.
 * User: aurelien
 * Date: 21/11/17
 * Time: 13:34
 */

namespace Anakeen\Sample\Routes;


use Dcp\HttpApi\V1\Crud\Crud;
use Dcp\HttpApi\V1\Crud\DocumentCollection;
use Dcp\Core\ContextManager;
use Dcp\Core\DocManager;

class DocumentsSearch extends DocumentCollection
{
    protected $_utags = [];

    protected function prepareSearchDoc()
    {
        parent::prepareSearchDoc(); // TODO: Change the autogenerated stub
        $famIds = [];
        if (!empty($this->contentParameters['collections'])) {
            $famNames = explode(',', $this->contentParameters['collections']);
            $filter = 'fromid IN (%s)';
            foreach ($famNames as $key => $name) {
                $famIds[] = DocManager::getFamilyIdFromName($name);
            }
            $this->_searchDoc->addFilter($filter, implode(",", $famIds));
        }
        if (!empty($this->contentParameters['filter'])) {
            $this->_searchDoc->addFilter("title ~* '%s'", $this->contentParameters['filter']);
        }
        if (!empty($this->contentParameters['utag'])) {
            $this->_searchDoc->join("id = docutag(id)");
            $this->_searchDoc->addFilter("docutag.uid = %d", ContextManager::getCurrentUser()->id);
            $this->_searchDoc->addFilter("docutag.tag = '%s'", $this->contentParameters['utag']);
        }
    }

    protected function extractOrderBy()
    {
        if (!empty($this->contentParameters['utag'])) {
            return 'docutag.date desc';
        } else {
            return parent::extractOrderBy();
        }
    }

    public function read($resourceId)
    {
        $return = parent::read($resourceId); // TODO: Change the autogenerated stub
        $this->_searchDoc->reset();
        $list = $this->_searchDoc->getDocumentList();
        $utag=new \DocUtag();
        foreach ($list as $item) {
            $utag->select([$item->id,ContextManager::getCurrentUser()->id, $this->contentParameters['utag']]);
            $this->_utags[$item->id] = [
                "tag" => $utag->tag,
                "date" => $utag->date,
                "value" => json_decode($utag->comment)];
            if (!empty($this->contentParameters['iconSize'])) {
                $this->_utags[$item->id]['icon'] = 'api/v1/images/assets/sizes/'.$this->contentParameters['iconSize'].'/'.$item->icon;
            }
        }
        $return['utags'] = $this->_utags;
        return $return;
    }
}