#!/usr/bin/env php
<?php
// application.php

$loader = require __DIR__ . '/vendor/autoload.php';
$loader->addPsr4('', realpath(__DIR__ . '/src/'));


$rootPath = realpath(__DIR__);
set_include_path(get_include_path() . PATH_SEPARATOR . $rootPath . DIRECTORY_SEPARATOR . 'include');
putenv('WIFF_ROOT=' . $rootPath);

\Control\Internal\System::sudoWww();

use Symfony\Component\Console\Application;
use Symfony\Component\EventDispatcher\EventDispatcher;
use Symfony\Component\Console\ConsoleEvents;
use Symfony\Component\Console\Event\ConsoleCommandEvent;

\Control\Internal\Context::initConfig();

$application = new Application();
$application->setVersion(\Control\Internal\Context::getVersion());
$application->setName("Anakeen Control");

// ... register commands
$application->add(new \Control\Cli\CliInfo());
$application->add(new \Control\Cli\CliShow());
$application->add(new \Control\Cli\CliSearch());
$application->add(new \Control\Cli\CliStatus());
$application->add(new \Control\Cli\CliLog());
$application->add(new \Control\Cli\CliInit());
$application->add(new \Control\Cli\CliGet());
$application->add(new \Control\Cli\CliSet());
$application->add(new \Control\Cli\CliOutdated());
$application->add(new \Control\Cli\CliRegistry());
$application->add(new \Control\Cli\CliInstallModule());
$application->add(new \Control\Cli\CliUpdateModule());
$application->add(new \Control\Cli\CliRemoveModule());
$application->add(new \Control\Cli\CliDoJob());
$application->add(new \Control\Cli\CliKill());
$application->add(new \Control\Cli\CliArchive());
$application->add(new \Control\Cli\CliRestore());
$application->add(new \Control\Cli\CliRun());
$application->add(new \Control\Cli\CliBashCompletion());


$dispatcher = new EventDispatcher();
$dispatcher->addListener(ConsoleEvents::COMMAND, function (ConsoleCommandEvent $event) {
    // gets the command to be executed
    $command = $event->getCommand();
    if ($command->getName() !== "log" && $command->getName() !== "_completion") {
        /** @var \Symfony\Component\Console\Input\InputInterface $input */
        $input = $event->getInput();

        $args = $input->getArguments();

        $opts = $input->getOptions();
        $msg = implode(" ", $args);
        foreach ($opts as $kopt => $opt) {
            if ($opt === null || $opt === false) {
                continue;
            }
            if ($opt === true) {
                $msg .= sprintf(" --%s", $kopt);
            } else {
                $msg .= sprintf(" --%s=%s", $kopt, $opt);
            }
        }
        \Control\Internal\JobLog::addLog("anakeen-control", "exec", $msg, "cli");
    }
});

$application->setDispatcher($dispatcher);

$application->run();
