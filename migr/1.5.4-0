#!/usr/bin/env php
<?php
$WIFF_ROOT = realpath(dirname(__FILE__) . DIRECTORY_SEPARATOR . '..');
set_include_path(get_include_path() . PATH_SEPARATOR . $WIFF_ROOT . DIRECTORY_SEPARATOR . 'include');
putenv('WIFF_ROOT=' . $WIFF_ROOT);

require_once ('class/Class.WIFF.php');

function __autoload($class_name)
{
    require_once 'class/Class.' . $class_name . '.php';
}

$wiff = WIFF::getInstance();
if ($wiff === false) {
    error_log(sprintf("Error: could not get WIFF instance."));
    exit(1);
}

if (($dh = opendir($wiff->archived_contexts_dir)) === false) {
    error_log(sprintf("Error: could not open directory '%s'.", $wiff->archived_contexts_dir));
    exit(1);
}
if (!is_dir($wiff->archived_tmp_dir) || !is_writable($wiff->archived_tmp_dir)) {
    error_log(sprintf("Error: directory '%s' does not exists or is not writable.", $wiff->archived_tmp_dir));
    exit(1);
}

/*
 * Move only .ctx, .error, and .sts files from 'archived-contexts' to 'archived-tmp'.
*/
$errors = array();
while (($file = readdir($dh)) !== false) {
    if ($file == '.' || $file == '..') {
        continue;
    }
    $src = $wiff->archived_contexts_dir . DIRECTORY_SEPARATOR . $file;
    if (is_dir($src)) {
        continue;
    }
    if (!preg_match('/\.(ctx|error|sts)$/', $src)) {
        continue;
    }
    $dst = $wiff->archived_tmp_dir . DIRECTORY_SEPARATOR . $file;
    printf("Moving file '%s' to '%s'.... ", $src, $dst);
    if (rename($src, $dst) === false) {
        $errors[] = sprintf("Error: could not move file '%s' to '%s'.", $src, $dst);
        printf("[FAIL]\n");
    } else {
        printf("[OK]\n");
    }
}
closedir($dh);

$olddir = $wiff->archived_contexts_dir . DIRECTORY_SEPARATOR . 'archived-tmp';
if (is_dir($olddir)) {
    $content = scandir($olddir);
    if ($content !== false && count($content) <= 2) {
        printf("Removing directory '%s'... ", $olddir);
        if (rmdir($olddir) === false) {
            $errors[] = sprintf("Error: could not remove empty directory '%s'.", $olddir);
            printf("[FAIL]\n");
        } else {
            printf("[OK]\n");
        }
    }
}

/*
 * Upgrade dynacase.anakeen.com repo from HTTP to HTTPS
*/
$xml = $wiff->loadParamsDOMDocument();
if ($xml === false) {
    $errors[] = $wiff->errorMessage;
} else {
    $x = new DOMXPath($xml);
    /*
     * Upgrade repos
     */
    $repos = $x->query("/wiff/repositories/access[@host='dynacase.anakeen.com']");
    for ($i = 0; $i < $repos->length; $i++) {
        $repo = $repos->item($i);
        if ($repo->getAttribute('protocol') == 'http') {
            printf("Upgrading repository '%s' to HTTPS... ", $repo->getAttribute('name'));
            $repo->setAttribute('protocol', 'https');
            printf("[OK]\n");
        }
    }
    /*
     * Upgrade wiff-update-host
     */
    $params = $x->query("/wiff/parameters/param[@name='wiff-update-host']");
    for ($i = 0; $i < $params->length; $i++) {
        $param = $params->item($i);
        $value = $param->getAttribute('value');
        if (preg_match('!^http://dynacase\\.anakeen\\.com(?:$|/)!', $value)) {
            if (($value = preg_replace('!^http://(dynacase\\.anakeen\\.com(?:$|/))!', 'https://\\1', $value)) !== null) {
                printf("Upgrading wiff-update-host to HTTPS... ");
                $param->setAttribute('value', $value);
                printf("[OK]\n");
            }
        }
    }
    try {
        $xml->commit();
    } catch (Exception $e) {
        $errors[] = $e->getMessage();
        printf("[FAIL]\n");
    }
}

if (count($errors) > 0) {
    error_log(join(PHP_EOL, $errors));
    exit(1);
}
exit(0);
