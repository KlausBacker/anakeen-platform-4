/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 	};
/******/
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"smartElement": 0
/******/ 	};
/******/
/******/
/******/
/******/ 	// script path function
/******/ 	function jsonpScriptSrc(chunkId) {
/******/ 		return __webpack_require__.p + "" + ({"vendors~documentCkEditor":"vendors~documentCkEditor","documentCkEditor":"documentCkEditor","vendors~ensureDatatables":"vendors~ensureDatatables","wDocument":"wDocument","wCreateDocument":"wCreateDocument"}[chunkId]||chunkId) + ".js"
/******/ 	}
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/ 	// This file contains only the entry chunk.
/******/ 	// The chunk loading function for additional chunks
/******/ 	__webpack_require__.e = function requireEnsure(chunkId) {
/******/ 		var promises = [];
/******/
/******/
/******/ 		// JSONP chunk loading for javascript
/******/
/******/ 		var installedChunkData = installedChunks[chunkId];
/******/ 		if(installedChunkData !== 0) { // 0 means "already installed".
/******/
/******/ 			// a Promise means "currently loading".
/******/ 			if(installedChunkData) {
/******/ 				promises.push(installedChunkData[2]);
/******/ 			} else {
/******/ 				// setup Promise in chunk cache
/******/ 				var promise = new Promise(function(resolve, reject) {
/******/ 					installedChunkData = installedChunks[chunkId] = [resolve, reject];
/******/ 				});
/******/ 				promises.push(installedChunkData[2] = promise);
/******/
/******/ 				// start chunk loading
/******/ 				var head = document.getElementsByTagName('head')[0];
/******/ 				var script = document.createElement('script');
/******/ 				var onScriptComplete;
/******/
/******/ 				script.charset = 'utf-8';
/******/ 				script.timeout = 120;
/******/ 				if (__webpack_require__.nc) {
/******/ 					script.setAttribute("nonce", __webpack_require__.nc);
/******/ 				}
/******/ 				script.src = jsonpScriptSrc(chunkId);
/******/
/******/ 				onScriptComplete = function (event) {
/******/ 					// avoid mem leaks in IE.
/******/ 					script.onerror = script.onload = null;
/******/ 					clearTimeout(timeout);
/******/ 					var chunk = installedChunks[chunkId];
/******/ 					if(chunk !== 0) {
/******/ 						if(chunk) {
/******/ 							var errorType = event && (event.type === 'load' ? 'missing' : event.type);
/******/ 							var realSrc = event && event.target && event.target.src;
/******/ 							var error = new Error('Loading chunk ' + chunkId + ' failed.\n(' + errorType + ': ' + realSrc + ')');
/******/ 							error.type = errorType;
/******/ 							error.request = realSrc;
/******/ 							chunk[1](error);
/******/ 						}
/******/ 						installedChunks[chunkId] = undefined;
/******/ 					}
/******/ 				};
/******/ 				var timeout = setTimeout(function(){
/******/ 					onScriptComplete({ type: 'timeout', target: script });
/******/ 				}, 120000);
/******/ 				script.onerror = script.onload = onScriptComplete;
/******/ 				head.appendChild(script);
/******/ 			}
/******/ 		}
/******/ 		return Promise.all(promises);
/******/ 	};
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/Anakeen/smartElement/dev/";
/******/
/******/ 	// on error function for async loading
/******/ 	__webpack_require__.oe = function(err) { console.error(err); throw err; };
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/*!***************************************************************!*\
  !*** multi ./src/vendor/Anakeen/DOCUMENT/IHM/mainDocument.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! /home/charles/git/user-interfaces/src/vendor/Anakeen/DOCUMENT/IHM/mainDocument.js */"899d4bc6ec89ae64ab42");


/***/ }),

/***/ "05951c2f2bda4691bed3":
/*!***************************************************!*\
  !*** ./node_modules/popper.js/dist/esm/popper.js ***!
  \***************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(global) {/**!\n * @fileOverview Kickass library to create and place poppers near their reference elements.\n * @version 1.14.6\n * @license\n * Copyright (c) 2016 Federico Zivolo and contributors\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\nvar isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined';\n\nvar longerTimeoutBrowsers = ['Edge', 'Trident', 'Firefox'];\nvar timeoutDuration = 0;\nfor (var i = 0; i < longerTimeoutBrowsers.length; i += 1) {\n  if (isBrowser && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {\n    timeoutDuration = 1;\n    break;\n  }\n}\n\nfunction microtaskDebounce(fn) {\n  var called = false;\n  return function () {\n    if (called) {\n      return;\n    }\n    called = true;\n    window.Promise.resolve().then(function () {\n      called = false;\n      fn();\n    });\n  };\n}\n\nfunction taskDebounce(fn) {\n  var scheduled = false;\n  return function () {\n    if (!scheduled) {\n      scheduled = true;\n      setTimeout(function () {\n        scheduled = false;\n        fn();\n      }, timeoutDuration);\n    }\n  };\n}\n\nvar supportsMicroTasks = isBrowser && window.Promise;\n\n/**\n* Create a debounced version of a method, that's asynchronously deferred\n* but called in the minimum time possible.\n*\n* @method\n* @memberof Popper.Utils\n* @argument {Function} fn\n* @returns {Function}\n*/\nvar debounce = supportsMicroTasks ? microtaskDebounce : taskDebounce;\n\n/**\n * Check if the given variable is a function\n * @method\n * @memberof Popper.Utils\n * @argument {Any} functionToCheck - variable to check\n * @returns {Boolean} answer to: is a function?\n */\nfunction isFunction(functionToCheck) {\n  var getType = {};\n  return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';\n}\n\n/**\n * Get CSS computed property of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Eement} element\n * @argument {String} property\n */\nfunction getStyleComputedProperty(element, property) {\n  if (element.nodeType !== 1) {\n    return [];\n  }\n  // NOTE: 1 DOM access here\n  var window = element.ownerDocument.defaultView;\n  var css = window.getComputedStyle(element, null);\n  return property ? css[property] : css;\n}\n\n/**\n * Returns the parentNode or the host of the element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} parent\n */\nfunction getParentNode(element) {\n  if (element.nodeName === 'HTML') {\n    return element;\n  }\n  return element.parentNode || element.host;\n}\n\n/**\n * Returns the scrolling parent of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} scroll parent\n */\nfunction getScrollParent(element) {\n  // Return body, `getScroll` will take care to get the correct `scrollTop` from it\n  if (!element) {\n    return document.body;\n  }\n\n  switch (element.nodeName) {\n    case 'HTML':\n    case 'BODY':\n      return element.ownerDocument.body;\n    case '#document':\n      return element.body;\n  }\n\n  // Firefox want us to check `-x` and `-y` variations as well\n\n  var _getStyleComputedProp = getStyleComputedProperty(element),\n      overflow = _getStyleComputedProp.overflow,\n      overflowX = _getStyleComputedProp.overflowX,\n      overflowY = _getStyleComputedProp.overflowY;\n\n  if (/(auto|scroll|overlay)/.test(overflow + overflowY + overflowX)) {\n    return element;\n  }\n\n  return getScrollParent(getParentNode(element));\n}\n\nvar isIE11 = isBrowser && !!(window.MSInputMethodContext && document.documentMode);\nvar isIE10 = isBrowser && /MSIE 10/.test(navigator.userAgent);\n\n/**\n * Determines if the browser is Internet Explorer\n * @method\n * @memberof Popper.Utils\n * @param {Number} version to check\n * @returns {Boolean} isIE\n */\nfunction isIE(version) {\n  if (version === 11) {\n    return isIE11;\n  }\n  if (version === 10) {\n    return isIE10;\n  }\n  return isIE11 || isIE10;\n}\n\n/**\n * Returns the offset parent of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} offset parent\n */\nfunction getOffsetParent(element) {\n  if (!element) {\n    return document.documentElement;\n  }\n\n  var noOffsetParent = isIE(10) ? document.body : null;\n\n  // NOTE: 1 DOM access here\n  var offsetParent = element.offsetParent || null;\n  // Skip hidden elements which don't have an offsetParent\n  while (offsetParent === noOffsetParent && element.nextElementSibling) {\n    offsetParent = (element = element.nextElementSibling).offsetParent;\n  }\n\n  var nodeName = offsetParent && offsetParent.nodeName;\n\n  if (!nodeName || nodeName === 'BODY' || nodeName === 'HTML') {\n    return element ? element.ownerDocument.documentElement : document.documentElement;\n  }\n\n  // .offsetParent will return the closest TH, TD or TABLE in case\n  // no offsetParent is present, I hate this job...\n  if (['TH', 'TD', 'TABLE'].indexOf(offsetParent.nodeName) !== -1 && getStyleComputedProperty(offsetParent, 'position') === 'static') {\n    return getOffsetParent(offsetParent);\n  }\n\n  return offsetParent;\n}\n\nfunction isOffsetContainer(element) {\n  var nodeName = element.nodeName;\n\n  if (nodeName === 'BODY') {\n    return false;\n  }\n  return nodeName === 'HTML' || getOffsetParent(element.firstElementChild) === element;\n}\n\n/**\n * Finds the root node (document, shadowDOM root) of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} node\n * @returns {Element} root node\n */\nfunction getRoot(node) {\n  if (node.parentNode !== null) {\n    return getRoot(node.parentNode);\n  }\n\n  return node;\n}\n\n/**\n * Finds the offset parent common to the two provided nodes\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element1\n * @argument {Element} element2\n * @returns {Element} common offset parent\n */\nfunction findCommonOffsetParent(element1, element2) {\n  // This check is needed to avoid errors in case one of the elements isn't defined for any reason\n  if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {\n    return document.documentElement;\n  }\n\n  // Here we make sure to give as \"start\" the element that comes first in the DOM\n  var order = element1.compareDocumentPosition(element2) & Node.DOCUMENT_POSITION_FOLLOWING;\n  var start = order ? element1 : element2;\n  var end = order ? element2 : element1;\n\n  // Get common ancestor container\n  var range = document.createRange();\n  range.setStart(start, 0);\n  range.setEnd(end, 0);\n  var commonAncestorContainer = range.commonAncestorContainer;\n\n  // Both nodes are inside #document\n\n  if (element1 !== commonAncestorContainer && element2 !== commonAncestorContainer || start.contains(end)) {\n    if (isOffsetContainer(commonAncestorContainer)) {\n      return commonAncestorContainer;\n    }\n\n    return getOffsetParent(commonAncestorContainer);\n  }\n\n  // one of the nodes is inside shadowDOM, find which one\n  var element1root = getRoot(element1);\n  if (element1root.host) {\n    return findCommonOffsetParent(element1root.host, element2);\n  } else {\n    return findCommonOffsetParent(element1, getRoot(element2).host);\n  }\n}\n\n/**\n * Gets the scroll value of the given element in the given side (top and left)\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @argument {String} side `top` or `left`\n * @returns {number} amount of scrolled pixels\n */\nfunction getScroll(element) {\n  var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'top';\n\n  var upperSide = side === 'top' ? 'scrollTop' : 'scrollLeft';\n  var nodeName = element.nodeName;\n\n  if (nodeName === 'BODY' || nodeName === 'HTML') {\n    var html = element.ownerDocument.documentElement;\n    var scrollingElement = element.ownerDocument.scrollingElement || html;\n    return scrollingElement[upperSide];\n  }\n\n  return element[upperSide];\n}\n\n/*\n * Sum or subtract the element scroll values (left and top) from a given rect object\n * @method\n * @memberof Popper.Utils\n * @param {Object} rect - Rect object you want to change\n * @param {HTMLElement} element - The element from the function reads the scroll values\n * @param {Boolean} subtract - set to true if you want to subtract the scroll values\n * @return {Object} rect - The modifier rect object\n */\nfunction includeScroll(rect, element) {\n  var subtract = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  var scrollTop = getScroll(element, 'top');\n  var scrollLeft = getScroll(element, 'left');\n  var modifier = subtract ? -1 : 1;\n  rect.top += scrollTop * modifier;\n  rect.bottom += scrollTop * modifier;\n  rect.left += scrollLeft * modifier;\n  rect.right += scrollLeft * modifier;\n  return rect;\n}\n\n/*\n * Helper to detect borders of a given element\n * @method\n * @memberof Popper.Utils\n * @param {CSSStyleDeclaration} styles\n * Result of `getStyleComputedProperty` on the given element\n * @param {String} axis - `x` or `y`\n * @return {number} borders - The borders size of the given axis\n */\n\nfunction getBordersSize(styles, axis) {\n  var sideA = axis === 'x' ? 'Left' : 'Top';\n  var sideB = sideA === 'Left' ? 'Right' : 'Bottom';\n\n  return parseFloat(styles['border' + sideA + 'Width'], 10) + parseFloat(styles['border' + sideB + 'Width'], 10);\n}\n\nfunction getSize(axis, body, html, computedStyle) {\n  return Math.max(body['offset' + axis], body['scroll' + axis], html['client' + axis], html['offset' + axis], html['scroll' + axis], isIE(10) ? parseInt(html['offset' + axis]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Top' : 'Left')]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Bottom' : 'Right')]) : 0);\n}\n\nfunction getWindowSizes(document) {\n  var body = document.body;\n  var html = document.documentElement;\n  var computedStyle = isIE(10) && getComputedStyle(html);\n\n  return {\n    height: getSize('Height', body, html, computedStyle),\n    width: getSize('Width', body, html, computedStyle)\n  };\n}\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\n\n\n\n\nvar defineProperty = function (obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n};\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\n/**\n * Given element offsets, generate an output similar to getBoundingClientRect\n * @method\n * @memberof Popper.Utils\n * @argument {Object} offsets\n * @returns {Object} ClientRect like output\n */\nfunction getClientRect(offsets) {\n  return _extends({}, offsets, {\n    right: offsets.left + offsets.width,\n    bottom: offsets.top + offsets.height\n  });\n}\n\n/**\n * Get bounding client rect of given element\n * @method\n * @memberof Popper.Utils\n * @param {HTMLElement} element\n * @return {Object} client rect\n */\nfunction getBoundingClientRect(element) {\n  var rect = {};\n\n  // IE10 10 FIX: Please, don't ask, the element isn't\n  // considered in DOM in some circumstances...\n  // This isn't reproducible in IE10 compatibility mode of IE11\n  try {\n    if (isIE(10)) {\n      rect = element.getBoundingClientRect();\n      var scrollTop = getScroll(element, 'top');\n      var scrollLeft = getScroll(element, 'left');\n      rect.top += scrollTop;\n      rect.left += scrollLeft;\n      rect.bottom += scrollTop;\n      rect.right += scrollLeft;\n    } else {\n      rect = element.getBoundingClientRect();\n    }\n  } catch (e) {}\n\n  var result = {\n    left: rect.left,\n    top: rect.top,\n    width: rect.right - rect.left,\n    height: rect.bottom - rect.top\n  };\n\n  // subtract scrollbar size from sizes\n  var sizes = element.nodeName === 'HTML' ? getWindowSizes(element.ownerDocument) : {};\n  var width = sizes.width || element.clientWidth || result.right - result.left;\n  var height = sizes.height || element.clientHeight || result.bottom - result.top;\n\n  var horizScrollbar = element.offsetWidth - width;\n  var vertScrollbar = element.offsetHeight - height;\n\n  // if an hypothetical scrollbar is detected, we must be sure it's not a `border`\n  // we make this check conditional for performance reasons\n  if (horizScrollbar || vertScrollbar) {\n    var styles = getStyleComputedProperty(element);\n    horizScrollbar -= getBordersSize(styles, 'x');\n    vertScrollbar -= getBordersSize(styles, 'y');\n\n    result.width -= horizScrollbar;\n    result.height -= vertScrollbar;\n  }\n\n  return getClientRect(result);\n}\n\nfunction getOffsetRectRelativeToArbitraryNode(children, parent) {\n  var fixedPosition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  var isIE10 = isIE(10);\n  var isHTML = parent.nodeName === 'HTML';\n  var childrenRect = getBoundingClientRect(children);\n  var parentRect = getBoundingClientRect(parent);\n  var scrollParent = getScrollParent(children);\n\n  var styles = getStyleComputedProperty(parent);\n  var borderTopWidth = parseFloat(styles.borderTopWidth, 10);\n  var borderLeftWidth = parseFloat(styles.borderLeftWidth, 10);\n\n  // In cases where the parent is fixed, we must ignore negative scroll in offset calc\n  if (fixedPosition && isHTML) {\n    parentRect.top = Math.max(parentRect.top, 0);\n    parentRect.left = Math.max(parentRect.left, 0);\n  }\n  var offsets = getClientRect({\n    top: childrenRect.top - parentRect.top - borderTopWidth,\n    left: childrenRect.left - parentRect.left - borderLeftWidth,\n    width: childrenRect.width,\n    height: childrenRect.height\n  });\n  offsets.marginTop = 0;\n  offsets.marginLeft = 0;\n\n  // Subtract margins of documentElement in case it's being used as parent\n  // we do this only on HTML because it's the only element that behaves\n  // differently when margins are applied to it. The margins are included in\n  // the box of the documentElement, in the other cases not.\n  if (!isIE10 && isHTML) {\n    var marginTop = parseFloat(styles.marginTop, 10);\n    var marginLeft = parseFloat(styles.marginLeft, 10);\n\n    offsets.top -= borderTopWidth - marginTop;\n    offsets.bottom -= borderTopWidth - marginTop;\n    offsets.left -= borderLeftWidth - marginLeft;\n    offsets.right -= borderLeftWidth - marginLeft;\n\n    // Attach marginTop and marginLeft because in some circumstances we may need them\n    offsets.marginTop = marginTop;\n    offsets.marginLeft = marginLeft;\n  }\n\n  if (isIE10 && !fixedPosition ? parent.contains(scrollParent) : parent === scrollParent && scrollParent.nodeName !== 'BODY') {\n    offsets = includeScroll(offsets, parent);\n  }\n\n  return offsets;\n}\n\nfunction getViewportOffsetRectRelativeToArtbitraryNode(element) {\n  var excludeScroll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  var html = element.ownerDocument.documentElement;\n  var relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);\n  var width = Math.max(html.clientWidth, window.innerWidth || 0);\n  var height = Math.max(html.clientHeight, window.innerHeight || 0);\n\n  var scrollTop = !excludeScroll ? getScroll(html) : 0;\n  var scrollLeft = !excludeScroll ? getScroll(html, 'left') : 0;\n\n  var offset = {\n    top: scrollTop - relativeOffset.top + relativeOffset.marginTop,\n    left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,\n    width: width,\n    height: height\n  };\n\n  return getClientRect(offset);\n}\n\n/**\n * Check if the given element is fixed or is inside a fixed parent\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @argument {Element} customContainer\n * @returns {Boolean} answer to \"isFixed?\"\n */\nfunction isFixed(element) {\n  var nodeName = element.nodeName;\n  if (nodeName === 'BODY' || nodeName === 'HTML') {\n    return false;\n  }\n  if (getStyleComputedProperty(element, 'position') === 'fixed') {\n    return true;\n  }\n  return isFixed(getParentNode(element));\n}\n\n/**\n * Finds the first parent of an element that has a transformed property defined\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} first transformed parent or documentElement\n */\n\nfunction getFixedPositionOffsetParent(element) {\n  // This check is needed to avoid errors in case one of the elements isn't defined for any reason\n  if (!element || !element.parentElement || isIE()) {\n    return document.documentElement;\n  }\n  var el = element.parentElement;\n  while (el && getStyleComputedProperty(el, 'transform') === 'none') {\n    el = el.parentElement;\n  }\n  return el || document.documentElement;\n}\n\n/**\n * Computed the boundaries limits and return them\n * @method\n * @memberof Popper.Utils\n * @param {HTMLElement} popper\n * @param {HTMLElement} reference\n * @param {number} padding\n * @param {HTMLElement} boundariesElement - Element used to define the boundaries\n * @param {Boolean} fixedPosition - Is in fixed position mode\n * @returns {Object} Coordinates of the boundaries\n */\nfunction getBoundaries(popper, reference, padding, boundariesElement) {\n  var fixedPosition = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n  // NOTE: 1 DOM access here\n\n  var boundaries = { top: 0, left: 0 };\n  var offsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, reference);\n\n  // Handle viewport case\n  if (boundariesElement === 'viewport') {\n    boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent, fixedPosition);\n  } else {\n    // Handle other cases based on DOM element used as boundaries\n    var boundariesNode = void 0;\n    if (boundariesElement === 'scrollParent') {\n      boundariesNode = getScrollParent(getParentNode(reference));\n      if (boundariesNode.nodeName === 'BODY') {\n        boundariesNode = popper.ownerDocument.documentElement;\n      }\n    } else if (boundariesElement === 'window') {\n      boundariesNode = popper.ownerDocument.documentElement;\n    } else {\n      boundariesNode = boundariesElement;\n    }\n\n    var offsets = getOffsetRectRelativeToArbitraryNode(boundariesNode, offsetParent, fixedPosition);\n\n    // In case of HTML, we need a different computation\n    if (boundariesNode.nodeName === 'HTML' && !isFixed(offsetParent)) {\n      var _getWindowSizes = getWindowSizes(popper.ownerDocument),\n          height = _getWindowSizes.height,\n          width = _getWindowSizes.width;\n\n      boundaries.top += offsets.top - offsets.marginTop;\n      boundaries.bottom = height + offsets.top;\n      boundaries.left += offsets.left - offsets.marginLeft;\n      boundaries.right = width + offsets.left;\n    } else {\n      // for all the other DOM elements, this one is good\n      boundaries = offsets;\n    }\n  }\n\n  // Add paddings\n  padding = padding || 0;\n  var isPaddingNumber = typeof padding === 'number';\n  boundaries.left += isPaddingNumber ? padding : padding.left || 0;\n  boundaries.top += isPaddingNumber ? padding : padding.top || 0;\n  boundaries.right -= isPaddingNumber ? padding : padding.right || 0;\n  boundaries.bottom -= isPaddingNumber ? padding : padding.bottom || 0;\n\n  return boundaries;\n}\n\nfunction getArea(_ref) {\n  var width = _ref.width,\n      height = _ref.height;\n\n  return width * height;\n}\n\n/**\n * Utility used to transform the `auto` placement to the placement with more\n * available space.\n * @method\n * @memberof Popper.Utils\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction computeAutoPlacement(placement, refRect, popper, reference, boundariesElement) {\n  var padding = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n\n  if (placement.indexOf('auto') === -1) {\n    return placement;\n  }\n\n  var boundaries = getBoundaries(popper, reference, padding, boundariesElement);\n\n  var rects = {\n    top: {\n      width: boundaries.width,\n      height: refRect.top - boundaries.top\n    },\n    right: {\n      width: boundaries.right - refRect.right,\n      height: boundaries.height\n    },\n    bottom: {\n      width: boundaries.width,\n      height: boundaries.bottom - refRect.bottom\n    },\n    left: {\n      width: refRect.left - boundaries.left,\n      height: boundaries.height\n    }\n  };\n\n  var sortedAreas = Object.keys(rects).map(function (key) {\n    return _extends({\n      key: key\n    }, rects[key], {\n      area: getArea(rects[key])\n    });\n  }).sort(function (a, b) {\n    return b.area - a.area;\n  });\n\n  var filteredAreas = sortedAreas.filter(function (_ref2) {\n    var width = _ref2.width,\n        height = _ref2.height;\n    return width >= popper.clientWidth && height >= popper.clientHeight;\n  });\n\n  var computedPlacement = filteredAreas.length > 0 ? filteredAreas[0].key : sortedAreas[0].key;\n\n  var variation = placement.split('-')[1];\n\n  return computedPlacement + (variation ? '-' + variation : '');\n}\n\n/**\n * Get offsets to the reference element\n * @method\n * @memberof Popper.Utils\n * @param {Object} state\n * @param {Element} popper - the popper element\n * @param {Element} reference - the reference element (the popper will be relative to this)\n * @param {Element} fixedPosition - is in fixed position mode\n * @returns {Object} An object containing the offsets which will be applied to the popper\n */\nfunction getReferenceOffsets(state, popper, reference) {\n  var fixedPosition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n  var commonOffsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, reference);\n  return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent, fixedPosition);\n}\n\n/**\n * Get the outer sizes of the given element (offset size + margins)\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Object} object containing width and height properties\n */\nfunction getOuterSizes(element) {\n  var window = element.ownerDocument.defaultView;\n  var styles = window.getComputedStyle(element);\n  var x = parseFloat(styles.marginTop || 0) + parseFloat(styles.marginBottom || 0);\n  var y = parseFloat(styles.marginLeft || 0) + parseFloat(styles.marginRight || 0);\n  var result = {\n    width: element.offsetWidth + y,\n    height: element.offsetHeight + x\n  };\n  return result;\n}\n\n/**\n * Get the opposite placement of the given one\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement\n * @returns {String} flipped placement\n */\nfunction getOppositePlacement(placement) {\n  var hash = { left: 'right', right: 'left', bottom: 'top', top: 'bottom' };\n  return placement.replace(/left|right|bottom|top/g, function (matched) {\n    return hash[matched];\n  });\n}\n\n/**\n * Get offsets to the popper\n * @method\n * @memberof Popper.Utils\n * @param {Object} position - CSS position the Popper will get applied\n * @param {HTMLElement} popper - the popper element\n * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)\n * @param {String} placement - one of the valid placement options\n * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper\n */\nfunction getPopperOffsets(popper, referenceOffsets, placement) {\n  placement = placement.split('-')[0];\n\n  // Get popper node sizes\n  var popperRect = getOuterSizes(popper);\n\n  // Add position, width and height to our offsets object\n  var popperOffsets = {\n    width: popperRect.width,\n    height: popperRect.height\n  };\n\n  // depending by the popper placement we have to compute its offsets slightly differently\n  var isHoriz = ['right', 'left'].indexOf(placement) !== -1;\n  var mainSide = isHoriz ? 'top' : 'left';\n  var secondarySide = isHoriz ? 'left' : 'top';\n  var measurement = isHoriz ? 'height' : 'width';\n  var secondaryMeasurement = !isHoriz ? 'height' : 'width';\n\n  popperOffsets[mainSide] = referenceOffsets[mainSide] + referenceOffsets[measurement] / 2 - popperRect[measurement] / 2;\n  if (placement === secondarySide) {\n    popperOffsets[secondarySide] = referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];\n  } else {\n    popperOffsets[secondarySide] = referenceOffsets[getOppositePlacement(secondarySide)];\n  }\n\n  return popperOffsets;\n}\n\n/**\n * Mimics the `find` method of Array\n * @method\n * @memberof Popper.Utils\n * @argument {Array} arr\n * @argument prop\n * @argument value\n * @returns index or -1\n */\nfunction find(arr, check) {\n  // use native find if supported\n  if (Array.prototype.find) {\n    return arr.find(check);\n  }\n\n  // use `filter` to obtain the same behavior of `find`\n  return arr.filter(check)[0];\n}\n\n/**\n * Return the index of the matching object\n * @method\n * @memberof Popper.Utils\n * @argument {Array} arr\n * @argument prop\n * @argument value\n * @returns index or -1\n */\nfunction findIndex(arr, prop, value) {\n  // use native findIndex if supported\n  if (Array.prototype.findIndex) {\n    return arr.findIndex(function (cur) {\n      return cur[prop] === value;\n    });\n  }\n\n  // use `find` + `indexOf` if `findIndex` isn't supported\n  var match = find(arr, function (obj) {\n    return obj[prop] === value;\n  });\n  return arr.indexOf(match);\n}\n\n/**\n * Loop trough the list of modifiers and run them in order,\n * each of them will then edit the data object.\n * @method\n * @memberof Popper.Utils\n * @param {dataObject} data\n * @param {Array} modifiers\n * @param {String} ends - Optional modifier name used as stopper\n * @returns {dataObject}\n */\nfunction runModifiers(modifiers, data, ends) {\n  var modifiersToRun = ends === undefined ? modifiers : modifiers.slice(0, findIndex(modifiers, 'name', ends));\n\n  modifiersToRun.forEach(function (modifier) {\n    if (modifier['function']) {\n      // eslint-disable-line dot-notation\n      console.warn('`modifier.function` is deprecated, use `modifier.fn`!');\n    }\n    var fn = modifier['function'] || modifier.fn; // eslint-disable-line dot-notation\n    if (modifier.enabled && isFunction(fn)) {\n      // Add properties to offsets to make them a complete clientRect object\n      // we do this before each modifier to make sure the previous one doesn't\n      // mess with these values\n      data.offsets.popper = getClientRect(data.offsets.popper);\n      data.offsets.reference = getClientRect(data.offsets.reference);\n\n      data = fn(data, modifier);\n    }\n  });\n\n  return data;\n}\n\n/**\n * Updates the position of the popper, computing the new offsets and applying\n * the new style.<br />\n * Prefer `scheduleUpdate` over `update` because of performance reasons.\n * @method\n * @memberof Popper\n */\nfunction update() {\n  // if popper is destroyed, don't perform any further update\n  if (this.state.isDestroyed) {\n    return;\n  }\n\n  var data = {\n    instance: this,\n    styles: {},\n    arrowStyles: {},\n    attributes: {},\n    flipped: false,\n    offsets: {}\n  };\n\n  // compute reference element offsets\n  data.offsets.reference = getReferenceOffsets(this.state, this.popper, this.reference, this.options.positionFixed);\n\n  // compute auto placement, store placement inside the data object,\n  // modifiers will be able to edit `placement` if needed\n  // and refer to originalPlacement to know the original value\n  data.placement = computeAutoPlacement(this.options.placement, data.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding);\n\n  // store the computed placement inside `originalPlacement`\n  data.originalPlacement = data.placement;\n\n  data.positionFixed = this.options.positionFixed;\n\n  // compute the popper offsets\n  data.offsets.popper = getPopperOffsets(this.popper, data.offsets.reference, data.placement);\n\n  data.offsets.popper.position = this.options.positionFixed ? 'fixed' : 'absolute';\n\n  // run the modifiers\n  data = runModifiers(this.modifiers, data);\n\n  // the first `update` will call `onCreate` callback\n  // the other ones will call `onUpdate` callback\n  if (!this.state.isCreated) {\n    this.state.isCreated = true;\n    this.options.onCreate(data);\n  } else {\n    this.options.onUpdate(data);\n  }\n}\n\n/**\n * Helper used to know if the given modifier is enabled.\n * @method\n * @memberof Popper.Utils\n * @returns {Boolean}\n */\nfunction isModifierEnabled(modifiers, modifierName) {\n  return modifiers.some(function (_ref) {\n    var name = _ref.name,\n        enabled = _ref.enabled;\n    return enabled && name === modifierName;\n  });\n}\n\n/**\n * Get the prefixed supported property name\n * @method\n * @memberof Popper.Utils\n * @argument {String} property (camelCase)\n * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)\n */\nfunction getSupportedPropertyName(property) {\n  var prefixes = [false, 'ms', 'Webkit', 'Moz', 'O'];\n  var upperProp = property.charAt(0).toUpperCase() + property.slice(1);\n\n  for (var i = 0; i < prefixes.length; i++) {\n    var prefix = prefixes[i];\n    var toCheck = prefix ? '' + prefix + upperProp : property;\n    if (typeof document.body.style[toCheck] !== 'undefined') {\n      return toCheck;\n    }\n  }\n  return null;\n}\n\n/**\n * Destroys the popper.\n * @method\n * @memberof Popper\n */\nfunction destroy() {\n  this.state.isDestroyed = true;\n\n  // touch DOM only if `applyStyle` modifier is enabled\n  if (isModifierEnabled(this.modifiers, 'applyStyle')) {\n    this.popper.removeAttribute('x-placement');\n    this.popper.style.position = '';\n    this.popper.style.top = '';\n    this.popper.style.left = '';\n    this.popper.style.right = '';\n    this.popper.style.bottom = '';\n    this.popper.style.willChange = '';\n    this.popper.style[getSupportedPropertyName('transform')] = '';\n  }\n\n  this.disableEventListeners();\n\n  // remove the popper if user explicity asked for the deletion on destroy\n  // do not use `remove` because IE11 doesn't support it\n  if (this.options.removeOnDestroy) {\n    this.popper.parentNode.removeChild(this.popper);\n  }\n  return this;\n}\n\n/**\n * Get the window associated with the element\n * @argument {Element} element\n * @returns {Window}\n */\nfunction getWindow(element) {\n  var ownerDocument = element.ownerDocument;\n  return ownerDocument ? ownerDocument.defaultView : window;\n}\n\nfunction attachToScrollParents(scrollParent, event, callback, scrollParents) {\n  var isBody = scrollParent.nodeName === 'BODY';\n  var target = isBody ? scrollParent.ownerDocument.defaultView : scrollParent;\n  target.addEventListener(event, callback, { passive: true });\n\n  if (!isBody) {\n    attachToScrollParents(getScrollParent(target.parentNode), event, callback, scrollParents);\n  }\n  scrollParents.push(target);\n}\n\n/**\n * Setup needed event listeners used to update the popper position\n * @method\n * @memberof Popper.Utils\n * @private\n */\nfunction setupEventListeners(reference, options, state, updateBound) {\n  // Resize event listener on window\n  state.updateBound = updateBound;\n  getWindow(reference).addEventListener('resize', state.updateBound, { passive: true });\n\n  // Scroll event listener on scroll parents\n  var scrollElement = getScrollParent(reference);\n  attachToScrollParents(scrollElement, 'scroll', state.updateBound, state.scrollParents);\n  state.scrollElement = scrollElement;\n  state.eventsEnabled = true;\n\n  return state;\n}\n\n/**\n * It will add resize/scroll events and start recalculating\n * position of the popper element when they are triggered.\n * @method\n * @memberof Popper\n */\nfunction enableEventListeners() {\n  if (!this.state.eventsEnabled) {\n    this.state = setupEventListeners(this.reference, this.options, this.state, this.scheduleUpdate);\n  }\n}\n\n/**\n * Remove event listeners used to update the popper position\n * @method\n * @memberof Popper.Utils\n * @private\n */\nfunction removeEventListeners(reference, state) {\n  // Remove resize event listener on window\n  getWindow(reference).removeEventListener('resize', state.updateBound);\n\n  // Remove scroll event listener on scroll parents\n  state.scrollParents.forEach(function (target) {\n    target.removeEventListener('scroll', state.updateBound);\n  });\n\n  // Reset state\n  state.updateBound = null;\n  state.scrollParents = [];\n  state.scrollElement = null;\n  state.eventsEnabled = false;\n  return state;\n}\n\n/**\n * It will remove resize/scroll events and won't recalculate popper position\n * when they are triggered. It also won't trigger `onUpdate` callback anymore,\n * unless you call `update` method manually.\n * @method\n * @memberof Popper\n */\nfunction disableEventListeners() {\n  if (this.state.eventsEnabled) {\n    cancelAnimationFrame(this.scheduleUpdate);\n    this.state = removeEventListeners(this.reference, this.state);\n  }\n}\n\n/**\n * Tells if a given input is a number\n * @method\n * @memberof Popper.Utils\n * @param {*} input to check\n * @return {Boolean}\n */\nfunction isNumeric(n) {\n  return n !== '' && !isNaN(parseFloat(n)) && isFinite(n);\n}\n\n/**\n * Set the style to the given popper\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element - Element to apply the style to\n * @argument {Object} styles\n * Object with a list of properties and values which will be applied to the element\n */\nfunction setStyles(element, styles) {\n  Object.keys(styles).forEach(function (prop) {\n    var unit = '';\n    // add unit if the value is numeric and is one of the following\n    if (['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !== -1 && isNumeric(styles[prop])) {\n      unit = 'px';\n    }\n    element.style[prop] = styles[prop] + unit;\n  });\n}\n\n/**\n * Set the attributes to the given popper\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element - Element to apply the attributes to\n * @argument {Object} styles\n * Object with a list of properties and values which will be applied to the element\n */\nfunction setAttributes(element, attributes) {\n  Object.keys(attributes).forEach(function (prop) {\n    var value = attributes[prop];\n    if (value !== false) {\n      element.setAttribute(prop, attributes[prop]);\n    } else {\n      element.removeAttribute(prop);\n    }\n  });\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} data.styles - List of style properties - values to apply to popper element\n * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The same data object\n */\nfunction applyStyle(data) {\n  // any property present in `data.styles` will be applied to the popper,\n  // in this way we can make the 3rd party modifiers add custom styles to it\n  // Be aware, modifiers could override the properties defined in the previous\n  // lines of this modifier!\n  setStyles(data.instance.popper, data.styles);\n\n  // any property present in `data.attributes` will be applied to the popper,\n  // they will be set as HTML attributes of the element\n  setAttributes(data.instance.popper, data.attributes);\n\n  // if arrowElement is defined and arrowStyles has some properties\n  if (data.arrowElement && Object.keys(data.arrowStyles).length) {\n    setStyles(data.arrowElement, data.arrowStyles);\n  }\n\n  return data;\n}\n\n/**\n * Set the x-placement attribute before everything else because it could be used\n * to add margins to the popper margins needs to be calculated to get the\n * correct popper offsets.\n * @method\n * @memberof Popper.modifiers\n * @param {HTMLElement} reference - The reference element used to position the popper\n * @param {HTMLElement} popper - The HTML element used as popper\n * @param {Object} options - Popper.js options\n */\nfunction applyStyleOnLoad(reference, popper, options, modifierOptions, state) {\n  // compute reference element offsets\n  var referenceOffsets = getReferenceOffsets(state, popper, reference, options.positionFixed);\n\n  // compute auto placement, store placement inside the data object,\n  // modifiers will be able to edit `placement` if needed\n  // and refer to originalPlacement to know the original value\n  var placement = computeAutoPlacement(options.placement, referenceOffsets, popper, reference, options.modifiers.flip.boundariesElement, options.modifiers.flip.padding);\n\n  popper.setAttribute('x-placement', placement);\n\n  // Apply `position` to popper before anything else because\n  // without the position applied we can't guarantee correct computations\n  setStyles(popper, { position: options.positionFixed ? 'fixed' : 'absolute' });\n\n  return options;\n}\n\n/**\n * @function\n * @memberof Popper.Utils\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Boolean} shouldRound - If the offsets should be rounded at all\n * @returns {Object} The popper's position offsets rounded\n *\n * The tale of pixel-perfect positioning. It's still not 100% perfect, but as\n * good as it can be within reason.\n * Discussion here: https://github.com/FezVrasta/popper.js/pull/715\n *\n * Low DPI screens cause a popper to be blurry if not using full pixels (Safari\n * as well on High DPI screens).\n *\n * Firefox prefers no rounding for positioning and does not have blurriness on\n * high DPI screens.\n *\n * Only horizontal placement and left/right values need to be considered.\n */\nfunction getRoundedOffsets(data, shouldRound) {\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n\n  var isVertical = ['left', 'right'].indexOf(data.placement) !== -1;\n  var isVariation = data.placement.indexOf('-') !== -1;\n  var sameWidthOddness = reference.width % 2 === popper.width % 2;\n  var bothOddWidth = reference.width % 2 === 1 && popper.width % 2 === 1;\n  var noRound = function noRound(v) {\n    return v;\n  };\n\n  var horizontalToInteger = !shouldRound ? noRound : isVertical || isVariation || sameWidthOddness ? Math.round : Math.floor;\n  var verticalToInteger = !shouldRound ? noRound : Math.round;\n\n  return {\n    left: horizontalToInteger(bothOddWidth && !isVariation && shouldRound ? popper.left - 1 : popper.left),\n    top: verticalToInteger(popper.top),\n    bottom: verticalToInteger(popper.bottom),\n    right: horizontalToInteger(popper.right)\n  };\n}\n\nvar isFirefox = isBrowser && /Firefox/i.test(navigator.userAgent);\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction computeStyle(data, options) {\n  var x = options.x,\n      y = options.y;\n  var popper = data.offsets.popper;\n\n  // Remove this legacy support in Popper.js v2\n\n  var legacyGpuAccelerationOption = find(data.instance.modifiers, function (modifier) {\n    return modifier.name === 'applyStyle';\n  }).gpuAcceleration;\n  if (legacyGpuAccelerationOption !== undefined) {\n    console.warn('WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!');\n  }\n  var gpuAcceleration = legacyGpuAccelerationOption !== undefined ? legacyGpuAccelerationOption : options.gpuAcceleration;\n\n  var offsetParent = getOffsetParent(data.instance.popper);\n  var offsetParentRect = getBoundingClientRect(offsetParent);\n\n  // Styles\n  var styles = {\n    position: popper.position\n  };\n\n  var offsets = getRoundedOffsets(data, window.devicePixelRatio < 2 || !isFirefox);\n\n  var sideA = x === 'bottom' ? 'top' : 'bottom';\n  var sideB = y === 'right' ? 'left' : 'right';\n\n  // if gpuAcceleration is set to `true` and transform is supported,\n  //  we use `translate3d` to apply the position to the popper we\n  // automatically use the supported prefixed version if needed\n  var prefixedProperty = getSupportedPropertyName('transform');\n\n  // now, let's make a step back and look at this code closely (wtf?)\n  // If the content of the popper grows once it's been positioned, it\n  // may happen that the popper gets misplaced because of the new content\n  // overflowing its reference element\n  // To avoid this problem, we provide two options (x and y), which allow\n  // the consumer to define the offset origin.\n  // If we position a popper on top of a reference element, we can set\n  // `x` to `top` to make the popper grow towards its top instead of\n  // its bottom.\n  var left = void 0,\n      top = void 0;\n  if (sideA === 'bottom') {\n    // when offsetParent is <html> the positioning is relative to the bottom of the screen (excluding the scrollbar)\n    // and not the bottom of the html element\n    if (offsetParent.nodeName === 'HTML') {\n      top = -offsetParent.clientHeight + offsets.bottom;\n    } else {\n      top = -offsetParentRect.height + offsets.bottom;\n    }\n  } else {\n    top = offsets.top;\n  }\n  if (sideB === 'right') {\n    if (offsetParent.nodeName === 'HTML') {\n      left = -offsetParent.clientWidth + offsets.right;\n    } else {\n      left = -offsetParentRect.width + offsets.right;\n    }\n  } else {\n    left = offsets.left;\n  }\n  if (gpuAcceleration && prefixedProperty) {\n    styles[prefixedProperty] = 'translate3d(' + left + 'px, ' + top + 'px, 0)';\n    styles[sideA] = 0;\n    styles[sideB] = 0;\n    styles.willChange = 'transform';\n  } else {\n    // othwerise, we use the standard `top`, `left`, `bottom` and `right` properties\n    var invertTop = sideA === 'bottom' ? -1 : 1;\n    var invertLeft = sideB === 'right' ? -1 : 1;\n    styles[sideA] = top * invertTop;\n    styles[sideB] = left * invertLeft;\n    styles.willChange = sideA + ', ' + sideB;\n  }\n\n  // Attributes\n  var attributes = {\n    'x-placement': data.placement\n  };\n\n  // Update `data` attributes, styles and arrowStyles\n  data.attributes = _extends({}, attributes, data.attributes);\n  data.styles = _extends({}, styles, data.styles);\n  data.arrowStyles = _extends({}, data.offsets.arrow, data.arrowStyles);\n\n  return data;\n}\n\n/**\n * Helper used to know if the given modifier depends from another one.<br />\n * It checks if the needed modifier is listed and enabled.\n * @method\n * @memberof Popper.Utils\n * @param {Array} modifiers - list of modifiers\n * @param {String} requestingName - name of requesting modifier\n * @param {String} requestedName - name of requested modifier\n * @returns {Boolean}\n */\nfunction isModifierRequired(modifiers, requestingName, requestedName) {\n  var requesting = find(modifiers, function (_ref) {\n    var name = _ref.name;\n    return name === requestingName;\n  });\n\n  var isRequired = !!requesting && modifiers.some(function (modifier) {\n    return modifier.name === requestedName && modifier.enabled && modifier.order < requesting.order;\n  });\n\n  if (!isRequired) {\n    var _requesting = '`' + requestingName + '`';\n    var requested = '`' + requestedName + '`';\n    console.warn(requested + ' modifier is required by ' + _requesting + ' modifier in order to work, be sure to include it before ' + _requesting + '!');\n  }\n  return isRequired;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction arrow(data, options) {\n  var _data$offsets$arrow;\n\n  // arrow depends on keepTogether in order to work\n  if (!isModifierRequired(data.instance.modifiers, 'arrow', 'keepTogether')) {\n    return data;\n  }\n\n  var arrowElement = options.element;\n\n  // if arrowElement is a string, suppose it's a CSS selector\n  if (typeof arrowElement === 'string') {\n    arrowElement = data.instance.popper.querySelector(arrowElement);\n\n    // if arrowElement is not found, don't run the modifier\n    if (!arrowElement) {\n      return data;\n    }\n  } else {\n    // if the arrowElement isn't a query selector we must check that the\n    // provided DOM node is child of its popper node\n    if (!data.instance.popper.contains(arrowElement)) {\n      console.warn('WARNING: `arrow.element` must be child of its popper element!');\n      return data;\n    }\n  }\n\n  var placement = data.placement.split('-')[0];\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var isVertical = ['left', 'right'].indexOf(placement) !== -1;\n\n  var len = isVertical ? 'height' : 'width';\n  var sideCapitalized = isVertical ? 'Top' : 'Left';\n  var side = sideCapitalized.toLowerCase();\n  var altSide = isVertical ? 'left' : 'top';\n  var opSide = isVertical ? 'bottom' : 'right';\n  var arrowElementSize = getOuterSizes(arrowElement)[len];\n\n  //\n  // extends keepTogether behavior making sure the popper and its\n  // reference have enough pixels in conjunction\n  //\n\n  // top/left side\n  if (reference[opSide] - arrowElementSize < popper[side]) {\n    data.offsets.popper[side] -= popper[side] - (reference[opSide] - arrowElementSize);\n  }\n  // bottom/right side\n  if (reference[side] + arrowElementSize > popper[opSide]) {\n    data.offsets.popper[side] += reference[side] + arrowElementSize - popper[opSide];\n  }\n  data.offsets.popper = getClientRect(data.offsets.popper);\n\n  // compute center of the popper\n  var center = reference[side] + reference[len] / 2 - arrowElementSize / 2;\n\n  // Compute the sideValue using the updated popper offsets\n  // take popper margin in account because we don't have this info available\n  var css = getStyleComputedProperty(data.instance.popper);\n  var popperMarginSide = parseFloat(css['margin' + sideCapitalized], 10);\n  var popperBorderSide = parseFloat(css['border' + sideCapitalized + 'Width'], 10);\n  var sideValue = center - data.offsets.popper[side] - popperMarginSide - popperBorderSide;\n\n  // prevent arrowElement from being placed not contiguously to its popper\n  sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0);\n\n  data.arrowElement = arrowElement;\n  data.offsets.arrow = (_data$offsets$arrow = {}, defineProperty(_data$offsets$arrow, side, Math.round(sideValue)), defineProperty(_data$offsets$arrow, altSide, ''), _data$offsets$arrow);\n\n  return data;\n}\n\n/**\n * Get the opposite placement variation of the given one\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement variation\n * @returns {String} flipped placement variation\n */\nfunction getOppositeVariation(variation) {\n  if (variation === 'end') {\n    return 'start';\n  } else if (variation === 'start') {\n    return 'end';\n  }\n  return variation;\n}\n\n/**\n * List of accepted placements to use as values of the `placement` option.<br />\n * Valid placements are:\n * - `auto`\n * - `top`\n * - `right`\n * - `bottom`\n * - `left`\n *\n * Each placement can have a variation from this list:\n * - `-start`\n * - `-end`\n *\n * Variations are interpreted easily if you think of them as the left to right\n * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`\n * is right.<br />\n * Vertically (`left` and `right`), `start` is top and `end` is bottom.\n *\n * Some valid examples are:\n * - `top-end` (on top of reference, right aligned)\n * - `right-start` (on right of reference, top aligned)\n * - `bottom` (on bottom, centered)\n * - `auto-end` (on the side with more space available, alignment depends by placement)\n *\n * @static\n * @type {Array}\n * @enum {String}\n * @readonly\n * @method placements\n * @memberof Popper\n */\nvar placements = ['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start'];\n\n// Get rid of `auto` `auto-start` and `auto-end`\nvar validPlacements = placements.slice(3);\n\n/**\n * Given an initial placement, returns all the subsequent placements\n * clockwise (or counter-clockwise).\n *\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement - A valid placement (it accepts variations)\n * @argument {Boolean} counter - Set to true to walk the placements counterclockwise\n * @returns {Array} placements including their variations\n */\nfunction clockwise(placement) {\n  var counter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  var index = validPlacements.indexOf(placement);\n  var arr = validPlacements.slice(index + 1).concat(validPlacements.slice(0, index));\n  return counter ? arr.reverse() : arr;\n}\n\nvar BEHAVIORS = {\n  FLIP: 'flip',\n  CLOCKWISE: 'clockwise',\n  COUNTERCLOCKWISE: 'counterclockwise'\n};\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction flip(data, options) {\n  // if `inner` modifier is enabled, we can't use the `flip` modifier\n  if (isModifierEnabled(data.instance.modifiers, 'inner')) {\n    return data;\n  }\n\n  if (data.flipped && data.placement === data.originalPlacement) {\n    // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides\n    return data;\n  }\n\n  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, options.boundariesElement, data.positionFixed);\n\n  var placement = data.placement.split('-')[0];\n  var placementOpposite = getOppositePlacement(placement);\n  var variation = data.placement.split('-')[1] || '';\n\n  var flipOrder = [];\n\n  switch (options.behavior) {\n    case BEHAVIORS.FLIP:\n      flipOrder = [placement, placementOpposite];\n      break;\n    case BEHAVIORS.CLOCKWISE:\n      flipOrder = clockwise(placement);\n      break;\n    case BEHAVIORS.COUNTERCLOCKWISE:\n      flipOrder = clockwise(placement, true);\n      break;\n    default:\n      flipOrder = options.behavior;\n  }\n\n  flipOrder.forEach(function (step, index) {\n    if (placement !== step || flipOrder.length === index + 1) {\n      return data;\n    }\n\n    placement = data.placement.split('-')[0];\n    placementOpposite = getOppositePlacement(placement);\n\n    var popperOffsets = data.offsets.popper;\n    var refOffsets = data.offsets.reference;\n\n    // using floor because the reference offsets may contain decimals we are not going to consider here\n    var floor = Math.floor;\n    var overlapsRef = placement === 'left' && floor(popperOffsets.right) > floor(refOffsets.left) || placement === 'right' && floor(popperOffsets.left) < floor(refOffsets.right) || placement === 'top' && floor(popperOffsets.bottom) > floor(refOffsets.top) || placement === 'bottom' && floor(popperOffsets.top) < floor(refOffsets.bottom);\n\n    var overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);\n    var overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);\n    var overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);\n    var overflowsBottom = floor(popperOffsets.bottom) > floor(boundaries.bottom);\n\n    var overflowsBoundaries = placement === 'left' && overflowsLeft || placement === 'right' && overflowsRight || placement === 'top' && overflowsTop || placement === 'bottom' && overflowsBottom;\n\n    // flip the variation if required\n    var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;\n    var flippedVariation = !!options.flipVariations && (isVertical && variation === 'start' && overflowsLeft || isVertical && variation === 'end' && overflowsRight || !isVertical && variation === 'start' && overflowsTop || !isVertical && variation === 'end' && overflowsBottom);\n\n    if (overlapsRef || overflowsBoundaries || flippedVariation) {\n      // this boolean to detect any flip loop\n      data.flipped = true;\n\n      if (overlapsRef || overflowsBoundaries) {\n        placement = flipOrder[index + 1];\n      }\n\n      if (flippedVariation) {\n        variation = getOppositeVariation(variation);\n      }\n\n      data.placement = placement + (variation ? '-' + variation : '');\n\n      // this object contains `position`, we want to preserve it along with\n      // any additional property we may add in the future\n      data.offsets.popper = _extends({}, data.offsets.popper, getPopperOffsets(data.instance.popper, data.offsets.reference, data.placement));\n\n      data = runModifiers(data.instance.modifiers, data, 'flip');\n    }\n  });\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction keepTogether(data) {\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var placement = data.placement.split('-')[0];\n  var floor = Math.floor;\n  var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;\n  var side = isVertical ? 'right' : 'bottom';\n  var opSide = isVertical ? 'left' : 'top';\n  var measurement = isVertical ? 'width' : 'height';\n\n  if (popper[side] < floor(reference[opSide])) {\n    data.offsets.popper[opSide] = floor(reference[opSide]) - popper[measurement];\n  }\n  if (popper[opSide] > floor(reference[side])) {\n    data.offsets.popper[opSide] = floor(reference[side]);\n  }\n\n  return data;\n}\n\n/**\n * Converts a string containing value + unit into a px value number\n * @function\n * @memberof {modifiers~offset}\n * @private\n * @argument {String} str - Value + unit string\n * @argument {String} measurement - `height` or `width`\n * @argument {Object} popperOffsets\n * @argument {Object} referenceOffsets\n * @returns {Number|String}\n * Value in pixels, or original string if no values were extracted\n */\nfunction toValue(str, measurement, popperOffsets, referenceOffsets) {\n  // separate value from unit\n  var split = str.match(/((?:\\-|\\+)?\\d*\\.?\\d*)(.*)/);\n  var value = +split[1];\n  var unit = split[2];\n\n  // If it's not a number it's an operator, I guess\n  if (!value) {\n    return str;\n  }\n\n  if (unit.indexOf('%') === 0) {\n    var element = void 0;\n    switch (unit) {\n      case '%p':\n        element = popperOffsets;\n        break;\n      case '%':\n      case '%r':\n      default:\n        element = referenceOffsets;\n    }\n\n    var rect = getClientRect(element);\n    return rect[measurement] / 100 * value;\n  } else if (unit === 'vh' || unit === 'vw') {\n    // if is a vh or vw, we calculate the size based on the viewport\n    var size = void 0;\n    if (unit === 'vh') {\n      size = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);\n    } else {\n      size = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);\n    }\n    return size / 100 * value;\n  } else {\n    // if is an explicit pixel unit, we get rid of the unit and keep the value\n    // if is an implicit unit, it's px, and we return just the value\n    return value;\n  }\n}\n\n/**\n * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.\n * @function\n * @memberof {modifiers~offset}\n * @private\n * @argument {String} offset\n * @argument {Object} popperOffsets\n * @argument {Object} referenceOffsets\n * @argument {String} basePlacement\n * @returns {Array} a two cells array with x and y offsets in numbers\n */\nfunction parseOffset(offset, popperOffsets, referenceOffsets, basePlacement) {\n  var offsets = [0, 0];\n\n  // Use height if placement is left or right and index is 0 otherwise use width\n  // in this way the first offset will use an axis and the second one\n  // will use the other one\n  var useHeight = ['right', 'left'].indexOf(basePlacement) !== -1;\n\n  // Split the offset string to obtain a list of values and operands\n  // The regex addresses values with the plus or minus sign in front (+10, -20, etc)\n  var fragments = offset.split(/(\\+|\\-)/).map(function (frag) {\n    return frag.trim();\n  });\n\n  // Detect if the offset string contains a pair of values or a single one\n  // they could be separated by comma or space\n  var divider = fragments.indexOf(find(fragments, function (frag) {\n    return frag.search(/,|\\s/) !== -1;\n  }));\n\n  if (fragments[divider] && fragments[divider].indexOf(',') === -1) {\n    console.warn('Offsets separated by white space(s) are deprecated, use a comma (,) instead.');\n  }\n\n  // If divider is found, we divide the list of values and operands to divide\n  // them by ofset X and Y.\n  var splitRegex = /\\s*,\\s*|\\s+/;\n  var ops = divider !== -1 ? [fragments.slice(0, divider).concat([fragments[divider].split(splitRegex)[0]]), [fragments[divider].split(splitRegex)[1]].concat(fragments.slice(divider + 1))] : [fragments];\n\n  // Convert the values with units to absolute pixels to allow our computations\n  ops = ops.map(function (op, index) {\n    // Most of the units rely on the orientation of the popper\n    var measurement = (index === 1 ? !useHeight : useHeight) ? 'height' : 'width';\n    var mergeWithPrevious = false;\n    return op\n    // This aggregates any `+` or `-` sign that aren't considered operators\n    // e.g.: 10 + +5 => [10, +, +5]\n    .reduce(function (a, b) {\n      if (a[a.length - 1] === '' && ['+', '-'].indexOf(b) !== -1) {\n        a[a.length - 1] = b;\n        mergeWithPrevious = true;\n        return a;\n      } else if (mergeWithPrevious) {\n        a[a.length - 1] += b;\n        mergeWithPrevious = false;\n        return a;\n      } else {\n        return a.concat(b);\n      }\n    }, [])\n    // Here we convert the string values into number values (in px)\n    .map(function (str) {\n      return toValue(str, measurement, popperOffsets, referenceOffsets);\n    });\n  });\n\n  // Loop trough the offsets arrays and execute the operations\n  ops.forEach(function (op, index) {\n    op.forEach(function (frag, index2) {\n      if (isNumeric(frag)) {\n        offsets[index] += frag * (op[index2 - 1] === '-' ? -1 : 1);\n      }\n    });\n  });\n  return offsets;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @argument {Number|String} options.offset=0\n * The offset value as described in the modifier description\n * @returns {Object} The data object, properly modified\n */\nfunction offset(data, _ref) {\n  var offset = _ref.offset;\n  var placement = data.placement,\n      _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var basePlacement = placement.split('-')[0];\n\n  var offsets = void 0;\n  if (isNumeric(+offset)) {\n    offsets = [+offset, 0];\n  } else {\n    offsets = parseOffset(offset, popper, reference, basePlacement);\n  }\n\n  if (basePlacement === 'left') {\n    popper.top += offsets[0];\n    popper.left -= offsets[1];\n  } else if (basePlacement === 'right') {\n    popper.top += offsets[0];\n    popper.left += offsets[1];\n  } else if (basePlacement === 'top') {\n    popper.left += offsets[0];\n    popper.top -= offsets[1];\n  } else if (basePlacement === 'bottom') {\n    popper.left += offsets[0];\n    popper.top += offsets[1];\n  }\n\n  data.popper = popper;\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction preventOverflow(data, options) {\n  var boundariesElement = options.boundariesElement || getOffsetParent(data.instance.popper);\n\n  // If offsetParent is the reference element, we really want to\n  // go one step up and use the next offsetParent as reference to\n  // avoid to make this modifier completely useless and look like broken\n  if (data.instance.reference === boundariesElement) {\n    boundariesElement = getOffsetParent(boundariesElement);\n  }\n\n  // NOTE: DOM access here\n  // resets the popper's position so that the document size can be calculated excluding\n  // the size of the popper element itself\n  var transformProp = getSupportedPropertyName('transform');\n  var popperStyles = data.instance.popper.style; // assignment to help minification\n  var top = popperStyles.top,\n      left = popperStyles.left,\n      transform = popperStyles[transformProp];\n\n  popperStyles.top = '';\n  popperStyles.left = '';\n  popperStyles[transformProp] = '';\n\n  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, boundariesElement, data.positionFixed);\n\n  // NOTE: DOM access here\n  // restores the original style properties after the offsets have been computed\n  popperStyles.top = top;\n  popperStyles.left = left;\n  popperStyles[transformProp] = transform;\n\n  options.boundaries = boundaries;\n\n  var order = options.priority;\n  var popper = data.offsets.popper;\n\n  var check = {\n    primary: function primary(placement) {\n      var value = popper[placement];\n      if (popper[placement] < boundaries[placement] && !options.escapeWithReference) {\n        value = Math.max(popper[placement], boundaries[placement]);\n      }\n      return defineProperty({}, placement, value);\n    },\n    secondary: function secondary(placement) {\n      var mainSide = placement === 'right' ? 'left' : 'top';\n      var value = popper[mainSide];\n      if (popper[placement] > boundaries[placement] && !options.escapeWithReference) {\n        value = Math.min(popper[mainSide], boundaries[placement] - (placement === 'right' ? popper.width : popper.height));\n      }\n      return defineProperty({}, mainSide, value);\n    }\n  };\n\n  order.forEach(function (placement) {\n    var side = ['left', 'top'].indexOf(placement) !== -1 ? 'primary' : 'secondary';\n    popper = _extends({}, popper, check[side](placement));\n  });\n\n  data.offsets.popper = popper;\n\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction shift(data) {\n  var placement = data.placement;\n  var basePlacement = placement.split('-')[0];\n  var shiftvariation = placement.split('-')[1];\n\n  // if shift shiftvariation is specified, run the modifier\n  if (shiftvariation) {\n    var _data$offsets = data.offsets,\n        reference = _data$offsets.reference,\n        popper = _data$offsets.popper;\n\n    var isVertical = ['bottom', 'top'].indexOf(basePlacement) !== -1;\n    var side = isVertical ? 'left' : 'top';\n    var measurement = isVertical ? 'width' : 'height';\n\n    var shiftOffsets = {\n      start: defineProperty({}, side, reference[side]),\n      end: defineProperty({}, side, reference[side] + reference[measurement] - popper[measurement])\n    };\n\n    data.offsets.popper = _extends({}, popper, shiftOffsets[shiftvariation]);\n  }\n\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction hide(data) {\n  if (!isModifierRequired(data.instance.modifiers, 'hide', 'preventOverflow')) {\n    return data;\n  }\n\n  var refRect = data.offsets.reference;\n  var bound = find(data.instance.modifiers, function (modifier) {\n    return modifier.name === 'preventOverflow';\n  }).boundaries;\n\n  if (refRect.bottom < bound.top || refRect.left > bound.right || refRect.top > bound.bottom || refRect.right < bound.left) {\n    // Avoid unnecessary DOM access if visibility hasn't changed\n    if (data.hide === true) {\n      return data;\n    }\n\n    data.hide = true;\n    data.attributes['x-out-of-boundaries'] = '';\n  } else {\n    // Avoid unnecessary DOM access if visibility hasn't changed\n    if (data.hide === false) {\n      return data;\n    }\n\n    data.hide = false;\n    data.attributes['x-out-of-boundaries'] = false;\n  }\n\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction inner(data) {\n  var placement = data.placement;\n  var basePlacement = placement.split('-')[0];\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var isHoriz = ['left', 'right'].indexOf(basePlacement) !== -1;\n\n  var subtractLength = ['top', 'left'].indexOf(basePlacement) === -1;\n\n  popper[isHoriz ? 'left' : 'top'] = reference[basePlacement] - (subtractLength ? popper[isHoriz ? 'width' : 'height'] : 0);\n\n  data.placement = getOppositePlacement(placement);\n  data.offsets.popper = getClientRect(popper);\n\n  return data;\n}\n\n/**\n * Modifier function, each modifier can have a function of this type assigned\n * to its `fn` property.<br />\n * These functions will be called on each update, this means that you must\n * make sure they are performant enough to avoid performance bottlenecks.\n *\n * @function ModifierFn\n * @argument {dataObject} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {dataObject} The data object, properly modified\n */\n\n/**\n * Modifiers are plugins used to alter the behavior of your poppers.<br />\n * Popper.js uses a set of 9 modifiers to provide all the basic functionalities\n * needed by the library.\n *\n * Usually you don't want to override the `order`, `fn` and `onLoad` props.\n * All the other properties are configurations that could be tweaked.\n * @namespace modifiers\n */\nvar modifiers = {\n  /**\n   * Modifier used to shift the popper on the start or end of its reference\n   * element.<br />\n   * It will read the variation of the `placement` property.<br />\n   * It can be one either `-end` or `-start`.\n   * @memberof modifiers\n   * @inner\n   */\n  shift: {\n    /** @prop {number} order=100 - Index used to define the order of execution */\n    order: 100,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: shift\n  },\n\n  /**\n   * The `offset` modifier can shift your popper on both its axis.\n   *\n   * It accepts the following units:\n   * - `px` or unit-less, interpreted as pixels\n   * - `%` or `%r`, percentage relative to the length of the reference element\n   * - `%p`, percentage relative to the length of the popper element\n   * - `vw`, CSS viewport width unit\n   * - `vh`, CSS viewport height unit\n   *\n   * For length is intended the main axis relative to the placement of the popper.<br />\n   * This means that if the placement is `top` or `bottom`, the length will be the\n   * `width`. In case of `left` or `right`, it will be the `height`.\n   *\n   * You can provide a single value (as `Number` or `String`), or a pair of values\n   * as `String` divided by a comma or one (or more) white spaces.<br />\n   * The latter is a deprecated method because it leads to confusion and will be\n   * removed in v2.<br />\n   * Additionally, it accepts additions and subtractions between different units.\n   * Note that multiplications and divisions aren't supported.\n   *\n   * Valid examples are:\n   * ```\n   * 10\n   * '10%'\n   * '10, 10'\n   * '10%, 10'\n   * '10 + 10%'\n   * '10 - 5vh + 3%'\n   * '-10px + 5vh, 5px - 6%'\n   * ```\n   * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap\n   * > with their reference element, unfortunately, you will have to disable the `flip` modifier.\n   * > You can read more on this at this [issue](https://github.com/FezVrasta/popper.js/issues/373).\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  offset: {\n    /** @prop {number} order=200 - Index used to define the order of execution */\n    order: 200,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: offset,\n    /** @prop {Number|String} offset=0\n     * The offset value as described in the modifier description\n     */\n    offset: 0\n  },\n\n  /**\n   * Modifier used to prevent the popper from being positioned outside the boundary.\n   *\n   * A scenario exists where the reference itself is not within the boundaries.<br />\n   * We can say it has \"escaped the boundaries\" — or just \"escaped\".<br />\n   * In this case we need to decide whether the popper should either:\n   *\n   * - detach from the reference and remain \"trapped\" in the boundaries, or\n   * - if it should ignore the boundary and \"escape with its reference\"\n   *\n   * When `escapeWithReference` is set to`true` and reference is completely\n   * outside its boundaries, the popper will overflow (or completely leave)\n   * the boundaries in order to remain attached to the edge of the reference.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  preventOverflow: {\n    /** @prop {number} order=300 - Index used to define the order of execution */\n    order: 300,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: preventOverflow,\n    /**\n     * @prop {Array} [priority=['left','right','top','bottom']]\n     * Popper will try to prevent overflow following these priorities by default,\n     * then, it could overflow on the left and on top of the `boundariesElement`\n     */\n    priority: ['left', 'right', 'top', 'bottom'],\n    /**\n     * @prop {number} padding=5\n     * Amount of pixel used to define a minimum distance between the boundaries\n     * and the popper. This makes sure the popper always has a little padding\n     * between the edges of its container\n     */\n    padding: 5,\n    /**\n     * @prop {String|HTMLElement} boundariesElement='scrollParent'\n     * Boundaries used by the modifier. Can be `scrollParent`, `window`,\n     * `viewport` or any DOM element.\n     */\n    boundariesElement: 'scrollParent'\n  },\n\n  /**\n   * Modifier used to make sure the reference and its popper stay near each other\n   * without leaving any gap between the two. Especially useful when the arrow is\n   * enabled and you want to ensure that it points to its reference element.\n   * It cares only about the first axis. You can still have poppers with margin\n   * between the popper and its reference element.\n   * @memberof modifiers\n   * @inner\n   */\n  keepTogether: {\n    /** @prop {number} order=400 - Index used to define the order of execution */\n    order: 400,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: keepTogether\n  },\n\n  /**\n   * This modifier is used to move the `arrowElement` of the popper to make\n   * sure it is positioned between the reference element and its popper element.\n   * It will read the outer size of the `arrowElement` node to detect how many\n   * pixels of conjunction are needed.\n   *\n   * It has no effect if no `arrowElement` is provided.\n   * @memberof modifiers\n   * @inner\n   */\n  arrow: {\n    /** @prop {number} order=500 - Index used to define the order of execution */\n    order: 500,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: arrow,\n    /** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */\n    element: '[x-arrow]'\n  },\n\n  /**\n   * Modifier used to flip the popper's placement when it starts to overlap its\n   * reference element.\n   *\n   * Requires the `preventOverflow` modifier before it in order to work.\n   *\n   * **NOTE:** this modifier will interrupt the current update cycle and will\n   * restart it if it detects the need to flip the placement.\n   * @memberof modifiers\n   * @inner\n   */\n  flip: {\n    /** @prop {number} order=600 - Index used to define the order of execution */\n    order: 600,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: flip,\n    /**\n     * @prop {String|Array} behavior='flip'\n     * The behavior used to change the popper's placement. It can be one of\n     * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid\n     * placements (with optional variations)\n     */\n    behavior: 'flip',\n    /**\n     * @prop {number} padding=5\n     * The popper will flip if it hits the edges of the `boundariesElement`\n     */\n    padding: 5,\n    /**\n     * @prop {String|HTMLElement} boundariesElement='viewport'\n     * The element which will define the boundaries of the popper position.\n     * The popper will never be placed outside of the defined boundaries\n     * (except if `keepTogether` is enabled)\n     */\n    boundariesElement: 'viewport'\n  },\n\n  /**\n   * Modifier used to make the popper flow toward the inner of the reference element.\n   * By default, when this modifier is disabled, the popper will be placed outside\n   * the reference element.\n   * @memberof modifiers\n   * @inner\n   */\n  inner: {\n    /** @prop {number} order=700 - Index used to define the order of execution */\n    order: 700,\n    /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */\n    enabled: false,\n    /** @prop {ModifierFn} */\n    fn: inner\n  },\n\n  /**\n   * Modifier used to hide the popper when its reference element is outside of the\n   * popper boundaries. It will set a `x-out-of-boundaries` attribute which can\n   * be used to hide with a CSS selector the popper when its reference is\n   * out of boundaries.\n   *\n   * Requires the `preventOverflow` modifier before it in order to work.\n   * @memberof modifiers\n   * @inner\n   */\n  hide: {\n    /** @prop {number} order=800 - Index used to define the order of execution */\n    order: 800,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: hide\n  },\n\n  /**\n   * Computes the style that will be applied to the popper element to gets\n   * properly positioned.\n   *\n   * Note that this modifier will not touch the DOM, it just prepares the styles\n   * so that `applyStyle` modifier can apply it. This separation is useful\n   * in case you need to replace `applyStyle` with a custom implementation.\n   *\n   * This modifier has `850` as `order` value to maintain backward compatibility\n   * with previous versions of Popper.js. Expect the modifiers ordering method\n   * to change in future major versions of the library.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  computeStyle: {\n    /** @prop {number} order=850 - Index used to define the order of execution */\n    order: 850,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: computeStyle,\n    /**\n     * @prop {Boolean} gpuAcceleration=true\n     * If true, it uses the CSS 3D transformation to position the popper.\n     * Otherwise, it will use the `top` and `left` properties\n     */\n    gpuAcceleration: true,\n    /**\n     * @prop {string} [x='bottom']\n     * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.\n     * Change this if your popper should grow in a direction different from `bottom`\n     */\n    x: 'bottom',\n    /**\n     * @prop {string} [x='left']\n     * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.\n     * Change this if your popper should grow in a direction different from `right`\n     */\n    y: 'right'\n  },\n\n  /**\n   * Applies the computed styles to the popper element.\n   *\n   * All the DOM manipulations are limited to this modifier. This is useful in case\n   * you want to integrate Popper.js inside a framework or view library and you\n   * want to delegate all the DOM manipulations to it.\n   *\n   * Note that if you disable this modifier, you must make sure the popper element\n   * has its position set to `absolute` before Popper.js can do its work!\n   *\n   * Just disable this modifier and define your own to achieve the desired effect.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  applyStyle: {\n    /** @prop {number} order=900 - Index used to define the order of execution */\n    order: 900,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: applyStyle,\n    /** @prop {Function} */\n    onLoad: applyStyleOnLoad,\n    /**\n     * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier\n     * @prop {Boolean} gpuAcceleration=true\n     * If true, it uses the CSS 3D transformation to position the popper.\n     * Otherwise, it will use the `top` and `left` properties\n     */\n    gpuAcceleration: undefined\n  }\n};\n\n/**\n * The `dataObject` is an object containing all the information used by Popper.js.\n * This object is passed to modifiers and to the `onCreate` and `onUpdate` callbacks.\n * @name dataObject\n * @property {Object} data.instance The Popper.js instance\n * @property {String} data.placement Placement applied to popper\n * @property {String} data.originalPlacement Placement originally defined on init\n * @property {Boolean} data.flipped True if popper has been flipped by flip modifier\n * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper\n * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier\n * @property {Object} data.styles Any CSS property defined here will be applied to the popper. It expects the JavaScript nomenclature (eg. `marginBottom`)\n * @property {Object} data.arrowStyles Any CSS property defined here will be applied to the popper arrow. It expects the JavaScript nomenclature (eg. `marginBottom`)\n * @property {Object} data.boundaries Offsets of the popper boundaries\n * @property {Object} data.offsets The measurements of popper, reference and arrow elements\n * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values\n * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values\n * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0\n */\n\n/**\n * Default options provided to Popper.js constructor.<br />\n * These can be overridden using the `options` argument of Popper.js.<br />\n * To override an option, simply pass an object with the same\n * structure of the `options` object, as the 3rd argument. For example:\n * ```\n * new Popper(ref, pop, {\n *   modifiers: {\n *     preventOverflow: { enabled: false }\n *   }\n * })\n * ```\n * @type {Object}\n * @static\n * @memberof Popper\n */\nvar Defaults = {\n  /**\n   * Popper's placement.\n   * @prop {Popper.placements} placement='bottom'\n   */\n  placement: 'bottom',\n\n  /**\n   * Set this to true if you want popper to position it self in 'fixed' mode\n   * @prop {Boolean} positionFixed=false\n   */\n  positionFixed: false,\n\n  /**\n   * Whether events (resize, scroll) are initially enabled.\n   * @prop {Boolean} eventsEnabled=true\n   */\n  eventsEnabled: true,\n\n  /**\n   * Set to true if you want to automatically remove the popper when\n   * you call the `destroy` method.\n   * @prop {Boolean} removeOnDestroy=false\n   */\n  removeOnDestroy: false,\n\n  /**\n   * Callback called when the popper is created.<br />\n   * By default, it is set to no-op.<br />\n   * Access Popper.js instance with `data.instance`.\n   * @prop {onCreate}\n   */\n  onCreate: function onCreate() {},\n\n  /**\n   * Callback called when the popper is updated. This callback is not called\n   * on the initialization/creation of the popper, but only on subsequent\n   * updates.<br />\n   * By default, it is set to no-op.<br />\n   * Access Popper.js instance with `data.instance`.\n   * @prop {onUpdate}\n   */\n  onUpdate: function onUpdate() {},\n\n  /**\n   * List of modifiers used to modify the offsets before they are applied to the popper.\n   * They provide most of the functionalities of Popper.js.\n   * @prop {modifiers}\n   */\n  modifiers: modifiers\n};\n\n/**\n * @callback onCreate\n * @param {dataObject} data\n */\n\n/**\n * @callback onUpdate\n * @param {dataObject} data\n */\n\n// Utils\n// Methods\nvar Popper = function () {\n  /**\n   * Creates a new Popper.js instance.\n   * @class Popper\n   * @param {HTMLElement|referenceObject} reference - The reference element used to position the popper\n   * @param {HTMLElement} popper - The HTML element used as the popper\n   * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)\n   * @return {Object} instance - The generated Popper.js instance\n   */\n  function Popper(reference, popper) {\n    var _this = this;\n\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    classCallCheck(this, Popper);\n\n    this.scheduleUpdate = function () {\n      return requestAnimationFrame(_this.update);\n    };\n\n    // make update() debounced, so that it only runs at most once-per-tick\n    this.update = debounce(this.update.bind(this));\n\n    // with {} we create a new object with the options inside it\n    this.options = _extends({}, Popper.Defaults, options);\n\n    // init state\n    this.state = {\n      isDestroyed: false,\n      isCreated: false,\n      scrollParents: []\n    };\n\n    // get reference and popper elements (allow jQuery wrappers)\n    this.reference = reference && reference.jquery ? reference[0] : reference;\n    this.popper = popper && popper.jquery ? popper[0] : popper;\n\n    // Deep merge modifiers options\n    this.options.modifiers = {};\n    Object.keys(_extends({}, Popper.Defaults.modifiers, options.modifiers)).forEach(function (name) {\n      _this.options.modifiers[name] = _extends({}, Popper.Defaults.modifiers[name] || {}, options.modifiers ? options.modifiers[name] : {});\n    });\n\n    // Refactoring modifiers' list (Object => Array)\n    this.modifiers = Object.keys(this.options.modifiers).map(function (name) {\n      return _extends({\n        name: name\n      }, _this.options.modifiers[name]);\n    })\n    // sort the modifiers by order\n    .sort(function (a, b) {\n      return a.order - b.order;\n    });\n\n    // modifiers have the ability to execute arbitrary code when Popper.js get inited\n    // such code is executed in the same order of its modifier\n    // they could add new properties to their options configuration\n    // BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!\n    this.modifiers.forEach(function (modifierOptions) {\n      if (modifierOptions.enabled && isFunction(modifierOptions.onLoad)) {\n        modifierOptions.onLoad(_this.reference, _this.popper, _this.options, modifierOptions, _this.state);\n      }\n    });\n\n    // fire the first update to position the popper in the right place\n    this.update();\n\n    var eventsEnabled = this.options.eventsEnabled;\n    if (eventsEnabled) {\n      // setup event listeners, they will take care of update the position in specific situations\n      this.enableEventListeners();\n    }\n\n    this.state.eventsEnabled = eventsEnabled;\n  }\n\n  // We can't use class properties because they don't get listed in the\n  // class prototype and break stuff like Sinon stubs\n\n\n  createClass(Popper, [{\n    key: 'update',\n    value: function update$$1() {\n      return update.call(this);\n    }\n  }, {\n    key: 'destroy',\n    value: function destroy$$1() {\n      return destroy.call(this);\n    }\n  }, {\n    key: 'enableEventListeners',\n    value: function enableEventListeners$$1() {\n      return enableEventListeners.call(this);\n    }\n  }, {\n    key: 'disableEventListeners',\n    value: function disableEventListeners$$1() {\n      return disableEventListeners.call(this);\n    }\n\n    /**\n     * Schedules an update. It will run on the next UI update available.\n     * @method scheduleUpdate\n     * @memberof Popper\n     */\n\n\n    /**\n     * Collection of utilities useful when writing custom modifiers.\n     * Starting from version 1.7, this method is available only if you\n     * include `popper-utils.js` before `popper.js`.\n     *\n     * **DEPRECATION**: This way to access PopperUtils is deprecated\n     * and will be removed in v2! Use the PopperUtils module directly instead.\n     * Due to the high instability of the methods contained in Utils, we can't\n     * guarantee them to follow semver. Use them at your own risk!\n     * @static\n     * @private\n     * @type {Object}\n     * @deprecated since version 1.8\n     * @member Utils\n     * @memberof Popper\n     */\n\n  }]);\n  return Popper;\n}();\n\n/**\n * The `referenceObject` is an object that provides an interface compatible with Popper.js\n * and lets you use it as replacement of a real DOM node.<br />\n * You can use this method to position a popper relatively to a set of coordinates\n * in case you don't have a DOM node to use as reference.\n *\n * ```\n * new Popper(referenceObject, popperNode);\n * ```\n *\n * NB: This feature isn't supported in Internet Explorer 10.\n * @name referenceObject\n * @property {Function} data.getBoundingClientRect\n * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.\n * @property {number} data.clientWidth\n * An ES6 getter that will return the width of the virtual reference element.\n * @property {number} data.clientHeight\n * An ES6 getter that will return the height of the virtual reference element.\n */\n\n\nPopper.Utils = (typeof window !== 'undefined' ? window : global).PopperUtils;\nPopper.placements = placements;\nPopper.Defaults = Defaults;\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Popper);\n//# sourceMappingURL=popper.js.map\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ \"698d75b157f24ae829cc\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///05951c2f2bda4691bed3\n");

/***/ }),

/***/ "064e2f13daa5551c556c":
/*!*********************************************************************!*\
  !*** ./src/vendor/Anakeen/DOCUMENT/IHM/views/document/vDocument.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*global define, console*/\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n  __webpack_require__(/*! underscore */ \"8e08e542008e4aef1f58\"),\n  __webpack_require__(/*! jquery */ \"127c8cf59f228bb01a21\"),\n  __webpack_require__(/*! backbone */ \"1858b45bf48591489d06\"),\n  __webpack_require__(/*! mustache */ \"bcd31d01884fc294fd69\"),\n  __webpack_require__(/*! dcpDocument/models/mDocumentTab */ \"8f65c0d74c5ad6bfe953\"),\n  __webpack_require__(/*! dcpDocument/views/document/menu/vMenu */ \"b9330987a639d11ea48d\"),\n  __webpack_require__(/*! dcpDocument/views/document/header/vHeader */ \"b5ff5c3b4cb330732221\"),\n  __webpack_require__(/*! dcpDocument/views/attributes/frame/vFrame */ \"9fad28b160b8ea467ae3\"),\n  __webpack_require__(/*! dcpDocument/views/attributes/tab/vTabLabel */ \"91e09db81854b0efbcde\"),\n  __webpack_require__(/*! dcpDocument/views/attributes/tab/vTabContent */ \"7e8010bf5f211813538c\"),\n  __webpack_require__(/*! dcpDocument/views/document/attributeTemplate */ \"7873a0bfc996b28836c2\"),\n  __webpack_require__(/*! dcpDocument/models/mTransitionGraph */ \"ed21042eaa5cecfef3e0\"),\n  __webpack_require__(/*! dcpDocument/views/workflow/vTransitionGraph */ \"82bccd253212b9f33353\"),\n  __webpack_require__(/*! dcpDocument/i18n/documentCatalog */ \"c58409cf810742518d6e\"),\n  __webpack_require__(/*! dcpDocument/widgets/history/wHistory */ \"a7edb748586a59efe72f\"),\n  __webpack_require__(/*! dcpDocument/widgets/properties/wProperties */ \"e7767778f9e43c100e9b\")\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function vDocument(\n  _,\n  $,\n  Backbone,\n  Mustache,\n  ModelDocumentTab,\n  ViewDocumentMenu,\n  ViewDocumentHeader,\n  ViewAttributeFrame,\n  ViewAttributeTabLabel,\n  ViewAttributeTabContent,\n  attributeTemplate,\n  ModelTransitionGraph,\n  ViewTransitionGraph,\n  i18n\n) {\n  \"use strict\";\n\n  var checkTouchEvents = function checkTouchEvents() {\n    //From modernizer\n    var bool = false;\n    if (\n      \"ontouchstart\" in window ||\n      (window.DocumentTouch && window.document instanceof window.DocumentTouch)\n    ) {\n      bool = true;\n    }\n    return bool;\n  };\n\n  return Backbone.View.extend({\n    className: \"dcpDocument container-fluid\",\n\n    events: {\n      'click .dcpDocument__body a[href^=\"#action/\"], .dcpDocument__body a[data-action], .dcpDocument__body button[data-action]':\n        \"propagateActionClick\",\n      'click .dcpDocument__body a[href^=\"#\"]': \"handleHashClick\"\n    },\n\n    /**\n     * Init event\n     */\n    initialize: function vDocumentInitialize() {\n      this.listenTo(this.model, \"destroy\", this.remove);\n      this.listenTo(this.model, \"displayLoading\", this.displayLoading);\n      this.listenTo(this.model, \"invalid\", this.showView);\n      this.listenTo(\n        this.model,\n        \"displayNetworkError\",\n        this.displayNetworkError\n      );\n      this.listenTo(this.model, \"actionAttributeLink\", this.doStandardAction);\n      this.listenTo(this.model, \"loadDocument\", this.loadDocument);\n      this.listenTo(this.model, \"redrawErrorMessages\", this.redrawTootips);\n      this.listenTo(this.model, \"doSelectTab\", this.selectTab);\n      this.listenTo(this.model, \"doDrawTab\", this.drawTab);\n      this.listenTo(this.model, \"dduiDocumentReady\", this.cleanAndRender);\n      this.listenTo(this.model, \"dduiDocumentDisplayView\", this.showView);\n    },\n\n    /**\n     * Clean the associated view and re-render it\n     */\n    cleanAndRender: function vDocumentCleanAndRender() {\n      this.trigger(\"loaderShow\", i18n.___(\"Rendering\", \"ddui\"), 70);\n      $(\".dcpStaticErrorMessage\").attr(\"hidden\", true);\n      this.$el.show();\n      this.$el[0].className = this.$el[0].className.replace(\n        /\\bdcpFamily.*\\b/g,\n        \"\"\n      );\n      this.$el\n        .removeClass(\"dcpDocument--view\")\n        .removeClass(\"dcpDocument--edit\");\n      try {\n        if (this.historyWidget) {\n          this.historyWidget.destroy();\n        }\n        if (this.propertiesWidget) {\n          this.propertiesWidget.destroy();\n        }\n        if (this.helpWidget) {\n          this.helpWidget.destroy();\n        }\n        if (this.transitionGraph && this.transitionGraph.view) {\n          this.transitionGraph.view.remove();\n        }\n      } catch (e) {\n        console.error(e);\n      }\n      //  this.trigger(\"cleanNotification\");\n      this.render();\n    },\n\n    /**\n     * Render the document view\n     * @returns {*}\n     */\n    render: function vDocumentRender() {\n      console.time(\"render document view\");\n      var renderPromises = [];\n      var $content,\n        model = this.model,\n        $el = this.$el,\n        currentView = this;\n      var locale = this.model.get(\"locale\");\n      var documentView = this;\n      var htmlBody =\n        '<div class=\"dcpDocument__form form-horizontal\">' +\n        '<div class=\"dcpDocument__frames\"></div>' +\n        '<div style=\"display:none\" class=\"dcpDocument__tabs\">' +\n        '<ul class=\"dcpDocument__tabs__list\"></ul></div></div>';\n      var $body;\n      var tabPlacement = this.model.getOption(\"tabPlacement\") || \"top\";\n      var event = { prevent: false };\n      var viewMenus = [];\n\n      this.$el.removeClass(\"dcpTouch\");\n      if (checkTouchEvents()) {\n        this.$el.addClass(\"dcpTouch\");\n      }\n\n      this.selectedTab = this.model.getOption(\"openFirstTab\");\n      this.model.trigger(\"beforeRender\", event);\n\n      if (event.prevent) {\n        return this;\n      }\n\n      this.template = this.getTemplates(\"body\").trim();\n      this.partials = this.getTemplates(\"sections\");\n\n      // Hide parasite tooltip if any\n      this.$el.find(\"[aria-describedby*='tooltip']\").tooltip(\"hide\");\n      this.$el.empty();\n\n      this.renderCss();\n      this.publishMessages();\n\n      this.updateTitle();\n      this.updateIcon();\n\n      if (!locale) {\n        locale = \"fr-FR\";\n      }\n      $(window).off(\".v\" + this.model.cid);\n\n      $(window).on(\n        \"resize.v\" + this.model.cid,\n        _.bind(this.resizeForFooter, this)\n      );\n      kendo.culture(locale);\n      //add document base\n      try {\n        var renderData = this.model.toData();\n        renderData.document = attributeTemplate.getTemplateModelInfo(\n          this.model\n        );\n        this.$el.append(\n          $(Mustache.render(this.template || \"\", renderData, this.partials))\n        );\n        attributeTemplate.completeCustomContent(this.$el, this.model, null, {\n          initializeContent: true\n        });\n        $body = this.$el\n          .find(\".dcpDocument__body\")\n          .append(htmlBody)\n          .addClass(\"container-fluid\");\n      } catch (e) {\n        if (window.dcp.logger) {\n          window.dcp.logger(e);\n        } else {\n          console.error(e);\n        }\n      }\n\n      this.$el.removeClass(\"dcpDocument--create\");\n      if (this.model.get(\"creationFamid\")) {\n        this.$el.addClass(\"dcpDocument--create\");\n      }\n      this.$el.addClass(\n        \"dcpDocument dcpDocument--\" + this.model.get(\"renderMode\")\n      );\n      this.$el.addClass(\n        \"dcpFamily--\" + this.model.get(\"properties\").get(\"family\").name\n      );\n      this.trigger(\"loading\", 10);\n      //add menu\n      try {\n        this.$el.find(\".dcpDocument__menu\").each(function vDocumentAddMenu() {\n          var viewMenu = new ViewDocumentMenu({\n            model: currentView.model,\n            el: this\n          });\n          renderPromises.push(viewMenu.render());\n          viewMenus.push(viewMenu);\n        });\n      } catch (e) {\n        if (window.dcp.logger) {\n          window.dcp.logger(e);\n        } else {\n          console.error(e);\n        }\n      }\n      try {\n        this.$el\n          .find(\".dcpDocument__header\")\n          .each(function vDocumentAddHeader() {\n            renderPromises.push(\n              new ViewDocumentHeader({\n                model: currentView.model,\n                el: this\n              }).render()\n            );\n          });\n      } catch (e) {\n        if (window.dcp.logger) {\n          window.dcp.logger(e);\n        } else {\n          console.error(e);\n        }\n      }\n      this.trigger(\"loading\", 20, this.model.get(\"attributes\").length);\n      //add first level attributes\n\n      $content = this.$el.find(\".dcpDocument__frames\");\n      if ($body && $body.length > 0) {\n        this.model\n          .get(\"attributes\")\n          .each(function vDocumentRenderAttribute(currentAttr) {\n            var view, viewTabLabel, viewTabContent;\n            if (!currentAttr.isDisplayable()) {\n              currentView.trigger(\"partRender\");\n              return;\n            }\n            if (\n              currentAttr.get(\"type\") === \"frame\" &&\n              _.isEmpty(currentAttr.get(\"parent\"))\n            ) {\n              try {\n                view = new ViewAttributeFrame({\n                  model: model.get(\"attributes\").get(currentAttr.id)\n                });\n                renderPromises.push(view.render());\n                $content.append(view.$el);\n              } catch (e) {\n                if (window.dcp.logger) {\n                  window.dcp.logger(e);\n                } else {\n                  console.error(e);\n                }\n              }\n            }\n            if (\n              currentAttr.get(\"type\") === \"tab\" &&\n              _.isEmpty(currentAttr.get(\"parent\"))\n            ) {\n              try {\n                var tabModel = model.get(\"attributes\").get(currentAttr.id);\n                var tabContent;\n                viewTabLabel = new ViewAttributeTabLabel({ model: tabModel });\n\n                viewTabContent = new ViewAttributeTabContent({\n                  model: tabModel\n                });\n                renderPromises.push(viewTabContent.render());\n\n                tabContent = viewTabContent.$el;\n\n                $el\n                  .find(\".dcpDocument__tabs__list\")\n                  .append(viewTabLabel.render().$el);\n\n                $el.find(\".dcpDocument__tabs\").append(tabContent);\n                $el.find(\".dcpDocument__tabs\").show();\n              } catch (e) {\n                if (window.dcp.logger) {\n                  window.dcp.logger(e);\n                } else {\n                  console.error(e);\n                }\n              }\n            }\n            currentView.trigger(\"partRender\");\n          });\n\n        this.kendoTabs = this.$(\".dcpDocument__tabs\").kendoTabStrip({\n          tabPosition: tabPlacement,\n          animation: {\n            open: {\n              duration: 100,\n              effects: \"fadeIn\"\n            }\n          },\n          select: function vDocumentKendoSelectTab(event) {\n            var tabId = $(event.item).data(\"attrid\");\n            var tab = currentView.model.get(\"attributes\").get(tabId);\n\n            if (tab) {\n              tab.isRealSelected = true;\n              tab.trigger(\"attributeBeforeTabSelect\", event, tabId);\n            }\n          },\n          activate: function vDocumentShowTab(event) {\n            var tabId = $(event.item).data(\"attrid\");\n            var scrollY = $(window).scrollTop();\n            currentView\n              .$(\".dcpTab__label\")\n              .removeClass(\"dcpLabel--active\")\n              .addClass(\"dcpLabel--default\");\n            currentView\n              .$('.dcpLabel[data-attrid=\"' + tabId + '\"]')\n              .addClass(\"dcpLabel--active\")\n              .removeClass(\"dcpLabel--default\");\n            if (documentView.selectedTab !== tabId) {\n              documentView.selectedTab = tabId;\n              documentView.recordSelectedTab(tabId);\n            }\n            _.defer(function selectOneTab() {\n              if (\n                currentView &&\n                currentView.model &&\n                currentView.model.get(\"attributes\")\n              ) {\n                var tab = currentView.model.get(\"attributes\").get(tabId);\n                if (tab) {\n                  tab.trigger(\"showTab\", event);\n                  _.each(viewMenus, function(viewMenu) {\n                    viewMenu.refresh();\n                  });\n                  _.defer(function() {\n                    $(window).scrollTop(scrollY);\n                  });\n                }\n              }\n            });\n            if (!this._dcpNotFirstactivate) {\n              _.delay(\n                _.bind(documentView.scrollTobVisibleTab, documentView),\n                500\n              );\n              this._dcpNotFirstactivate = true;\n            }\n          }\n        });\n        if (tabPlacement === \"topProportional\") {\n          var tabItems = $el.find(\".dcpDocument__tabs__list li\");\n          if (tabItems.length > 1) {\n            tabItems.css(\n              \"width\",\n              Math.floor(100 / tabItems.length) - 0.5 + \"%\"\n            );\n          } else {\n            tabItems.css(\"width\", \"80%\");\n          }\n        }\n        if (tabPlacement === \"left\") {\n          this.$(\".dcpTab__content\").css(\n            \"min-height\",\n            this.$(\".dcpDocument__tabs__list\").height() + \"px\"\n          );\n          this.$(\".dcpDocument__tabs\").addClass(\"dcpDocument__tabs--left\");\n        }\n\n        if (tabPlacement === \"topFix\" && this.kendoTabs) {\n          this.$(\".dcpDocument__tabs\").addClass(\"dcpDocument__tabs--fixed\");\n\n          $(window).on(\n            \"resize.v\" + this.model.cid,\n            _.debounce(_.bind(this.responsiveTabMenu, this), 100, false)\n          );\n        }\n        if (tabPlacement === \"top\" && this.kendoTabs) {\n          this.$(\".dcpDocument__tabs\").addClass(\"dcpDocument__tabs--fixed\");\n          $(window).on(\n            \"resize.v\" + this.model.cid,\n            _.debounce(_.bind(this.scrollTabList, this), 100, false)\n          );\n          _.delay(_.bind(this.scrollTabList, this), 500);\n        }\n\n        if (this.kendoTabs.length > 0 && this.kendoTabs.data(\"kendoTabStrip\")) {\n          var selectTab = 'li[data-attrid=\"' + this.selectedTab + '\"]';\n          if (this.selectedTab && $(selectTab).length > 0) {\n            this.kendoTabs.data(\"kendoTabStrip\").select(selectTab);\n          } else {\n            this.kendoTabs.data(\"kendoTabStrip\").select(0);\n          }\n        }\n      }\n      $(window.document)\n        .on(\n          \"drop.v\" + this.model.cid + \" dragover.\" + this.model.cid,\n          function vDocumentPreventDragDrop(e) {\n            e.preventDefault();\n          }\n        )\n        .on(\n          \"redrawErrorMessages.v\" + this.model.cid,\n          function vDocumentRedrawErrorMessages() {\n            documentView.redrawTootips();\n          }\n        );\n      $(window).on(\n        \"resize.v\" + this.model.cid,\n        _.debounce(\n          function vDocumentResizeDebounce() {\n            documentView.redrawTootips();\n            documentView.scrollTobVisibleTab();\n          },\n          100,\n          false\n        )\n      );\n\n      $(window).on(\n        \"resize.v\" + this.model.cid,\n        _.debounce(\n          function vDocumentResizeDebounce() {\n            if (documentView.model.get(\"attributes\")) {\n              documentView.model\n                .get(\"attributes\")\n                .each(function vDocument_triggerClose(currentAttributeModel) {\n                  currentAttributeModel.trigger(\"closeWidget\");\n                });\n            }\n          },\n          100,\n          false\n        )\n      );\n\n      this.$el.addClass(\"dcpDocument--show\");\n\n      this.resizeForFooter();\n      console.timeEnd(\"render document view\");\n      Promise.all(renderPromises).then(\n        _.bind(function vDocumentRenderDone() {\n          this.trigger(\"renderDone\");\n        }, this)\n      );\n      this.$el.show();\n      if (tabPlacement === \"topFix\" && this.kendoTabs) {\n        _.defer(_.bind(this.responsiveTabMenu, this)); // need to call here to have good dimensions\n      }\n      if (tabPlacement === \"left\") {\n        this.$(\".dcpTab__content\").css(\n          \"width\",\n          \"calc(100% - \" + ($(\".dcpDocument__tabs__list\").width() + 30) + \"px)\"\n        );\n      }\n\n      _.delay(function vDocumentEndLoading() {\n        $(\".dcpLoading--init\").removeClass(\"dcpLoading--init\");\n        if (tabPlacement === \"topFix\" && documentView.kendoTabs) {\n          documentView.responsiveTabMenu(); // need to call here to have good dimensions\n        }\n      }, 500);\n\n      return this;\n    },\n\n    selectTab: function VDocumentSelectTab(tabId) {\n      if (tabId) {\n        if (!Number.isInteger(tabId)) {\n          tabId = this.$el.find(\n            'li.dcpTab__label[data-attrid=\"' + tabId + '\"]'\n          );\n        }\n        this.kendoTabs.data(\"kendoTabStrip\").select(tabId);\n      }\n    },\n    drawTab: function VDocumentDrawTab(tabId) {\n      if (tabId) {\n        var tab = this.model.get(\"attributes\").get(tabId);\n        if (tab) {\n          tab.trigger(\"showTab\", event);\n        }\n      }\n    },\n\n    resizeForFooter: function vDocumentresizeForFooter() {\n      var $footer = this.$el.find(\".dcpDocument__footer\");\n      if ($footer.length > 0) {\n        var footerHeight = $footer.height();\n        if (footerHeight > 0) {\n          $(\"body\").css(\"margin-bottom\", footerHeight + \"px\");\n        }\n      }\n    },\n\n    /**\n     * Scroll to visible tab label\n     */\n    scrollTobVisibleTab: function vDocumentscrollTobVisibleTab() {\n      var kendoTabStrip = this.kendoTabs\n        ? this.kendoTabs.data(\"kendoTabStrip\")\n        : null;\n      if (kendoTabStrip && kendoTabStrip._scrollableModeActive) {\n        kendoTabStrip._scrollTabsToItem(\n          this.kendoTabs.find(\"li.k-state-active\")\n        );\n      }\n    },\n\n    scrollTabList: function vDocumentScrollTabList() {\n      var kendoTabStrip = this.kendoTabs.data(\"kendoTabStrip\");\n\n      if (kendoTabStrip) {\n        kendoTabStrip.resize();\n      }\n    },\n    /**\n     * Redraw messages for the error displayed\n     * Change placement of tooltips\n     */\n    redrawTootips: function vDocumentredrawTootips() {\n      var $tooltips = $(\".tooltip:visible\");\n\n      $tooltips.each(function() {\n        var bTooltip = $(this).data(\"bs.tooltip\");\n        if (bTooltip) {\n          bTooltip.hide();\n          bTooltip.show();\n        }\n      });\n    },\n    /**\n     * Add menu if needed in topFix placement tab\n     */\n    responsiveTabMenu: function vDocumentTabFixMenu() {\n      var $tabLabel = this.$(\".dcpDocument__tabs__list li\");\n\n      var documentWidth = this.$(\".dcpDocument__tabs\").width() - 12;\n      var currentWidth = 0;\n      var hiddens = [];\n      var lastShow = null;\n      var $dropSelect;\n      var $dropTopSelect;\n      var $kendoTabs = this.kendoTabs.data(\"kendoTabStrip\");\n      var liIndex = 0;\n      var $tabs = this.$(\".dcpDocument__tabs\");\n      var $selectedTabId = this.selectedTab;\n      var hiddenSelected = false;\n      var dataSource = null;\n      var iOS = /(iPad|iPhone|iPod)/g.test(navigator.userAgent);\n\n      // $tabs.find(\".dcpDocument__tabs__list\").css(\"overflow\", \"hidden\").css(\"max-height\", \"2.7em\");\n      // Restore initial tabs\n      $tabLabel.show();\n\n      $tabLabel.each(function vDocumentHideTabWidth() {\n        currentWidth += $(this).outerWidth();\n        if (currentWidth > documentWidth) {\n          $(this).hide();\n          if (hiddens.length === 0) {\n            hiddens.push({\n              tooltipLabel: $(lastShow).data(\"tooltipLabel\"),\n              label: $(lastShow)\n                .find(\".k-link\")\n                .text(),\n              id: $(lastShow).data(\"attrid\"),\n              index: liIndex - 1\n            });\n          }\n          hiddens.push({\n            tooltipLabel: $(this).data(\"tooltipLabel\"),\n            label: $(this)\n              .find(\".k-link\")\n              .text(),\n            id: $(this).data(\"attrid\"),\n            index: liIndex\n          });\n        } else {\n          $kendoTabs.enable && $kendoTabs.enable($(this));\n          lastShow = this;\n        }\n\n        liIndex++;\n      });\n\n      /**\n       * Need to recompute container width\n       */\n      $(\".dcpLabel__select-hide:visible\").each(\n        function vDocumentSelectContainer() {\n          var $container = $(this).closest(\".k-list-container\");\n          var x = $container.offset().left;\n          var maxWidth = $(\"body\").width() - x - 20 + \"px\";\n\n          $container.css(\"max-width\", maxWidth);\n          $container\n            .closest(\".k-animation-container\")\n            .css(\"max-width\", maxWidth);\n          $(this).css(\"max-width\", \"\");\n        }\n      );\n\n      if ($tabs.data(\"hiddenTabsLength\") === hiddens.length) {\n        // Optimization if no new tabs to hide\n        if (hiddens.length > 0) {\n          $kendoTabs && $kendoTabs.disable && $kendoTabs.disable($(lastShow));\n        }\n\n        //$tabs.find(\".dcpDocument__tabs__list\").css(\"overflow\", \"\").css(\"max-height\", \"\");\n        return;\n      }\n\n      // Delete fixed height\n      //$tabLabel.css(\"height\", '');\n      // Record hidden count to optimization\n      $tabs.data(\"hiddenTabsLength\", hiddens.length);\n      $tabLabel.find(\".k-link\").show(); // Restore original link (tab label)\n\n      $dropTopSelect = $tabs.find(\".dcpTab__label__select.k-combobox\").hide();\n      $tabs\n        .find(\"input.dcpTab__label__select[data-role=combobox]\")\n        .each(function vDocumentSelectTabClose() {\n          $(this).data(\"kendoComboBox\") &&\n            $(this).data(\"kendoComboBox\").close &&\n            $(this)\n              .data(\"kendoComboBox\")\n              .close();\n        });\n\n      $tabs\n        .find(\".dcpLabel--select\")\n        .removeClass(\"dcpLabel--select k-state-active\");\n      $tabs\n        .find('.dcpLabel[data-attrid=\"' + $selectedTabId + '\"]')\n        .addClass(\"k-state-active\");\n\n      if (hiddens.length > 0) {\n        // Need to disable tab to use own events managing\n        if (lastShow) {\n          $kendoTabs.disable($(lastShow));\n        }\n\n        // Hide original link\n        $(lastShow)\n          .find(\".k-link\")\n          .hide();\n        // Replace it to a dropdown selector\n        hiddenSelected = _.some(hiddens, function vDocumentSomeHiddens(item) {\n          return item.id === $selectedTabId;\n        });\n\n        if (hiddenSelected) {\n          $(lastShow).addClass(\"k-state-active\");\n        } else {\n          if ($(lastShow).data(\"attrid\") !== $selectedTabId) {\n            $(lastShow).removeClass(\"k-state-active\");\n          }\n        }\n\n        $(lastShow).addClass(\"dcpLabel--select\");\n        //$(lastShow).height(currentHeight - 5);\n        if ($dropTopSelect.length === 0) {\n          $dropSelect = $('<input class=\"dcpTab__label__select\" />');\n          $(lastShow).append($dropSelect);\n          $dropSelect.kendoComboBox({\n            value: hiddenSelected ? $selectedTabId : hiddens[0].id,\n            dataSource: hiddens,\n            dataTextField: \"label\",\n            dataValueField: \"id\",\n            dataBound: function vDocumentTabSelectDatabound() {\n              var myTab = $(this.element).closest(\"li\");\n              var liItem = $tabs.find('li[data-attrid=\"' + this.value() + '\"]');\n              myTab.data(\"tooltipLabelSelect\", liItem.data(\"tooltipLabel\"));\n            },\n            select: function vDocumentTabSelectSelect(event) {\n              var dataItem = this.dataSource.at(event.item.index());\n              var liItem = $tabs.find('li[data-attrid=\"' + dataItem.id + '\"]');\n              var myTab = $(this.element).closest(\"li\");\n\n              myTab.data(\"tooltipLabelSelect\", dataItem.tooltipLabel);\n              // Need to reset class and enable to really trigger show events\n              myTab.removeClass(\"k-state-active\");\n              $kendoTabs.enable(myTab);\n              $kendoTabs.select(liItem);\n              $kendoTabs.disable(myTab);\n              myTab.addClass(\"k-state-active\");\n              myTab.find(\".k-input\").blur(); // Because input is read only\n            },\n            open: function vDocumentTabSelectOpen() {\n              // Need to compute width of container to see elements\n              // Set max-width to not be out of body\n              var $ul = $(this.ul);\n              var $li = $(this.element).closest(\"li\");\n              var x = $li.offset().left;\n              var bodyWidth = $(\"body\").width();\n              $ul.css(\n                \"max-width\",\n                Math.max(bodyWidth - x - 20, $(lastShow).width()) + \"px\"\n              );\n              $ul.css(\"min-width\", $li.width());\n              _.defer(function vDocumentSelectTabOpen() {\n                $ul\n                  .closest(\".k-animation-container\")\n                  .addClass(\"menu__select_container\");\n              });\n            },\n\n            template: function vDocumentTabSelectTemplate(event) {\n              if (event.tooltipLabel) {\n                return Mustache.render(\n                  '<span class=\"dcpLabel__select--tooltip\" data-tooltipLabel=\"{{tooltipLabel}}\">{{label}}</span>',\n                  event\n                );\n              }\n              return event.label;\n            }\n          });\n\n          $dropSelect\n            .data(\"kendoComboBox\")\n            .ul.addClass(\"dcpLabel__select-hide\");\n          // The container width is computed by open event\n          $dropSelect.data(\"kendoComboBox\").list.width(\"auto\");\n          // No use input selector\n          $(lastShow)\n            .find(\"input\")\n            .attr(\"aria-readonly\", \"true\")\n            .prop(\"readonly\", true);\n          $(lastShow)\n            .find(\".k-select\")\n            .prepend($(\"<span/>\").addClass(\"dcpLabel__count\"));\n\n          $dropSelect.data(\"kendoComboBox\").ul.tooltip({\n            selector: \"li.k-item \",\n            placement: \"left\",\n            container: \".dcpDocument\",\n            html: true,\n            title: function vDocumentTabSelectTitle() {\n              return $(this)\n                .find(\".dcpLabel__select--tooltip\")\n                .attr(\"data-tooltipLabel\");\n            }\n          });\n          $dropSelect\n            .parent()\n            .find(\".k-input\")\n            .css(\"width\", \"\");\n        } else {\n          // Reuse dropDown created previously\n          $dropTopSelect.show();\n          $dropSelect = $tabs.find(\n            \"input.dcpTab__label__select[data-role=combobox]\"\n          );\n          $(lastShow).append($dropTopSelect); // Move to new lastShow\n          if ($dropSelect.data(\"kendoComboBox\")) {\n            $dropSelect\n              .data(\"kendoComboBox\")\n              .value(hiddenSelected ? $selectedTabId : hiddens[0].id);\n            dataSource = new kendo.data.DataSource({\n              data: hiddens\n            });\n            $dropSelect.data(\"kendoComboBox\").setDataSource(dataSource);\n          }\n        }\n\n        // Add count in select button\n        $(lastShow)\n          .find(\".dcpLabel__count\")\n          .text(hiddens.length);\n\n        if (!$tabs.data(\"selectFixOn\")) {\n          // Add callback only one time\n          $tabs.on(\n            \"click\",\n            \".dcpLabel--select .k-dropdown-wrap .k-input\",\n            function vDocumentTabSelectClick() {\n              var selectedTab = $kendoTabs.select().data(\"attrid\");\n              var selectedItem = $tabs\n                .data(\"selectFixOn\")\n                .data(\"kendoComboBox\")\n                .value();\n              var liItem = $tabs.find('li[data-attrid=\"' + selectedItem + '\"]');\n              var myTab = $(this).closest(\"li\");\n\n              if (selectedItem !== selectedTab) {\n                myTab.removeClass(\"k-state-active\");\n                $kendoTabs.enable(myTab);\n                $kendoTabs.select(liItem);\n                $kendoTabs.disable(myTab);\n                myTab.addClass(\"k-state-active\");\n              }\n            }\n          );\n\n          $tabs.on(\n            \"focus\",\n            \".dcpLabel--select .k-dropdown-wrap .k-input\",\n            function vDocumentTabFocus() {\n              $(this).blur();\n            }\n          );\n        }\n\n        // Memorize dropdown to reuse it in callback and to listen only one\n        $tabs.data(\"selectFixOn\", $dropSelect);\n      }\n      if (\"ontouchstart\" in document.documentElement && iOS) {\n        $(\"body\")\n          .off(\"show.bs.tooltip\")\n          .on(\n            \"show.bs.tooltip\",\n            \"[data-original-title]\",\n            function vDocumentWorkaroundIosTouch(e) {\n              // prevent ios double tap\n              var $tooltip = $(this);\n              var tooltipObject = $tooltip.data(\"bs.tooltip\");\n\n              if (\n                tooltipObject &&\n                tooltipObject.inState.click === false &&\n                tooltipObject.inState.focus === false &&\n                tooltipObject.inState.hover === false\n              ) {\n                return;\n              }\n\n              if (\"ontouchstart\" in document.documentElement) {\n                if (!$tooltip.data(\"showios\")) {\n                  e.preventDefault();\n                  $tooltip.data(\"showios\", true);\n                  _.delay(function vDocumentWorkaroundIosDelay() {\n                    $tooltip.tooltip(\"show\");\n                    $tooltip.data(\"showios\", false);\n                    _.delay(function vDocumentWorkaroundIosSecondDelay() {\n                      $tooltip.tooltip(\"hide\");\n                    }, 2000);\n                  }, 500);\n                }\n              }\n            }\n          );\n      }\n\n      //$tabs.find(\".dcpDocument__tabs__list\").css(\"overflow\", \"\").css(\"max-height\", \"\");\n    },\n\n    /**\n     *\n     * Register the current tab for the current user\n     *\n     * @param tabId\n     */\n    recordSelectedTab: function vDocumentRecordSelectedTab(tabId) {\n      if (this.model.get(\"initid\")) {\n        var tagTab = new ModelDocumentTab({\n          initid: this.model.get(\"initid\"),\n          tabId: tabId\n        });\n        tagTab.save();\n      }\n    },\n\n    /**\n     * Publish associated model message\n     */\n    publishMessages: function vDocumentPublishMessages() {\n      var currentView = this;\n      _.each(this.model.get(\"messages\"), function vDocumentPublishAMessage(\n        aMessage\n      ) {\n        currentView.trigger(\"showMessage\", {\n          type: aMessage.type,\n          title: aMessage.contentText,\n          htmlMessage: aMessage.contentHtml\n        });\n      });\n    },\n\n    /**\n     * Inject associated CSS in the DOM\n     *\n     * Inject new CSS, remove old CSS\n     */\n    renderCss: function vDocumentRenderCss(noRemove) {\n      // add custom css style\n      var $head = $(\"head\"),\n        cssLinkTemplate = _.template(\n          '<link rel=\"stylesheet\" type=\"text/css\" ' +\n            'href=\"<%= path %>\" data-id=\"<%= key %>\" data-view=\"true\">'\n        ),\n        customCss = this.model.get(\"customCSS\");\n\n      if (noRemove !== true) {\n        //Remove old CSS\n\n        _.each($(\"link[data-view=true]\"), function vDocumentRemoveOldCSS(\n          currentLink\n        ) {\n          var findCss = function vDocumentFindCss(currentCss) {\n            return $(currentLink).data(\"id\") === currentCss.key;\n          };\n          if (_.find(customCss, findCss) === undefined) {\n            $(currentLink).remove();\n          }\n        });\n      }\n      // Inject new CSS\n      _.each(customCss, function vDocumentInjectNewCSS(cssItem) {\n        var $existsLink = $(\n          \"link[rel=stylesheet][data-id=\" + cssItem.key + \"]\"\n        );\n\n        if ($existsLink.length === 0) {\n          if (document.createStyleSheet) {\n            // Special thanks to IE : ! up to 31 css cause errors...\n            document.createStyleSheet(cssItem.path);\n          }\n          $head.append(cssLinkTemplate(cssItem));\n        }\n      });\n    },\n\n    /**\n     * Show the help document in dialog\n     *\n     */\n    showHelp: function vDocumentShowHelp(event, helpId, attrid) {\n      var $document = $(this.el);\n      var scope = this;\n      var $dialogDiv = $document.data(\"dcpHelpDocument-\" + helpId);\n      var currentTarget = event.originalEvent\n        ? event.originalEvent.currentTarget\n        : event.currentTarget;\n      var htmlLink = {\n        target: \"_dialog\",\n        windowWidth: \"400px\",\n        windowHeight: \"300px\",\n        windowTitle:\n          '<span class=\"fa fa-question-circle\"></span> ' +\n          i18n.___(\"Info\", \"ddui\")\n      };\n\n      __webpack_require__.e(/*! require.ensure | wDocument */ \"wDocument\").then((function vDocumentHelp() {\n          __webpack_require__(/*! dcpDocument/document */ \"0b2f2c4ba8a17326d5a7\");\n          var helpX, helpY, bodyH, dialogH, dialogW;\n\n          if (!$dialogDiv || $dialogDiv.is(\":visible\") === false) {\n            if (scope.helpWidget) {\n              scope.helpWidget.destroy();\n            }\n            $dialogDiv = $(\"<div/>\").addClass(\"dcpHelp-wrapper\");\n\n            $dialogDiv.kendoWindow({\n              width: htmlLink.windowWidth,\n              height: htmlLink.windowHeight,\n              iframe: true,\n              content: \"about:blank\",\n              actions: [\"Maximize\", \"Close\"],\n              close: function vDocumentSelectHelpClose() {\n                $(\".dcpLabel__help__link--selected\").removeClass(\n                  \"dcpLabel__help__link--selected\"\n                );\n              }\n            });\n\n            $dialogDiv\n              .closest(\".k-window\")\n              .find(\".k-window-title\")\n              .html(htmlLink.windowTitle);\n            $dialogDiv.on(\"documentcreate\", function vDocumentHelpCreate() {\n              $dialogDiv.find(\"> iframe\").addClass(\"k-content-frame\");\n            });\n\n            $dialogDiv\n              .document({\n                initid: helpId,\n                withoutResize: true\n              })\n              .on(\"documentloaded\", function vDocumentSelectHelpChapter() {\n                _.defer(function vDocumentHelpReady() {\n                  $dialogDiv.document(\n                    \"triggerEvent\",\n                    \"custom:helppageSelect\",\n                    attrid\n                  );\n                });\n              });\n\n            $document.data(\"dcpHelpDocument-\" + helpId, $dialogDiv);\n          } else {\n            $dialogDiv.document(\n              \"triggerEvent\",\n              \"custom:helppageSelect\",\n              attrid\n            );\n          }\n\n          scope.helpWidget = $dialogDiv.data(\"kendoWindow\");\n          $(\".dcpLabel__help__link--selected\").removeClass(\n            \"dcpLabel__help__link--selected\"\n          );\n\n          if ($(currentTarget).length > 0) {\n            $(currentTarget).addClass(\"dcpLabel__help__link--selected\");\n\n            // Compute new position of help dialog window\n            helpX = $(currentTarget).offset().left;\n            helpY = $(currentTarget).offset().top;\n            bodyH = $(\"body\").height();\n            dialogH = $(scope.helpWidget.wrapper)\n              .closest(\".k-window\")\n              .height();\n            dialogW = $(scope.helpWidget.wrapper)\n              .closest(\".k-window\")\n              .width();\n            if (helpX > dialogW + 50) {\n              helpX = helpX - dialogW - 30;\n            } else {\n              helpX = helpX + 30;\n            }\n\n            if (helpY > bodyH - dialogH) {\n              helpY = bodyH - dialogH - 50;\n            }\n\n            helpY = helpY < 0 ? 0 : helpY;\n\n            $(scope.helpWidget.wrapper).css({\n              top: helpY + \"px\",\n              left: helpX + \"px\"\n            });\n          } else {\n            scope.helpWidget.center();\n          }\n          scope.helpWidget.open();\n        }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);\n    },\n\n    /**\n     * Show the history widget\n     *\n     */\n    showHistory: function vDocumentShowHistory(docid) {\n      var scope = this;\n      var $target = $('<div class=\"document-history\"/>');\n      this.historyWidget = $target\n        .dcpDocumentHistory({\n          documentId: docid || this.model.get(\"properties\").get(\"initid\"),\n          window: {\n            width: \"80%\",\n            height: \"80%\",\n            title: i18n.___(\"Document History\", \"historyUi\")\n          },\n          labels: {\n            version: i18n.___(\"Version\", \"historyUi\"),\n            revision: i18n.___(\"Rev\", \"historyUi\"),\n            state: i18n.___(\"State\", \"historyUi\"),\n            activity: i18n.___(\"Activity\", \"historyUi\"),\n            owner: i18n.___(\"Owner\", \"historyUi\"),\n            code: i18n.___(\"Code\", \"historyUi\"),\n            date: i18n.___(\"Date\", \"historyUi\"),\n            diff: i18n.___(\"Diff\", \"historyUi\"),\n            level: i18n.___(\"Level\", \"historyUi\"),\n            message: i18n.___(\"Message\", \"historyUi\"),\n            pastRevision: i18n.___(\"past Revision\", \"historyUi\"),\n            showDetail: i18n.___(\"Show details\", \"historyUi\"),\n            hideDetail: i18n.___(\"Hide details\", \"historyUi\"),\n            showNotice: i18n.___(\"Show notices\", \"historyUi\"),\n            noOneNotice: i18n.___(\"No one notices\", \"historyUi\"),\n            hideNotice: i18n.___(\"Hide notices\", \"historyUi\"),\n            filterMessages: i18n.___(\"Filter messages\", \"historyUi\"),\n            linkRevision: i18n.___(\"See revision number #\", \"historyUi\"),\n            historyTitle: i18n.___(\"History for {{title}}\", \"historyUi\"),\n            loading: i18n.___(\"Loading ...\", \"historyUi\"),\n            revisionDiffLabels: {\n              title: i18n.___(\n                \"Difference between two revisions\",\n                \"historyDiffUi\"\n              ),\n              first: i18n.___(\"First document\", \"historyDiffUi\"),\n              second: i18n.___(\"Second document\", \"historyDiffUi\"),\n              attributeId: i18n.___(\"Attribute id\", \"historyDiffUi\"),\n              attributeLabel: i18n.___(\"Attribute label\", \"historyDiffUi\"),\n              documentHeader: i18n.___(\n                \"{{title}}  (Revision : {{revision}}). <br/>Created on <em>{{mdate}}</em>\",\n                \"historyDiffUi\"\n              ),\n              filterMessages: i18n.___(\"Filter data\", \"historyDiffUi\"),\n              showOnlyDiff: i18n.___(\"Show only differences\", \"historyDiffUi\"),\n              showAll: i18n.___(\"Show all\", \"historyDiffUi\")\n            }\n          }\n        })\n        .data(\"dcpDocumentHistory\");\n\n      this.historyWidget.open();\n      this.historyWidget.element.on(\n        \"viewRevision\",\n        function vDocumentViewRevision(event, data) {\n          scope.model.fetchDocument({\n            initid: data.initid,\n            revision: data.revision\n          });\n        }\n      );\n    },\n\n    /**\n     * Lock document\n     *\n     */\n    lockDocument: function vDocumentLockDocument() {\n      this.model.lockDocument();\n    },\n    /**\n     * Lock document\n     *\n     */\n    unlockDocument: function vDocumentUnLockDocument() {\n      this.model.unlockDocument();\n    },\n    /**\n     * Show the transition view\n     *\n     */\n    showtransition: function vDocumentShowtransition(transition, nextState) {\n      this.model.trigger(\"showTransition\", nextState, transition);\n    },\n\n    /**\n     * Show the transition view\n     *\n     */\n    showTransitionGraph: function vDocumentShowtransitionGraph() {\n      var documentView = this;\n      var transitionGraph = {};\n      var $target = $('<div class=\"dcpTransitionGraph\"/>');\n      //Init transition model\n      transitionGraph.model = new ModelTransitionGraph({\n        documentId: this.model.id,\n        state: this.model.get(\"properties\").get(\"state\")\n      });\n\n      transitionGraph.model.fetch({\n        success: function vDocumentTransitionSuccess() {\n          //Init transition view\n          transitionGraph.view = new ViewTransitionGraph({\n            model: transitionGraph.model,\n            el: $target\n          });\n          transitionGraph.view.render();\n          transitionGraph.view.$el.on(\n            \"viewTransition\",\n            function vDocumentTransitionView(event, nextState) {\n              transitionGraph.view.remove();\n              documentView.model.trigger(\"showTransition\", nextState);\n            }\n          );\n        }\n      });\n\n      this.transitionGraph = transitionGraph;\n    },\n    /**\n     * Show the properties widget\n     *\n     */\n    showProperties: function vDocumentShowProperties(docid) {\n      var scope = this;\n      var $target = $('<div class=\"document-properties\"/>');\n\n      this.propertiesWidget = $target\n        .dcpDocumentProperties({\n          documentId: docid || this.model.get(\"properties\").get(\"initid\"),\n          window: {\n            width: \"500px\",\n            height: \"80%\",\n            title: i18n.___(\"Document properties\", \"propertyUi\")\n          },\n          labels: {\n            identifier: i18n.___(\"Identifier\", \"propertyUi\"),\n            title: i18n.___(\"Title\", \"propertyUi\"),\n            logicalName: i18n.___(\"Logical name\", \"propertyUi\"),\n            revision: i18n.___(\"Revision number\", \"propertyUi\"),\n            version: i18n.___(\"Version\", \"propertyUi\"),\n            family: i18n.___(\"Family\", \"propertyUi\"),\n            lockedBy: i18n.___(\"Locked by\", \"propertyUi\"),\n            createdBy: i18n.___(\"Created by\", \"propertyUi\"),\n            notLocked: i18n.___(\"Not locked\", \"propertyUi\"),\n            confidential: i18n.___(\"Confidential\", \"propertyUi\"),\n            notConfidential: i18n.___(\"Not confidential\", \"propertyUi\"),\n            creationDate: i18n.___(\"Creation date\", \"propertyUi\"),\n            lastModificationDate: i18n.___(\n              \"Last modification date\",\n              \"propertyUi\"\n            ),\n            profil: i18n.___(\"Profil\", \"propertyUi\"),\n            profilReference: i18n.___(\"Profil reference\", \"propertyUi\"),\n            viewController: i18n.___(\"View controller\", \"propertyUi\"),\n            property: i18n.___(\"Property\", \"propertyUi\"),\n            propertiesTitle: i18n.___(\"Properties for {{title}}\", \"propertyUi\"),\n            propertyValue: i18n.___(\"Value\", \"propertyUi\"),\n            workflow: i18n.___(\"Workflow\", \"propertyUi\"),\n            activity: i18n.___(\"Activity\", \"propertyUi\")\n          }\n        })\n        .data(\"dcpDocumentProperties\");\n\n      this.propertiesWidget.open();\n      this.propertiesWidget.element.on(\n        \"viewDocument\",\n        function vDocumentViewDocument(event, data) {\n          scope.model.fetchDocument({ initid: data });\n        }\n      );\n    },\n\n    /**\n     * Update the title of the current page\n     */\n    updateTitle: function vDocumentUpdateTitle() {\n      var title = this.model.get(\"properties\").get(\"title\");\n\n      if (!_.isEmpty(title)) {\n        document.title = title;\n      }\n    },\n\n    /**\n     * Update the icon of the current page\n     */\n    updateIcon: function vDocumentUpdateIcon() {\n      $(\"link[rel='shortcut icon']\").attr(\n        \"href\",\n        this.model.get(\"properties\").get(\"icon\")\n      );\n    },\n\n    /**\n     * Delete the current document\n     *\n     */\n    deleteDocument: function dvDocumentDocumentDelete() {\n      this.model.deleteDocument();\n    },\n\n    /**\n     * Display the loading widget\n     */\n    displayLoading: function vDocumentDisplayLoading(options) {\n      var text = i18n.___(\"Loading\", \"ddui\"),\n        avance = 50;\n      options = options || {};\n      if (this.$el.find(\".dcpDocument--disabled\") === 0) {\n        this.$el.append('<div class=\"dcpDocument--disabled\"/>');\n      }\n      if (options.isSaving) {\n        text = i18n.___(\"Recording\", \"ddui\");\n        avance = 70;\n      }\n      if (options.text) {\n        text = options.text;\n      }\n      this.trigger(\"cleanNotification\");\n      this.trigger(\"loaderShow\", text, avance);\n    },\n\n    /**\n     * Show the view\n     *\n     * Hide the loader, show the view\n     */\n    showView: function vDocumentShowView() {\n      this.$el.hide();\n      this.$el.find(\".dcpDocument--disabled\").remove();\n      this.trigger(\"loaderHide\");\n      this.$el.show();\n      this.redrawTootips();\n    },\n\n    /**\n     * Switch the view\n     *\n     * @param viewId\n     */\n    closeDocument: function vDocumentCloseDocument(viewId) {\n      if (!viewId) {\n        if (this.model.get(\"renderMode\") === \"edit\") {\n          viewId = \"!defaultEdition\";\n        } else {\n          viewId = \"!defaultConsultation\";\n        }\n      }\n      this.loadDocument({\n        initid: this.model.get(\"initid\"),\n        viewId: viewId\n      });\n    },\n\n    /**\n     * Save the current document\n     */\n    saveDocument: function vDocumentSaveDocument() {\n      this.trigger(\"cleanNotification\");\n      var currentView = this,\n        saveDocument = this.model.saveDocument();\n      //Use promise and display success when done\n      if (saveDocument && saveDocument.then) {\n        saveDocument.then(function vDocumentSaveDisplaySuccess() {\n          currentView.trigger(\"showSuccess\", {\n            title: i18n.___(\"Document Recorded\", \"ddui\")\n          });\n        });\n      }\n    },\n\n    /**\n     * Save and close the current document\n     */\n    saveAndCloseDocument: function vDocumentSaveAndCloseDocument(viewId) {\n      this.trigger(\"cleanNotification\");\n      var currentView = this,\n        saveDocument = this.model.saveDocument();\n      if (saveDocument && saveDocument.then) {\n        saveDocument.then(function vDocumentSaveAndCloseSuccess() {\n          var initid = currentView.model.get(\"initid\");\n\n          currentView.model.fetchDocument({\n            initid: initid,\n            viewId: viewId || \"!defaultConsultation\"\n          });\n        });\n      }\n    },\n\n    /**\n     * Create the current document\n     */\n    createDocument: function vDocumentCreateDocument() {\n      var currentView = this,\n        saveDocument = this.model.saveDocument();\n      if (saveDocument && saveDocument.then) {\n        saveDocument.then(function vDocumentCreateDisplaySuccess() {\n          currentView.trigger(\"showSuccess\", {\n            title: i18n.___(\"Document Created\", \"ddui\")\n          });\n        });\n      }\n    },\n\n    /**\n     * Create the current document\n     */\n    createAndCloseDocument: function vDocumentCreateDocument(viewId) {\n      var currentView = this,\n        saveDocument = this.model.saveDocument();\n      if (saveDocument && saveDocument.then) {\n        saveDocument.then(function vDocumentCreateAndCloseSuccess() {\n          var initid = currentView.model.get(\"initid\");\n\n          currentView.model.fetchDocument({\n            initid: initid,\n            viewId: viewId || \"!defaultConsultation\"\n          });\n        });\n      }\n    },\n\n    /**\n     * load another document document  : confirm if modified\n     * options : {initid, viewId, revision}\n     * callbacks : {success, error}\n     */\n    loadDocument: function vDocumentLoadDocument(options, callbacks) {\n      var confirmWindow;\n      var documentView = this;\n\n      callbacks = callbacks || {};\n\n      if (this.model.hasAttributesChanged()) {\n        confirmWindow = $(\"body\").dcpConfirm({\n          title: i18n.___(\"Confirm close document\", \"ddui\"),\n          width: \"45rem\",\n          height: \"12rem\",\n          maxWidth: $(window).width(),\n          messages: {\n            okMessage: i18n.___(\"Abort modification\", \"ddui\"),\n            cancelMessage: i18n.___(\"Stay on the form\", \"ddui\"),\n            htmlMessage: i18n.___(\n              \"The form has been modified without saving\",\n              \"ddui\"\n            ),\n            textMessage: \"\"\n          },\n          confirm: function wMenuConfirm() {\n            documentView.model\n              .fetchDocument({\n                initid: options.initid,\n                viewId: options.viewId,\n                revision: options.revision\n              })\n              .then(callbacks.success, callbacks.error);\n          },\n          cancel: function wLoadCancel() {\n            if (callbacks && _.isFunction(callbacks.error)) {\n              callbacks.error({\n                errorMessage: {\n                  code: \"USERCANCEL\",\n                  contentText: i18n.___(\n                    \"User has cancelled the action.\",\n                    \"ddui\"\n                  )\n                }\n              });\n            }\n          },\n          templateData: { templates: this.model.get(\"templates\") }\n        });\n        confirmWindow.data(\"dcpWindow\").open();\n      } else {\n        this.model\n          .fetchDocument({\n            initid: options.initid,\n            viewId: options.viewId,\n            revision: options.revision\n          })\n          .then(callbacks.success, callbacks.error);\n      }\n    },\n\n    /**\n     * Restore the deleted document\n     *\n     * @returns {exports}\n     */\n    restoreDocument: function vDocumentRestoreDocument() {\n      this.model.restoreDocument();\n    },\n\n    propagateActionClick: function vDocumentPropagateActionClick(event) {\n      var $target = $(event.currentTarget),\n        action,\n        options,\n        eventOptions,\n        internalEvent = {\n          prevent: false\n        };\n\n      event.preventDefault();\n      if (event.stopPropagation) {\n        event.stopPropagation();\n      }\n\n      action = $target.data(\"action\") || $target.attr(\"href\");\n      options = action.substring(8).split(\":\");\n      eventOptions = {\n        target: event.target,\n        eventId: options.shift(),\n        options: options\n      };\n\n      this.model.trigger(\"internalLinkSelected\", internalEvent, eventOptions);\n      if (internalEvent.prevent) {\n        return this;\n      }\n\n      return this.doStandardAction(internalEvent, eventOptions);\n    },\n\n    handleHashClick: function vDocumenthandleHashClick(event) {\n      var $target = $(event.currentTarget),\n        href = $target.attr(\"href\");\n\n      if (!href || !href.substring || href.substring(0, 7) === \"#action\") {\n        return;\n      }\n\n      event.preventDefault();\n      if (event.stopPropagation) {\n        event.stopPropagation();\n      }\n\n      window.location.hash = href;\n    },\n\n    /**\n     * Propagate menu event\n     *test\n     * @param event\n     * @param options\n     * @returns {*}\n     */\n    doStandardAction: function vDocumentdoStandardAction(event, options) {\n      var eventArgs = options.options;\n\n      if (options.eventId === \"document.save\") {\n        return this.saveDocument();\n      }\n      if (options.eventId === \"document.saveAndClose\") {\n        return this.saveAndCloseDocument(eventArgs[0]);\n      }\n      if (options.eventId === \"document.history\") {\n        return this.showHistory(eventArgs[0]);\n      }\n      if (options.eventId === \"document.transition\") {\n        return this.showtransition(eventArgs[0], eventArgs[1]);\n      }\n      if (options.eventId === \"document.transitionGraph\") {\n        return this.showTransitionGraph();\n      }\n      if (options.eventId === \"document.properties\") {\n        return this.showProperties(eventArgs[0]);\n      }\n      if (options.eventId === \"document.delete\") {\n        return this.deleteDocument();\n      }\n      if (options.eventId === \"document.close\") {\n        return this.closeDocument(eventArgs[0]);\n      }\n      if (options.eventId === \"document.edit\") {\n        return this.closeDocument(\"!defaultEdition\");\n      }\n      if (options.eventId === \"document.create\") {\n        return this.createDocument();\n      }\n      if (options.eventId === \"document.createAndClose\") {\n        return this.createAndCloseDocument(eventArgs[0]);\n      }\n      if (options.eventId === \"document.load\") {\n        return this.loadDocument({\n          initid: eventArgs[0],\n          viewId: eventArgs[1],\n          revision: eventArgs[2]\n        });\n      }\n      if (options.eventId === \"document.lock\") {\n        return this.lockDocument();\n      }\n      if (options.eventId === \"document.unlock\") {\n        return this.unlockDocument();\n      }\n      if (options.eventId === \"document.restore\") {\n        return this.restoreDocument();\n      }\n      if (options.eventId === \"document.help\") {\n        return this.showHelp(event, eventArgs[0], eventArgs[1]);\n      }\n    },\n\n    displayNetworkError: function vDocument_displayNetworkError() {\n      this.$el.hide();\n      $(\".dcpStaticErrorMessage\").removeAttr(\"hidden\");\n    },\n\n    /**\n     * Get the template for the current view\n     *\n     * @param key\n     * @returns {*}\n     */\n    getTemplates: function vDocumentGetTemplates(key) {\n      var templates = {};\n      if (this.model && this.model.get(\"templates\")) {\n        templates = this.model.get(\"templates\");\n      }\n      if (!_.isUndefined(templates[key])) {\n        return templates[key];\n      }\n      // Get from a gobal element (for unittest)\n      if (window.dcp && window.dcp.templates && window.dcp.templates[key]) {\n        return window.dcp.templates[key];\n      }\n      throw new Error(\"Unknown template  \" + key);\n    },\n\n    /**\n     * Destroy the associated widget and suppress event listener before remov the dom\n     *\n     * @returns {*}\n     */\n    remove: function vDocumentRemove() {\n      try {\n        if (this.kendoTabs && this.kendoTabs.data(\"kendoTabStrip\")) {\n          this.kendoTabs.data(\"kendoTabStrip\").destroy();\n        }\n      } catch (e) {\n        if (window.dcp.logger) {\n          window.dcp.logger(e);\n        } else {\n          console.error(e);\n        }\n      }\n      $(window).off(\".\" + this.model.cid);\n      $(window.document).off(\".\" + this.model.cid);\n\n      return Backbone.View.prototype.remove.call(this);\n    }\n  });\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///064e2f13daa5551c556c\n");

/***/ }),

/***/ "069eaf2baef8e08544c3":
/*!**************************************************************************!*\
  !*** ./src/vendor/Anakeen/DOCUMENT/IHM/widgets/attributes/enum/wEnum.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*global define */\n(function umdRequire(root, factory) {\n  \"use strict\";\n\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n      __webpack_require__(/*! jquery */ \"127c8cf59f228bb01a21\"),\n      __webpack_require__(/*! underscore */ \"8e08e542008e4aef1f58\"),\n      __webpack_require__(/*! mustache */ \"bcd31d01884fc294fd69\"),\n      __webpack_require__(/*! dcpDocument/widgets/attributes/wAttribute */ \"bd2b448fa3670797b988\")\n    ], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(window, function require_wenum($, _, Mustache) {\n  \"use strict\";\n\n  var localeCompareSupportsLocales = (function testLocaleCompareSupportsLocales() {\n    try {\n      \"foo\".localeCompare(\"bar\", \"i\");\n    } catch (e) {\n      return e.name === \"RangeError\";\n    }\n    return false;\n  })();\n\n  $.widget(\"dcp.dcpEnum\", $.dcp.dcpAttribute, {\n    options: {\n      type: \"enum\",\n      sourceValues: [], // [{key:\"the key\", label:\"the label\"}, ...}]\n      sourceUri: null, // when enum definition is dynamically get by server request\n      labels: {\n        invalidEntry: \"Invalid Entry\",\n        invertSelection: \"Click to answer {{displayValue}}\",\n        selectMessage: \"Select\",\n        unselectMessage: \"UnSelect\",\n        chooseAnotherChoice: \"Choose another choice\",\n        selectAnotherChoice: \"Select choice\",\n        displayOtherChoice: \"** {{value}} **\"\n      },\n      renderOptions: {\n        kendoDropDownConfiguration: {\n          filter: \"none\",\n          autoBind: true\n        },\n        kendoComboBoxConfiguration: {\n          filter: \"startswith\"\n        },\n        kendoMultiSelectConfiguration: {\n          filter: \"startswith\"\n        },\n        editDisplay: \"list\", // possible values are [\"list', 'vertical', 'horizontal', 'autoCompletion']'\n        useFirstChoice: false,\n        useSourceUri: false,\n        useOtherChoice: false,\n        placeHolder: \"Select\", // Message to display when no useFirstChoice is true and no value selected\n        orderBy: false\n      }\n    },\n    _initDom: function wEnumInitDom() {\n      var currentWidget = this;\n      if (\n        this.getMode() === \"write\" &&\n        this.options.renderOptions &&\n        this.options.renderOptions.orderBy\n      ) {\n        switch (this.options.renderOptions.orderBy) {\n          case \"key\":\n            if (this.options.sourceValues && this.options.sourceValues.sort) {\n              this.options.sourceValues = this.options.sourceValues.sort(\n                function wEnum_initDomSortKey(a, b) {\n                  if (a.key === b.key) {\n                    return 0;\n                  }\n                  return a.key < b.key ? -1 : 1;\n                }\n              );\n            }\n            break;\n          case \"label\":\n            if (this.options.sourceValues && this.options.sourceValues.sort) {\n              this.options.sourceValues = this.options.sourceValues.sort(\n                function wEnum_initDomSortLabel(a, b) {\n                  if (localeCompareSupportsLocales) {\n                    return String(a.label).localeCompare(\n                      String(b.label),\n                      currentWidget.options.locale,\n                      {\n                        numeric: true,\n                        caseFirst: false\n                      }\n                    );\n                  } else {\n                    return String(a.label).localeCompare(String(b.label));\n                  }\n                }\n              );\n            }\n            break;\n        }\n      }\n      if (this._isMultiple()) {\n        this.options.isMultiple = true;\n        _.each(this.options.attributeValue, function wEnumDisplayOthers(\n          singleValue\n        ) {\n          if (singleValue) {\n            singleValue.exists = singleValue.exists !== false;\n\n            if (singleValue.exists === false) {\n              singleValue.displayValue = Mustache.render(\n                currentWidget.options.labels.displayOtherChoice,\n                singleValue\n              );\n            }\n          }\n        });\n      } else {\n        if (this.options.attributeValue.exists === false) {\n          this.options.attributeValue.displayValue = Mustache.render(\n            this.options.labels.displayOtherChoice,\n            this.options.attributeValue\n          );\n        }\n      }\n\n      if (this.getMode() === \"read\") {\n        if (this._isMultiple()) {\n          this.options.attributeValues = _.toArray(this.options.attributeValue);\n          this.options.isMultiple = true;\n        } else {\n          this.options.attributeValues = [this.options.attributeValue];\n          this.options.isMultiple = false;\n        }\n        this._super();\n      }\n\n      if (this.getMode() === \"write\") {\n        if (this.options.options && this.options.options.eformat === \"auto\") {\n          this.options.renderOptions.useSourceUri = true;\n        }\n\n        if (this.options.renderOptions.useOtherChoice === true) {\n          this.options.otherUuid = _.uniqueId(\"enum\");\n        }\n        if (this.options.index >= 0) {\n          var enumIndex = this.element.closest(\"table\").data(\"enumIndex\");\n\n          if (!enumIndex) {\n            enumIndex = {};\n          }\n          if (!enumIndex[this.options.id]) {\n            enumIndex[this.options.id] = 0;\n          }\n          this.options.inArray = true;\n          this.options.enumIndex = enumIndex[this.options.id];\n          enumIndex[this.options.id]++;\n          this.element.closest(\"table\").data(\"enumIndex\", enumIndex);\n        }\n        this._initMainElementClass();\n        if (this._isMultiple()) {\n          switch (this.options.renderOptions.editDisplay) {\n            case \"autoCompletion\":\n            case \"list\":\n              this.multipleSelect();\n              break;\n            case \"horizontal\":\n            case \"vertical\":\n              this.checkboxButtons();\n              break;\n            case \"bool\":\n              throw new Error(\n                \"Enum bool display cannot be applied to a multiple attribute : \" +\n                  this.options.id\n              );\n            default:\n              this.multipleSelect();\n          }\n          this.element.on(\n            \"click\" + this.eventNamespace,\n            \".dcpAttribute__value--enum--button\",\n            function wEnumSelectClick(event) {\n              event.preventDefault();\n              currentWidget.kendoWidgetObject.search(\"\");\n            }\n          );\n        } else {\n          switch (this.options.renderOptions.editDisplay) {\n            case \"autoCompletion\":\n              this.singleCombobox();\n              break;\n            case \"list\":\n              this.singleDropdown();\n              break;\n            case \"bool\":\n              this.boolButtons();\n              break;\n            case \"horizontal\":\n            case \"vertical\":\n              this.radioButtons();\n              break;\n            default:\n              this.singleDropdown();\n          }\n        }\n      }\n\n      this.noButtonDisplay();\n    },\n    getSingleEnumData: function wEnumGetSingleEnumData() {\n      var source = [];\n      var scope = this;\n      var selectedIndex = -1;\n      var item;\n\n      if (this.options.renderOptions.useSourceUri) {\n        source = [this.options.attributeValue];\n        selectedIndex = this.options.attributeValue.value;\n      } else {\n        _.each(this.options.sourceValues, function wEnum_prepareValue(\n          enumItem\n        ) {\n          if (enumItem.key !== \"\" && enumItem.key !== \" \") {\n            item = {};\n\n            item.value = enumItem.key;\n            item.displayValue = enumItem.label || \"\";\n            item.exists = enumItem.exists !== false;\n            item.enumUuid = _.uniqueId(\"enum\");\n\n            // : no === because json encode use numeric cast when index is numeric\n            //noinspection JSHint\n            if (enumItem.key == scope.options.attributeValue.value) {\n              selectedIndex = source.length;\n              item.selected = true;\n            } else {\n              item.selected = false;\n            }\n\n            source.push(item);\n          }\n        });\n        if (\n          selectedIndex === -1 &&\n          this.options.attributeValue &&\n          !_.isUndefined(this.options.attributeValue.value) &&\n          this.options.attributeValue.value !== null\n        ) {\n          selectedIndex = source.length;\n          source.push({\n            value: this.options.attributeValue.value,\n            displayValue: this.options.attributeValue.displayValue || \"\",\n            selected: true,\n            exists: false,\n            enumUuid: _.uniqueId(\"enum\")\n          });\n        }\n      }\n\n      return { data: source, index: selectedIndex };\n    },\n\n    getMultipleEnumData: function wEnumGetMultipleEnumData() {\n      var source = [];\n      var selectedValues = [];\n      var isIn = false;\n      var item;\n      var values = [];\n\n      if (\n        this.options.attributeValue &&\n        this.options.attributeValue.value !== null\n      ) {\n        values = _.toArray(this.options.attributeValue);\n      }\n\n      if (this.options.renderOptions.useSourceUri) {\n        source = values;\n        selectedValues = _.pluck(values, \"value\");\n      } else {\n        _.each(this.options.sourceValues, function wEnum_prepareMultipleValue(\n          enumItem\n        ) {\n          item = {};\n          item.value = enumItem.key;\n          item.displayValue = enumItem.label || \"\";\n          item.selected = false;\n          item.exists = enumItem.exists !== false;\n          item.enumUuid = _.uniqueId(\"enum\");\n          isIn = _.some(values, function wEnum_findSelected(aValue) {\n            //noinspection JSHint\n            return aValue.value == enumItem.key;\n          });\n\n          // : no === because json encode use numeric cast when index is numeric\n          //noinspection JSHint\n          if (isIn) {\n            item.selected = true;\n          }\n\n          source.push(item);\n        });\n\n        _.each(values, function wEnum_addOtherValues(singleValue) {\n          if (singleValue.value !== null && singleValue.value !== \"\") {\n            if (singleValue.exists === false) {\n              item = {};\n              item.value = singleValue.value;\n              item.displayValue = singleValue.displayValue;\n              item.selected = true;\n              item.exists = false;\n              item.enumUuid = _.uniqueId(\"enum\");\n              source.push(item);\n            }\n            selectedValues.push(singleValue.value);\n          }\n        });\n      }\n\n      return {\n        data: source,\n        selectedValues: selectedValues\n      };\n    },\n\n    retrieveItems: function wEnumretrieveItemse(done) {\n      var scope = this,\n        requestData = {};\n\n      if (this.options.renderOptions.orderBy) {\n        requestData.orderBy = this.options.renderOptions.orderBy;\n      }\n\n      // Get enums data and defer render\n      $.ajax({\n        type: \"GET\",\n        url: this.options.sourceUri,\n        dataType: \"json\",\n        data: requestData\n      })\n        .done(function wEnum_retrieveDone(result) {\n          scope.options.sourceValues = result.data.enumItems;\n          scope.options.renderOptions.useSourceUri = false;\n          done(scope);\n        })\n        .fail(function wEnum_retrieveFail(response) {\n          $(\"body\").trigger(\"notification\", {\n            htmlMessage: \"Enumerate \" + scope.options.id,\n            message: response.statusText,\n            type: \"error\"\n          });\n        });\n    },\n\n    noButtonDisplay: function wEnumNoDisplayButton() {\n      if (\n        this.element.find(\".dcpAttribute__content__buttons button\").length === 0\n      ) {\n        this.element\n          .find(\".dcpAttribute__value--enumbuttons\")\n          .addClass(\"dcpAttribute__content__nobutton\");\n        this.element.find(\".dcpAttribute__content__buttons\").hide();\n      }\n    },\n\n    boolButtons: function wEnumBoolButtons() {\n      var enumData;\n      var tplOption = this.options;\n      var scope = this;\n\n      if (this.options.renderOptions.useSourceUri) {\n        this.retrieveItems(function wEnum_onRetrieveDone(theWidget) {\n          theWidget.boolButtons();\n        });\n        return;\n      }\n\n      enumData = this.getSingleEnumData();\n      tplOption.enumValues = enumData.data;\n\n      if (tplOption.enumValues.length > 1) {\n        tplOption.enumValues[0].off = true;\n        tplOption.enumValues[1].on = true;\n      }\n\n      this.options.isMultiple = true; // Just to have checkbox\n\n      this.options.renderOptions.useOtherChoice = false; // Always : no use this options\n      this.element.append(\n        Mustache.render(this._getTemplate(\"writeToggle\") || \"\", this.options)\n      );\n      this.options.isMultiple = false; // restore isMultiple : it never can be multiple\n\n      if (scope.options.labels.invertSelection) {\n        this.element\n          .find(\".dcpAttribute__value--toggle\")\n          .each(function wEnum_insertTooltip(kItem) {\n            if (tplOption.enumValues[kItem]) {\n              $(this).tooltip({\n                trigger: \"hover\",\n                container: scope.element,\n                title: Mustache.render(\n                  scope.options.labels.invertSelection || \"\",\n                  tplOption.enumValues[(kItem + 1) % 2]\n                )\n              });\n            }\n          });\n      }\n\n      this.noButtonDisplay();\n\n      this.element.on(\n        \"click\" + this.eventNamespace,\n        \".dcpAttribute__value--toggle\",\n        function wEnum_booleanClick(event) {\n          event.preventDefault();\n          // Invert selection\n          _.some(tplOption.enumValues, function wEnum_comboSetValue(item) {\n            if (\n              scope.options.attributeValue.value === null ||\n              item.value !== scope.options.attributeValue.value\n            ) {\n              scope.setValue(item, event);\n              return true;\n            }\n            return false;\n          });\n        }\n      );\n\n      this.getContentElements().each(function wEnum_addKButton() {\n        $(this)\n          .closest(\".dcpAttribute__value--enumlabel\")\n          .addClass(\"k-button\");\n      });\n      if (scope.options.attributeValue.value === null) {\n        // Set to first enum item if empty\n        var firstItem = tplOption.enumValues[0];\n        if (firstItem) {\n          scope.setValue({\n            value: firstItem.value,\n            displayValue: firstItem.displayValue\n          });\n        }\n      }\n    },\n    /**\n     * Identify the input where is the raw value\n     * @returns {*}\n     */\n    getContentElements: function wEnum_getContentElements() {\n      if (\n        this.options.inArray &&\n        (this.options.renderOptions.editDisplay === \"horizontal\" ||\n          this.options.renderOptions.editDisplay === \"vertical\" ||\n          this.options.renderOptions.editDisplay === \"bool\")\n      ) {\n        return this.element.find(\n          '.dcpAttribute__value[name=\"' +\n            this.options.id +\n            \"[\" +\n            this.options.enumIndex +\n            ']\"]'\n        );\n      } else {\n        return this._super();\n      }\n    },\n\n    radioButtons: function wEnumRadioButtons() {\n      var enumData;\n      var tplOption = this.options;\n      var labels;\n      var scope = this;\n      var hasNotExists;\n\n      if (this.options.renderOptions.useSourceUri) {\n        this.retrieveItems(function wEnum_retrieveDone(theWidget) {\n          theWidget.radioButtons();\n        });\n        return;\n      }\n\n      enumData = this.getSingleEnumData();\n\n      tplOption.enumValues = enumData.data;\n      hasNotExists = _.some(enumData.data, function wEnum_findNotExistItem(\n        item\n      ) {\n        return item.exists === false;\n      });\n\n      if (hasNotExists === true) {\n        // No set twice for radio\n        this.options.renderOptions.useOtherChoice = false;\n      }\n      this.element.append(\n        Mustache.render(this._getTemplate(\"writeRadio\") || \"\", this.options)\n      );\n      labels = this.element.find(\".dcpAttribute__value--enumlabel\");\n\n      this.noButtonDisplay();\n      labels.on(\n        \"change\" + this.eventNamespace,\n        \"input[type=radio]\",\n        function wEnum_onchange(event) {\n          var newValue = {};\n          newValue.value = $(this).val();\n          newValue.displayValue = $(this)\n            .closest(\".dcpAttribute__value--enumlabel\")\n            .find(\"label\")\n            .text()\n            .trim();\n          scope.setValue(newValue, event);\n        }\n      );\n\n      this.getContentElements().each(function wEnum_addKButton() {\n        $(this)\n          .closest(\"label\")\n          .addClass(\"k-button\");\n      });\n      if (\n        scope.options.renderOptions.useFirstChoice &&\n        scope.options.attributeValue.value === null\n      ) {\n        // Set to first enum item if empty\n        var firstItem = tplOption.enumValues[0];\n        if (firstItem) {\n          scope.setValue({\n            value: firstItem.value,\n            displayValue: firstItem.displayValue\n          });\n        }\n      }\n\n      if (scope.options.labels.selectMessage) {\n        this.element.find(\".dcpAttribute__value--enumbuttons\").tooltip({\n          container: \".dcpDocument\",\n          selector: \".dcpAttribute__value--enumlabel--text\",\n          trigger: \"hover\",\n          title: function wEnum_titleTooltip() {\n            if (\n              $(this)\n                .closest(\".dcpAttribute__value--enumlabel\")\n                .find(\"input\")\n                .prop(\"checked\")\n            ) {\n              return null;\n            } else {\n              return Mustache.render(scope.options.labels.selectMessage, {\n                displayValue: $(this).text(),\n                value: $(this)\n                  .parent()\n                  .find(\"input\")\n                  .val()\n              });\n            }\n          }\n        });\n      }\n\n      this._checkRadioOther();\n    },\n    checkboxButtons: function wEnumRadioButtons() {\n      var enumData;\n      var tplOption = this.options;\n      var scope = this;\n\n      if (this.options.renderOptions.useSourceUri) {\n        this.retrieveItems(function wEnum_onDone(theWidget) {\n          theWidget.checkboxButtons();\n        });\n        return;\n      }\n      enumData = this.getMultipleEnumData();\n      tplOption.enumValues = enumData.data;\n\n      this.element.append(\n        Mustache.render(this._getTemplate(\"writeRadio\") || \"\", this.options)\n      );\n\n      this.noButtonDisplay();\n      this.element.on(\n        \"change\" + this.eventNamespace,\n        \".dcpAttribute__value--enumlabel input[type=checkbox]\",\n        function wEnum_onChange(event) {\n          var newValue = [];\n\n          scope.getContentElements().each(function wEnum_findChecked() {\n            var $this = $(this);\n            if ($this.prop(\"checked\")) {\n              var itemValue = {};\n              itemValue.value = $this.val();\n              itemValue.displayValue = $this\n                .closest(\"label\")\n                .text()\n                .trim();\n              newValue.push(itemValue);\n            }\n          });\n\n          scope.setValue(newValue, event);\n        }\n      );\n\n      this.getContentElements().each(function wEnum_addKButton() {\n        $(this)\n          .closest(\"label\")\n          .addClass(\"k-button\");\n      });\n\n      if (this.options.labels.selectMessage) {\n        this.element.find(\".dcpAttribute__value--enumbuttons\").tooltip({\n          container: \".dcpDocument\",\n          selector: \".dcpAttribute__value--enumlabel--text\",\n          trigger: \"hover\",\n          title: function wEnum_Cb_titleTooltip() {\n            var $this = $(this);\n            if (\n              $this\n                .closest(\".dcpAttribute__value--enumlabel\")\n                .find(\"input\")\n                .prop(\"checked\")\n            ) {\n              return Mustache.render(scope.options.labels.unselectMessage, {\n                displayValue: $(this).text(),\n                value: $(this)\n                  .parent()\n                  .find(\"input\")\n                  .val()\n              });\n            } else {\n              return Mustache.render(scope.options.labels.selectMessage, {\n                displayValue: $(this).text(),\n                value: $(this)\n                  .parent()\n                  .find(\"input\")\n                  .val()\n              });\n            }\n          }\n        });\n      }\n      if (this.options.renderOptions.useOtherChoice === true) {\n        this._checkBoxOther();\n      }\n    },\n\n    /**\n     * Manage other input for radio\n     * @private\n     */\n    _checkRadioOther: function wEnum__checkRadioOther() {\n      this.element\n        .find(\".dcpAttribute__value--enum--other\")\n        .on(\n          \"focus\" + this.eventNamespace,\n          function wEnumRadioOtherInputClick() {\n            $(this).trigger(\"change\");\n          }\n        )\n        .on(\n          \"change\" + this.eventNamespace,\n          function wEnumRadioOtherInputChange() {\n            var $label = $(this).closest(\".dcpAttribute__value--enumlabel\");\n            var $input = $label.find(\".dcpAttribute__value--edit\");\n            $input.val($(this).val());\n            // Trigger change label input to real set value\n            $label.find(\"input[type=radio]\").trigger(\"change\");\n          }\n        )\n        .on(\n          \"keyup\" + this.eventNamespace,\n          function wEnumRadioOtherInputKeyReturn(event) {\n            var code = event.keyCode ? event.keyCode : event.which;\n            if (code === 13 || code === 10) {\n              $(this).blur();\n            }\n          }\n        );\n    },\n\n    /**\n     * Manage other input for checkbox\n     * @private\n     */\n    _checkBoxOther: function wEnum__checkBoxOther() {\n      this.element\n        .on(\n          \"focus\" + this.eventNamespace,\n          \".dcpAttribute__value--enum--other\",\n          function wEnumCheckOtherInputClick() {\n            $(this).trigger(\"change\");\n          }\n        )\n        .on(\n          \"change\" + this.eventNamespace,\n          \".dcpAttribute__value--enum--other\",\n          function wEnumCheckOtherInputChange() {\n            var $label = $(this).closest(\".dcpAttribute__value--enumlabel\");\n            var $input = $label.find(\".dcpAttribute__value--edit\");\n            var $hasEmpty;\n            var $checkbox = $label.find(\"input[type=checkbox]\");\n\n            $input.val($(this).val());\n\n            $hasEmpty = _.some(\n              $(this)\n                .closest(\".dcpAttribute__value--enumbuttons\")\n                .find(\".dcpAttribute__value--enum--other\"),\n              function wEnum_findEmptyOther(item) {\n                return $(item).val() === \"\";\n              }\n            );\n\n            if (!$hasEmpty) {\n              var $newOne = $label.clone();\n              var uuid = _.uniqueId(\"enum\");\n              $newOne.find(\"input[type=checkbox]\").attr(\"id\", uuid);\n              $newOne.find(\"label\").attr(\"for\", uuid);\n              // add new input if no one free found\n              $label.parent().append($newOne);\n              $newOne\n                .find(\"input\")\n                .val(\"\")\n                .prop(\"checked\", false);\n\n              if (!$checkbox.prop(\"checked\")) {\n                $label.find(\"label\").trigger(\"click\");\n              }\n            }\n            // resend change trigger because this hook is call before the checkbox onchange event\n            $checkbox.trigger(\"change\");\n          }\n        )\n        .on(\n          \"keyup\" + this.eventNamespace,\n          \".dcpAttribute__value--enum--other\",\n          function wEnumCheckOtherInputKeyReturn(event) {\n            var code = event.keyCode ? event.keyCode : event.which;\n            if (code === 13 || code === 10) {\n              $(this).blur(); // Change event will be triggered\n            }\n          }\n        );\n    },\n    singleDropdown: function wEnumSingleDropdown() {\n      var kendoOptions = this.getKendoOptions();\n      var kddl;\n      this.element.append(\n        Mustache.render(this._getTemplate(\"write\") || \"\", this.options)\n      );\n      this.kendoWidget = this.element.find(\".dcpAttribute__value--edit\");\n      kddl = this.kendoWidget\n        .kendoDropDownList(kendoOptions)\n        .data(\"kendoDropDownList\");\n      this.kendoWidgetObject = this.kendoWidget.data(\"kendoDrobDownList\");\n      kddl.list.find(\".k-list-optionlabel\").addClass(\"placeholder--clear\");\n    },\n    multipleSelect: function wEnumMultipleSelect() {\n      var kendoOptions = this.getKendoOptions();\n      this.element.append(\n        Mustache.render(this._getTemplate(\"write\") || \"\", this.options)\n      );\n      this.kendoWidget = this.element.find(\".dcpAttribute__value--edit\");\n      this.kendoWidget.kendoMultiSelect(kendoOptions);\n      this.kendoWidgetObject = this.kendoWidget.data(\"kendoMultiSelect\");\n    },\n\n    singleCombobox: function wEnumSingleCombobox() {\n      var kendoOptions = this.getKendoOptions();\n      var kddl;\n      var currentWidget = this;\n\n      this.element.append(\n        Mustache.render(this._getTemplate(\"write\") || \"\", this.options)\n      );\n      this.kendoWidget = this.element.find(\".dcpAttribute__value--edit\");\n\n      kddl = this.kendoWidget.kendoComboBox(kendoOptions).data(\"kendoComboBox\");\n\n      this.kendoWidgetObject = kddl;\n      if (this.options.renderOptions.useSourceUri) {\n        if (this.options.attributeValue.value === null) {\n          //kddl.dataSource.data([]);\n          kddl.value(\"\");\n        } else {\n          kddl.dataSource.data([this.options.attributeValue]);\n          kddl.value(this.options.attributeValue.value);\n        }\n      } else {\n        if (this.options.attributeValue.value) {\n          kddl.value(this.options.attributeValue.value);\n        }\n      }\n      this.element.on(\n        \"click\" + this.eventNamespace,\n        \".dcpAttribute__content__button--delete\",\n        function wEnumDeleteFilter() {\n          currentWidget.setError(null);\n          kddl.dataSource.filter({});\n          kddl.value(\"\");\n        }\n      );\n    },\n\n    /**\n     *Set new value to widget\n     * @param value value {value:...., displayValue} or array of {value:...., displayValue}\n     * @param event\n     */\n    setValue: function wEnumSetValue(value, event) {\n      var kddl, newValues;\n      var currentWidget = this;\n      if (this.options.renderOptions.editDisplay === \"bool\") {\n        // This display has only 2 values and cannot be set to null\n        if (value.value === null) {\n          if (this.options.enumValues[0]) {\n            value = this.options.enumValues[0];\n          }\n        }\n      }\n      this._super(value, event);\n      if (this.getMode() === \"write\") {\n        if (this._isMultiple()) {\n          switch (this.options.renderOptions.editDisplay) {\n            case \"autoCompletion\":\n            case \"list\":\n              kddl = this.kendoWidget.data(\"kendoMultiSelect\");\n              newValues = _.map(value, function wEnum_findValues(val) {\n                if (!currentWidget.options.renderOptions.useSourceUri) {\n                  if (!kddl.dataSource.get(val.value)) {\n                    kddl.dataSource.add(val);\n                  }\n                }\n                return val.value;\n              });\n              if (!_.isEqual(kddl.value(), newValues)) {\n                this.flashElement();\n                if (this.options.renderOptions.useSourceUri) {\n                  if (newValues.length > 0) {\n                    _.each(value, function wEnumCompleteExists(singleValue) {\n                      singleValue.exists = singleValue.exists !== false;\n                    });\n                    kddl.dataSource.data(value);\n                  }\n                }\n                kddl.value(newValues);\n              }\n              break;\n\n            case \"horizontal\":\n            case \"vertical\":\n              this.getContentElements().each(function wEnum_findValues() {\n                var $this = $(this);\n                var inputValue = $this.val();\n\n                var isIn = _.some(value, function wEnum_isIn(x) {\n                  //noinspection JSHint\n                  return x.value == inputValue;\n                });\n                if (isIn) {\n                  $this.prop(\"checked\", true);\n                  $this\n                    .closest(\".dcpAttribute__value--enumlabel\")\n                    .addClass(\"selected\");\n                } else {\n                  $this.prop(\"checked\", false);\n                  $this\n                    .closest(\".dcpAttribute__value--enumlabel\")\n                    .removeClass(\"selected\");\n                }\n              });\n\n              this.element\n                .find(\".dcpAttribute__value--enumlabel--text\")\n                .tooltip(\"hide\");\n              break;\n            default:\n              throw new Error(\n                \"Unknow Enum mode : \" + this.options.renderOptions.editDisplay\n              );\n          }\n        } else {\n          switch (this.options.renderOptions.editDisplay) {\n            case \"autoCompletion\":\n              kddl = this.kendoWidget.data(\"kendoComboBox\");\n              if (!_.isEqual(kddl.value(), value.value)) {\n                this.flashElement();\n\n                if (value.value !== null) {\n                  if (this.options.renderOptions.useSourceUri) {\n                    kddl.dataSource.data([value]);\n                  } else {\n                    if (!kddl.dataSource.get(value.value)) {\n                      kddl.dataSource.add(value);\n                    }\n                  }\n                  this.setError(null);\n                  kddl.value(value.value);\n                } else {\n                  kddl.value(\"\");\n                }\n              }\n              break;\n            case \"list\":\n              kddl = this.kendoWidget.data(\"kendoDropDownList\");\n\n              if (!_.isEqual(kddl.value(), value.value || \"\")) {\n                this.flashElement();\n                if (!kddl.dataSource.get(value.value)) {\n                  kddl.dataSource.add(value);\n                }\n\n                // kendo need empty string (not null) to clear input\n                kddl.value(value.value || \"\");\n              }\n              break;\n            case \"bool\":\n              this.getContentElements().each(function wEnum_parseElements() {\n                var $this = $(this);\n                var isOn;\n                //noinspection JSHint\n                if ($this.data(\"togglevalue\").toString() === value.value) {\n                  if (!$this.hasClass(\"selected\")) {\n                    if ($this.hasClass(\"on\")) {\n                      isOn = true;\n                      $this.removeClass(\"on\").addClass(\"off\");\n                    } else if ($this.hasClass(\"off\")) {\n                      $this.removeClass(\"off\").addClass(\"on\");\n                      isOn = false;\n                    }\n                    $this.addClass(\"selected\").removeClass(\"unselected\");\n\n                    _.defer(function wEnumAnimateBool() {\n                      if (isOn === true) {\n                        $this.addClass(\"on\").removeClass(\"off\");\n                      } else {\n                        $this.addClass(\"off\").removeClass(\"on\");\n                      }\n                    });\n                  }\n                } else {\n                  $this.removeClass(\"selected\").addClass(\"unselected\");\n                }\n              });\n              this.element\n                .find(\".dcpAttribute__value--enumlabel\")\n                .tooltip(\"hide\");\n\n              break;\n            case \"horizontal\":\n            case \"vertical\":\n              this.getContentElements().each(function wEnum_parseElements() {\n                var $this = $(this);\n                //noinspection JSHint\n                if ($this.val() == value.value) {\n                  $this.prop(\"checked\", true);\n                  $this\n                    .closest(\".dcpAttribute__value--enumlabel\")\n                    .addClass(\"selected\");\n                } else {\n                  $this.prop(\"checked\", false);\n                  $this\n                    .closest(\".dcpAttribute__value--enumlabel\")\n                    .removeClass(\"selected\");\n                }\n              });\n\n              this.element\n                .find(\".dcpAttribute__value--enumlabel--text\")\n                .tooltip(\"hide\");\n              break;\n            default:\n              throw new Error(\n                \"Unknow Enum mode : \" + this.options.renderOptions.editDisplay\n              );\n          }\n        }\n      } else {\n        this._super(value, event);\n        this.redraw();\n      }\n    },\n    /**\n     * method use for transport multiselect widget\n     * @param options\n     */\n    autocompleteRequestEnum: function wEnumAutocompleteRequestEnum(options) {\n      var requestData = {},\n        scope = this;\n\n      if (\n        options.data.filter &&\n        options.data.filter.filters &&\n        options.data.filter.filters.length > 0\n      ) {\n        requestData.keyword = options.data.filter.filters[0].value;\n        requestData.operator = options.data.filter.filters[0].operator;\n      }\n      if (this.options.renderOptions.orderBy) {\n        requestData.orderBy = this.options.renderOptions.orderBy;\n      }\n\n      if (!this.options.sourceUri) {\n        throw new Error(\n          \"Enum : sourceUri must be defined if renderOption useSourceUri is set to true\"\n        );\n      }\n      $.ajax({\n        type: \"GET\",\n        url: this.options.sourceUri,\n        data: requestData,\n        dataType: \"json\",\n        success: function wEnum_onAutoCompleteSuccess(result) {\n          var info = [];\n          _.each(result.data.enumItems, function wEnum_analyzeResult(enumItem) {\n            info.push({\n              value: enumItem.key,\n              displayValue: enumItem.label || \"\",\n              exists: enumItem.exists !== false\n            });\n          });\n          if (!scope._isMultiple()) {\n            if (scope.options.attributeValue.value !== null) {\n              if (\n                !_.contains(\n                  _.pluck(info, \"value\"),\n                  scope.options.attributeValue.value\n                )\n              ) {\n                if (\n                  scope.options.attributeValue.displayValue ===\n                  scope.options.attributeValue.value\n                ) {\n                  scope.options.attributeValue.displayValue = Mustache.render(\n                    scope.options.labels.displayOtherChoice,\n                    scope.options.attributeValue\n                  );\n                }\n                info.push(scope.options.attributeValue);\n              }\n            }\n          } else {\n            _.each(scope.options.attributeValue, function wEnumAddOtherInUri(\n              singleValue\n            ) {\n              var hasValue = _.some(info, function wEnumVerifyValue(\n                singleInfo\n              ) {\n                return singleInfo.value === singleValue.value;\n              });\n              if (!hasValue) {\n                info.push(singleValue);\n              }\n            });\n          }\n\n          // notify the data source that the request succeeded\n          options.success(info);\n        },\n        error: function wEnum_onAutoCompleteError(result) {\n          // notify the data source that the request failed\n          options.error(result);\n        }\n      });\n    },\n    /**\n     * Get kendo option from normal options and from renderOptions.kendoNumeric\n     * @returns {*}\n     */\n    getKendoOptions: function wEnumGetKendoOptions() {\n      var scope = this,\n        source = null,\n        kendoOptions = {},\n        defaultOptions = {};\n\n      if (this._isMultiple()) {\n        source = this.getMultipleEnumData();\n\n        defaultOptions = {\n          dataTextField: \"displayValue\",\n          dataValueField: \"value\",\n          clearButton: false,\n          dataSource: this.options.renderOptions.useSourceUri\n            ? source.data\n            : new kendo.data.DataSource({\n                data: source.data,\n                schema: { model: { id: \"value\" } }\n              }),\n          placeholder: this.options.renderOptions.placeHolder,\n          value: source.selectedValues,\n\n          change: function wEnum_onChange(event) {\n            event.preventDefault(); // no fire change event\n            // set in case of delete item\n\n            var kdData = _.toArray(\n              scope.kendoWidget.data(\"kendoMultiSelect\").dataItems()\n            );\n            var newValues = [];\n            _.each(kdData, function wEnum_pushNewValues(val) {\n              newValues.push({\n                value: val.value,\n                displayValue: val.displayValue,\n                exists: val.exists !== false\n              });\n            });\n            scope.setValue(newValues, event);\n          },\n          open: function wEnum_open(event) {\n            _.bind(scope._kOpen, scope, event, this)();\n          },\n          /**\n           * When other input is in list do not autoclose list to enter a new value\n           * @param event\n           */\n          close: function wEnum_multipleClose(event) {\n            _.bind(scope._kClose, scope, event, this)();\n          }\n        };\n\n        if (\n          _.isObject(scope.options.renderOptions.kendoMultiSelectConfiguration)\n        ) {\n          kendoOptions =\n            scope.options.renderOptions.kendoMultiSelectConfiguration;\n        }\n      } else {\n        source = this.getSingleEnumData();\n\n        defaultOptions = {\n          /*valuePrimitive: true,*/\n          dataTextField: \"displayValue\",\n          dataValueField: \"value\",\n          clearButton: false,\n          optionLabel: {\n            displayValue: this.options.renderOptions.placeHolder + \" \",\n            value: \"\",\n            exists: true\n          },\n          optionLabelTemplate:\n            '<span class=\"placeholder\">#: displayValue #</span>',\n          dataSource: this.options.renderOptions.useSourceUri\n            ? source.data\n            : new kendo.data.DataSource({\n                data: source.data,\n                schema: { model: { id: \"value\" } }\n              }),\n          index: source.index < 0 ? undefined : source.index,\n          autoBind: false,\n\n          change: function wEnum_onChange(event) {\n            if (this.value() && this.selectedIndex === -1) {\n              scope.setError(scope.options.labels.invalidEntry);\n              scope._getFocusInput().each(function wEnum_onChange() {\n                this.focus();\n              });\n            } else {\n              scope.setError(null);\n\n              var newValue = { value: this.value(), displayValue: this.text() };\n              scope.setValue(newValue, event);\n            }\n          },\n          dataBound: function wEnum_dataBound() {\n            if (\n              scope.options.renderOptions.useFirstChoice &&\n              scope.options.attributeValue.value === null\n            ) {\n              // Set to first enum item if empty\n              var firstItem = this.dataSource.at(0);\n              if (firstItem) {\n                scope.setValue({\n                  value: firstItem.value,\n                  displayValue: firstItem.displayValue\n                });\n              }\n            }\n          },\n          open: function wEnum_open(event) {\n            _.bind(scope._kOpen, scope, event, this)();\n          },\n          /**\n           * When other input is in list do not autoclose list to enter a new value\n           * @param event\n           */\n          close: function wEnum_close(event) {\n            _.bind(scope._kClose, scope, event, this)();\n          }\n        };\n\n        if (this.options.renderOptions.editDisplay === \"autoCompletion\") {\n          defaultOptions.index = -1;\n          defaultOptions.value = this.options.attributeValue.value;\n          defaultOptions.placeholder = this.options.renderOptions.placeHolder;\n\n          if (\n            _.isObject(scope.options.renderOptions.kendoComboBoxConfiguration)\n          ) {\n            kendoOptions =\n              scope.options.renderOptions.kendoComboBoxConfiguration;\n          }\n        } else {\n          if (\n            _.isObject(scope.options.renderOptions.kendoDropDownConfiguration)\n          ) {\n            kendoOptions =\n              scope.options.renderOptions.kendoDropDownConfiguration;\n          }\n        }\n      }\n\n      if (scope.options.renderOptions.useOtherChoice === true) {\n        // add \"other\" input in header list\n        defaultOptions.headerTemplate = $(\n          '<div><div class=\"dcpAttribute__value--enum-other\"><div class=\"input-group dcpAttribute__value--enum-other-content\">' +\n            '<input class=\"form-control\" type=\"text\" placeholder=\"' +\n            scope.options.labels.chooseAnotherChoice +\n            '\"/>' +\n            '<div class=\"input-group-append\"> <div class=\"input-group-text\">' +\n            '<button class=\"btn btn-primary dcpAttribute__value--enum-other-select\">' +\n            scope.options.labels.selectAnotherChoice +\n            \"</button></div> \" +\n            \"</div></div></div></div>\"\n        ).html();\n      }\n\n      if (this.options.renderOptions.useSourceUri) {\n        defaultOptions.dataSource = {\n          data: source.data,\n          index: source.index,\n          // type: \"json\",\n          serverFiltering: true,\n          minLength: 0,\n          transport: {\n            read: _.bind(scope.autocompleteRequestEnum, scope)\n          }\n        };\n      }\n      return _.extend(defaultOptions, kendoOptions);\n    },\n\n    _kSelectOther: function wEnumkSelect(event, kWidget, newValue) {\n      kWidget.dataSource.filter({});\n      if (this._isMultiple()) {\n        var kdData = _.toArray(kWidget.dataItems());\n        var newValues = [];\n\n        _.each(kdData, function wEnum_pushNewValues(val) {\n          newValues.push({\n            value: val.value,\n            displayValue: val.displayValue,\n            exists: val.exists\n          });\n        });\n\n        newValues.push({\n          value: newValue,\n          exists: false,\n          displayValue: Mustache.render(\n            this.options.labels.displayOtherChoice,\n            { value: newValue }\n          )\n        });\n\n        this.setValue(newValues, event);\n      } else {\n        this.setValue(\n          {\n            value: newValue,\n            exists: false,\n            displayValue: Mustache.render(\n              this.options.labels.displayOtherChoice,\n              { value: newValue }\n            )\n          },\n          event\n        );\n      }\n\n      $(\".dcpAttribute__value--enum-other input\").blur();\n      kWidget.close();\n    },\n\n    /**\n     * When other input is in list do not autoclose list to enter a new value\n     * @param event\n     * @param kWidget kendo widget\n     */\n    _kClose: function wEnumkClose(event, kWidget) {\n      if (this.options.renderOptions.useOtherChoice === true) {\n        var $otherInput = kWidget.ul\n          .closest(\".k-list-container\")\n          .find(\".dcpAttribute__value--enum-other\");\n        if (\n          $otherInput.data(\"dcpEnumOtherFirstClose\") !== false ||\n          $otherInput.find(\"input\").is(\":focus\")\n        ) {\n          event.preventDefault();\n          $otherInput.data(\"dcpEnumOtherFirstClose\", false);\n        }\n      }\n    },\n\n    _kOpen: function wEnumkOpen(event, kWidget) {\n      var scope = this;\n      /**\n       * Special events for \"other\" choice input\n       */\n      if (this.options.renderOptions.useOtherChoice === true) {\n        var $container = kWidget.ul.closest(\".k-list-container\");\n        var $otherInput = $container.find(\".dcpAttribute__value--enum-other\");\n\n        if (\n          $otherInput.length === 1 &&\n          $otherInput.data(\"dcpEnumOtherInitialized\") !== true\n        ) {\n          $otherInput.data(\"dcpEnumOtherInitialized\", true);\n          $otherInput\n            .find(\".dcpAttribute__value--enum-other-select\")\n            .prop(\"disabled\", true);\n          $container.prepend($otherInput);\n\n          $otherInput.on(\n            \"click\" + this.eventNamespace,\n            \"input\",\n            /**\n             * Apply setValue and close list when confirm button is clicked\n             * @param event\n             */\n            function wEnumSetOtherClick(event) {\n              event.preventDefault();\n              $(this).focus();\n              $(this).data(\"dcpEnumOtherHasFocus\", true);\n            }\n          );\n          $container.on(\n            \"click\" + this.eventNamespace,\n            \"li.k-item\",\n            /**\n             * Force close for \"normal\" choice because autoclose is disabled\n             */\n            function wEnumItemClick() {\n              var $input = $container.find(\n                \".dcpAttribute__value--enum-other input\"\n              );\n              $input.blur();\n              kWidget.close();\n            }\n          );\n\n          $otherInput.on(\n            \"keyup\" + this.eventNamespace,\n            \"input\",\n            /**\n             * Apply setValue and close list when return key is pressed\n             * @param event\n             */\n            function wEnumSetOtherKeyPress(event) {\n              var code = event.keyCode ? event.keyCode : event.which;\n              var $input = $container.find(\n                \".dcpAttribute__value--enum-other input\"\n              );\n              var newValue = $input.val();\n              if (code === 13 || code === 10) {\n                if (newValue) {\n                  _.bind(\n                    scope._kSelectOther,\n                    scope,\n                    event,\n                    kWidget,\n                    newValue\n                  )();\n                }\n              } else {\n                kWidget.search(newValue);\n              }\n              $otherInput\n                .find(\".dcpAttribute__value--enum-other-select\")\n                .prop(\"disabled\", !newValue);\n            }\n          );\n\n          $otherInput.on(\n            \"click\" + this.eventNamespace,\n            \".dcpAttribute__value--enum-other-select\",\n            function wEnumSetOtherClick(event) {\n              var $input = $container.find(\n                \".dcpAttribute__value--enum-other input\"\n              );\n              var newValue = $input.val();\n              if (newValue) {\n                _.bind(scope._kSelectOther, scope, event, kWidget, newValue)();\n              }\n            }\n          );\n        }\n\n        $container\n          .find(\".dcpAttribute__value--enum-other\")\n          .data(\"dcpEnumOtherFirstClose\", true);\n      }\n    },\n\n    close: function wEnum_close() {\n      if (this.kendoWidget && this.kendoWidget.data(\"kendoDropDownList\")) {\n        this.kendoWidget.data(\"kendoDropDownList\").close();\n      }\n      if (this.kendoWidget && this.kendoWidget.data(\"kendoComboBox\")) {\n        this.kendoWidget.data(\"kendoComboBox\").close();\n      }\n      if (this.kendoWidget && this.kendoWidget.data(\"kendoMultiSelect\")) {\n        this.kendoWidget.data(\"kendoMultiSelect\").close();\n      }\n      return this._super();\n    },\n\n    getType: function wEnum_getType() {\n      return \"enum\";\n    },\n\n    _destroy: function wEnum_destroy() {\n      if (this.kendoWidget && this.kendoWidget.data(\"kendoDropDownList\")) {\n        this.kendoWidget.data(\"kendoDropDownList\").destroy();\n      }\n      if (this.kendoWidget && this.kendoWidget.data(\"kendoComboBox\")) {\n        this.kendoWidget.data(\"kendoComboBox\").destroy();\n      }\n      if (this.kendoWidget && this.kendoWidget.data(\"kendoMultiSelect\")) {\n        this.kendoWidget.data(\"kendoMultiSelect\").destroy();\n      }\n      this._super();\n    }\n  });\n\n  return $.fn.dcpEnum;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///069eaf2baef8e08544c3\n");

/***/ }),

/***/ "0709a97ea65239419862":
/*!****************************************************************************!*\
  !*** ./src/vendor/Anakeen/DOCUMENT/IHM/controllerObjects/menuInterface.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*global define*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! underscore */ \"8e08e542008e4aef1f58\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function menuInterface(_) {\n  \"use strict\";\n\n  var MenuError = function MenuError(message) {\n    this.name = \"MenuError\";\n    this.message = message || \"Default Message\";\n    this.stack = new Error().stack;\n  };\n  MenuError.prototype = Object.create(Error.prototype);\n  MenuError.prototype.constructor = MenuError;\n\n  var MenuPrototope = function AttributePrototype() {\n    if (this._menuModel) {\n      this.id = this._menuModel.id;\n    } else {\n      this.id = null;\n    }\n  };\n  MenuPrototope.prototype._menuModel = null;\n  MenuPrototope.prototype._set = function MenuPrototope_set(\n    key,\n    value,\n    options\n  ) {\n    if (options && options.strict === true && !this.id) {\n      throw new MenuError(\"This menu doesn't exist\");\n    }\n    if (this.id || (options && options.strict === true)) {\n      this._menuModel.set(key, value, options);\n    }\n  };\n  /**\n   * Get the property of the current attribute\n   *\n   * @returns {*}\n   */\n  MenuPrototope.prototype.getProperties = function menuInterfaceGetProperties(\n    options\n  ) {\n    if (options && options.strict === true && !this.id) {\n      throw new MenuError(\"This menu doesn't exist\");\n    }\n    if (this.id || (options && options.strict === true)) {\n      return _.clone(this._menuModel.attributes);\n    }\n    return {};\n  };\n\n  /**\n   * Disable an item menu\n   *\n   * @returns {*}\n   */\n  MenuPrototope.prototype.disable = function menuInterfaceDisable(options) {\n    this._set(\"visibility\", \"disabled\", options);\n  };\n  /**\n   * Enable and show an item menu\n   *\n   * @returns {*}\n   */\n  MenuPrototope.prototype.enable = function menuInterfaceEnable(options) {\n    this._set(\"visibility\", \"visible\", options);\n  };\n\n  /**\n   * Hide an item menu\n   *\n   * @returns {*}\n   */\n  MenuPrototope.prototype.hide = function menuInterfaceHide(options) {\n    this._set(\"visibility\", \"hidden\", options);\n  };\n\n  /**\n   * Change text label\n   * @param label raw text\n   *\n   * @returns {*}\n   * @param options\n   */\n  MenuPrototope.prototype.setLabel = function menuInterfaceSetLabel(\n    label,\n    options\n  ) {\n    this._set(\"label\", label, options);\n  };\n\n  /**\n   * Change html label\n   * @param label html fragment\n   *\n   * @returns {*}\n   * @param options\n   */\n  MenuPrototope.prototype.setHtmlLabel = function menuInterfaceSetHtmlLabel(\n    label,\n    options\n  ) {\n    this._set(\"htmlLabel\", label, options);\n  };\n\n  /**\n   * Change icon url\n   * @param url image url\n   *\n   * @returns {*}\n   * @param options\n   */\n  MenuPrototope.prototype.setIconUrl = function menuInterfaceSetIconUrl(\n    url,\n    options\n  ) {\n    this._set(\"iconUrl\", url, options);\n  };\n  /**\n   * Change custom css class\n   * @param cssClass css class\n   *\n   * @returns {*}\n   * @param options\n   */\n  MenuPrototope.prototype.setCssClass = function menuInterfaceSetCssClass(\n    cssClass,\n    options\n  ) {\n    this._set(\"cssClass\", cssClass, options);\n  };\n\n  /**\n   * Change url\n   * @param url\n   *\n   * @returns {*}\n   * @param options\n   */\n  MenuPrototope.prototype.setUrl = function menuInterfaceSetUrl(url, options) {\n    this._set(\"url\", url, options);\n  };\n\n  MenuPrototope.prototype.redraw = function menuInterfaceRedraw() {\n    this._menuModel.trigger(\"reload\");\n  };\n\n  var MenuInterface = function menuInterface(attributeModel) {\n    this._menuModel = attributeModel;\n    MenuPrototope.call(this);\n  };\n\n  MenuInterface.prototype = Object.create(MenuPrototope.prototype);\n  MenuInterface.prototype.constructor = MenuPrototope;\n\n  return MenuInterface;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMDcwOWE5N2VhNjUyMzk0MTk4NjIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdmVuZG9yL0FuYWtlZW4vRE9DVU1FTlQvSUhNL2NvbnRyb2xsZXJPYmplY3RzL21lbnVJbnRlcmZhY2UuanM/NTEwMiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKmdsb2JhbCBkZWZpbmUqL1xuZGVmaW5lKFtcInVuZGVyc2NvcmVcIl0sIGZ1bmN0aW9uIG1lbnVJbnRlcmZhY2UoXykge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgTWVudUVycm9yID0gZnVuY3Rpb24gTWVudUVycm9yKG1lc3NhZ2UpIHtcbiAgICB0aGlzLm5hbWUgPSBcIk1lbnVFcnJvclwiO1xuICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2UgfHwgXCJEZWZhdWx0IE1lc3NhZ2VcIjtcbiAgICB0aGlzLnN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gIH07XG4gIE1lbnVFcnJvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEVycm9yLnByb3RvdHlwZSk7XG4gIE1lbnVFcnJvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBNZW51RXJyb3I7XG5cbiAgdmFyIE1lbnVQcm90b3RvcGUgPSBmdW5jdGlvbiBBdHRyaWJ1dGVQcm90b3R5cGUoKSB7XG4gICAgaWYgKHRoaXMuX21lbnVNb2RlbCkge1xuICAgICAgdGhpcy5pZCA9IHRoaXMuX21lbnVNb2RlbC5pZDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5pZCA9IG51bGw7XG4gICAgfVxuICB9O1xuICBNZW51UHJvdG90b3BlLnByb3RvdHlwZS5fbWVudU1vZGVsID0gbnVsbDtcbiAgTWVudVByb3RvdG9wZS5wcm90b3R5cGUuX3NldCA9IGZ1bmN0aW9uIE1lbnVQcm90b3RvcGVfc2V0KFxuICAgIGtleSxcbiAgICB2YWx1ZSxcbiAgICBvcHRpb25zXG4gICkge1xuICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuc3RyaWN0ID09PSB0cnVlICYmICF0aGlzLmlkKSB7XG4gICAgICB0aHJvdyBuZXcgTWVudUVycm9yKFwiVGhpcyBtZW51IGRvZXNuJ3QgZXhpc3RcIik7XG4gICAgfVxuICAgIGlmICh0aGlzLmlkIHx8IChvcHRpb25zICYmIG9wdGlvbnMuc3RyaWN0ID09PSB0cnVlKSkge1xuICAgICAgdGhpcy5fbWVudU1vZGVsLnNldChrZXksIHZhbHVlLCBvcHRpb25zKTtcbiAgICB9XG4gIH07XG4gIC8qKlxuICAgKiBHZXQgdGhlIHByb3BlcnR5IG9mIHRoZSBjdXJyZW50IGF0dHJpYnV0ZVxuICAgKlxuICAgKiBAcmV0dXJucyB7Kn1cbiAgICovXG4gIE1lbnVQcm90b3RvcGUucHJvdG90eXBlLmdldFByb3BlcnRpZXMgPSBmdW5jdGlvbiBtZW51SW50ZXJmYWNlR2V0UHJvcGVydGllcyhcbiAgICBvcHRpb25zXG4gICkge1xuICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuc3RyaWN0ID09PSB0cnVlICYmICF0aGlzLmlkKSB7XG4gICAgICB0aHJvdyBuZXcgTWVudUVycm9yKFwiVGhpcyBtZW51IGRvZXNuJ3QgZXhpc3RcIik7XG4gICAgfVxuICAgIGlmICh0aGlzLmlkIHx8IChvcHRpb25zICYmIG9wdGlvbnMuc3RyaWN0ID09PSB0cnVlKSkge1xuICAgICAgcmV0dXJuIF8uY2xvbmUodGhpcy5fbWVudU1vZGVsLmF0dHJpYnV0ZXMpO1xuICAgIH1cbiAgICByZXR1cm4ge307XG4gIH07XG5cbiAgLyoqXG4gICAqIERpc2FibGUgYW4gaXRlbSBtZW51XG4gICAqXG4gICAqIEByZXR1cm5zIHsqfVxuICAgKi9cbiAgTWVudVByb3RvdG9wZS5wcm90b3R5cGUuZGlzYWJsZSA9IGZ1bmN0aW9uIG1lbnVJbnRlcmZhY2VEaXNhYmxlKG9wdGlvbnMpIHtcbiAgICB0aGlzLl9zZXQoXCJ2aXNpYmlsaXR5XCIsIFwiZGlzYWJsZWRcIiwgb3B0aW9ucyk7XG4gIH07XG4gIC8qKlxuICAgKiBFbmFibGUgYW5kIHNob3cgYW4gaXRlbSBtZW51XG4gICAqXG4gICAqIEByZXR1cm5zIHsqfVxuICAgKi9cbiAgTWVudVByb3RvdG9wZS5wcm90b3R5cGUuZW5hYmxlID0gZnVuY3Rpb24gbWVudUludGVyZmFjZUVuYWJsZShvcHRpb25zKSB7XG4gICAgdGhpcy5fc2V0KFwidmlzaWJpbGl0eVwiLCBcInZpc2libGVcIiwgb3B0aW9ucyk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEhpZGUgYW4gaXRlbSBtZW51XG4gICAqXG4gICAqIEByZXR1cm5zIHsqfVxuICAgKi9cbiAgTWVudVByb3RvdG9wZS5wcm90b3R5cGUuaGlkZSA9IGZ1bmN0aW9uIG1lbnVJbnRlcmZhY2VIaWRlKG9wdGlvbnMpIHtcbiAgICB0aGlzLl9zZXQoXCJ2aXNpYmlsaXR5XCIsIFwiaGlkZGVuXCIsIG9wdGlvbnMpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBDaGFuZ2UgdGV4dCBsYWJlbFxuICAgKiBAcGFyYW0gbGFiZWwgcmF3IHRleHRcbiAgICpcbiAgICogQHJldHVybnMgeyp9XG4gICAqIEBwYXJhbSBvcHRpb25zXG4gICAqL1xuICBNZW51UHJvdG90b3BlLnByb3RvdHlwZS5zZXRMYWJlbCA9IGZ1bmN0aW9uIG1lbnVJbnRlcmZhY2VTZXRMYWJlbChcbiAgICBsYWJlbCxcbiAgICBvcHRpb25zXG4gICkge1xuICAgIHRoaXMuX3NldChcImxhYmVsXCIsIGxhYmVsLCBvcHRpb25zKTtcbiAgfTtcblxuICAvKipcbiAgICogQ2hhbmdlIGh0bWwgbGFiZWxcbiAgICogQHBhcmFtIGxhYmVsIGh0bWwgZnJhZ21lbnRcbiAgICpcbiAgICogQHJldHVybnMgeyp9XG4gICAqIEBwYXJhbSBvcHRpb25zXG4gICAqL1xuICBNZW51UHJvdG90b3BlLnByb3RvdHlwZS5zZXRIdG1sTGFiZWwgPSBmdW5jdGlvbiBtZW51SW50ZXJmYWNlU2V0SHRtbExhYmVsKFxuICAgIGxhYmVsLFxuICAgIG9wdGlvbnNcbiAgKSB7XG4gICAgdGhpcy5fc2V0KFwiaHRtbExhYmVsXCIsIGxhYmVsLCBvcHRpb25zKTtcbiAgfTtcblxuICAvKipcbiAgICogQ2hhbmdlIGljb24gdXJsXG4gICAqIEBwYXJhbSB1cmwgaW1hZ2UgdXJsXG4gICAqXG4gICAqIEByZXR1cm5zIHsqfVxuICAgKiBAcGFyYW0gb3B0aW9uc1xuICAgKi9cbiAgTWVudVByb3RvdG9wZS5wcm90b3R5cGUuc2V0SWNvblVybCA9IGZ1bmN0aW9uIG1lbnVJbnRlcmZhY2VTZXRJY29uVXJsKFxuICAgIHVybCxcbiAgICBvcHRpb25zXG4gICkge1xuICAgIHRoaXMuX3NldChcImljb25VcmxcIiwgdXJsLCBvcHRpb25zKTtcbiAgfTtcbiAgLyoqXG4gICAqIENoYW5nZSBjdXN0b20gY3NzIGNsYXNzXG4gICAqIEBwYXJhbSBjc3NDbGFzcyBjc3MgY2xhc3NcbiAgICpcbiAgICogQHJldHVybnMgeyp9XG4gICAqIEBwYXJhbSBvcHRpb25zXG4gICAqL1xuICBNZW51UHJvdG90b3BlLnByb3RvdHlwZS5zZXRDc3NDbGFzcyA9IGZ1bmN0aW9uIG1lbnVJbnRlcmZhY2VTZXRDc3NDbGFzcyhcbiAgICBjc3NDbGFzcyxcbiAgICBvcHRpb25zXG4gICkge1xuICAgIHRoaXMuX3NldChcImNzc0NsYXNzXCIsIGNzc0NsYXNzLCBvcHRpb25zKTtcbiAgfTtcblxuICAvKipcbiAgICogQ2hhbmdlIHVybFxuICAgKiBAcGFyYW0gdXJsXG4gICAqXG4gICAqIEByZXR1cm5zIHsqfVxuICAgKiBAcGFyYW0gb3B0aW9uc1xuICAgKi9cbiAgTWVudVByb3RvdG9wZS5wcm90b3R5cGUuc2V0VXJsID0gZnVuY3Rpb24gbWVudUludGVyZmFjZVNldFVybCh1cmwsIG9wdGlvbnMpIHtcbiAgICB0aGlzLl9zZXQoXCJ1cmxcIiwgdXJsLCBvcHRpb25zKTtcbiAgfTtcblxuICBNZW51UHJvdG90b3BlLnByb3RvdHlwZS5yZWRyYXcgPSBmdW5jdGlvbiBtZW51SW50ZXJmYWNlUmVkcmF3KCkge1xuICAgIHRoaXMuX21lbnVNb2RlbC50cmlnZ2VyKFwicmVsb2FkXCIpO1xuICB9O1xuXG4gIHZhciBNZW51SW50ZXJmYWNlID0gZnVuY3Rpb24gbWVudUludGVyZmFjZShhdHRyaWJ1dGVNb2RlbCkge1xuICAgIHRoaXMuX21lbnVNb2RlbCA9IGF0dHJpYnV0ZU1vZGVsO1xuICAgIE1lbnVQcm90b3RvcGUuY2FsbCh0aGlzKTtcbiAgfTtcblxuICBNZW51SW50ZXJmYWNlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoTWVudVByb3RvdG9wZS5wcm90b3R5cGUpO1xuICBNZW51SW50ZXJmYWNlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IE1lbnVQcm90b3RvcGU7XG5cbiAgcmV0dXJuIE1lbnVJbnRlcmZhY2U7XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///0709a97ea65239419862\n");

/***/ }),

/***/ "072cb77c211dd8456f5d":
/*!**************************************************************************!*\
  !*** ./src/vendor/Anakeen/DOCUMENT/IHM/widgets/history/wRevisionDiff.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n  __webpack_require__(/*! jquery */ \"127c8cf59f228bb01a21\"),\n  __webpack_require__(/*! underscore */ \"8e08e542008e4aef1f58\"),\n  __webpack_require__(/*! mustache */ \"bcd31d01884fc294fd69\"),\n  __webpack_require__(/*! dcpDocument/widgets/widget */ \"a903b12ace80b5b4ecce\"),\n  __webpack_require__(/*! dcpDocument/widgets/window/wDialog */ \"3120d707f7fb455e9bc0\")\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function require_revisiondiff($, _, Mustache) {\n  \"use strict\";\n\n  $.widget(\"dcp.dcpRevisionDiff\", $.dcp.dcpDialog, {\n    options: {\n      documentId: 0,\n      firstRevision: 0,\n      secondRevision: 0,\n      window: {\n        modal: true,\n        animation: {\n          open: {\n            effects: \"fade:in\",\n            duration: 1000\n          },\n          close: {\n            effects: \"fade:out\",\n            duration: 1000\n          }\n        },\n        actions: [\"Maximize\", \"Close\"],\n        visible: false,\n        height: \"300px\",\n        width: \"500px\",\n        title: \"Document difference\"\n      },\n      labels: {\n        first: \"First document\",\n        second: \"Second document\",\n        attributeId: \"Attribute id\",\n        attributeLabel: \"Attribute label\",\n        documentHeader:\n          '\"{{title}}\"  (Revision : {{revision}}). <br/>Created on <em>{{mdate}}</em>',\n        filterMessages: \"Filter data\",\n        showOnlyDiff: \"Show only differences\",\n        showAll: \"Show all\"\n      }\n    },\n    firstDocument: null,\n    secondDocument: null,\n\n    _create: function dcpRevisionDiff__create() {\n      var currentWidget = this,\n        $widget = $(this);\n\n      this.element.html(this.htmlCaneva());\n      __webpack_require__.e(/*! require.ensure | ensureDatatables */ \"vendors~ensureDatatables\").then((function dcpDocumentWHistory_initTable() {\n          __webpack_require__(/*! datatables.net-bs4/css/dataTables.bootstrap4.css */ \"ac0cf2e8e04136065d45\");\n          __webpack_require__(/*! datatables */ \"7006cf2c262b498f6c83\");\n          currentWidget._initDatatable();\n        }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);\n\n      this.element.data(\"dcpRevisionDiff\", this);\n\n      this._super();\n\n      this.element.on(\n        \"click\" + this.eventNamespace,\n        \".revision-diff-button-showonlydiff\",\n        function dcpRevisionDiff_showDiff() {\n          if ($widget.data(\"showOnlyDiff\")) {\n            $widget.data(\"showOnlyDiff\", false);\n            $(this)\n              .text(currentWidget.options.labels.showOnlyDiff)\n              .removeClass(\"btn-primary\");\n            currentWidget.element.find(\".revision-diff-equal\").show();\n          } else {\n            $widget.data(\"showOnlyDiff\", true);\n            currentWidget.element.find(\".revision-diff-equal\").hide();\n            $(this)\n              .text(currentWidget.options.labels.showAll)\n              .addClass(\"btn-primary\");\n          }\n        }\n      );\n    },\n\n    htmlCaneva: function dcpRevisionDiff_htmlCaneva() {\n      return (\n        '<table class=\"revision-diff-main\"><thead>' +\n        '<tr class=\"revision-diff-header\">' +\n        '<th class=\"revision-diff-header--attribute-id\"/>' +\n        '<th class=\"revision-diff-header--attribute-label\"/>' +\n        '<th class=\"revision-diff-header--first\"/>' +\n        '<th class=\"revision-diff-header--second\"/>' +\n        \"</tr>\" +\n        \"</thead></table>\"\n      );\n    },\n    _initDatatable: function dcpRevisionDiff__initDatatable() {\n      var revisionDiffWidget = this;\n      this.element\n        .find(\".revision-diff-main\")\n        .dataTable({\n          autoWidth: false,\n          ordering: false,\n          paging: false,\n          dom: \"<'revision-head'<'revision-diff-buttons'>f>rtip\",\n          // \"scrollY\": \"200px\",\n          scrollCollapse: false,\n          info: false,\n          language: {\n            search: \" \"\n          },\n          columns: [\n            {\n              data: \"attributeId\",\n              name: \"attributeId\",\n              title: revisionDiffWidget.options.labels.attributeId,\n              className: \"revision-diff-attributeid\",\n              visible: false\n            },\n            {\n              data: \"attributeLabel\",\n              name: \"attributeLabel\",\n              title: revisionDiffWidget.options.labels.attributeLabel,\n              className: \"revision-diff-attributelabel\"\n            },\n            {\n              data: \"first\",\n              name: \"first\",\n              title: revisionDiffWidget.options.labels.first,\n              className: \"revision-diff-first\",\n              render: function dcpRevisionDiff_renderFirst(data) {\n                if (_.isArray(data)) {\n                  return _.pluck(data, \"displayValue\").join(\", \");\n                } else {\n                  return data.displayValue;\n                }\n              }\n            },\n            {\n              data: \"second\",\n              name: \"second\",\n              title: revisionDiffWidget.options.labels.second,\n              className: \"revision-diff-second\",\n              render: function dcpRevisionDiff_renderSecond(data) {\n                if (_.isArray(data)) {\n                  return _.pluck(data, \"displayValue\").join(\", \");\n                } else {\n                  return data.displayValue;\n                }\n              }\n            }\n          ],\n\n          initComplete: function dcpRevisionDiff_initComplete() {\n            var api = this.api();\n            // var data = api.rows({page: 'current'}).data();\n            // Output the data for the visible rows to the browser's console\n            $(api.columns(\"first:name\").header()).html(\n              revisionDiffWidget._getDocHeader(revisionDiffWidget.firstDocument)\n            );\n            $(api.columns(\"second:name\").header()).html(\n              revisionDiffWidget._getDocHeader(\n                revisionDiffWidget.secondDocument\n              )\n            );\n            revisionDiffWidget.element\n              .find(\".dataTables_filter input\")\n              .attr(\n                \"placeholder\",\n                revisionDiffWidget.options.labels.filterMessages\n              );\n\n            revisionDiffWidget.element\n              .find(\".dataTables_filter input\")\n              .addClass(\"form-control form-control-sm\");\n\n            var firstHeadCell = revisionDiffWidget.element.find(\n              \".revision-diff-buttons\"\n            );\n            if (\n              firstHeadCell.find(\".revision-diff-button-showonlydiff\")\n                .length === 0\n            ) {\n              firstHeadCell.append(\n                $(\n                  '<button class=\"revision-diff-button-showonlydiff btn btn-secondary btn-sm\" >' +\n                    revisionDiffWidget.options.labels.showOnlyDiff +\n                    \"</button>\"\n                )\n              );\n            }\n          },\n\n          ajax: function dcpRevisionDiff_getData(data, callback) {\n            var myData = [];\n\n            $.getJSON(\n              \"api/v2/documents/\" +\n                revisionDiffWidget.options.documentId +\n                \"/revisions/\" +\n                revisionDiffWidget.options.firstRevision +\n                \".json?useTrash=true&fields=family.structure,document.properties.mdate,document.properties.revision,document.attributes\"\n            )\n              .done(function dcpRevisionDiff_getDataDone(data1) {\n                revisionDiffWidget.firstDocument = data1.data.revision;\n                $.getJSON(\n                  \"api/v2/documents/\" +\n                    revisionDiffWidget.options.documentId +\n                    \"/revisions/\" +\n                    revisionDiffWidget.options.secondRevision +\n                    \".json?useTrash=true&fields=document.properties.mdate,document.properties.revision,document.attributes\"\n                )\n                  .done(function dcpRevisionDiff_getRevisionDone(data2) {\n                    revisionDiffWidget.secondDocument = data2.data.revision;\n                    _.each(\n                      data1.data.revision.attributes,\n                      function dcpRevisionDiff_analyzeAttribute(\n                        firstValue,\n                        index\n                      ) {\n                        var secondValue = data2.data.revision.attributes[index];\n                        myData.push({\n                          attributeId: index,\n                          attributeLabel: revisionDiffWidget._findAttributeLabel(\n                            data1.data.family.structure,\n                            index\n                          ),\n                          first: firstValue,\n                          second: secondValue,\n                          DT_RowClass: revisionDiffWidget.isEqualAttributeValue(\n                            firstValue,\n                            secondValue\n                          )\n                            ? \"revision-diff-equal\"\n                            : \"revision-diff-not-equal\"\n                        });\n                      }\n                    );\n                    callback({ data: myData });\n                  })\n                  .fail(function dcpRevisionDiff_getRevisionFail(xhr) {\n                    var result = JSON.parse(xhr.responseText);\n                    window.alert(result.exceptionMessage);\n                  });\n              })\n              .fail(function dcpRevisionDiff_getDataFail(xhr) {\n                var result = JSON.parse(xhr.responseText);\n                window.alert(result.exceptionMessage);\n              });\n          }\n        })\n        .addClass(\"table table-condensed table-bordered table-hover\");\n    },\n\n    isEqualAttributeValue: function dcpRevisionDiff_isEqualAttributeValue(\n      v1,\n      v2\n    ) {\n      if (_.isEqual(v1, v2)) {\n        return true;\n      }\n\n      if (_.isArray(v1) && _.isArray(v2)) {\n        var values1 = _.pluck(v1, \"value\");\n        var values2 = _.pluck(v2, \"value\");\n        return _.isEqual(values1, values2);\n      }\n      return false;\n    },\n\n    _findAttributeLabel: function wRevisionDiffFindAttributeLabel(\n      structure,\n      aid\n    ) {\n      var scope = this;\n      var label = null;\n      _.some(structure, function dcpRevisionDiff_analyzeAttribute(\n        attributInfo,\n        attributId\n      ) {\n        if (attributId === aid) {\n          label = attributInfo.label;\n          return true;\n        }\n        if (_.isObject(attributInfo.content)) {\n          var contentLabel = scope._findAttributeLabel(\n            attributInfo.content,\n            aid\n          );\n\n          if (contentLabel !== null) {\n            label = contentLabel;\n            return true;\n          }\n        }\n        return false;\n      });\n      return label;\n    },\n\n    _getDocHeader: function wRevisionDiffGetDocHeader(documentStructure) {\n      var documentHeader = this.options.labels.documentHeader;\n      return Mustache.render(\n        documentHeader || \"\",\n        documentStructure.properties\n      );\n    },\n\n    _destroy: function _destroy() {\n      var $history = this.element.find(\".revision-diff-main\");\n\n      if ($history.DataTable) {\n        $history.DataTable().destroy();\n      }\n      this._super();\n    }\n  });\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///072cb77c211dd8456f5d\n");

/***/ }),

/***/ "07709ec177f6ae2611d8":
/*!***********************************************************!*\
  !*** ./src/vendor/Anakeen/DOCUMENT/IHM/routers/router.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*global define*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! underscore */ \"8e08e542008e4aef1f58\"), __webpack_require__(/*! backbone */ \"1858b45bf48591489d06\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function define_router(_, Backbone) {\n  \"use strict\";\n\n  return Backbone.Router.extend({\n    initialize: function router_initialize(options) {\n      var currentRouter = this;\n      this.useHistory = options.useHistory;\n\n      this.document = options.document;\n\n      //  eslint-disable-next-line no-useless-escape\n      this.route(/api\\/v2\\/documents\\/([^\\/]+)\\.html/, \"viewDocument\");\n      this.route(\n        //  eslint-disable-next-line no-useless-escape\n        /api\\/v2\\/documents\\/(.+)\\/revisions\\/([^\\/]+)\\.html/,\n        \"viewRevision\"\n      );\n      //  eslint-disable-next-line no-useless-escape\n      this.route(/api\\/v2\\/documents\\/(.+)\\/views\\/([^\\/]+)\\.html/, \"viewView\");\n      this.route(\n        //  eslint-disable-next-line no-useless-escape\n        /api\\/v2\\/documents\\/(.+)\\/revisions\\/([^\\/]+)\\/views\\/([^\\/]+)\\.html/,\n        \"viewRevisionView\"\n      );\n\n      this.route(/[^?]*\\?app=DOCUMENT([^#]+)/, \"fetch\");\n\n      // Listen to document sync and update url\n      this.document.listenTo(this.document, \"sync\", function sync() {\n        var searchArguments;\n\n        var viewId = currentRouter.document.get(\"viewId\"),\n          options = {\n            path: window.location.pathname,\n            initid: currentRouter.document.get(\"initid\"),\n            revision:\n              currentRouter.document.get(\"revision\") >= 0\n                ? currentRouter.document.get(\"revision\")\n                : undefined,\n            viewId: undefined\n          };\n        var docProperties = currentRouter.document.getServerProperties();\n\n        if (!options.initid) {\n          if (docProperties.renderMode === \"edit\") {\n            options.initid = docProperties.family.name;\n          }\n        }\n        options.viewId = viewId;\n        if (docProperties && docProperties.status === \"alive\") {\n          // No write revision if not a fixed one\n          options.revision = -1;\n        }\n\n        searchArguments = currentRouter.getUrlParameters(\n          window.location.search\n        );\n        if (searchArguments.app) {\n          // old school url\n          currentRouter.rewriteAppUrl(searchArguments, options);\n        } else {\n          // api url\n          currentRouter.rewriteApiUrl(options);\n        }\n      });\n    },\n\n    /**\n     * Rewrite access document render HTML page from url like ?app=DOCUMENT&initid=1456&revision=45\n     * @param searchArguments\n     * @param options\n     */\n    rewriteAppUrl: function router_rewriteAppUrl(searchArguments, options) {\n      var searchPart,\n        urlSecondPart = \"\",\n        newUrl;\n      if (searchArguments.app) {\n        if (options.initid) {\n          // Extract all GET parameters and rewrite if needed\n          _.each(searchArguments, function routerGetUrl(getParameter, getKey) {\n            if (\n              [\"id\", \"initid\", \"app\", \"viewId\", \"revision\"].indexOf(getKey) >= 0\n            ) {\n              searchArguments[getKey] = null;\n            }\n          });\n\n          searchPart = _.compact(\n            _.map(searchArguments, function router_composeSearchLocation(\n              GETValue,\n              GETKey\n            ) {\n              if (GETValue === null) {\n                return null;\n              }\n              return GETKey + \"=\" + encodeURIComponent(GETValue);\n            })\n          );\n\n          if (options.viewId !== \"!defaultConsultation\") {\n            urlSecondPart = \"/views/\" + encodeURIComponent(options.viewId);\n            if (options.revision >= 0) {\n              urlSecondPart +=\n                \"/revisions/\" + encodeURIComponent(options.revision);\n            }\n          } else {\n            if (options.revision >= 0) {\n              urlSecondPart =\n                \"/revisions/\" + encodeURIComponent(options.revision);\n            }\n          }\n          newUrl =\n            window.location.pathname +\n            \"api/v2/documents/\" +\n            options.initid +\n            urlSecondPart +\n            \".html\";\n          if (searchPart.length > 0) {\n            newUrl += \"?\" + searchPart.join(\"&\");\n          }\n          newUrl += window.location.hash;\n          this.navigate(newUrl, { replace: !this.useHistory });\n        }\n      }\n    },\n\n    /**\n     * Rewrite URL if mismatches detected between server information and url access\n     * @param options\n     */\n    rewriteApiUrl: function router_rewriteApiUrl(options) {\n      var parsePath = false,\n        parseHash = false,\n        beginPath = \"\",\n        urlSecondPart = \"\",\n        locationSearch = window.location.search,\n        locationHash = window.location.hash;\n      var noRecordHistory;\n      if (options.initid) {\n        parsePath = window.location.pathname.match(\n          \"(.*)api\\\\/v2\\\\/documents\\\\/(.*)\"\n        );\n        if (parsePath) {\n          beginPath = parsePath[1];\n\n          if (options.viewId !== \"!defaultConsultation\") {\n            urlSecondPart = \"/views/\" + encodeURIComponent(options.viewId);\n            if (options.revision >= 0) {\n              urlSecondPart +=\n                \"/revisions/\" + encodeURIComponent(options.revision);\n            }\n          } else {\n            if (options.revision >= 0) {\n              urlSecondPart =\n                \"/revisions/\" + encodeURIComponent(options.revision);\n            }\n          }\n\n          noRecordHistory = /documents\\/0\\.html$/.test(options.path);\n\n          parseHash = /#widgetValue{(.*)}/.exec(locationHash);\n          if (parseHash) {\n            try {\n              var hashData = JSON.parse(\"{\" + parseHash[1] + \"}\");\n\n              delete hashData.viewId;\n              delete hashData.initid;\n              delete hashData.revision;\n\n              if (hashData.customClientData) {\n                locationSearch += locationSearch ? \"&\" : \"?\";\n                locationSearch += \"customClientData=\";\n                locationSearch += encodeURIComponent(\n                  JSON.stringify(hashData.customClientData)\n                );\n                delete hashData.customClientData;\n              }\n              if (noRecordHistory) {\n                locationHash = \"\";\n              } else {\n                locationHash = \"#widgetValue\" + JSON.stringify(hashData);\n              }\n            } catch (e) {\n              //no test here\n            }\n          }\n\n          if (!this.useHistory) {\n            noRecordHistory = true;\n          }\n\n          this.navigate(\n            beginPath +\n              \"api/v2/documents/\" +\n              options.initid +\n              urlSecondPart +\n              \".html\" +\n              locationSearch +\n              locationHash,\n            { replace: noRecordHistory }\n          );\n        }\n      }\n    },\n    viewDocument: function router_viewDocument(initid) {\n      this.document.fetchDocument({ initid: initid });\n    },\n    viewRevision: function router_viewRevision(initid, revision) {\n      this.document.fetchDocument({\n        initid: initid,\n        revision: revision\n      });\n    },\n\n    viewView: function router_viewView(initid, viewId) {\n      this.document.fetchDocument({\n        initid: initid,\n        viewId: viewId\n      });\n    },\n\n    viewRevisionView: function router_viewRevisionView(\n      initid,\n      revision,\n      viewId\n    ) {\n      this.document.fetchDocument({\n        initid: initid,\n        revision: revision,\n        viewId: viewId\n      });\n    },\n    fetch: function router_fetch(searchPart) {\n      var searchObject,\n        newValues = {};\n      searchObject = this.getUrlParameters(searchPart);\n\n      if (!_.isUndefined(searchObject.id)) {\n        newValues.initid = searchObject.id;\n      }\n      if (!_.isUndefined(searchObject.initid)) {\n        newValues.initid = searchObject.initid;\n      }\n      if (!_.isUndefined(searchObject.revision)) {\n        newValues.revision = parseInt(searchObject.revision, 10);\n      } else {\n        newValues.revision = -1;\n      }\n      if (!_.isUndefined(searchObject.viewId)) {\n        newValues.viewId = searchObject.viewId;\n      } else {\n        newValues.viewId = undefined;\n      }\n      this.document.fetchDocument(newValues);\n    },\n\n    /**\n     * extract url parameters and return an simple object indexed by parameters keys\n     * @param searchPart\n     * @returns {{}}\n     */\n    getUrlParameters: function router_getUrlParameters(searchPart) {\n      var extract,\n        getParameters,\n        result = {};\n\n      if (searchPart) {\n        getParameters = searchPart.substr(1).split(\"&\");\n        for (var i = 0; i < getParameters.length; i++) {\n          extract = getParameters[i].match(/^([^=]+)=(.*)$/);\n          if (extract) {\n            result[extract[1]] = decodeURIComponent(extract[2]);\n          } else {\n            result[getParameters[i]] = \"\";\n          }\n        }\n      }\n      return result;\n    }\n  });\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMDc3MDllYzE3N2Y2YWUyNjExZDguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdmVuZG9yL0FuYWtlZW4vRE9DVU1FTlQvSUhNL3JvdXRlcnMvcm91dGVyLmpzPzU0ZWEiXSwic291cmNlc0NvbnRlbnQiOlsiLypnbG9iYWwgZGVmaW5lKi9cbmRlZmluZShbXCJ1bmRlcnNjb3JlXCIsIFwiYmFja2JvbmVcIl0sIGZ1bmN0aW9uIGRlZmluZV9yb3V0ZXIoXywgQmFja2JvbmUpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgcmV0dXJuIEJhY2tib25lLlJvdXRlci5leHRlbmQoe1xuICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uIHJvdXRlcl9pbml0aWFsaXplKG9wdGlvbnMpIHtcbiAgICAgIHZhciBjdXJyZW50Um91dGVyID0gdGhpcztcbiAgICAgIHRoaXMudXNlSGlzdG9yeSA9IG9wdGlvbnMudXNlSGlzdG9yeTtcblxuICAgICAgdGhpcy5kb2N1bWVudCA9IG9wdGlvbnMuZG9jdW1lbnQ7XG5cbiAgICAgIC8vICBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlbGVzcy1lc2NhcGVcbiAgICAgIHRoaXMucm91dGUoL2FwaVxcL3YyXFwvZG9jdW1lbnRzXFwvKFteXFwvXSspXFwuaHRtbC8sIFwidmlld0RvY3VtZW50XCIpO1xuICAgICAgdGhpcy5yb3V0ZShcbiAgICAgICAgLy8gIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2VsZXNzLWVzY2FwZVxuICAgICAgICAvYXBpXFwvdjJcXC9kb2N1bWVudHNcXC8oLispXFwvcmV2aXNpb25zXFwvKFteXFwvXSspXFwuaHRtbC8sXG4gICAgICAgIFwidmlld1JldmlzaW9uXCJcbiAgICAgICk7XG4gICAgICAvLyAgZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZWxlc3MtZXNjYXBlXG4gICAgICB0aGlzLnJvdXRlKC9hcGlcXC92MlxcL2RvY3VtZW50c1xcLyguKylcXC92aWV3c1xcLyhbXlxcL10rKVxcLmh0bWwvLCBcInZpZXdWaWV3XCIpO1xuICAgICAgdGhpcy5yb3V0ZShcbiAgICAgICAgLy8gIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2VsZXNzLWVzY2FwZVxuICAgICAgICAvYXBpXFwvdjJcXC9kb2N1bWVudHNcXC8oLispXFwvcmV2aXNpb25zXFwvKFteXFwvXSspXFwvdmlld3NcXC8oW15cXC9dKylcXC5odG1sLyxcbiAgICAgICAgXCJ2aWV3UmV2aXNpb25WaWV3XCJcbiAgICAgICk7XG5cbiAgICAgIHRoaXMucm91dGUoL1teP10qXFw/YXBwPURPQ1VNRU5UKFteI10rKS8sIFwiZmV0Y2hcIik7XG5cbiAgICAgIC8vIExpc3RlbiB0byBkb2N1bWVudCBzeW5jIGFuZCB1cGRhdGUgdXJsXG4gICAgICB0aGlzLmRvY3VtZW50Lmxpc3RlblRvKHRoaXMuZG9jdW1lbnQsIFwic3luY1wiLCBmdW5jdGlvbiBzeW5jKCkge1xuICAgICAgICB2YXIgc2VhcmNoQXJndW1lbnRzO1xuXG4gICAgICAgIHZhciB2aWV3SWQgPSBjdXJyZW50Um91dGVyLmRvY3VtZW50LmdldChcInZpZXdJZFwiKSxcbiAgICAgICAgICBvcHRpb25zID0ge1xuICAgICAgICAgICAgcGF0aDogd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgICAgICAgaW5pdGlkOiBjdXJyZW50Um91dGVyLmRvY3VtZW50LmdldChcImluaXRpZFwiKSxcbiAgICAgICAgICAgIHJldmlzaW9uOlxuICAgICAgICAgICAgICBjdXJyZW50Um91dGVyLmRvY3VtZW50LmdldChcInJldmlzaW9uXCIpID49IDBcbiAgICAgICAgICAgICAgICA/IGN1cnJlbnRSb3V0ZXIuZG9jdW1lbnQuZ2V0KFwicmV2aXNpb25cIilcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHZpZXdJZDogdW5kZWZpbmVkXG4gICAgICAgICAgfTtcbiAgICAgICAgdmFyIGRvY1Byb3BlcnRpZXMgPSBjdXJyZW50Um91dGVyLmRvY3VtZW50LmdldFNlcnZlclByb3BlcnRpZXMoKTtcblxuICAgICAgICBpZiAoIW9wdGlvbnMuaW5pdGlkKSB7XG4gICAgICAgICAgaWYgKGRvY1Byb3BlcnRpZXMucmVuZGVyTW9kZSA9PT0gXCJlZGl0XCIpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuaW5pdGlkID0gZG9jUHJvcGVydGllcy5mYW1pbHkubmFtZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgb3B0aW9ucy52aWV3SWQgPSB2aWV3SWQ7XG4gICAgICAgIGlmIChkb2NQcm9wZXJ0aWVzICYmIGRvY1Byb3BlcnRpZXMuc3RhdHVzID09PSBcImFsaXZlXCIpIHtcbiAgICAgICAgICAvLyBObyB3cml0ZSByZXZpc2lvbiBpZiBub3QgYSBmaXhlZCBvbmVcbiAgICAgICAgICBvcHRpb25zLnJldmlzaW9uID0gLTE7XG4gICAgICAgIH1cblxuICAgICAgICBzZWFyY2hBcmd1bWVudHMgPSBjdXJyZW50Um91dGVyLmdldFVybFBhcmFtZXRlcnMoXG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLnNlYXJjaFxuICAgICAgICApO1xuICAgICAgICBpZiAoc2VhcmNoQXJndW1lbnRzLmFwcCkge1xuICAgICAgICAgIC8vIG9sZCBzY2hvb2wgdXJsXG4gICAgICAgICAgY3VycmVudFJvdXRlci5yZXdyaXRlQXBwVXJsKHNlYXJjaEFyZ3VtZW50cywgb3B0aW9ucyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gYXBpIHVybFxuICAgICAgICAgIGN1cnJlbnRSb3V0ZXIucmV3cml0ZUFwaVVybChvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJld3JpdGUgYWNjZXNzIGRvY3VtZW50IHJlbmRlciBIVE1MIHBhZ2UgZnJvbSB1cmwgbGlrZSA/YXBwPURPQ1VNRU5UJmluaXRpZD0xNDU2JnJldmlzaW9uPTQ1XG4gICAgICogQHBhcmFtIHNlYXJjaEFyZ3VtZW50c1xuICAgICAqIEBwYXJhbSBvcHRpb25zXG4gICAgICovXG4gICAgcmV3cml0ZUFwcFVybDogZnVuY3Rpb24gcm91dGVyX3Jld3JpdGVBcHBVcmwoc2VhcmNoQXJndW1lbnRzLCBvcHRpb25zKSB7XG4gICAgICB2YXIgc2VhcmNoUGFydCxcbiAgICAgICAgdXJsU2Vjb25kUGFydCA9IFwiXCIsXG4gICAgICAgIG5ld1VybDtcbiAgICAgIGlmIChzZWFyY2hBcmd1bWVudHMuYXBwKSB7XG4gICAgICAgIGlmIChvcHRpb25zLmluaXRpZCkge1xuICAgICAgICAgIC8vIEV4dHJhY3QgYWxsIEdFVCBwYXJhbWV0ZXJzIGFuZCByZXdyaXRlIGlmIG5lZWRlZFxuICAgICAgICAgIF8uZWFjaChzZWFyY2hBcmd1bWVudHMsIGZ1bmN0aW9uIHJvdXRlckdldFVybChnZXRQYXJhbWV0ZXIsIGdldEtleSkge1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICBbXCJpZFwiLCBcImluaXRpZFwiLCBcImFwcFwiLCBcInZpZXdJZFwiLCBcInJldmlzaW9uXCJdLmluZGV4T2YoZ2V0S2V5KSA+PSAwXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgc2VhcmNoQXJndW1lbnRzW2dldEtleV0gPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgc2VhcmNoUGFydCA9IF8uY29tcGFjdChcbiAgICAgICAgICAgIF8ubWFwKHNlYXJjaEFyZ3VtZW50cywgZnVuY3Rpb24gcm91dGVyX2NvbXBvc2VTZWFyY2hMb2NhdGlvbihcbiAgICAgICAgICAgICAgR0VUVmFsdWUsXG4gICAgICAgICAgICAgIEdFVEtleVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIGlmIChHRVRWYWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBHRVRLZXkgKyBcIj1cIiArIGVuY29kZVVSSUNvbXBvbmVudChHRVRWYWx1ZSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICk7XG5cbiAgICAgICAgICBpZiAob3B0aW9ucy52aWV3SWQgIT09IFwiIWRlZmF1bHRDb25zdWx0YXRpb25cIikge1xuICAgICAgICAgICAgdXJsU2Vjb25kUGFydCA9IFwiL3ZpZXdzL1wiICsgZW5jb2RlVVJJQ29tcG9uZW50KG9wdGlvbnMudmlld0lkKTtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLnJldmlzaW9uID49IDApIHtcbiAgICAgICAgICAgICAgdXJsU2Vjb25kUGFydCArPVxuICAgICAgICAgICAgICAgIFwiL3JldmlzaW9ucy9cIiArIGVuY29kZVVSSUNvbXBvbmVudChvcHRpb25zLnJldmlzaW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMucmV2aXNpb24gPj0gMCkge1xuICAgICAgICAgICAgICB1cmxTZWNvbmRQYXJ0ID1cbiAgICAgICAgICAgICAgICBcIi9yZXZpc2lvbnMvXCIgKyBlbmNvZGVVUklDb21wb25lbnQob3B0aW9ucy5yZXZpc2lvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIG5ld1VybCA9XG4gICAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUgK1xuICAgICAgICAgICAgXCJhcGkvdjIvZG9jdW1lbnRzL1wiICtcbiAgICAgICAgICAgIG9wdGlvbnMuaW5pdGlkICtcbiAgICAgICAgICAgIHVybFNlY29uZFBhcnQgK1xuICAgICAgICAgICAgXCIuaHRtbFwiO1xuICAgICAgICAgIGlmIChzZWFyY2hQYXJ0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIG5ld1VybCArPSBcIj9cIiArIHNlYXJjaFBhcnQuam9pbihcIiZcIik7XG4gICAgICAgICAgfVxuICAgICAgICAgIG5ld1VybCArPSB3aW5kb3cubG9jYXRpb24uaGFzaDtcbiAgICAgICAgICB0aGlzLm5hdmlnYXRlKG5ld1VybCwgeyByZXBsYWNlOiAhdGhpcy51c2VIaXN0b3J5IH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJld3JpdGUgVVJMIGlmIG1pc21hdGNoZXMgZGV0ZWN0ZWQgYmV0d2VlbiBzZXJ2ZXIgaW5mb3JtYXRpb24gYW5kIHVybCBhY2Nlc3NcbiAgICAgKiBAcGFyYW0gb3B0aW9uc1xuICAgICAqL1xuICAgIHJld3JpdGVBcGlVcmw6IGZ1bmN0aW9uIHJvdXRlcl9yZXdyaXRlQXBpVXJsKG9wdGlvbnMpIHtcbiAgICAgIHZhciBwYXJzZVBhdGggPSBmYWxzZSxcbiAgICAgICAgcGFyc2VIYXNoID0gZmFsc2UsXG4gICAgICAgIGJlZ2luUGF0aCA9IFwiXCIsXG4gICAgICAgIHVybFNlY29uZFBhcnQgPSBcIlwiLFxuICAgICAgICBsb2NhdGlvblNlYXJjaCA9IHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gsXG4gICAgICAgIGxvY2F0aW9uSGFzaCA9IHdpbmRvdy5sb2NhdGlvbi5oYXNoO1xuICAgICAgdmFyIG5vUmVjb3JkSGlzdG9yeTtcbiAgICAgIGlmIChvcHRpb25zLmluaXRpZCkge1xuICAgICAgICBwYXJzZVBhdGggPSB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUubWF0Y2goXG4gICAgICAgICAgXCIoLiopYXBpXFxcXC92MlxcXFwvZG9jdW1lbnRzXFxcXC8oLiopXCJcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKHBhcnNlUGF0aCkge1xuICAgICAgICAgIGJlZ2luUGF0aCA9IHBhcnNlUGF0aFsxXTtcblxuICAgICAgICAgIGlmIChvcHRpb25zLnZpZXdJZCAhPT0gXCIhZGVmYXVsdENvbnN1bHRhdGlvblwiKSB7XG4gICAgICAgICAgICB1cmxTZWNvbmRQYXJ0ID0gXCIvdmlld3MvXCIgKyBlbmNvZGVVUklDb21wb25lbnQob3B0aW9ucy52aWV3SWQpO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMucmV2aXNpb24gPj0gMCkge1xuICAgICAgICAgICAgICB1cmxTZWNvbmRQYXJ0ICs9XG4gICAgICAgICAgICAgICAgXCIvcmV2aXNpb25zL1wiICsgZW5jb2RlVVJJQ29tcG9uZW50KG9wdGlvbnMucmV2aXNpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5yZXZpc2lvbiA+PSAwKSB7XG4gICAgICAgICAgICAgIHVybFNlY29uZFBhcnQgPVxuICAgICAgICAgICAgICAgIFwiL3JldmlzaW9ucy9cIiArIGVuY29kZVVSSUNvbXBvbmVudChvcHRpb25zLnJldmlzaW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBub1JlY29yZEhpc3RvcnkgPSAvZG9jdW1lbnRzXFwvMFxcLmh0bWwkLy50ZXN0KG9wdGlvbnMucGF0aCk7XG5cbiAgICAgICAgICBwYXJzZUhhc2ggPSAvI3dpZGdldFZhbHVleyguKil9Ly5leGVjKGxvY2F0aW9uSGFzaCk7XG4gICAgICAgICAgaWYgKHBhcnNlSGFzaCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgdmFyIGhhc2hEYXRhID0gSlNPTi5wYXJzZShcIntcIiArIHBhcnNlSGFzaFsxXSArIFwifVwiKTtcblxuICAgICAgICAgICAgICBkZWxldGUgaGFzaERhdGEudmlld0lkO1xuICAgICAgICAgICAgICBkZWxldGUgaGFzaERhdGEuaW5pdGlkO1xuICAgICAgICAgICAgICBkZWxldGUgaGFzaERhdGEucmV2aXNpb247XG5cbiAgICAgICAgICAgICAgaWYgKGhhc2hEYXRhLmN1c3RvbUNsaWVudERhdGEpIHtcbiAgICAgICAgICAgICAgICBsb2NhdGlvblNlYXJjaCArPSBsb2NhdGlvblNlYXJjaCA/IFwiJlwiIDogXCI/XCI7XG4gICAgICAgICAgICAgICAgbG9jYXRpb25TZWFyY2ggKz0gXCJjdXN0b21DbGllbnREYXRhPVwiO1xuICAgICAgICAgICAgICAgIGxvY2F0aW9uU2VhcmNoICs9IGVuY29kZVVSSUNvbXBvbmVudChcbiAgICAgICAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KGhhc2hEYXRhLmN1c3RvbUNsaWVudERhdGEpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBkZWxldGUgaGFzaERhdGEuY3VzdG9tQ2xpZW50RGF0YTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAobm9SZWNvcmRIaXN0b3J5KSB7XG4gICAgICAgICAgICAgICAgbG9jYXRpb25IYXNoID0gXCJcIjtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBsb2NhdGlvbkhhc2ggPSBcIiN3aWRnZXRWYWx1ZVwiICsgSlNPTi5zdHJpbmdpZnkoaGFzaERhdGEpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgIC8vbm8gdGVzdCBoZXJlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCF0aGlzLnVzZUhpc3RvcnkpIHtcbiAgICAgICAgICAgIG5vUmVjb3JkSGlzdG9yeSA9IHRydWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5uYXZpZ2F0ZShcbiAgICAgICAgICAgIGJlZ2luUGF0aCArXG4gICAgICAgICAgICAgIFwiYXBpL3YyL2RvY3VtZW50cy9cIiArXG4gICAgICAgICAgICAgIG9wdGlvbnMuaW5pdGlkICtcbiAgICAgICAgICAgICAgdXJsU2Vjb25kUGFydCArXG4gICAgICAgICAgICAgIFwiLmh0bWxcIiArXG4gICAgICAgICAgICAgIGxvY2F0aW9uU2VhcmNoICtcbiAgICAgICAgICAgICAgbG9jYXRpb25IYXNoLFxuICAgICAgICAgICAgeyByZXBsYWNlOiBub1JlY29yZEhpc3RvcnkgfVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIHZpZXdEb2N1bWVudDogZnVuY3Rpb24gcm91dGVyX3ZpZXdEb2N1bWVudChpbml0aWQpIHtcbiAgICAgIHRoaXMuZG9jdW1lbnQuZmV0Y2hEb2N1bWVudCh7IGluaXRpZDogaW5pdGlkIH0pO1xuICAgIH0sXG4gICAgdmlld1JldmlzaW9uOiBmdW5jdGlvbiByb3V0ZXJfdmlld1JldmlzaW9uKGluaXRpZCwgcmV2aXNpb24pIHtcbiAgICAgIHRoaXMuZG9jdW1lbnQuZmV0Y2hEb2N1bWVudCh7XG4gICAgICAgIGluaXRpZDogaW5pdGlkLFxuICAgICAgICByZXZpc2lvbjogcmV2aXNpb25cbiAgICAgIH0pO1xuICAgIH0sXG5cbiAgICB2aWV3VmlldzogZnVuY3Rpb24gcm91dGVyX3ZpZXdWaWV3KGluaXRpZCwgdmlld0lkKSB7XG4gICAgICB0aGlzLmRvY3VtZW50LmZldGNoRG9jdW1lbnQoe1xuICAgICAgICBpbml0aWQ6IGluaXRpZCxcbiAgICAgICAgdmlld0lkOiB2aWV3SWRcbiAgICAgIH0pO1xuICAgIH0sXG5cbiAgICB2aWV3UmV2aXNpb25WaWV3OiBmdW5jdGlvbiByb3V0ZXJfdmlld1JldmlzaW9uVmlldyhcbiAgICAgIGluaXRpZCxcbiAgICAgIHJldmlzaW9uLFxuICAgICAgdmlld0lkXG4gICAgKSB7XG4gICAgICB0aGlzLmRvY3VtZW50LmZldGNoRG9jdW1lbnQoe1xuICAgICAgICBpbml0aWQ6IGluaXRpZCxcbiAgICAgICAgcmV2aXNpb246IHJldmlzaW9uLFxuICAgICAgICB2aWV3SWQ6IHZpZXdJZFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBmZXRjaDogZnVuY3Rpb24gcm91dGVyX2ZldGNoKHNlYXJjaFBhcnQpIHtcbiAgICAgIHZhciBzZWFyY2hPYmplY3QsXG4gICAgICAgIG5ld1ZhbHVlcyA9IHt9O1xuICAgICAgc2VhcmNoT2JqZWN0ID0gdGhpcy5nZXRVcmxQYXJhbWV0ZXJzKHNlYXJjaFBhcnQpO1xuXG4gICAgICBpZiAoIV8uaXNVbmRlZmluZWQoc2VhcmNoT2JqZWN0LmlkKSkge1xuICAgICAgICBuZXdWYWx1ZXMuaW5pdGlkID0gc2VhcmNoT2JqZWN0LmlkO1xuICAgICAgfVxuICAgICAgaWYgKCFfLmlzVW5kZWZpbmVkKHNlYXJjaE9iamVjdC5pbml0aWQpKSB7XG4gICAgICAgIG5ld1ZhbHVlcy5pbml0aWQgPSBzZWFyY2hPYmplY3QuaW5pdGlkO1xuICAgICAgfVxuICAgICAgaWYgKCFfLmlzVW5kZWZpbmVkKHNlYXJjaE9iamVjdC5yZXZpc2lvbikpIHtcbiAgICAgICAgbmV3VmFsdWVzLnJldmlzaW9uID0gcGFyc2VJbnQoc2VhcmNoT2JqZWN0LnJldmlzaW9uLCAxMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXdWYWx1ZXMucmV2aXNpb24gPSAtMTtcbiAgICAgIH1cbiAgICAgIGlmICghXy5pc1VuZGVmaW5lZChzZWFyY2hPYmplY3Qudmlld0lkKSkge1xuICAgICAgICBuZXdWYWx1ZXMudmlld0lkID0gc2VhcmNoT2JqZWN0LnZpZXdJZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5ld1ZhbHVlcy52aWV3SWQgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICB0aGlzLmRvY3VtZW50LmZldGNoRG9jdW1lbnQobmV3VmFsdWVzKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogZXh0cmFjdCB1cmwgcGFyYW1ldGVycyBhbmQgcmV0dXJuIGFuIHNpbXBsZSBvYmplY3QgaW5kZXhlZCBieSBwYXJhbWV0ZXJzIGtleXNcbiAgICAgKiBAcGFyYW0gc2VhcmNoUGFydFxuICAgICAqIEByZXR1cm5zIHt7fX1cbiAgICAgKi9cbiAgICBnZXRVcmxQYXJhbWV0ZXJzOiBmdW5jdGlvbiByb3V0ZXJfZ2V0VXJsUGFyYW1ldGVycyhzZWFyY2hQYXJ0KSB7XG4gICAgICB2YXIgZXh0cmFjdCxcbiAgICAgICAgZ2V0UGFyYW1ldGVycyxcbiAgICAgICAgcmVzdWx0ID0ge307XG5cbiAgICAgIGlmIChzZWFyY2hQYXJ0KSB7XG4gICAgICAgIGdldFBhcmFtZXRlcnMgPSBzZWFyY2hQYXJ0LnN1YnN0cigxKS5zcGxpdChcIiZcIik7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZ2V0UGFyYW1ldGVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGV4dHJhY3QgPSBnZXRQYXJhbWV0ZXJzW2ldLm1hdGNoKC9eKFtePV0rKT0oLiopJC8pO1xuICAgICAgICAgIGlmIChleHRyYWN0KSB7XG4gICAgICAgICAgICByZXN1bHRbZXh0cmFjdFsxXV0gPSBkZWNvZGVVUklDb21wb25lbnQoZXh0cmFjdFsyXSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdFtnZXRQYXJhbWV0ZXJzW2ldXSA9IFwiXCI7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///07709ec177f6ae2611d8\n");

/***/ }),

/***/ "0b0c4285a24ad10a4490":
/*!****************************************************************************!*\
  !*** ./src/vendor/Anakeen/DOCUMENT/IHM/widgets/attributes/label/wLabel.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function umdRequire(root, factory) {\n  \"use strict\";\n\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n      __webpack_require__(/*! jquery */ \"127c8cf59f228bb01a21\"),\n      __webpack_require__(/*! underscore */ \"8e08e542008e4aef1f58\"),\n      __webpack_require__(/*! mustache */ \"bcd31d01884fc294fd69\"),\n      __webpack_require__(/*! dcpDocument/widgets/widget */ \"a903b12ace80b5b4ecce\")\n    ], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(window, function requireDcpLabel($, _, Mustache) {\n  \"use strict\";\n\n  $.widget(\"dcp.dcpLabel\", {\n    options: {\n      renderOptions: {\n        helpLinkIdentifier: 0\n      },\n      labels: {\n        helpTitle: \"Info\"\n      }\n    },\n    _create: function wLabel_create() {\n      this._initDom();\n      this._initActionClickEvent();\n    },\n\n    _initDom: function wLabel_initDom() {\n      this.element.addClass(\"dcpAttribute__label control-label dcpLabel\");\n      this.element.append(\n        Mustache.render(this._getTemplate() || \"\", this.options)\n      );\n      if (\n        this.options.renderOptions &&\n        this.options.renderOptions.attributeLabel\n      ) {\n        this.setLabel(this.options.renderOptions.attributeLabel);\n      }\n    },\n\n    /**\n     * Init event for #action/ links\n     *\n     * @protected\n     */\n    _initActionClickEvent: function wAttributeInitActionClickEvent() {\n      var scopeWidget = this;\n\n      this.element.on(\n        \"click.\" + this.eventNamespace,\n        'a[href^=\"#action/\"], a[data-action], button[data-action]',\n        function wAttributeActionClick(event) {\n          var $this = $(this),\n            action,\n            options,\n            eventOptions;\n\n          event.preventDefault();\n          if (event.stopPropagation) {\n            event.stopPropagation();\n          }\n\n          action = $this.data(\"action\") || $this.attr(\"href\");\n          options = action.substring(8).split(\":\");\n          eventOptions = {\n            target: event.target,\n            index: -1,\n            eventId: options.shift(),\n            options: options\n          };\n\n          scopeWidget._trigger(\"externalLinkSelected\", event, eventOptions);\n          return this;\n        }\n      );\n    },\n\n    setLabel: function wLabelSetLabel(label) {\n      this.element.find(\"label\").text(label);\n    },\n\n    setError: function wLabelSetError(message) {\n      if (message) {\n        this.element.addClass(\"has-error\");\n      } else {\n        this.element.removeClass(\"has-error\");\n      }\n    },\n\n    _getTemplate: function wLabel_getTemplate() {\n      if (this.options.templates && this.options.templates.label) {\n        return this.options.templates.label;\n      }\n      if (window.dcp && window.dcp.templates && window.dcp.templates.label) {\n        return window.dcp.templates.label;\n      }\n      throw new Error(\"Unknown label template \");\n    }\n  });\n\n  return $.fn.dcpLabel;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMGIwYzQyODVhMjRhZDEwYTQ0OTAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdmVuZG9yL0FuYWtlZW4vRE9DVU1FTlQvSUhNL3dpZGdldHMvYXR0cmlidXRlcy9sYWJlbC93TGFiZWwuanM/NGMyNiJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gdW1kUmVxdWlyZShyb290LCBmYWN0b3J5KSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShbXG4gICAgICBcImpxdWVyeVwiLFxuICAgICAgXCJ1bmRlcnNjb3JlXCIsXG4gICAgICBcIm11c3RhY2hlXCIsXG4gICAgICBcImRjcERvY3VtZW50L3dpZGdldHMvd2lkZ2V0XCJcbiAgICBdLCBmYWN0b3J5KTtcbiAgfSBlbHNlIHtcbiAgICAvL25vaW5zcGVjdGlvbiBKU1VucmVzb2x2ZWRWYXJpYWJsZVxuICAgIGZhY3Rvcnkod2luZG93LmpRdWVyeSwgd2luZG93Ll8sIHdpbmRvdy5NdXN0YWNoZSk7XG4gIH1cbn0pKHdpbmRvdywgZnVuY3Rpb24gcmVxdWlyZURjcExhYmVsKCQsIF8sIE11c3RhY2hlKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gICQud2lkZ2V0KFwiZGNwLmRjcExhYmVsXCIsIHtcbiAgICBvcHRpb25zOiB7XG4gICAgICByZW5kZXJPcHRpb25zOiB7XG4gICAgICAgIGhlbHBMaW5rSWRlbnRpZmllcjogMFxuICAgICAgfSxcbiAgICAgIGxhYmVsczoge1xuICAgICAgICBoZWxwVGl0bGU6IFwiSW5mb1wiXG4gICAgICB9XG4gICAgfSxcbiAgICBfY3JlYXRlOiBmdW5jdGlvbiB3TGFiZWxfY3JlYXRlKCkge1xuICAgICAgdGhpcy5faW5pdERvbSgpO1xuICAgICAgdGhpcy5faW5pdEFjdGlvbkNsaWNrRXZlbnQoKTtcbiAgICB9LFxuXG4gICAgX2luaXREb206IGZ1bmN0aW9uIHdMYWJlbF9pbml0RG9tKCkge1xuICAgICAgdGhpcy5lbGVtZW50LmFkZENsYXNzKFwiZGNwQXR0cmlidXRlX19sYWJlbCBjb250cm9sLWxhYmVsIGRjcExhYmVsXCIpO1xuICAgICAgdGhpcy5lbGVtZW50LmFwcGVuZChcbiAgICAgICAgTXVzdGFjaGUucmVuZGVyKHRoaXMuX2dldFRlbXBsYXRlKCkgfHwgXCJcIiwgdGhpcy5vcHRpb25zKVxuICAgICAgKTtcbiAgICAgIGlmIChcbiAgICAgICAgdGhpcy5vcHRpb25zLnJlbmRlck9wdGlvbnMgJiZcbiAgICAgICAgdGhpcy5vcHRpb25zLnJlbmRlck9wdGlvbnMuYXR0cmlidXRlTGFiZWxcbiAgICAgICkge1xuICAgICAgICB0aGlzLnNldExhYmVsKHRoaXMub3B0aW9ucy5yZW5kZXJPcHRpb25zLmF0dHJpYnV0ZUxhYmVsKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogSW5pdCBldmVudCBmb3IgI2FjdGlvbi8gbGlua3NcbiAgICAgKlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBfaW5pdEFjdGlvbkNsaWNrRXZlbnQ6IGZ1bmN0aW9uIHdBdHRyaWJ1dGVJbml0QWN0aW9uQ2xpY2tFdmVudCgpIHtcbiAgICAgIHZhciBzY29wZVdpZGdldCA9IHRoaXM7XG5cbiAgICAgIHRoaXMuZWxlbWVudC5vbihcbiAgICAgICAgXCJjbGljay5cIiArIHRoaXMuZXZlbnROYW1lc3BhY2UsXG4gICAgICAgICdhW2hyZWZePVwiI2FjdGlvbi9cIl0sIGFbZGF0YS1hY3Rpb25dLCBidXR0b25bZGF0YS1hY3Rpb25dJyxcbiAgICAgICAgZnVuY3Rpb24gd0F0dHJpYnV0ZUFjdGlvbkNsaWNrKGV2ZW50KSB7XG4gICAgICAgICAgdmFyICR0aGlzID0gJCh0aGlzKSxcbiAgICAgICAgICAgIGFjdGlvbixcbiAgICAgICAgICAgIG9wdGlvbnMsXG4gICAgICAgICAgICBldmVudE9wdGlvbnM7XG5cbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIGlmIChldmVudC5zdG9wUHJvcGFnYXRpb24pIHtcbiAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGFjdGlvbiA9ICR0aGlzLmRhdGEoXCJhY3Rpb25cIikgfHwgJHRoaXMuYXR0cihcImhyZWZcIik7XG4gICAgICAgICAgb3B0aW9ucyA9IGFjdGlvbi5zdWJzdHJpbmcoOCkuc3BsaXQoXCI6XCIpO1xuICAgICAgICAgIGV2ZW50T3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHRhcmdldDogZXZlbnQudGFyZ2V0LFxuICAgICAgICAgICAgaW5kZXg6IC0xLFxuICAgICAgICAgICAgZXZlbnRJZDogb3B0aW9ucy5zaGlmdCgpLFxuICAgICAgICAgICAgb3B0aW9uczogb3B0aW9uc1xuICAgICAgICAgIH07XG5cbiAgICAgICAgICBzY29wZVdpZGdldC5fdHJpZ2dlcihcImV4dGVybmFsTGlua1NlbGVjdGVkXCIsIGV2ZW50LCBldmVudE9wdGlvbnMpO1xuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICApO1xuICAgIH0sXG5cbiAgICBzZXRMYWJlbDogZnVuY3Rpb24gd0xhYmVsU2V0TGFiZWwobGFiZWwpIHtcbiAgICAgIHRoaXMuZWxlbWVudC5maW5kKFwibGFiZWxcIikudGV4dChsYWJlbCk7XG4gICAgfSxcblxuICAgIHNldEVycm9yOiBmdW5jdGlvbiB3TGFiZWxTZXRFcnJvcihtZXNzYWdlKSB7XG4gICAgICBpZiAobWVzc2FnZSkge1xuICAgICAgICB0aGlzLmVsZW1lbnQuYWRkQ2xhc3MoXCJoYXMtZXJyb3JcIik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmVsZW1lbnQucmVtb3ZlQ2xhc3MoXCJoYXMtZXJyb3JcIik7XG4gICAgICB9XG4gICAgfSxcblxuICAgIF9nZXRUZW1wbGF0ZTogZnVuY3Rpb24gd0xhYmVsX2dldFRlbXBsYXRlKCkge1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy50ZW1wbGF0ZXMgJiYgdGhpcy5vcHRpb25zLnRlbXBsYXRlcy5sYWJlbCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLnRlbXBsYXRlcy5sYWJlbDtcbiAgICAgIH1cbiAgICAgIGlmICh3aW5kb3cuZGNwICYmIHdpbmRvdy5kY3AudGVtcGxhdGVzICYmIHdpbmRvdy5kY3AudGVtcGxhdGVzLmxhYmVsKSB7XG4gICAgICAgIHJldHVybiB3aW5kb3cuZGNwLnRlbXBsYXRlcy5sYWJlbDtcbiAgICAgIH1cbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlVua25vd24gbGFiZWwgdGVtcGxhdGUgXCIpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuICQuZm4uZGNwTGFiZWw7XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQSxXQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///0b0c4285a24ad10a4490\n");

/***/ }),

/***/ "0d65a9ae3080ca4d0345":
/*!*****************************************************************!*\
  !*** ./src/vendor/Anakeen/DOCUMENT/IHM/models/mDocumentLock.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! underscore */ \"8e08e542008e4aef1f58\"), __webpack_require__(/*! backbone */ \"1858b45bf48591489d06\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function require_lock(_, Backbone) {\n  \"use strict\";\n\n  var urlCore = _.template(\"api/v2/documents/<%- initid %>/locks/<%- type %>\");\n  var urlView = _.template(\n    \"api/v2/documents/<%- initid %>/views/<%- viewId %>/locks/<%- type %>\"\n  );\n\n  return Backbone.Model.extend({\n    typeModel: \"ddui:lock\",\n    idAttribute: \"initid\",\n    viewId: \"\",\n\n    url: function mDocumentLock_url() {\n      //console.log(\"lock model\", this.get(\"viewId\"));\n      if (this.get(\"viewId\")) {\n        return urlView({\n          initid: this.get(\"initid\"),\n          type: this.get(\"type\"),\n          viewId: this.get(\"viewId\")\n        });\n      } else {\n        return urlCore({\n          initid: this.get(\"initid\"),\n          type: this.get(\"type\")\n        });\n      }\n    }\n  });\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMGQ2NWE5YWUzMDgwY2E0ZDAzNDUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdmVuZG9yL0FuYWtlZW4vRE9DVU1FTlQvSUhNL21vZGVscy9tRG9jdW1lbnRMb2NrLmpzP2UyYmIiXSwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKFtcInVuZGVyc2NvcmVcIiwgXCJiYWNrYm9uZVwiXSwgZnVuY3Rpb24gcmVxdWlyZV9sb2NrKF8sIEJhY2tib25lKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciB1cmxDb3JlID0gXy50ZW1wbGF0ZShcImFwaS92Mi9kb2N1bWVudHMvPCUtIGluaXRpZCAlPi9sb2Nrcy88JS0gdHlwZSAlPlwiKTtcbiAgdmFyIHVybFZpZXcgPSBfLnRlbXBsYXRlKFxuICAgIFwiYXBpL3YyL2RvY3VtZW50cy88JS0gaW5pdGlkICU+L3ZpZXdzLzwlLSB2aWV3SWQgJT4vbG9ja3MvPCUtIHR5cGUgJT5cIlxuICApO1xuXG4gIHJldHVybiBCYWNrYm9uZS5Nb2RlbC5leHRlbmQoe1xuICAgIHR5cGVNb2RlbDogXCJkZHVpOmxvY2tcIixcbiAgICBpZEF0dHJpYnV0ZTogXCJpbml0aWRcIixcbiAgICB2aWV3SWQ6IFwiXCIsXG5cbiAgICB1cmw6IGZ1bmN0aW9uIG1Eb2N1bWVudExvY2tfdXJsKCkge1xuICAgICAgLy9jb25zb2xlLmxvZyhcImxvY2sgbW9kZWxcIiwgdGhpcy5nZXQoXCJ2aWV3SWRcIikpO1xuICAgICAgaWYgKHRoaXMuZ2V0KFwidmlld0lkXCIpKSB7XG4gICAgICAgIHJldHVybiB1cmxWaWV3KHtcbiAgICAgICAgICBpbml0aWQ6IHRoaXMuZ2V0KFwiaW5pdGlkXCIpLFxuICAgICAgICAgIHR5cGU6IHRoaXMuZ2V0KFwidHlwZVwiKSxcbiAgICAgICAgICB2aWV3SWQ6IHRoaXMuZ2V0KFwidmlld0lkXCIpXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHVybENvcmUoe1xuICAgICAgICAgIGluaXRpZDogdGhpcy5nZXQoXCJpbml0aWRcIiksXG4gICAgICAgICAgdHlwZTogdGhpcy5nZXQoXCJ0eXBlXCIpXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///0d65a9ae3080ca4d0345\n");

/***/ }),

/***/ "127c8cf59f228bb01a21":
/*!*************************!*\
  !*** external "jQuery" ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = jQuery;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTI3YzhjZjU5ZjIyOGJiMDFhMjEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJqUXVlcnlcIj9jZDBjIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0galF1ZXJ5OyJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///127c8cf59f228bb01a21\n");

/***/ }),

/***/ "1858b45bf48591489d06":
/*!*******************************************!*\
  !*** ./node_modules/backbone/backbone.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;//     Backbone.js 1.3.3\n\n//     (c) 2010-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n//     Backbone may be freely distributed under the MIT license.\n//     For all details and documentation:\n//     http://backbonejs.org\n\n(function(factory) {\n\n  // Establish the root object, `window` (`self`) in the browser, or `global` on the server.\n  // We use `self` instead of `window` for `WebWorker` support.\n  var root = (typeof self == 'object' && self.self === self && self) ||\n            (typeof global == 'object' && global.global === global && global);\n\n  // Set up Backbone appropriately for the environment. Start with AMD.\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! underscore */ \"8e08e542008e4aef1f58\"), __webpack_require__(/*! jquery */ \"127c8cf59f228bb01a21\"), exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function(_, $, exports) {\n      // Export global even in AMD case in case this script is loaded with\n      // others that may still expect a global Backbone.\n      root.Backbone = factory(root, exports, _, $);\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n  // Next for Node.js or CommonJS. jQuery may not be needed as a module.\n  } else { var _, $; }\n\n})(function(root, Backbone, _, $) {\n\n  // Initial Setup\n  // -------------\n\n  // Save the previous value of the `Backbone` variable, so that it can be\n  // restored later on, if `noConflict` is used.\n  var previousBackbone = root.Backbone;\n\n  // Create a local reference to a common array method we'll want to use later.\n  var slice = Array.prototype.slice;\n\n  // Current version of the library. Keep in sync with `package.json`.\n  Backbone.VERSION = '1.3.3';\n\n  // For Backbone's purposes, jQuery, Zepto, Ender, or My Library (kidding) owns\n  // the `$` variable.\n  Backbone.$ = $;\n\n  // Runs Backbone.js in *noConflict* mode, returning the `Backbone` variable\n  // to its previous owner. Returns a reference to this Backbone object.\n  Backbone.noConflict = function() {\n    root.Backbone = previousBackbone;\n    return this;\n  };\n\n  // Turn on `emulateHTTP` to support legacy HTTP servers. Setting this option\n  // will fake `\"PATCH\"`, `\"PUT\"` and `\"DELETE\"` requests via the `_method` parameter and\n  // set a `X-Http-Method-Override` header.\n  Backbone.emulateHTTP = false;\n\n  // Turn on `emulateJSON` to support legacy servers that can't deal with direct\n  // `application/json` requests ... this will encode the body as\n  // `application/x-www-form-urlencoded` instead and will send the model in a\n  // form param named `model`.\n  Backbone.emulateJSON = false;\n\n  // Proxy Backbone class methods to Underscore functions, wrapping the model's\n  // `attributes` object or collection's `models` array behind the scenes.\n  //\n  // collection.filter(function(model) { return model.get('age') > 10 });\n  // collection.each(this.addView);\n  //\n  // `Function#apply` can be slow so we use the method's arg count, if we know it.\n  var addMethod = function(length, method, attribute) {\n    switch (length) {\n      case 1: return function() {\n        return _[method](this[attribute]);\n      };\n      case 2: return function(value) {\n        return _[method](this[attribute], value);\n      };\n      case 3: return function(iteratee, context) {\n        return _[method](this[attribute], cb(iteratee, this), context);\n      };\n      case 4: return function(iteratee, defaultVal, context) {\n        return _[method](this[attribute], cb(iteratee, this), defaultVal, context);\n      };\n      default: return function() {\n        var args = slice.call(arguments);\n        args.unshift(this[attribute]);\n        return _[method].apply(_, args);\n      };\n    }\n  };\n  var addUnderscoreMethods = function(Class, methods, attribute) {\n    _.each(methods, function(length, method) {\n      if (_[method]) Class.prototype[method] = addMethod(length, method, attribute);\n    });\n  };\n\n  // Support `collection.sortBy('attr')` and `collection.findWhere({id: 1})`.\n  var cb = function(iteratee, instance) {\n    if (_.isFunction(iteratee)) return iteratee;\n    if (_.isObject(iteratee) && !instance._isModel(iteratee)) return modelMatcher(iteratee);\n    if (_.isString(iteratee)) return function(model) { return model.get(iteratee); };\n    return iteratee;\n  };\n  var modelMatcher = function(attrs) {\n    var matcher = _.matches(attrs);\n    return function(model) {\n      return matcher(model.attributes);\n    };\n  };\n\n  // Backbone.Events\n  // ---------------\n\n  // A module that can be mixed in to *any object* in order to provide it with\n  // a custom event channel. You may bind a callback to an event with `on` or\n  // remove with `off`; `trigger`-ing an event fires all callbacks in\n  // succession.\n  //\n  //     var object = {};\n  //     _.extend(object, Backbone.Events);\n  //     object.on('expand', function(){ alert('expanded'); });\n  //     object.trigger('expand');\n  //\n  var Events = Backbone.Events = {};\n\n  // Regular expression used to split event strings.\n  var eventSplitter = /\\s+/;\n\n  // Iterates over the standard `event, callback` (as well as the fancy multiple\n  // space-separated events `\"change blur\", callback` and jQuery-style event\n  // maps `{event: callback}`).\n  var eventsApi = function(iteratee, events, name, callback, opts) {\n    var i = 0, names;\n    if (name && typeof name === 'object') {\n      // Handle event maps.\n      if (callback !== void 0 && 'context' in opts && opts.context === void 0) opts.context = callback;\n      for (names = _.keys(name); i < names.length ; i++) {\n        events = eventsApi(iteratee, events, names[i], name[names[i]], opts);\n      }\n    } else if (name && eventSplitter.test(name)) {\n      // Handle space-separated event names by delegating them individually.\n      for (names = name.split(eventSplitter); i < names.length; i++) {\n        events = iteratee(events, names[i], callback, opts);\n      }\n    } else {\n      // Finally, standard events.\n      events = iteratee(events, name, callback, opts);\n    }\n    return events;\n  };\n\n  // Bind an event to a `callback` function. Passing `\"all\"` will bind\n  // the callback to all events fired.\n  Events.on = function(name, callback, context) {\n    return internalOn(this, name, callback, context);\n  };\n\n  // Guard the `listening` argument from the public API.\n  var internalOn = function(obj, name, callback, context, listening) {\n    obj._events = eventsApi(onApi, obj._events || {}, name, callback, {\n      context: context,\n      ctx: obj,\n      listening: listening\n    });\n\n    if (listening) {\n      var listeners = obj._listeners || (obj._listeners = {});\n      listeners[listening.id] = listening;\n    }\n\n    return obj;\n  };\n\n  // Inversion-of-control versions of `on`. Tell *this* object to listen to\n  // an event in another object... keeping track of what it's listening to\n  // for easier unbinding later.\n  Events.listenTo = function(obj, name, callback) {\n    if (!obj) return this;\n    var id = obj._listenId || (obj._listenId = _.uniqueId('l'));\n    var listeningTo = this._listeningTo || (this._listeningTo = {});\n    var listening = listeningTo[id];\n\n    // This object is not listening to any other events on `obj` yet.\n    // Setup the necessary references to track the listening callbacks.\n    if (!listening) {\n      var thisId = this._listenId || (this._listenId = _.uniqueId('l'));\n      listening = listeningTo[id] = {obj: obj, objId: id, id: thisId, listeningTo: listeningTo, count: 0};\n    }\n\n    // Bind callbacks on obj, and keep track of them on listening.\n    internalOn(obj, name, callback, this, listening);\n    return this;\n  };\n\n  // The reducing API that adds a callback to the `events` object.\n  var onApi = function(events, name, callback, options) {\n    if (callback) {\n      var handlers = events[name] || (events[name] = []);\n      var context = options.context, ctx = options.ctx, listening = options.listening;\n      if (listening) listening.count++;\n\n      handlers.push({callback: callback, context: context, ctx: context || ctx, listening: listening});\n    }\n    return events;\n  };\n\n  // Remove one or many callbacks. If `context` is null, removes all\n  // callbacks with that function. If `callback` is null, removes all\n  // callbacks for the event. If `name` is null, removes all bound\n  // callbacks for all events.\n  Events.off = function(name, callback, context) {\n    if (!this._events) return this;\n    this._events = eventsApi(offApi, this._events, name, callback, {\n      context: context,\n      listeners: this._listeners\n    });\n    return this;\n  };\n\n  // Tell this object to stop listening to either specific events ... or\n  // to every object it's currently listening to.\n  Events.stopListening = function(obj, name, callback) {\n    var listeningTo = this._listeningTo;\n    if (!listeningTo) return this;\n\n    var ids = obj ? [obj._listenId] : _.keys(listeningTo);\n\n    for (var i = 0; i < ids.length; i++) {\n      var listening = listeningTo[ids[i]];\n\n      // If listening doesn't exist, this object is not currently\n      // listening to obj. Break out early.\n      if (!listening) break;\n\n      listening.obj.off(name, callback, this);\n    }\n\n    return this;\n  };\n\n  // The reducing API that removes a callback from the `events` object.\n  var offApi = function(events, name, callback, options) {\n    if (!events) return;\n\n    var i = 0, listening;\n    var context = options.context, listeners = options.listeners;\n\n    // Delete all events listeners and \"drop\" events.\n    if (!name && !callback && !context) {\n      var ids = _.keys(listeners);\n      for (; i < ids.length; i++) {\n        listening = listeners[ids[i]];\n        delete listeners[listening.id];\n        delete listening.listeningTo[listening.objId];\n      }\n      return;\n    }\n\n    var names = name ? [name] : _.keys(events);\n    for (; i < names.length; i++) {\n      name = names[i];\n      var handlers = events[name];\n\n      // Bail out if there are no events stored.\n      if (!handlers) break;\n\n      // Replace events if there are any remaining.  Otherwise, clean up.\n      var remaining = [];\n      for (var j = 0; j < handlers.length; j++) {\n        var handler = handlers[j];\n        if (\n          callback && callback !== handler.callback &&\n            callback !== handler.callback._callback ||\n              context && context !== handler.context\n        ) {\n          remaining.push(handler);\n        } else {\n          listening = handler.listening;\n          if (listening && --listening.count === 0) {\n            delete listeners[listening.id];\n            delete listening.listeningTo[listening.objId];\n          }\n        }\n      }\n\n      // Update tail event if the list has any events.  Otherwise, clean up.\n      if (remaining.length) {\n        events[name] = remaining;\n      } else {\n        delete events[name];\n      }\n    }\n    return events;\n  };\n\n  // Bind an event to only be triggered a single time. After the first time\n  // the callback is invoked, its listener will be removed. If multiple events\n  // are passed in using the space-separated syntax, the handler will fire\n  // once for each event, not once for a combination of all events.\n  Events.once = function(name, callback, context) {\n    // Map the event into a `{event: once}` object.\n    var events = eventsApi(onceMap, {}, name, callback, _.bind(this.off, this));\n    if (typeof name === 'string' && context == null) callback = void 0;\n    return this.on(events, callback, context);\n  };\n\n  // Inversion-of-control versions of `once`.\n  Events.listenToOnce = function(obj, name, callback) {\n    // Map the event into a `{event: once}` object.\n    var events = eventsApi(onceMap, {}, name, callback, _.bind(this.stopListening, this, obj));\n    return this.listenTo(obj, events);\n  };\n\n  // Reduces the event callbacks into a map of `{event: onceWrapper}`.\n  // `offer` unbinds the `onceWrapper` after it has been called.\n  var onceMap = function(map, name, callback, offer) {\n    if (callback) {\n      var once = map[name] = _.once(function() {\n        offer(name, once);\n        callback.apply(this, arguments);\n      });\n      once._callback = callback;\n    }\n    return map;\n  };\n\n  // Trigger one or many events, firing all bound callbacks. Callbacks are\n  // passed the same arguments as `trigger` is, apart from the event name\n  // (unless you're listening on `\"all\"`, which will cause your callback to\n  // receive the true name of the event as the first argument).\n  Events.trigger = function(name) {\n    if (!this._events) return this;\n\n    var length = Math.max(0, arguments.length - 1);\n    var args = Array(length);\n    for (var i = 0; i < length; i++) args[i] = arguments[i + 1];\n\n    eventsApi(triggerApi, this._events, name, void 0, args);\n    return this;\n  };\n\n  // Handles triggering the appropriate event callbacks.\n  var triggerApi = function(objEvents, name, callback, args) {\n    if (objEvents) {\n      var events = objEvents[name];\n      var allEvents = objEvents.all;\n      if (events && allEvents) allEvents = allEvents.slice();\n      if (events) triggerEvents(events, args);\n      if (allEvents) triggerEvents(allEvents, [name].concat(args));\n    }\n    return objEvents;\n  };\n\n  // A difficult-to-believe, but optimized internal dispatch function for\n  // triggering events. Tries to keep the usual cases speedy (most internal\n  // Backbone events have 3 arguments).\n  var triggerEvents = function(events, args) {\n    var ev, i = -1, l = events.length, a1 = args[0], a2 = args[1], a3 = args[2];\n    switch (args.length) {\n      case 0: while (++i < l) (ev = events[i]).callback.call(ev.ctx); return;\n      case 1: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1); return;\n      case 2: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2); return;\n      case 3: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2, a3); return;\n      default: while (++i < l) (ev = events[i]).callback.apply(ev.ctx, args); return;\n    }\n  };\n\n  // Aliases for backwards compatibility.\n  Events.bind   = Events.on;\n  Events.unbind = Events.off;\n\n  // Allow the `Backbone` object to serve as a global event bus, for folks who\n  // want global \"pubsub\" in a convenient place.\n  _.extend(Backbone, Events);\n\n  // Backbone.Model\n  // --------------\n\n  // Backbone **Models** are the basic data object in the framework --\n  // frequently representing a row in a table in a database on your server.\n  // A discrete chunk of data and a bunch of useful, related methods for\n  // performing computations and transformations on that data.\n\n  // Create a new model with the specified attributes. A client id (`cid`)\n  // is automatically generated and assigned for you.\n  var Model = Backbone.Model = function(attributes, options) {\n    var attrs = attributes || {};\n    options || (options = {});\n    this.cid = _.uniqueId(this.cidPrefix);\n    this.attributes = {};\n    if (options.collection) this.collection = options.collection;\n    if (options.parse) attrs = this.parse(attrs, options) || {};\n    var defaults = _.result(this, 'defaults');\n    attrs = _.defaults(_.extend({}, defaults, attrs), defaults);\n    this.set(attrs, options);\n    this.changed = {};\n    this.initialize.apply(this, arguments);\n  };\n\n  // Attach all inheritable methods to the Model prototype.\n  _.extend(Model.prototype, Events, {\n\n    // A hash of attributes whose current and previous value differ.\n    changed: null,\n\n    // The value returned during the last failed validation.\n    validationError: null,\n\n    // The default name for the JSON `id` attribute is `\"id\"`. MongoDB and\n    // CouchDB users may want to set this to `\"_id\"`.\n    idAttribute: 'id',\n\n    // The prefix is used to create the client id which is used to identify models locally.\n    // You may want to override this if you're experiencing name clashes with model ids.\n    cidPrefix: 'c',\n\n    // Initialize is an empty function by default. Override it with your own\n    // initialization logic.\n    initialize: function(){},\n\n    // Return a copy of the model's `attributes` object.\n    toJSON: function(options) {\n      return _.clone(this.attributes);\n    },\n\n    // Proxy `Backbone.sync` by default -- but override this if you need\n    // custom syncing semantics for *this* particular model.\n    sync: function() {\n      return Backbone.sync.apply(this, arguments);\n    },\n\n    // Get the value of an attribute.\n    get: function(attr) {\n      return this.attributes[attr];\n    },\n\n    // Get the HTML-escaped value of an attribute.\n    escape: function(attr) {\n      return _.escape(this.get(attr));\n    },\n\n    // Returns `true` if the attribute contains a value that is not null\n    // or undefined.\n    has: function(attr) {\n      return this.get(attr) != null;\n    },\n\n    // Special-cased proxy to underscore's `_.matches` method.\n    matches: function(attrs) {\n      return !!_.iteratee(attrs, this)(this.attributes);\n    },\n\n    // Set a hash of model attributes on the object, firing `\"change\"`. This is\n    // the core primitive operation of a model, updating the data and notifying\n    // anyone who needs to know about the change in state. The heart of the beast.\n    set: function(key, val, options) {\n      if (key == null) return this;\n\n      // Handle both `\"key\", value` and `{key: value}` -style arguments.\n      var attrs;\n      if (typeof key === 'object') {\n        attrs = key;\n        options = val;\n      } else {\n        (attrs = {})[key] = val;\n      }\n\n      options || (options = {});\n\n      // Run validation.\n      if (!this._validate(attrs, options)) return false;\n\n      // Extract attributes and options.\n      var unset      = options.unset;\n      var silent     = options.silent;\n      var changes    = [];\n      var changing   = this._changing;\n      this._changing = true;\n\n      if (!changing) {\n        this._previousAttributes = _.clone(this.attributes);\n        this.changed = {};\n      }\n\n      var current = this.attributes;\n      var changed = this.changed;\n      var prev    = this._previousAttributes;\n\n      // For each `set` attribute, update or delete the current value.\n      for (var attr in attrs) {\n        val = attrs[attr];\n        if (!_.isEqual(current[attr], val)) changes.push(attr);\n        if (!_.isEqual(prev[attr], val)) {\n          changed[attr] = val;\n        } else {\n          delete changed[attr];\n        }\n        unset ? delete current[attr] : current[attr] = val;\n      }\n\n      // Update the `id`.\n      if (this.idAttribute in attrs) this.id = this.get(this.idAttribute);\n\n      // Trigger all relevant attribute changes.\n      if (!silent) {\n        if (changes.length) this._pending = options;\n        for (var i = 0; i < changes.length; i++) {\n          this.trigger('change:' + changes[i], this, current[changes[i]], options);\n        }\n      }\n\n      // You might be wondering why there's a `while` loop here. Changes can\n      // be recursively nested within `\"change\"` events.\n      if (changing) return this;\n      if (!silent) {\n        while (this._pending) {\n          options = this._pending;\n          this._pending = false;\n          this.trigger('change', this, options);\n        }\n      }\n      this._pending = false;\n      this._changing = false;\n      return this;\n    },\n\n    // Remove an attribute from the model, firing `\"change\"`. `unset` is a noop\n    // if the attribute doesn't exist.\n    unset: function(attr, options) {\n      return this.set(attr, void 0, _.extend({}, options, {unset: true}));\n    },\n\n    // Clear all attributes on the model, firing `\"change\"`.\n    clear: function(options) {\n      var attrs = {};\n      for (var key in this.attributes) attrs[key] = void 0;\n      return this.set(attrs, _.extend({}, options, {unset: true}));\n    },\n\n    // Determine if the model has changed since the last `\"change\"` event.\n    // If you specify an attribute name, determine if that attribute has changed.\n    hasChanged: function(attr) {\n      if (attr == null) return !_.isEmpty(this.changed);\n      return _.has(this.changed, attr);\n    },\n\n    // Return an object containing all the attributes that have changed, or\n    // false if there are no changed attributes. Useful for determining what\n    // parts of a view need to be updated and/or what attributes need to be\n    // persisted to the server. Unset attributes will be set to undefined.\n    // You can also pass an attributes object to diff against the model,\n    // determining if there *would be* a change.\n    changedAttributes: function(diff) {\n      if (!diff) return this.hasChanged() ? _.clone(this.changed) : false;\n      var old = this._changing ? this._previousAttributes : this.attributes;\n      var changed = {};\n      for (var attr in diff) {\n        var val = diff[attr];\n        if (_.isEqual(old[attr], val)) continue;\n        changed[attr] = val;\n      }\n      return _.size(changed) ? changed : false;\n    },\n\n    // Get the previous value of an attribute, recorded at the time the last\n    // `\"change\"` event was fired.\n    previous: function(attr) {\n      if (attr == null || !this._previousAttributes) return null;\n      return this._previousAttributes[attr];\n    },\n\n    // Get all of the attributes of the model at the time of the previous\n    // `\"change\"` event.\n    previousAttributes: function() {\n      return _.clone(this._previousAttributes);\n    },\n\n    // Fetch the model from the server, merging the response with the model's\n    // local attributes. Any changed attributes will trigger a \"change\" event.\n    fetch: function(options) {\n      options = _.extend({parse: true}, options);\n      var model = this;\n      var success = options.success;\n      options.success = function(resp) {\n        var serverAttrs = options.parse ? model.parse(resp, options) : resp;\n        if (!model.set(serverAttrs, options)) return false;\n        if (success) success.call(options.context, model, resp, options);\n        model.trigger('sync', model, resp, options);\n      };\n      wrapError(this, options);\n      return this.sync('read', this, options);\n    },\n\n    // Set a hash of model attributes, and sync the model to the server.\n    // If the server returns an attributes hash that differs, the model's\n    // state will be `set` again.\n    save: function(key, val, options) {\n      // Handle both `\"key\", value` and `{key: value}` -style arguments.\n      var attrs;\n      if (key == null || typeof key === 'object') {\n        attrs = key;\n        options = val;\n      } else {\n        (attrs = {})[key] = val;\n      }\n\n      options = _.extend({validate: true, parse: true}, options);\n      var wait = options.wait;\n\n      // If we're not waiting and attributes exist, save acts as\n      // `set(attr).save(null, opts)` with validation. Otherwise, check if\n      // the model will be valid when the attributes, if any, are set.\n      if (attrs && !wait) {\n        if (!this.set(attrs, options)) return false;\n      } else if (!this._validate(attrs, options)) {\n        return false;\n      }\n\n      // After a successful server-side save, the client is (optionally)\n      // updated with the server-side state.\n      var model = this;\n      var success = options.success;\n      var attributes = this.attributes;\n      options.success = function(resp) {\n        // Ensure attributes are restored during synchronous saves.\n        model.attributes = attributes;\n        var serverAttrs = options.parse ? model.parse(resp, options) : resp;\n        if (wait) serverAttrs = _.extend({}, attrs, serverAttrs);\n        if (serverAttrs && !model.set(serverAttrs, options)) return false;\n        if (success) success.call(options.context, model, resp, options);\n        model.trigger('sync', model, resp, options);\n      };\n      wrapError(this, options);\n\n      // Set temporary attributes if `{wait: true}` to properly find new ids.\n      if (attrs && wait) this.attributes = _.extend({}, attributes, attrs);\n\n      var method = this.isNew() ? 'create' : (options.patch ? 'patch' : 'update');\n      if (method === 'patch' && !options.attrs) options.attrs = attrs;\n      var xhr = this.sync(method, this, options);\n\n      // Restore attributes.\n      this.attributes = attributes;\n\n      return xhr;\n    },\n\n    // Destroy this model on the server if it was already persisted.\n    // Optimistically removes the model from its collection, if it has one.\n    // If `wait: true` is passed, waits for the server to respond before removal.\n    destroy: function(options) {\n      options = options ? _.clone(options) : {};\n      var model = this;\n      var success = options.success;\n      var wait = options.wait;\n\n      var destroy = function() {\n        model.stopListening();\n        model.trigger('destroy', model, model.collection, options);\n      };\n\n      options.success = function(resp) {\n        if (wait) destroy();\n        if (success) success.call(options.context, model, resp, options);\n        if (!model.isNew()) model.trigger('sync', model, resp, options);\n      };\n\n      var xhr = false;\n      if (this.isNew()) {\n        _.defer(options.success);\n      } else {\n        wrapError(this, options);\n        xhr = this.sync('delete', this, options);\n      }\n      if (!wait) destroy();\n      return xhr;\n    },\n\n    // Default URL for the model's representation on the server -- if you're\n    // using Backbone's restful methods, override this to change the endpoint\n    // that will be called.\n    url: function() {\n      var base =\n        _.result(this, 'urlRoot') ||\n        _.result(this.collection, 'url') ||\n        urlError();\n      if (this.isNew()) return base;\n      var id = this.get(this.idAttribute);\n      return base.replace(/[^\\/]$/, '$&/') + encodeURIComponent(id);\n    },\n\n    // **parse** converts a response into the hash of attributes to be `set` on\n    // the model. The default implementation is just to pass the response along.\n    parse: function(resp, options) {\n      return resp;\n    },\n\n    // Create a new model with identical attributes to this one.\n    clone: function() {\n      return new this.constructor(this.attributes);\n    },\n\n    // A model is new if it has never been saved to the server, and lacks an id.\n    isNew: function() {\n      return !this.has(this.idAttribute);\n    },\n\n    // Check if the model is currently in a valid state.\n    isValid: function(options) {\n      return this._validate({}, _.extend({}, options, {validate: true}));\n    },\n\n    // Run validation against the next complete set of model attributes,\n    // returning `true` if all is well. Otherwise, fire an `\"invalid\"` event.\n    _validate: function(attrs, options) {\n      if (!options.validate || !this.validate) return true;\n      attrs = _.extend({}, this.attributes, attrs);\n      var error = this.validationError = this.validate(attrs, options) || null;\n      if (!error) return true;\n      this.trigger('invalid', this, error, _.extend(options, {validationError: error}));\n      return false;\n    }\n\n  });\n\n  // Underscore methods that we want to implement on the Model, mapped to the\n  // number of arguments they take.\n  var modelMethods = {keys: 1, values: 1, pairs: 1, invert: 1, pick: 0,\n      omit: 0, chain: 1, isEmpty: 1};\n\n  // Mix in each Underscore method as a proxy to `Model#attributes`.\n  addUnderscoreMethods(Model, modelMethods, 'attributes');\n\n  // Backbone.Collection\n  // -------------------\n\n  // If models tend to represent a single row of data, a Backbone Collection is\n  // more analogous to a table full of data ... or a small slice or page of that\n  // table, or a collection of rows that belong together for a particular reason\n  // -- all of the messages in this particular folder, all of the documents\n  // belonging to this particular author, and so on. Collections maintain\n  // indexes of their models, both in order, and for lookup by `id`.\n\n  // Create a new **Collection**, perhaps to contain a specific type of `model`.\n  // If a `comparator` is specified, the Collection will maintain\n  // its models in sort order, as they're added and removed.\n  var Collection = Backbone.Collection = function(models, options) {\n    options || (options = {});\n    if (options.model) this.model = options.model;\n    if (options.comparator !== void 0) this.comparator = options.comparator;\n    this._reset();\n    this.initialize.apply(this, arguments);\n    if (models) this.reset(models, _.extend({silent: true}, options));\n  };\n\n  // Default options for `Collection#set`.\n  var setOptions = {add: true, remove: true, merge: true};\n  var addOptions = {add: true, remove: false};\n\n  // Splices `insert` into `array` at index `at`.\n  var splice = function(array, insert, at) {\n    at = Math.min(Math.max(at, 0), array.length);\n    var tail = Array(array.length - at);\n    var length = insert.length;\n    var i;\n    for (i = 0; i < tail.length; i++) tail[i] = array[i + at];\n    for (i = 0; i < length; i++) array[i + at] = insert[i];\n    for (i = 0; i < tail.length; i++) array[i + length + at] = tail[i];\n  };\n\n  // Define the Collection's inheritable methods.\n  _.extend(Collection.prototype, Events, {\n\n    // The default model for a collection is just a **Backbone.Model**.\n    // This should be overridden in most cases.\n    model: Model,\n\n    // Initialize is an empty function by default. Override it with your own\n    // initialization logic.\n    initialize: function(){},\n\n    // The JSON representation of a Collection is an array of the\n    // models' attributes.\n    toJSON: function(options) {\n      return this.map(function(model) { return model.toJSON(options); });\n    },\n\n    // Proxy `Backbone.sync` by default.\n    sync: function() {\n      return Backbone.sync.apply(this, arguments);\n    },\n\n    // Add a model, or list of models to the set. `models` may be Backbone\n    // Models or raw JavaScript objects to be converted to Models, or any\n    // combination of the two.\n    add: function(models, options) {\n      return this.set(models, _.extend({merge: false}, options, addOptions));\n    },\n\n    // Remove a model, or a list of models from the set.\n    remove: function(models, options) {\n      options = _.extend({}, options);\n      var singular = !_.isArray(models);\n      models = singular ? [models] : models.slice();\n      var removed = this._removeModels(models, options);\n      if (!options.silent && removed.length) {\n        options.changes = {added: [], merged: [], removed: removed};\n        this.trigger('update', this, options);\n      }\n      return singular ? removed[0] : removed;\n    },\n\n    // Update a collection by `set`-ing a new list of models, adding new ones,\n    // removing models that are no longer present, and merging models that\n    // already exist in the collection, as necessary. Similar to **Model#set**,\n    // the core operation for updating the data contained by the collection.\n    set: function(models, options) {\n      if (models == null) return;\n\n      options = _.extend({}, setOptions, options);\n      if (options.parse && !this._isModel(models)) {\n        models = this.parse(models, options) || [];\n      }\n\n      var singular = !_.isArray(models);\n      models = singular ? [models] : models.slice();\n\n      var at = options.at;\n      if (at != null) at = +at;\n      if (at > this.length) at = this.length;\n      if (at < 0) at += this.length + 1;\n\n      var set = [];\n      var toAdd = [];\n      var toMerge = [];\n      var toRemove = [];\n      var modelMap = {};\n\n      var add = options.add;\n      var merge = options.merge;\n      var remove = options.remove;\n\n      var sort = false;\n      var sortable = this.comparator && at == null && options.sort !== false;\n      var sortAttr = _.isString(this.comparator) ? this.comparator : null;\n\n      // Turn bare objects into model references, and prevent invalid models\n      // from being added.\n      var model, i;\n      for (i = 0; i < models.length; i++) {\n        model = models[i];\n\n        // If a duplicate is found, prevent it from being added and\n        // optionally merge it into the existing model.\n        var existing = this.get(model);\n        if (existing) {\n          if (merge && model !== existing) {\n            var attrs = this._isModel(model) ? model.attributes : model;\n            if (options.parse) attrs = existing.parse(attrs, options);\n            existing.set(attrs, options);\n            toMerge.push(existing);\n            if (sortable && !sort) sort = existing.hasChanged(sortAttr);\n          }\n          if (!modelMap[existing.cid]) {\n            modelMap[existing.cid] = true;\n            set.push(existing);\n          }\n          models[i] = existing;\n\n        // If this is a new, valid model, push it to the `toAdd` list.\n        } else if (add) {\n          model = models[i] = this._prepareModel(model, options);\n          if (model) {\n            toAdd.push(model);\n            this._addReference(model, options);\n            modelMap[model.cid] = true;\n            set.push(model);\n          }\n        }\n      }\n\n      // Remove stale models.\n      if (remove) {\n        for (i = 0; i < this.length; i++) {\n          model = this.models[i];\n          if (!modelMap[model.cid]) toRemove.push(model);\n        }\n        if (toRemove.length) this._removeModels(toRemove, options);\n      }\n\n      // See if sorting is needed, update `length` and splice in new models.\n      var orderChanged = false;\n      var replace = !sortable && add && remove;\n      if (set.length && replace) {\n        orderChanged = this.length !== set.length || _.some(this.models, function(m, index) {\n          return m !== set[index];\n        });\n        this.models.length = 0;\n        splice(this.models, set, 0);\n        this.length = this.models.length;\n      } else if (toAdd.length) {\n        if (sortable) sort = true;\n        splice(this.models, toAdd, at == null ? this.length : at);\n        this.length = this.models.length;\n      }\n\n      // Silently sort the collection if appropriate.\n      if (sort) this.sort({silent: true});\n\n      // Unless silenced, it's time to fire all appropriate add/sort/update events.\n      if (!options.silent) {\n        for (i = 0; i < toAdd.length; i++) {\n          if (at != null) options.index = at + i;\n          model = toAdd[i];\n          model.trigger('add', model, this, options);\n        }\n        if (sort || orderChanged) this.trigger('sort', this, options);\n        if (toAdd.length || toRemove.length || toMerge.length) {\n          options.changes = {\n            added: toAdd,\n            removed: toRemove,\n            merged: toMerge\n          };\n          this.trigger('update', this, options);\n        }\n      }\n\n      // Return the added (or merged) model (or models).\n      return singular ? models[0] : models;\n    },\n\n    // When you have more items than you want to add or remove individually,\n    // you can reset the entire set with a new list of models, without firing\n    // any granular `add` or `remove` events. Fires `reset` when finished.\n    // Useful for bulk operations and optimizations.\n    reset: function(models, options) {\n      options = options ? _.clone(options) : {};\n      for (var i = 0; i < this.models.length; i++) {\n        this._removeReference(this.models[i], options);\n      }\n      options.previousModels = this.models;\n      this._reset();\n      models = this.add(models, _.extend({silent: true}, options));\n      if (!options.silent) this.trigger('reset', this, options);\n      return models;\n    },\n\n    // Add a model to the end of the collection.\n    push: function(model, options) {\n      return this.add(model, _.extend({at: this.length}, options));\n    },\n\n    // Remove a model from the end of the collection.\n    pop: function(options) {\n      var model = this.at(this.length - 1);\n      return this.remove(model, options);\n    },\n\n    // Add a model to the beginning of the collection.\n    unshift: function(model, options) {\n      return this.add(model, _.extend({at: 0}, options));\n    },\n\n    // Remove a model from the beginning of the collection.\n    shift: function(options) {\n      var model = this.at(0);\n      return this.remove(model, options);\n    },\n\n    // Slice out a sub-array of models from the collection.\n    slice: function() {\n      return slice.apply(this.models, arguments);\n    },\n\n    // Get a model from the set by id, cid, model object with id or cid\n    // properties, or an attributes object that is transformed through modelId.\n    get: function(obj) {\n      if (obj == null) return void 0;\n      return this._byId[obj] ||\n        this._byId[this.modelId(obj.attributes || obj)] ||\n        obj.cid && this._byId[obj.cid];\n    },\n\n    // Returns `true` if the model is in the collection.\n    has: function(obj) {\n      return this.get(obj) != null;\n    },\n\n    // Get the model at the given index.\n    at: function(index) {\n      if (index < 0) index += this.length;\n      return this.models[index];\n    },\n\n    // Return models with matching attributes. Useful for simple cases of\n    // `filter`.\n    where: function(attrs, first) {\n      return this[first ? 'find' : 'filter'](attrs);\n    },\n\n    // Return the first model with matching attributes. Useful for simple cases\n    // of `find`.\n    findWhere: function(attrs) {\n      return this.where(attrs, true);\n    },\n\n    // Force the collection to re-sort itself. You don't need to call this under\n    // normal circumstances, as the set will maintain sort order as each item\n    // is added.\n    sort: function(options) {\n      var comparator = this.comparator;\n      if (!comparator) throw new Error('Cannot sort a set without a comparator');\n      options || (options = {});\n\n      var length = comparator.length;\n      if (_.isFunction(comparator)) comparator = _.bind(comparator, this);\n\n      // Run sort based on type of `comparator`.\n      if (length === 1 || _.isString(comparator)) {\n        this.models = this.sortBy(comparator);\n      } else {\n        this.models.sort(comparator);\n      }\n      if (!options.silent) this.trigger('sort', this, options);\n      return this;\n    },\n\n    // Pluck an attribute from each model in the collection.\n    pluck: function(attr) {\n      return this.map(attr + '');\n    },\n\n    // Fetch the default set of models for this collection, resetting the\n    // collection when they arrive. If `reset: true` is passed, the response\n    // data will be passed through the `reset` method instead of `set`.\n    fetch: function(options) {\n      options = _.extend({parse: true}, options);\n      var success = options.success;\n      var collection = this;\n      options.success = function(resp) {\n        var method = options.reset ? 'reset' : 'set';\n        collection[method](resp, options);\n        if (success) success.call(options.context, collection, resp, options);\n        collection.trigger('sync', collection, resp, options);\n      };\n      wrapError(this, options);\n      return this.sync('read', this, options);\n    },\n\n    // Create a new instance of a model in this collection. Add the model to the\n    // collection immediately, unless `wait: true` is passed, in which case we\n    // wait for the server to agree.\n    create: function(model, options) {\n      options = options ? _.clone(options) : {};\n      var wait = options.wait;\n      model = this._prepareModel(model, options);\n      if (!model) return false;\n      if (!wait) this.add(model, options);\n      var collection = this;\n      var success = options.success;\n      options.success = function(m, resp, callbackOpts) {\n        if (wait) collection.add(m, callbackOpts);\n        if (success) success.call(callbackOpts.context, m, resp, callbackOpts);\n      };\n      model.save(null, options);\n      return model;\n    },\n\n    // **parse** converts a response into a list of models to be added to the\n    // collection. The default implementation is just to pass it through.\n    parse: function(resp, options) {\n      return resp;\n    },\n\n    // Create a new collection with an identical list of models as this one.\n    clone: function() {\n      return new this.constructor(this.models, {\n        model: this.model,\n        comparator: this.comparator\n      });\n    },\n\n    // Define how to uniquely identify models in the collection.\n    modelId: function(attrs) {\n      return attrs[this.model.prototype.idAttribute || 'id'];\n    },\n\n    // Private method to reset all internal state. Called when the collection\n    // is first initialized or reset.\n    _reset: function() {\n      this.length = 0;\n      this.models = [];\n      this._byId  = {};\n    },\n\n    // Prepare a hash of attributes (or other model) to be added to this\n    // collection.\n    _prepareModel: function(attrs, options) {\n      if (this._isModel(attrs)) {\n        if (!attrs.collection) attrs.collection = this;\n        return attrs;\n      }\n      options = options ? _.clone(options) : {};\n      options.collection = this;\n      var model = new this.model(attrs, options);\n      if (!model.validationError) return model;\n      this.trigger('invalid', this, model.validationError, options);\n      return false;\n    },\n\n    // Internal method called by both remove and set.\n    _removeModels: function(models, options) {\n      var removed = [];\n      for (var i = 0; i < models.length; i++) {\n        var model = this.get(models[i]);\n        if (!model) continue;\n\n        var index = this.indexOf(model);\n        this.models.splice(index, 1);\n        this.length--;\n\n        // Remove references before triggering 'remove' event to prevent an\n        // infinite loop. #3693\n        delete this._byId[model.cid];\n        var id = this.modelId(model.attributes);\n        if (id != null) delete this._byId[id];\n\n        if (!options.silent) {\n          options.index = index;\n          model.trigger('remove', model, this, options);\n        }\n\n        removed.push(model);\n        this._removeReference(model, options);\n      }\n      return removed;\n    },\n\n    // Method for checking whether an object should be considered a model for\n    // the purposes of adding to the collection.\n    _isModel: function(model) {\n      return model instanceof Model;\n    },\n\n    // Internal method to create a model's ties to a collection.\n    _addReference: function(model, options) {\n      this._byId[model.cid] = model;\n      var id = this.modelId(model.attributes);\n      if (id != null) this._byId[id] = model;\n      model.on('all', this._onModelEvent, this);\n    },\n\n    // Internal method to sever a model's ties to a collection.\n    _removeReference: function(model, options) {\n      delete this._byId[model.cid];\n      var id = this.modelId(model.attributes);\n      if (id != null) delete this._byId[id];\n      if (this === model.collection) delete model.collection;\n      model.off('all', this._onModelEvent, this);\n    },\n\n    // Internal method called every time a model in the set fires an event.\n    // Sets need to update their indexes when models change ids. All other\n    // events simply proxy through. \"add\" and \"remove\" events that originate\n    // in other collections are ignored.\n    _onModelEvent: function(event, model, collection, options) {\n      if (model) {\n        if ((event === 'add' || event === 'remove') && collection !== this) return;\n        if (event === 'destroy') this.remove(model, options);\n        if (event === 'change') {\n          var prevId = this.modelId(model.previousAttributes());\n          var id = this.modelId(model.attributes);\n          if (prevId !== id) {\n            if (prevId != null) delete this._byId[prevId];\n            if (id != null) this._byId[id] = model;\n          }\n        }\n      }\n      this.trigger.apply(this, arguments);\n    }\n\n  });\n\n  // Underscore methods that we want to implement on the Collection.\n  // 90% of the core usefulness of Backbone Collections is actually implemented\n  // right here:\n  var collectionMethods = {forEach: 3, each: 3, map: 3, collect: 3, reduce: 0,\n      foldl: 0, inject: 0, reduceRight: 0, foldr: 0, find: 3, detect: 3, filter: 3,\n      select: 3, reject: 3, every: 3, all: 3, some: 3, any: 3, include: 3, includes: 3,\n      contains: 3, invoke: 0, max: 3, min: 3, toArray: 1, size: 1, first: 3,\n      head: 3, take: 3, initial: 3, rest: 3, tail: 3, drop: 3, last: 3,\n      without: 0, difference: 0, indexOf: 3, shuffle: 1, lastIndexOf: 3,\n      isEmpty: 1, chain: 1, sample: 3, partition: 3, groupBy: 3, countBy: 3,\n      sortBy: 3, indexBy: 3, findIndex: 3, findLastIndex: 3};\n\n  // Mix in each Underscore method as a proxy to `Collection#models`.\n  addUnderscoreMethods(Collection, collectionMethods, 'models');\n\n  // Backbone.View\n  // -------------\n\n  // Backbone Views are almost more convention than they are actual code. A View\n  // is simply a JavaScript object that represents a logical chunk of UI in the\n  // DOM. This might be a single item, an entire list, a sidebar or panel, or\n  // even the surrounding frame which wraps your whole app. Defining a chunk of\n  // UI as a **View** allows you to define your DOM events declaratively, without\n  // having to worry about render order ... and makes it easy for the view to\n  // react to specific changes in the state of your models.\n\n  // Creating a Backbone.View creates its initial element outside of the DOM,\n  // if an existing element is not provided...\n  var View = Backbone.View = function(options) {\n    this.cid = _.uniqueId('view');\n    _.extend(this, _.pick(options, viewOptions));\n    this._ensureElement();\n    this.initialize.apply(this, arguments);\n  };\n\n  // Cached regex to split keys for `delegate`.\n  var delegateEventSplitter = /^(\\S+)\\s*(.*)$/;\n\n  // List of view options to be set as properties.\n  var viewOptions = ['model', 'collection', 'el', 'id', 'attributes', 'className', 'tagName', 'events'];\n\n  // Set up all inheritable **Backbone.View** properties and methods.\n  _.extend(View.prototype, Events, {\n\n    // The default `tagName` of a View's element is `\"div\"`.\n    tagName: 'div',\n\n    // jQuery delegate for element lookup, scoped to DOM elements within the\n    // current view. This should be preferred to global lookups where possible.\n    $: function(selector) {\n      return this.$el.find(selector);\n    },\n\n    // Initialize is an empty function by default. Override it with your own\n    // initialization logic.\n    initialize: function(){},\n\n    // **render** is the core function that your view should override, in order\n    // to populate its element (`this.el`), with the appropriate HTML. The\n    // convention is for **render** to always return `this`.\n    render: function() {\n      return this;\n    },\n\n    // Remove this view by taking the element out of the DOM, and removing any\n    // applicable Backbone.Events listeners.\n    remove: function() {\n      this._removeElement();\n      this.stopListening();\n      return this;\n    },\n\n    // Remove this view's element from the document and all event listeners\n    // attached to it. Exposed for subclasses using an alternative DOM\n    // manipulation API.\n    _removeElement: function() {\n      this.$el.remove();\n    },\n\n    // Change the view's element (`this.el` property) and re-delegate the\n    // view's events on the new element.\n    setElement: function(element) {\n      this.undelegateEvents();\n      this._setElement(element);\n      this.delegateEvents();\n      return this;\n    },\n\n    // Creates the `this.el` and `this.$el` references for this view using the\n    // given `el`. `el` can be a CSS selector or an HTML string, a jQuery\n    // context or an element. Subclasses can override this to utilize an\n    // alternative DOM manipulation API and are only required to set the\n    // `this.el` property.\n    _setElement: function(el) {\n      this.$el = el instanceof Backbone.$ ? el : Backbone.$(el);\n      this.el = this.$el[0];\n    },\n\n    // Set callbacks, where `this.events` is a hash of\n    //\n    // *{\"event selector\": \"callback\"}*\n    //\n    //     {\n    //       'mousedown .title':  'edit',\n    //       'click .button':     'save',\n    //       'click .open':       function(e) { ... }\n    //     }\n    //\n    // pairs. Callbacks will be bound to the view, with `this` set properly.\n    // Uses event delegation for efficiency.\n    // Omitting the selector binds the event to `this.el`.\n    delegateEvents: function(events) {\n      events || (events = _.result(this, 'events'));\n      if (!events) return this;\n      this.undelegateEvents();\n      for (var key in events) {\n        var method = events[key];\n        if (!_.isFunction(method)) method = this[method];\n        if (!method) continue;\n        var match = key.match(delegateEventSplitter);\n        this.delegate(match[1], match[2], _.bind(method, this));\n      }\n      return this;\n    },\n\n    // Add a single event listener to the view's element (or a child element\n    // using `selector`). This only works for delegate-able events: not `focus`,\n    // `blur`, and not `change`, `submit`, and `reset` in Internet Explorer.\n    delegate: function(eventName, selector, listener) {\n      this.$el.on(eventName + '.delegateEvents' + this.cid, selector, listener);\n      return this;\n    },\n\n    // Clears all callbacks previously bound to the view by `delegateEvents`.\n    // You usually don't need to use this, but may wish to if you have multiple\n    // Backbone views attached to the same DOM element.\n    undelegateEvents: function() {\n      if (this.$el) this.$el.off('.delegateEvents' + this.cid);\n      return this;\n    },\n\n    // A finer-grained `undelegateEvents` for removing a single delegated event.\n    // `selector` and `listener` are both optional.\n    undelegate: function(eventName, selector, listener) {\n      this.$el.off(eventName + '.delegateEvents' + this.cid, selector, listener);\n      return this;\n    },\n\n    // Produces a DOM element to be assigned to your view. Exposed for\n    // subclasses using an alternative DOM manipulation API.\n    _createElement: function(tagName) {\n      return document.createElement(tagName);\n    },\n\n    // Ensure that the View has a DOM element to render into.\n    // If `this.el` is a string, pass it through `$()`, take the first\n    // matching element, and re-assign it to `el`. Otherwise, create\n    // an element from the `id`, `className` and `tagName` properties.\n    _ensureElement: function() {\n      if (!this.el) {\n        var attrs = _.extend({}, _.result(this, 'attributes'));\n        if (this.id) attrs.id = _.result(this, 'id');\n        if (this.className) attrs['class'] = _.result(this, 'className');\n        this.setElement(this._createElement(_.result(this, 'tagName')));\n        this._setAttributes(attrs);\n      } else {\n        this.setElement(_.result(this, 'el'));\n      }\n    },\n\n    // Set attributes from a hash on this view's element.  Exposed for\n    // subclasses using an alternative DOM manipulation API.\n    _setAttributes: function(attributes) {\n      this.$el.attr(attributes);\n    }\n\n  });\n\n  // Backbone.sync\n  // -------------\n\n  // Override this function to change the manner in which Backbone persists\n  // models to the server. You will be passed the type of request, and the\n  // model in question. By default, makes a RESTful Ajax request\n  // to the model's `url()`. Some possible customizations could be:\n  //\n  // * Use `setTimeout` to batch rapid-fire updates into a single request.\n  // * Send up the models as XML instead of JSON.\n  // * Persist models via WebSockets instead of Ajax.\n  //\n  // Turn on `Backbone.emulateHTTP` in order to send `PUT` and `DELETE` requests\n  // as `POST`, with a `_method` parameter containing the true HTTP method,\n  // as well as all requests with the body as `application/x-www-form-urlencoded`\n  // instead of `application/json` with the model in a param named `model`.\n  // Useful when interfacing with server-side languages like **PHP** that make\n  // it difficult to read the body of `PUT` requests.\n  Backbone.sync = function(method, model, options) {\n    var type = methodMap[method];\n\n    // Default options, unless specified.\n    _.defaults(options || (options = {}), {\n      emulateHTTP: Backbone.emulateHTTP,\n      emulateJSON: Backbone.emulateJSON\n    });\n\n    // Default JSON-request options.\n    var params = {type: type, dataType: 'json'};\n\n    // Ensure that we have a URL.\n    if (!options.url) {\n      params.url = _.result(model, 'url') || urlError();\n    }\n\n    // Ensure that we have the appropriate request data.\n    if (options.data == null && model && (method === 'create' || method === 'update' || method === 'patch')) {\n      params.contentType = 'application/json';\n      params.data = JSON.stringify(options.attrs || model.toJSON(options));\n    }\n\n    // For older servers, emulate JSON by encoding the request into an HTML-form.\n    if (options.emulateJSON) {\n      params.contentType = 'application/x-www-form-urlencoded';\n      params.data = params.data ? {model: params.data} : {};\n    }\n\n    // For older servers, emulate HTTP by mimicking the HTTP method with `_method`\n    // And an `X-HTTP-Method-Override` header.\n    if (options.emulateHTTP && (type === 'PUT' || type === 'DELETE' || type === 'PATCH')) {\n      params.type = 'POST';\n      if (options.emulateJSON) params.data._method = type;\n      var beforeSend = options.beforeSend;\n      options.beforeSend = function(xhr) {\n        xhr.setRequestHeader('X-HTTP-Method-Override', type);\n        if (beforeSend) return beforeSend.apply(this, arguments);\n      };\n    }\n\n    // Don't process data on a non-GET request.\n    if (params.type !== 'GET' && !options.emulateJSON) {\n      params.processData = false;\n    }\n\n    // Pass along `textStatus` and `errorThrown` from jQuery.\n    var error = options.error;\n    options.error = function(xhr, textStatus, errorThrown) {\n      options.textStatus = textStatus;\n      options.errorThrown = errorThrown;\n      if (error) error.call(options.context, xhr, textStatus, errorThrown);\n    };\n\n    // Make the request, allowing the user to override any Ajax options.\n    var xhr = options.xhr = Backbone.ajax(_.extend(params, options));\n    model.trigger('request', model, xhr, options);\n    return xhr;\n  };\n\n  // Map from CRUD to HTTP for our default `Backbone.sync` implementation.\n  var methodMap = {\n    'create': 'POST',\n    'update': 'PUT',\n    'patch': 'PATCH',\n    'delete': 'DELETE',\n    'read': 'GET'\n  };\n\n  // Set the default implementation of `Backbone.ajax` to proxy through to `$`.\n  // Override this if you'd like to use a different library.\n  Backbone.ajax = function() {\n    return Backbone.$.ajax.apply(Backbone.$, arguments);\n  };\n\n  // Backbone.Router\n  // ---------------\n\n  // Routers map faux-URLs to actions, and fire events when routes are\n  // matched. Creating a new one sets its `routes` hash, if not set statically.\n  var Router = Backbone.Router = function(options) {\n    options || (options = {});\n    if (options.routes) this.routes = options.routes;\n    this._bindRoutes();\n    this.initialize.apply(this, arguments);\n  };\n\n  // Cached regular expressions for matching named param parts and splatted\n  // parts of route strings.\n  var optionalParam = /\\((.*?)\\)/g;\n  var namedParam    = /(\\(\\?)?:\\w+/g;\n  var splatParam    = /\\*\\w+/g;\n  var escapeRegExp  = /[\\-{}\\[\\]+?.,\\\\\\^$|#\\s]/g;\n\n  // Set up all inheritable **Backbone.Router** properties and methods.\n  _.extend(Router.prototype, Events, {\n\n    // Initialize is an empty function by default. Override it with your own\n    // initialization logic.\n    initialize: function(){},\n\n    // Manually bind a single named route to a callback. For example:\n    //\n    //     this.route('search/:query/p:num', 'search', function(query, num) {\n    //       ...\n    //     });\n    //\n    route: function(route, name, callback) {\n      if (!_.isRegExp(route)) route = this._routeToRegExp(route);\n      if (_.isFunction(name)) {\n        callback = name;\n        name = '';\n      }\n      if (!callback) callback = this[name];\n      var router = this;\n      Backbone.history.route(route, function(fragment) {\n        var args = router._extractParameters(route, fragment);\n        if (router.execute(callback, args, name) !== false) {\n          router.trigger.apply(router, ['route:' + name].concat(args));\n          router.trigger('route', name, args);\n          Backbone.history.trigger('route', router, name, args);\n        }\n      });\n      return this;\n    },\n\n    // Execute a route handler with the provided parameters.  This is an\n    // excellent place to do pre-route setup or post-route cleanup.\n    execute: function(callback, args, name) {\n      if (callback) callback.apply(this, args);\n    },\n\n    // Simple proxy to `Backbone.history` to save a fragment into the history.\n    navigate: function(fragment, options) {\n      Backbone.history.navigate(fragment, options);\n      return this;\n    },\n\n    // Bind all defined routes to `Backbone.history`. We have to reverse the\n    // order of the routes here to support behavior where the most general\n    // routes can be defined at the bottom of the route map.\n    _bindRoutes: function() {\n      if (!this.routes) return;\n      this.routes = _.result(this, 'routes');\n      var route, routes = _.keys(this.routes);\n      while ((route = routes.pop()) != null) {\n        this.route(route, this.routes[route]);\n      }\n    },\n\n    // Convert a route string into a regular expression, suitable for matching\n    // against the current location hash.\n    _routeToRegExp: function(route) {\n      route = route.replace(escapeRegExp, '\\\\$&')\n                   .replace(optionalParam, '(?:$1)?')\n                   .replace(namedParam, function(match, optional) {\n                     return optional ? match : '([^/?]+)';\n                   })\n                   .replace(splatParam, '([^?]*?)');\n      return new RegExp('^' + route + '(?:\\\\?([\\\\s\\\\S]*))?$');\n    },\n\n    // Given a route, and a URL fragment that it matches, return the array of\n    // extracted decoded parameters. Empty or unmatched parameters will be\n    // treated as `null` to normalize cross-browser behavior.\n    _extractParameters: function(route, fragment) {\n      var params = route.exec(fragment).slice(1);\n      return _.map(params, function(param, i) {\n        // Don't decode the search params.\n        if (i === params.length - 1) return param || null;\n        return param ? decodeURIComponent(param) : null;\n      });\n    }\n\n  });\n\n  // Backbone.History\n  // ----------------\n\n  // Handles cross-browser history management, based on either\n  // [pushState](http://diveintohtml5.info/history.html) and real URLs, or\n  // [onhashchange](https://developer.mozilla.org/en-US/docs/DOM/window.onhashchange)\n  // and URL fragments. If the browser supports neither (old IE, natch),\n  // falls back to polling.\n  var History = Backbone.History = function() {\n    this.handlers = [];\n    this.checkUrl = _.bind(this.checkUrl, this);\n\n    // Ensure that `History` can be used outside of the browser.\n    if (typeof window !== 'undefined') {\n      this.location = window.location;\n      this.history = window.history;\n    }\n  };\n\n  // Cached regex for stripping a leading hash/slash and trailing space.\n  var routeStripper = /^[#\\/]|\\s+$/g;\n\n  // Cached regex for stripping leading and trailing slashes.\n  var rootStripper = /^\\/+|\\/+$/g;\n\n  // Cached regex for stripping urls of hash.\n  var pathStripper = /#.*$/;\n\n  // Has the history handling already been started?\n  History.started = false;\n\n  // Set up all inheritable **Backbone.History** properties and methods.\n  _.extend(History.prototype, Events, {\n\n    // The default interval to poll for hash changes, if necessary, is\n    // twenty times a second.\n    interval: 50,\n\n    // Are we at the app root?\n    atRoot: function() {\n      var path = this.location.pathname.replace(/[^\\/]$/, '$&/');\n      return path === this.root && !this.getSearch();\n    },\n\n    // Does the pathname match the root?\n    matchRoot: function() {\n      var path = this.decodeFragment(this.location.pathname);\n      var rootPath = path.slice(0, this.root.length - 1) + '/';\n      return rootPath === this.root;\n    },\n\n    // Unicode characters in `location.pathname` are percent encoded so they're\n    // decoded for comparison. `%25` should not be decoded since it may be part\n    // of an encoded parameter.\n    decodeFragment: function(fragment) {\n      return decodeURI(fragment.replace(/%25/g, '%2525'));\n    },\n\n    // In IE6, the hash fragment and search params are incorrect if the\n    // fragment contains `?`.\n    getSearch: function() {\n      var match = this.location.href.replace(/#.*/, '').match(/\\?.+/);\n      return match ? match[0] : '';\n    },\n\n    // Gets the true hash value. Cannot use location.hash directly due to bug\n    // in Firefox where location.hash will always be decoded.\n    getHash: function(window) {\n      var match = (window || this).location.href.match(/#(.*)$/);\n      return match ? match[1] : '';\n    },\n\n    // Get the pathname and search params, without the root.\n    getPath: function() {\n      var path = this.decodeFragment(\n        this.location.pathname + this.getSearch()\n      ).slice(this.root.length - 1);\n      return path.charAt(0) === '/' ? path.slice(1) : path;\n    },\n\n    // Get the cross-browser normalized URL fragment from the path or hash.\n    getFragment: function(fragment) {\n      if (fragment == null) {\n        if (this._usePushState || !this._wantsHashChange) {\n          fragment = this.getPath();\n        } else {\n          fragment = this.getHash();\n        }\n      }\n      return fragment.replace(routeStripper, '');\n    },\n\n    // Start the hash change handling, returning `true` if the current URL matches\n    // an existing route, and `false` otherwise.\n    start: function(options) {\n      if (History.started) throw new Error('Backbone.history has already been started');\n      History.started = true;\n\n      // Figure out the initial configuration. Do we need an iframe?\n      // Is pushState desired ... is it available?\n      this.options          = _.extend({root: '/'}, this.options, options);\n      this.root             = this.options.root;\n      this._wantsHashChange = this.options.hashChange !== false;\n      this._hasHashChange   = 'onhashchange' in window && (document.documentMode === void 0 || document.documentMode > 7);\n      this._useHashChange   = this._wantsHashChange && this._hasHashChange;\n      this._wantsPushState  = !!this.options.pushState;\n      this._hasPushState    = !!(this.history && this.history.pushState);\n      this._usePushState    = this._wantsPushState && this._hasPushState;\n      this.fragment         = this.getFragment();\n\n      // Normalize root to always include a leading and trailing slash.\n      this.root = ('/' + this.root + '/').replace(rootStripper, '/');\n\n      // Transition from hashChange to pushState or vice versa if both are\n      // requested.\n      if (this._wantsHashChange && this._wantsPushState) {\n\n        // If we've started off with a route from a `pushState`-enabled\n        // browser, but we're currently in a browser that doesn't support it...\n        if (!this._hasPushState && !this.atRoot()) {\n          var rootPath = this.root.slice(0, -1) || '/';\n          this.location.replace(rootPath + '#' + this.getPath());\n          // Return immediately as browser will do redirect to new url\n          return true;\n\n        // Or if we've started out with a hash-based route, but we're currently\n        // in a browser where it could be `pushState`-based instead...\n        } else if (this._hasPushState && this.atRoot()) {\n          this.navigate(this.getHash(), {replace: true});\n        }\n\n      }\n\n      // Proxy an iframe to handle location events if the browser doesn't\n      // support the `hashchange` event, HTML5 history, or the user wants\n      // `hashChange` but not `pushState`.\n      if (!this._hasHashChange && this._wantsHashChange && !this._usePushState) {\n        this.iframe = document.createElement('iframe');\n        this.iframe.src = 'javascript:0';\n        this.iframe.style.display = 'none';\n        this.iframe.tabIndex = -1;\n        var body = document.body;\n        // Using `appendChild` will throw on IE < 9 if the document is not ready.\n        var iWindow = body.insertBefore(this.iframe, body.firstChild).contentWindow;\n        iWindow.document.open();\n        iWindow.document.close();\n        iWindow.location.hash = '#' + this.fragment;\n      }\n\n      // Add a cross-platform `addEventListener` shim for older browsers.\n      var addEventListener = window.addEventListener || function(eventName, listener) {\n        return attachEvent('on' + eventName, listener);\n      };\n\n      // Depending on whether we're using pushState or hashes, and whether\n      // 'onhashchange' is supported, determine how we check the URL state.\n      if (this._usePushState) {\n        addEventListener('popstate', this.checkUrl, false);\n      } else if (this._useHashChange && !this.iframe) {\n        addEventListener('hashchange', this.checkUrl, false);\n      } else if (this._wantsHashChange) {\n        this._checkUrlInterval = setInterval(this.checkUrl, this.interval);\n      }\n\n      if (!this.options.silent) return this.loadUrl();\n    },\n\n    // Disable Backbone.history, perhaps temporarily. Not useful in a real app,\n    // but possibly useful for unit testing Routers.\n    stop: function() {\n      // Add a cross-platform `removeEventListener` shim for older browsers.\n      var removeEventListener = window.removeEventListener || function(eventName, listener) {\n        return detachEvent('on' + eventName, listener);\n      };\n\n      // Remove window listeners.\n      if (this._usePushState) {\n        removeEventListener('popstate', this.checkUrl, false);\n      } else if (this._useHashChange && !this.iframe) {\n        removeEventListener('hashchange', this.checkUrl, false);\n      }\n\n      // Clean up the iframe if necessary.\n      if (this.iframe) {\n        document.body.removeChild(this.iframe);\n        this.iframe = null;\n      }\n\n      // Some environments will throw when clearing an undefined interval.\n      if (this._checkUrlInterval) clearInterval(this._checkUrlInterval);\n      History.started = false;\n    },\n\n    // Add a route to be tested when the fragment changes. Routes added later\n    // may override previous routes.\n    route: function(route, callback) {\n      this.handlers.unshift({route: route, callback: callback});\n    },\n\n    // Checks the current URL to see if it has changed, and if it has,\n    // calls `loadUrl`, normalizing across the hidden iframe.\n    checkUrl: function(e) {\n      var current = this.getFragment();\n\n      // If the user pressed the back button, the iframe's hash will have\n      // changed and we should use that for comparison.\n      if (current === this.fragment && this.iframe) {\n        current = this.getHash(this.iframe.contentWindow);\n      }\n\n      if (current === this.fragment) return false;\n      if (this.iframe) this.navigate(current);\n      this.loadUrl();\n    },\n\n    // Attempt to load the current URL fragment. If a route succeeds with a\n    // match, returns `true`. If no defined routes matches the fragment,\n    // returns `false`.\n    loadUrl: function(fragment) {\n      // If the root doesn't match, no routes can match either.\n      if (!this.matchRoot()) return false;\n      fragment = this.fragment = this.getFragment(fragment);\n      return _.some(this.handlers, function(handler) {\n        if (handler.route.test(fragment)) {\n          handler.callback(fragment);\n          return true;\n        }\n      });\n    },\n\n    // Save a fragment into the hash history, or replace the URL state if the\n    // 'replace' option is passed. You are responsible for properly URL-encoding\n    // the fragment in advance.\n    //\n    // The options object can contain `trigger: true` if you wish to have the\n    // route callback be fired (not usually desirable), or `replace: true`, if\n    // you wish to modify the current URL without adding an entry to the history.\n    navigate: function(fragment, options) {\n      if (!History.started) return false;\n      if (!options || options === true) options = {trigger: !!options};\n\n      // Normalize the fragment.\n      fragment = this.getFragment(fragment || '');\n\n      // Don't include a trailing slash on the root.\n      var rootPath = this.root;\n      if (fragment === '' || fragment.charAt(0) === '?') {\n        rootPath = rootPath.slice(0, -1) || '/';\n      }\n      var url = rootPath + fragment;\n\n      // Strip the hash and decode for matching.\n      fragment = this.decodeFragment(fragment.replace(pathStripper, ''));\n\n      if (this.fragment === fragment) return;\n      this.fragment = fragment;\n\n      // If pushState is available, we use it to set the fragment as a real URL.\n      if (this._usePushState) {\n        this.history[options.replace ? 'replaceState' : 'pushState']({}, document.title, url);\n\n      // If hash changes haven't been explicitly disabled, update the hash\n      // fragment to store history.\n      } else if (this._wantsHashChange) {\n        this._updateHash(this.location, fragment, options.replace);\n        if (this.iframe && fragment !== this.getHash(this.iframe.contentWindow)) {\n          var iWindow = this.iframe.contentWindow;\n\n          // Opening and closing the iframe tricks IE7 and earlier to push a\n          // history entry on hash-tag change.  When replace is true, we don't\n          // want this.\n          if (!options.replace) {\n            iWindow.document.open();\n            iWindow.document.close();\n          }\n\n          this._updateHash(iWindow.location, fragment, options.replace);\n        }\n\n      // If you've told us that you explicitly don't want fallback hashchange-\n      // based history, then `navigate` becomes a page refresh.\n      } else {\n        return this.location.assign(url);\n      }\n      if (options.trigger) return this.loadUrl(fragment);\n    },\n\n    // Update the hash location, either replacing the current entry, or adding\n    // a new one to the browser history.\n    _updateHash: function(location, fragment, replace) {\n      if (replace) {\n        var href = location.href.replace(/(javascript:|#).*$/, '');\n        location.replace(href + '#' + fragment);\n      } else {\n        // Some browsers require that `hash` contains a leading #.\n        location.hash = '#' + fragment;\n      }\n    }\n\n  });\n\n  // Create the default Backbone.history.\n  Backbone.history = new History;\n\n  // Helpers\n  // -------\n\n  // Helper function to correctly set up the prototype chain for subclasses.\n  // Similar to `goog.inherits`, but uses a hash of prototype properties and\n  // class properties to be extended.\n  var extend = function(protoProps, staticProps) {\n    var parent = this;\n    var child;\n\n    // The constructor function for the new subclass is either defined by you\n    // (the \"constructor\" property in your `extend` definition), or defaulted\n    // by us to simply call the parent constructor.\n    if (protoProps && _.has(protoProps, 'constructor')) {\n      child = protoProps.constructor;\n    } else {\n      child = function(){ return parent.apply(this, arguments); };\n    }\n\n    // Add static properties to the constructor function, if supplied.\n    _.extend(child, parent, staticProps);\n\n    // Set the prototype chain to inherit from `parent`, without calling\n    // `parent`'s constructor function and add the prototype properties.\n    child.prototype = _.create(parent.prototype, protoProps);\n    child.prototype.constructor = child;\n\n    // Set a convenience property in case the parent's prototype is needed\n    // later.\n    child.__super__ = parent.prototype;\n\n    return child;\n  };\n\n  // Set up inheritance for the model, collection, router, view and history.\n  Model.extend = Collection.extend = Router.extend = View.extend = History.extend = extend;\n\n  // Throw an error when a URL is needed, and none is supplied.\n  var urlError = function() {\n    throw new Error('A \"url\" property or function must be specified');\n  };\n\n  // Wrap an optional error callback with a fallback error event.\n  var wrapError = function(model, options) {\n    var error = options.error;\n    options.error = function(resp) {\n      if (error) error.call(options.context, model, resp, options);\n      model.trigger('error', model, resp, options);\n    };\n  };\n\n  return Backbone;\n});\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"698d75b157f24ae829cc\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1858b45bf48591489d06\n");

/***/ }),

/***/ "1ccad812e69cff87bf13":
/*!********************************************************************!*\
  !*** ./src/vendor/Anakeen/DOCUMENT/IHM/widgets/window/wConfirm.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n  __webpack_require__(/*! jquery */ \"127c8cf59f228bb01a21\"),\n  __webpack_require__(/*! underscore */ \"8e08e542008e4aef1f58\"),\n  __webpack_require__(/*! mustache */ \"bcd31d01884fc294fd69\"),\n  __webpack_require__(/*! dcpDocument/widgets/window/wWindow */ \"42ce03d6950c8982af08\")\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function wConfirm($, _, Mustache) {\n  \"use strict\";\n\n  $.widget(\"dcp.dcpConfirm\", $.dcp.dcpWindow, {\n    options: {\n      modal: true,\n      templateData: {\n        templates: {\n          window: {\n            confirm:\n              '<div class=\"confirm--body\"> <div class=\"confirm--content\">  <div>{{messages.textMessage}}</div><div>{{{messages.htmlMessage}}}</div> </div> <div class=\"confirm--buttons\"> <button class=\"button--cancel\" type=\"button\">{{messages.cancelMessage}}</button> <button class=\"button--ok k-primary\" type=\"button\">{{messages.okMessage}}</button> </div> </div>'\n          }\n        }\n      },\n      messages: {\n        textMessage: \"Are you sure ?\",\n        htmlMessage: \"\",\n        okMessage: \"Ok\",\n        cancelMessage: \"Cancel\"\n      },\n      cancel: function wConfirmCancel() {},\n\n      confirm: function wConfirmConfirm() {},\n      actions: [\"Close\"],\n      height: \"150px\"\n    },\n\n    _create: function wConfirmCreate() {\n      var scope = this;\n      var scoppedCancel = _.bind(this.options.cancel, this);\n      this.options.close = scoppedCancel;\n      this.options.templateData.messages = this.options.messages || [];\n      this.currentWidget = $(\n        Mustache.render(\n          this._getWindowTemplate(\"confirm\") || \"\",\n          this.options.templateData\n        )\n      );\n      this.element.append(this.currentWidget);\n      this.currentWidget.kendoWindow(this.options);\n      this.currentWidget.data(\"kendoWindow\").center();\n\n      this.currentWidget.find(\".button--cancel\").kendoButton({\n        click: function wConfirmCancelClick() {\n          scoppedCancel();\n          scope.destroy();\n        }\n      });\n\n      var scoppedConfirm = _.bind(this.options.confirm, this);\n\n      this.currentWidget.find(\".button--ok\").kendoButton({\n        click: function wConfirmOkClick() {\n          scoppedConfirm();\n          scope.destroy();\n        }\n      });\n\n      this.element.data(\"dcpWindow\", this);\n    }\n  });\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMWNjYWQ4MTJlNjljZmY4N2JmMTMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdmVuZG9yL0FuYWtlZW4vRE9DVU1FTlQvSUhNL3dpZGdldHMvd2luZG93L3dDb25maXJtLmpzP2JmM2UiXSwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKFtcbiAgXCJqcXVlcnlcIixcbiAgXCJ1bmRlcnNjb3JlXCIsXG4gIFwibXVzdGFjaGVcIixcbiAgXCJkY3BEb2N1bWVudC93aWRnZXRzL3dpbmRvdy93V2luZG93XCJcbl0sIGZ1bmN0aW9uIHdDb25maXJtKCQsIF8sIE11c3RhY2hlKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gICQud2lkZ2V0KFwiZGNwLmRjcENvbmZpcm1cIiwgJC5kY3AuZGNwV2luZG93LCB7XG4gICAgb3B0aW9uczoge1xuICAgICAgbW9kYWw6IHRydWUsXG4gICAgICB0ZW1wbGF0ZURhdGE6IHtcbiAgICAgICAgdGVtcGxhdGVzOiB7XG4gICAgICAgICAgd2luZG93OiB7XG4gICAgICAgICAgICBjb25maXJtOlxuICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cImNvbmZpcm0tLWJvZHlcIj4gPGRpdiBjbGFzcz1cImNvbmZpcm0tLWNvbnRlbnRcIj4gIDxkaXY+e3ttZXNzYWdlcy50ZXh0TWVzc2FnZX19PC9kaXY+PGRpdj57e3ttZXNzYWdlcy5odG1sTWVzc2FnZX19fTwvZGl2PiA8L2Rpdj4gPGRpdiBjbGFzcz1cImNvbmZpcm0tLWJ1dHRvbnNcIj4gPGJ1dHRvbiBjbGFzcz1cImJ1dHRvbi0tY2FuY2VsXCIgdHlwZT1cImJ1dHRvblwiPnt7bWVzc2FnZXMuY2FuY2VsTWVzc2FnZX19PC9idXR0b24+IDxidXR0b24gY2xhc3M9XCJidXR0b24tLW9rIGstcHJpbWFyeVwiIHR5cGU9XCJidXR0b25cIj57e21lc3NhZ2VzLm9rTWVzc2FnZX19PC9idXR0b24+IDwvZGl2PiA8L2Rpdj4nXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgbWVzc2FnZXM6IHtcbiAgICAgICAgdGV4dE1lc3NhZ2U6IFwiQXJlIHlvdSBzdXJlID9cIixcbiAgICAgICAgaHRtbE1lc3NhZ2U6IFwiXCIsXG4gICAgICAgIG9rTWVzc2FnZTogXCJPa1wiLFxuICAgICAgICBjYW5jZWxNZXNzYWdlOiBcIkNhbmNlbFwiXG4gICAgICB9LFxuICAgICAgY2FuY2VsOiBmdW5jdGlvbiB3Q29uZmlybUNhbmNlbCgpIHt9LFxuXG4gICAgICBjb25maXJtOiBmdW5jdGlvbiB3Q29uZmlybUNvbmZpcm0oKSB7fSxcbiAgICAgIGFjdGlvbnM6IFtcIkNsb3NlXCJdLFxuICAgICAgaGVpZ2h0OiBcIjE1MHB4XCJcbiAgICB9LFxuXG4gICAgX2NyZWF0ZTogZnVuY3Rpb24gd0NvbmZpcm1DcmVhdGUoKSB7XG4gICAgICB2YXIgc2NvcGUgPSB0aGlzO1xuICAgICAgdmFyIHNjb3BwZWRDYW5jZWwgPSBfLmJpbmQodGhpcy5vcHRpb25zLmNhbmNlbCwgdGhpcyk7XG4gICAgICB0aGlzLm9wdGlvbnMuY2xvc2UgPSBzY29wcGVkQ2FuY2VsO1xuICAgICAgdGhpcy5vcHRpb25zLnRlbXBsYXRlRGF0YS5tZXNzYWdlcyA9IHRoaXMub3B0aW9ucy5tZXNzYWdlcyB8fCBbXTtcbiAgICAgIHRoaXMuY3VycmVudFdpZGdldCA9ICQoXG4gICAgICAgIE11c3RhY2hlLnJlbmRlcihcbiAgICAgICAgICB0aGlzLl9nZXRXaW5kb3dUZW1wbGF0ZShcImNvbmZpcm1cIikgfHwgXCJcIixcbiAgICAgICAgICB0aGlzLm9wdGlvbnMudGVtcGxhdGVEYXRhXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgICB0aGlzLmVsZW1lbnQuYXBwZW5kKHRoaXMuY3VycmVudFdpZGdldCk7XG4gICAgICB0aGlzLmN1cnJlbnRXaWRnZXQua2VuZG9XaW5kb3codGhpcy5vcHRpb25zKTtcbiAgICAgIHRoaXMuY3VycmVudFdpZGdldC5kYXRhKFwia2VuZG9XaW5kb3dcIikuY2VudGVyKCk7XG5cbiAgICAgIHRoaXMuY3VycmVudFdpZGdldC5maW5kKFwiLmJ1dHRvbi0tY2FuY2VsXCIpLmtlbmRvQnV0dG9uKHtcbiAgICAgICAgY2xpY2s6IGZ1bmN0aW9uIHdDb25maXJtQ2FuY2VsQ2xpY2soKSB7XG4gICAgICAgICAgc2NvcHBlZENhbmNlbCgpO1xuICAgICAgICAgIHNjb3BlLmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHZhciBzY29wcGVkQ29uZmlybSA9IF8uYmluZCh0aGlzLm9wdGlvbnMuY29uZmlybSwgdGhpcyk7XG5cbiAgICAgIHRoaXMuY3VycmVudFdpZGdldC5maW5kKFwiLmJ1dHRvbi0tb2tcIikua2VuZG9CdXR0b24oe1xuICAgICAgICBjbGljazogZnVuY3Rpb24gd0NvbmZpcm1Pa0NsaWNrKCkge1xuICAgICAgICAgIHNjb3BwZWRDb25maXJtKCk7XG4gICAgICAgICAgc2NvcGUuZGVzdHJveSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgdGhpcy5lbGVtZW50LmRhdGEoXCJkY3BXaW5kb3dcIiwgdGhpcyk7XG4gICAgfVxuICB9KTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///1ccad812e69cff87bf13\n");

/***/ }),

/***/ "1ed0eaa94f3fca308d51":
/*!******************************************************************!*\
  !*** ./src/vendor/Anakeen/DOCUMENT/IHM/models/mAttributeData.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n  __webpack_require__(/*! underscore */ \"8e08e542008e4aef1f58\"),\n  __webpack_require__(/*! dcpDocument/models/mAttribute */ \"7b46bf7e05a6e22e32e7\"),\n  __webpack_require__(/*! dcpDocument/controllerObjects/constraintHandler */ \"9f0da78a753dd7f04a96\")\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function require_mAttributeData(_, AttributeModel, ConstraintHandler) {\n  \"use strict\";\n\n  return AttributeModel.extend({\n    typeModel: \"ddui:attributeData\",\n    defaults: {\n      isValueAttribute: true,\n      multiple: false,\n      attributeValue: null\n    },\n\n    initialize: function mAttributeinitialize() {\n      this.listenTo(this, \"change:attributeValue\", this.checkConstraint);\n      this._initialAttributeValue = this.get(\"attributeValue\") || {\n        value: null\n      };\n      AttributeModel.prototype.initialize.apply(this, arguments);\n    },\n\n    getValue: function mAttributegetValue() {\n      return this.get(\"attributeValue\");\n    },\n    setValue: function mAttributesetValue(value, index) {\n      var currentValue, idx;\n      if (this.get(\"multiple\") && !_.isNumber(index) && !_.isArray(value)) {\n        throw new Error(\n          \"You need to add an index to set value for a multiple id \" + this.id\n        );\n      }\n      if (this.get(\"multiple\") && index >= 0) {\n        currentValue = _.clone(this.get(\"attributeValue\"));\n        if (currentValue.length < index) {\n          for (idx = currentValue.length; idx < index; idx++) {\n            currentValue.push({ value: null, displayValue: \"\" });\n          }\n        }\n        currentValue[index] = value;\n        this.set(\"attributeValue\", currentValue);\n      } else {\n        this.set(\"attributeValue\", value);\n      }\n    },\n\n    addValue: function mAttributeaddValue(value, index, options) {\n      var currentValue;\n      if (this.hasMultipleOption() && !_.isNumber(index) && !_.isArray(value)) {\n        throw new Error(\n          \"You need to add an index or use array to set value for a multiple id \" +\n            this.id\n        );\n      }\n      // clone array references\n      currentValue = _.toArray(_.map(this.get(\"attributeValue\"), _.clone));\n\n      if (this.hasMultipleOption() && index >= 0) {\n        //Init the multiple value if void\n        if (!currentValue[index]) {\n          currentValue[index] = [];\n        }\n        currentValue[index].push(value);\n        this.set(\"attributeValue\", currentValue, options);\n      } else {\n        currentValue.push(value);\n        this.set(\"attributeValue\", _.clone(currentValue), options);\n      }\n    },\n\n    removeIndexValue: function mAttributeremoveIndexValue(index) {\n      var currentValue, oldValue;\n      if (!this.get(\"multiple\") || !_.isNumber(index)) {\n        throw new Error(\n          \"You need to add an index to set value for a multiple id \" + this.id\n        );\n      }\n      oldValue = this.get(\"attributeValue\");\n      currentValue = _.clone(this.get(\"attributeValue\"));\n      _.each(currentValue, function mAttributeRemoveIndex(value, currentIndex) {\n        currentIndex = parseInt(currentIndex, 10);\n        if (currentIndex === index) {\n          delete currentValue[index];\n        }\n        if (currentIndex > index && oldValue[currentIndex]) {\n          delete currentValue[currentIndex];\n          currentValue[currentIndex - 1] = oldValue[currentIndex];\n        }\n      });\n      currentValue = _.filter(currentValue, function removeUndefined(\n        currentValue\n      ) {\n        return !_.isUndefined(currentValue);\n      });\n      this.set(\"attributeValue\", currentValue, { notUpdateArray: true });\n    },\n\n    /**\n     * Add an indexed value with or without default value\n     * Used by attributes in array to add new line or duplicate line\n     *\n     * @param index\n     * @param copy\n     * @param updateArray set to true to resize array widget\n     */\n    createIndexedValue: function mAttributeCreateIndexedValue(\n      index,\n      copy,\n      updateArray\n    ) {\n      var currentValue, defaultValue;\n      var newValue;\n      if (!this.get(\"multiple\") || !_.isNumber(index)) {\n        throw new Error(\n          \"You need to add an index to set value for a multiple id \" + this.id\n        );\n      }\n      currentValue = _.toArray(_.map(this.get(\"attributeValue\"), _.clone));\n      defaultValue = this.attributes.defaultValue;\n      if (copy) {\n        newValue = _.clone(currentValue[index]);\n      } else if (defaultValue) {\n        newValue = defaultValue;\n      } else if (this.hasMultipleOption()) {\n        newValue = [];\n      } else {\n        newValue = { value: null, displayValue: \"\" };\n      }\n\n      if (index > currentValue.length) {\n        currentValue.push(newValue);\n      } else {\n        currentValue.splice(index, 0, newValue);\n      }\n      this.set(\"attributeValue\", currentValue, {\n        notUpdateArray: !updateArray\n      });\n    },\n\n    /**\n     * Add values to indexed element\n     * Used by attributes in array to add new line or duplicate line\n     *\n     * @param newValue\n     * @param index\n     */\n    addIndexedValue: function mAttributeAddIndexedValue(newValue, index) {\n      var currentValue;\n      if (!_.isNumber(index)) {\n        throw new Error(\n          \"You need to add an index to set value indexed value \" + this.id\n        );\n      }\n      currentValue = _.toArray(_.map(this.get(\"attributeValue\"), _.clone));\n\n      if (index > currentValue.length) {\n        currentValue.push(newValue);\n      } else {\n        currentValue.splice(index, 0, newValue);\n      }\n      this.set(\"attributeValue\", currentValue);\n    },\n\n    /**\n     * move a value in multiple value attribute\n     * @param fromIndex\n     * @param toIndex\n     */\n    moveIndexValue: function mAttributemoveIndexValue(fromIndex, toIndex) {\n      var currentValue, fromValue;\n      if (!this.get(\"multiple\")) {\n        throw new Error(\"Move only multiple attribute : \" + this.id);\n      }\n      currentValue = _.toArray(this.get(\"attributeValue\"));\n      fromValue = _.clone(currentValue[fromIndex]);\n\n      currentValue.splice(fromIndex, 1);\n      currentValue.splice(toIndex, 0, fromValue);\n\n      this.set(\"attributeValue\", currentValue);\n      this.trigger(\"moved\", { from: fromIndex, to: toIndex });\n    },\n\n    getNbLines: function mAttributegetNbLines() {\n      var nbLines = 0;\n      if (!this.get(\"multiple\")) {\n        return -1;\n      }\n      _.each(this.get(\"attributeValue\"), function mAttributeGetMaxLine(\n        value,\n        index\n      ) {\n        if (index > nbLines) {\n          nbLines = index;\n        }\n      });\n      return nbLines;\n    },\n\n    isInArray: function mAttributeisInArray() {\n      var aparent = this.getParent();\n      return (\n        aparent && aparent.attributes && aparent.attributes.type === \"array\"\n      );\n    },\n\n    checkConstraint: function mAttributecheckConstraint(config) {\n      var response = new ConstraintHandler(),\n        responseText = {};\n      var scope = this;\n      config = _.extend(\n        { clearError: this.hasInternalError, displayError: true },\n        config\n      );\n      this.trigger(\"constraint\", {\n        model: this,\n        response: response,\n        value: this.get(\"attributeValue\")\n      });\n      if (response.hasConstraintMessages()) {\n        _.each(\n          response.getConstraintMessages(),\n          function mAttributeData_checkConstraintElement(currentResponse) {\n            responseText[currentResponse.index] =\n              responseText[currentResponse.index] || \"\";\n            responseText[currentResponse.index] +=\n              currentResponse.message + \" \";\n          }\n        );\n        if (config.displayError) {\n          this.hasInternalError = true;\n          // Force redraw\n          scope.setErrorMessage(null); // jshint ignore:line\n\n          _.each(responseText, function mAttributeData_checkErrorMessage(\n            text,\n            index\n          ) {\n            index = parseInt(index);\n            scope.setErrorMessage(text, index);\n          });\n        }\n        return false;\n      } else {\n        if (config.clearError) {\n          this.setErrorMessage(null);\n          this.hasInternalError = false;\n        }\n        return true;\n      }\n    }\n  });\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1ed0eaa94f3fca308d51\n");

/***/ }),

/***/ "265a1acc550f361c7884":
/*!*********************************************************!*\
  !*** ./src/vendor/Anakeen/DOCUMENT/IHM/models/mMenu.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*global define*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! underscore */ \"8e08e542008e4aef1f58\"), __webpack_require__(/*! backbone */ \"1858b45bf48591489d06\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function mMenu(_, Backbone) {\n  \"use strict\";\n\n  return Backbone.Model.extend({\n    typeModel: \"ddui:menu\",\n    /**\n     * Menu model are not linked to REST element so always new\n     * @returns {boolean}\n     */\n    isNew: function mMenu_isNew() {\n      return true;\n    }\n  });\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjY1YTFhY2M1NTBmMzYxYzc4ODQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdmVuZG9yL0FuYWtlZW4vRE9DVU1FTlQvSUhNL21vZGVscy9tTWVudS5qcz84ZGE2Il0sInNvdXJjZXNDb250ZW50IjpbIi8qZ2xvYmFsIGRlZmluZSovXG5kZWZpbmUoW1widW5kZXJzY29yZVwiLCBcImJhY2tib25lXCJdLCBmdW5jdGlvbiBtTWVudShfLCBCYWNrYm9uZSkge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICByZXR1cm4gQmFja2JvbmUuTW9kZWwuZXh0ZW5kKHtcbiAgICB0eXBlTW9kZWw6IFwiZGR1aTptZW51XCIsXG4gICAgLyoqXG4gICAgICogTWVudSBtb2RlbCBhcmUgbm90IGxpbmtlZCB0byBSRVNUIGVsZW1lbnQgc28gYWx3YXlzIG5ld1xuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgICAqL1xuICAgIGlzTmV3OiBmdW5jdGlvbiBtTWVudV9pc05ldygpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///265a1acc550f361c7884\n");

/***/ }),

/***/ "30266a3d67b2368ca3df":
/*!*************************************************************************!*\
  !*** ./src/vendor/Anakeen/DOCUMENT/IHM/widgets/window/wNotification.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n  __webpack_require__(/*! jquery */ \"127c8cf59f228bb01a21\"),\n  __webpack_require__(/*! underscore */ \"8e08e542008e4aef1f58\"),\n  __webpack_require__(/*! dcpDocument/widgets/widget */ \"a903b12ace80b5b4ecce\")\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function wNotification($, _) {\n  \"use strict\";\n\n  $.widget(\"dcp.dcpNotification\", {\n    options: {\n      // animation:false,\n      autoHideAfter: 5000,\n      appendTo: \"#dcpNotificationContainer\",\n      position: {\n        top: 60, // override by notification.less\n        right: 100\n      },\n      templates: [\n        {\n          type: \"error\",\n          template:\n            '<div class=\"dcpNotification--content dcpNotification--error\">' +\n            '<span class=\"dcpNotification--symbol fa-stack fa-lg\"><span class=\"fa fa-bolt\"></span></span>' +\n            '<div class=\"dcpNotification--message\"><h1>#: title #</h1>' +\n            \"<p>#: message #</p><p> #= htmlMessage #</p></div></div>\"\n        },\n        {\n          type: \"warning\",\n          template:\n            '<div class=\"dcpNotification--content dcpNotification--warning\">' +\n            '<span class=\"dcpNotification--symbol fa-stack fa-lg\"><span class=\"fa fa-warning fa-inverse\"></span></span>' +\n            '<div class=\"dcpNotification--message\"><h1>#: title #</h1>' +\n            \"<p>#: message #</p><p> #= htmlMessage #</p></div></div>\"\n        },\n        {\n          type: \"info\",\n          template:\n            '<div class=\"dcpNotification--content dcpNotification--info\">' +\n            '<span class=\"dcpNotification--symbol fa-stack fa-lg\"><span class=\"fa fa-info fa-inverse fa-flip-horizontal\"></span></span>' +\n            '<div class=\"dcpNotification--message\"><h1>#: title #</h1>' +\n            \"<p>#: message #</p><p> #= htmlMessage #</p></div></div>\"\n        },\n        {\n          type: \"notice\",\n          template:\n            '<div class=\"dcpNotification--content dcpNotification--notice\">' +\n            '<span class=\"dcpNotification--symbol fa-stack fa-lg\"><span class=\"fa fa-info fa-inverse fa-flip-horizontal\"></span></span>' +\n            '<div class=\"dcpNotification--message\"><h1>#: title #</h1>' +\n            \"<p>#: message #</p><p> #= htmlMessage #</p></div></div>\"\n        },\n        {\n          type: \"success\",\n          template:\n            '<div class=\"dcpNotification--content dcpNotification--info\">' +\n            '<span class=\"dcpNotification--symbol fa-stack fa-lg\"><span class=\"fa fa-check fa-inverse\"></span></span>' +\n            '<div class=\"dcpNotification--message\"><h1>#: title #</h1>' +\n            \"<p>#: message #</p><p> #= htmlMessage #</p></div></div>\"\n        }\n      ],\n\n      labels: {\n        moreButton: \"View more ...\",\n        moreWindowTitle: \"Notification\"\n      }\n    },\n    notificationElement: null,\n\n    _create: function wNotificationCreate() {\n      var scope = this;\n      this.notificationElement = $('<div class=\"dcpNotification--widget\" />');\n\n      this.element.append(\n        $('<div id=\"dcpNotificationContainer\" class=\"dcpNotifications\"/>')\n      );\n      this.element.append(this.notificationElement);\n\n      this.options.show = _.bind(this.showMore, this);\n      this.notificationElement.kendoNotification(this.options);\n\n      this.element.on(\"notification\", function wNotificationOn(event, data) {\n        scope.show(data.type, data);\n      });\n    },\n\n    showMore: function wNotificationShowMessage(event) {\n      var $boxMessage = event.element;\n      var $message = $boxMessage.find(\".dcpNotification--message\");\n      var $more;\n      var widgetNotification = this;\n\n      if ($message.prop(\"scrollHeight\") > $message.height()) {\n        $more = $('<div class=\"dcpNotification--more\"/>').text(\n          this.options.labels.moreButton\n        );\n        $boxMessage.append($more);\n        $more.on(\"click\", function wNotificationClickMode(event) {\n          var $clone = $boxMessage.clone();\n          var cloneWindow;\n\n          if (widgetNotification.cloneWindow) {\n            widgetNotification.cloneWindow.destroy();\n            widgetNotification.cloneWindow = null;\n          }\n          $boxMessage.append($clone);\n          $clone.find(\".dcpNotification--more\").remove();\n          $clone\n            .find(\".dcpNotification--message\")\n            .prepend($clone.find(\".dcpNotification--symbol\"));\n          event.stopPropagation();\n          cloneWindow = $clone\n            .kendoWindow({\n              title: widgetNotification.options.labels.moreWindowTitle,\n              width: \"400px\"\n            })\n            .data(\"kendoWindow\");\n          cloneWindow.center();\n          widgetNotification.cloneWindow = cloneWindow;\n        });\n      }\n    },\n\n    show: function wNotificationShow(type, options) {\n      options.title = options.title || \"\";\n      options.message = options.message || \"\";\n      options.htmlMessage = options.htmlMessage || \"\";\n      if (\n        $.inArray(type, [\"error\", \"info\", \"warning\", \"success\", \"notice\"]) ===\n        -1\n      ) {\n        type = \"info\";\n      }\n      this.notificationElement.data(\"kendoNotification\").show(\n        {\n          title: options.title,\n          message: options.message,\n          htmlMessage: options.htmlMessage // @TODO NEED TO CLEAN HTML TO PREVENT XSS\n        },\n        type\n      );\n\n      if (type === \"error\" && console.error) {\n        console.error(options.title, options.message, options.htmlMessage);\n      }\n    },\n\n    showError: function wNotificationShowError(options) {\n      this.show(\"error\", options);\n    },\n\n    showInfo: function wNotificationShowInfo(options) {\n      this.show(\"info\", options);\n    },\n\n    showWarning: function wNotificationShowWarning(options) {\n      this.show(\"warning\", options);\n    },\n\n    showSuccess: function wNotificationShowSuccess(options) {\n      this.show(\"success\", options);\n    },\n\n    clear: function wNotificationClear() {\n      this.notificationElement.kendoNotification(\"hide\");\n      if (this.cloneWindow) {\n        this.cloneWindow.destroy();\n        this.cloneWindow = null;\n      }\n    }\n  });\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///30266a3d67b2368ca3df\n");

/***/ }),

/***/ "3120d707f7fb455e9bc0":
/*!*******************************************************************!*\
  !*** ./src/vendor/Anakeen/DOCUMENT/IHM/widgets/window/wDialog.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ \"127c8cf59f228bb01a21\"), __webpack_require__(/*! underscore */ \"8e08e542008e4aef1f58\"), __webpack_require__(/*! dcpDocument/widgets/widget */ \"a903b12ace80b5b4ecce\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function wDialog(\n  $,\n  _\n) {\n  \"use strict\";\n\n  $.widget(\"dcp.dcpDialog\", {\n    options: {\n      window: {\n        modal: true,\n        actions: [\"Maximize\", \"Close\"],\n        visible: false,\n        height: \"300px\",\n        width: \"500px\",\n        title: \"-\"\n      },\n      maximizeWidth: 768 // Limit in px to open with maximize\n    },\n\n    dialogWindow: null,\n\n    _create: function dcpDialog_create() {\n      var currentWidget = this;\n      this.element.data(\"dcpDialog\", this);\n      if (!this.options.window.close) {\n        this.options.window.close = function dcpDialog_onclose() {\n          _.defer(_.bind(currentWidget.destroy, currentWidget));\n        };\n      } else {\n        this.options.window.close = _.wrap(\n          this.options.window.close,\n          function dcpDialog_closeWrap(close) {\n            var event = arguments[1];\n            close.apply(this, _.rest(arguments));\n            if (!event.isDefaultPrevented()) {\n              _.defer(_.bind(currentWidget.destroy, currentWidget));\n            }\n          }\n        );\n      }\n\n      if ($(window).width() <= this.options.maximizeWidth) {\n        this.options.window.width = \"auto\";\n        this.options.window.heigth = \"auto\";\n      }\n      this.dialogWindow = this.element\n        .kendoWindow(this.options.window)\n        .data(\"kendoWindow\");\n    },\n\n    open: function dcpDialog_Open() {\n      var kWindow = this.dialogWindow;\n      if ($(window).width() <= this.options.maximizeWidth) {\n        kWindow.setOptions({\n          actions: [\"Close\"],\n          animation: false\n        });\n\n        kWindow.open();\n        _.delay(function wDialogMaximize() {\n          kWindow.maximize(); // Need to defer to wait window to be really opened\n        }, 100);\n      } else {\n        kWindow.setOptions({\n          actions: this.options.window.actions\n        });\n        kWindow.center();\n        kWindow.open();\n      }\n    },\n\n    close: function dcpDialog_close() {\n      var kendoWindow = this.dialogWindow;\n      if (kendoWindow) {\n        kendoWindow.close();\n      }\n    },\n\n    _destroy: function dcpDialog_destroy() {\n      if (\n        this.element &&\n        this.dialogWindow &&\n        this.element.data(\"kendoWindow\")\n      ) {\n        this.dialogWindow.destroy();\n        this.dialogWindow = null;\n      } else {\n        this._super();\n      }\n    }\n  });\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzEyMGQ3MDdmN2ZiNDU1ZTliYzAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdmVuZG9yL0FuYWtlZW4vRE9DVU1FTlQvSUhNL3dpZGdldHMvd2luZG93L3dEaWFsb2cuanM/NTY3MSJdLCJzb3VyY2VzQ29udGVudCI6WyJkZWZpbmUoW1wianF1ZXJ5XCIsIFwidW5kZXJzY29yZVwiLCBcImRjcERvY3VtZW50L3dpZGdldHMvd2lkZ2V0XCJdLCBmdW5jdGlvbiB3RGlhbG9nKFxuICAkLFxuICBfXG4pIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgJC53aWRnZXQoXCJkY3AuZGNwRGlhbG9nXCIsIHtcbiAgICBvcHRpb25zOiB7XG4gICAgICB3aW5kb3c6IHtcbiAgICAgICAgbW9kYWw6IHRydWUsXG4gICAgICAgIGFjdGlvbnM6IFtcIk1heGltaXplXCIsIFwiQ2xvc2VcIl0sXG4gICAgICAgIHZpc2libGU6IGZhbHNlLFxuICAgICAgICBoZWlnaHQ6IFwiMzAwcHhcIixcbiAgICAgICAgd2lkdGg6IFwiNTAwcHhcIixcbiAgICAgICAgdGl0bGU6IFwiLVwiXG4gICAgICB9LFxuICAgICAgbWF4aW1pemVXaWR0aDogNzY4IC8vIExpbWl0IGluIHB4IHRvIG9wZW4gd2l0aCBtYXhpbWl6ZVxuICAgIH0sXG5cbiAgICBkaWFsb2dXaW5kb3c6IG51bGwsXG5cbiAgICBfY3JlYXRlOiBmdW5jdGlvbiBkY3BEaWFsb2dfY3JlYXRlKCkge1xuICAgICAgdmFyIGN1cnJlbnRXaWRnZXQgPSB0aGlzO1xuICAgICAgdGhpcy5lbGVtZW50LmRhdGEoXCJkY3BEaWFsb2dcIiwgdGhpcyk7XG4gICAgICBpZiAoIXRoaXMub3B0aW9ucy53aW5kb3cuY2xvc2UpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zLndpbmRvdy5jbG9zZSA9IGZ1bmN0aW9uIGRjcERpYWxvZ19vbmNsb3NlKCkge1xuICAgICAgICAgIF8uZGVmZXIoXy5iaW5kKGN1cnJlbnRXaWRnZXQuZGVzdHJveSwgY3VycmVudFdpZGdldCkpO1xuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5vcHRpb25zLndpbmRvdy5jbG9zZSA9IF8ud3JhcChcbiAgICAgICAgICB0aGlzLm9wdGlvbnMud2luZG93LmNsb3NlLFxuICAgICAgICAgIGZ1bmN0aW9uIGRjcERpYWxvZ19jbG9zZVdyYXAoY2xvc2UpIHtcbiAgICAgICAgICAgIHZhciBldmVudCA9IGFyZ3VtZW50c1sxXTtcbiAgICAgICAgICAgIGNsb3NlLmFwcGx5KHRoaXMsIF8ucmVzdChhcmd1bWVudHMpKTtcbiAgICAgICAgICAgIGlmICghZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgICAgICAgXy5kZWZlcihfLmJpbmQoY3VycmVudFdpZGdldC5kZXN0cm95LCBjdXJyZW50V2lkZ2V0KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICBpZiAoJCh3aW5kb3cpLndpZHRoKCkgPD0gdGhpcy5vcHRpb25zLm1heGltaXplV2lkdGgpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zLndpbmRvdy53aWR0aCA9IFwiYXV0b1wiO1xuICAgICAgICB0aGlzLm9wdGlvbnMud2luZG93LmhlaWd0aCA9IFwiYXV0b1wiO1xuICAgICAgfVxuICAgICAgdGhpcy5kaWFsb2dXaW5kb3cgPSB0aGlzLmVsZW1lbnRcbiAgICAgICAgLmtlbmRvV2luZG93KHRoaXMub3B0aW9ucy53aW5kb3cpXG4gICAgICAgIC5kYXRhKFwia2VuZG9XaW5kb3dcIik7XG4gICAgfSxcblxuICAgIG9wZW46IGZ1bmN0aW9uIGRjcERpYWxvZ19PcGVuKCkge1xuICAgICAgdmFyIGtXaW5kb3cgPSB0aGlzLmRpYWxvZ1dpbmRvdztcbiAgICAgIGlmICgkKHdpbmRvdykud2lkdGgoKSA8PSB0aGlzLm9wdGlvbnMubWF4aW1pemVXaWR0aCkge1xuICAgICAgICBrV2luZG93LnNldE9wdGlvbnMoe1xuICAgICAgICAgIGFjdGlvbnM6IFtcIkNsb3NlXCJdLFxuICAgICAgICAgIGFuaW1hdGlvbjogZmFsc2VcbiAgICAgICAgfSk7XG5cbiAgICAgICAga1dpbmRvdy5vcGVuKCk7XG4gICAgICAgIF8uZGVsYXkoZnVuY3Rpb24gd0RpYWxvZ01heGltaXplKCkge1xuICAgICAgICAgIGtXaW5kb3cubWF4aW1pemUoKTsgLy8gTmVlZCB0byBkZWZlciB0byB3YWl0IHdpbmRvdyB0byBiZSByZWFsbHkgb3BlbmVkXG4gICAgICAgIH0sIDEwMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBrV2luZG93LnNldE9wdGlvbnMoe1xuICAgICAgICAgIGFjdGlvbnM6IHRoaXMub3B0aW9ucy53aW5kb3cuYWN0aW9uc1xuICAgICAgICB9KTtcbiAgICAgICAga1dpbmRvdy5jZW50ZXIoKTtcbiAgICAgICAga1dpbmRvdy5vcGVuKCk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIGNsb3NlOiBmdW5jdGlvbiBkY3BEaWFsb2dfY2xvc2UoKSB7XG4gICAgICB2YXIga2VuZG9XaW5kb3cgPSB0aGlzLmRpYWxvZ1dpbmRvdztcbiAgICAgIGlmIChrZW5kb1dpbmRvdykge1xuICAgICAgICBrZW5kb1dpbmRvdy5jbG9zZSgpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBfZGVzdHJveTogZnVuY3Rpb24gZGNwRGlhbG9nX2Rlc3Ryb3koKSB7XG4gICAgICBpZiAoXG4gICAgICAgIHRoaXMuZWxlbWVudCAmJlxuICAgICAgICB0aGlzLmRpYWxvZ1dpbmRvdyAmJlxuICAgICAgICB0aGlzLmVsZW1lbnQuZGF0YShcImtlbmRvV2luZG93XCIpXG4gICAgICApIHtcbiAgICAgICAgdGhpcy5kaWFsb2dXaW5kb3cuZGVzdHJveSgpO1xuICAgICAgICB0aGlzLmRpYWxvZ1dpbmRvdyA9IG51bGw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9zdXBlcigpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///3120d707f7fb455e9bc0\n");

/***/ }),

/***/ "3190a08206ef32128b6a":
/*!****************************************************************************!*\
  !*** ./src/vendor/Anakeen/DOCUMENT/IHM/widgets/attributes/color/wColor.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*global define*/\n\n(function umdRequire(root, factory) {\n  \"use strict\";\n\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n      __webpack_require__(/*! jquery */ \"127c8cf59f228bb01a21\"),\n      __webpack_require__(/*! underscore */ \"8e08e542008e4aef1f58\"),\n      __webpack_require__(/*! dcpDocument/widgets/attributes/text/wText */ \"f54cd12cb65078ca4c4a\")\n    ], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(window, function require_wColor($, _) {\n  \"use strict\";\n\n  $.widget(\"dcp.dcpColor\", $.dcp.dcpText, {\n    options: {\n      type: \"color\",\n\n      renderOptions: {\n        kendoColorConfiguration: {\n          buttons: false\n        }\n      },\n      labels: {}\n    },\n    /**\n     * The kendoColorPicker widget instance\n     */\n    kendoWidget: null,\n\n    _initDom: function wColorInitDom() {\n      this.element.addClass(\"dcpAttribute__content\");\n      this.element.attr(\"data-type\", this.getType());\n      this.element.attr(\"data-attrid\", this.options.id);\n      if (\n        parseFloat(this.options.attributeValue.displayValue) ===\n        parseFloat(this.options.attributeValue.value)\n      ) {\n        this.options.attributeValue.displayValue = this.formatNumber(\n          this.options.attributeValue.value\n        );\n      }\n\n      //noinspection JSPotentiallyInvalidConstructorUsage,JSAccessibilityCheck\n      $.dcp.dcpAttribute.prototype._initDom.apply(this, []);\n\n      this.kendoWidget = this.element.find(\".dcpAttribute__value--edit\");\n      if (this.kendoWidget) {\n        if (this.options.hasAutocomplete) {\n          this.activateAutocomplete(this.kendoWidget);\n        } else {\n          this._activateColor(this.kendoWidget);\n\n          if (this.kendoWidget.hasClass(\"form-control\")) {\n            this.element.find(\".k-colorpicker\").addClass(\"form-control\");\n          }\n        }\n      }\n      if (\n        this.element.find(\".dcpAttribute__content__buttons button\").length === 0\n      ) {\n        this.element\n          .find(\".k-picker-wrap\")\n          .addClass(\"dcpAttribute__content__nobutton\");\n      }\n      var colorTag = $(\"<div></div>\", {\n        class: \"dcpAttribute__content__color__tag\"\n      });\n      colorTag.css(\"background-color\", this.options.attributeValue.value);\n      this.element.find(\".dcpAttribute__value--read\").prepend(colorTag);\n    },\n\n    _initChangeEvent: function wcolInitChangeEvent() {\n      // set by widget if no autocomplete\n      if (this.options.hasAutocomplete) {\n        this._super();\n      }\n    },\n\n    setValue: function wcolSetValue(value) {\n      // this._super.(value);\n      // Don't call dcpText::setValue()\n\n      value = _.clone(value);\n\n      if (_.has(value, \"value\") && !_.has(value, \"displayValue\")) {\n        value.displayValue = this.formatNumber(value.value);\n      }\n\n      $.dcp.dcpAttribute.prototype.setValue.apply(this, [value]);\n\n      if (this.getMode() === \"write\") {\n        var originalValue = this.kendoWidget.data(\"kendoColorPicker\").value();\n        // : explicit lazy equal\n        //noinspection JSHint\n        if (originalValue != value.value) {\n          this.kendoWidget.data(\"kendoColorPicker\").value(value.value);\n          // Modify value only if different\n          this.flashElement();\n        }\n      } else if (this.getMode() === \"read\") {\n        this.getContentElements().text(value.displayValue);\n        this.element\n          .find(\".dcpAttribute__value--read\")\n          .css(\"border-color\", value.value);\n      } else {\n        throw new Error(\n          \"Attribute \" + this.options.id + \" unkown mode \" + this.getMode()\n        );\n      }\n    },\n\n    _activateColor: function wcolActivateNumber(inputValue) {\n      return inputValue.kendoColorPicker(this.getKendoColorOptions());\n    },\n\n    formatNumber: function wcolFormatNumber(value) {\n      return kendo.toString(value, this.getKendoColorOptions().format);\n    },\n\n    /**\n     * Get kendo option from normal options and from renderOptions.kendoNumeric\n     * @returns {*}\n     */\n    getKendoColorOptions: function wColorgetKendoColorOptions() {\n      var scope = this,\n        kendoOptions = {},\n        defaultOptions = {\n          change: function wColor_onchange() {\n            // Need to set by widget to honor decimals option\n            scope.setValue({ value: this.value() });\n          }\n        };\n\n      if (_.isObject(scope.options.renderOptions.kendoColorConfiguration)) {\n        kendoOptions = scope.options.renderOptions.kendoColorConfiguration;\n      }\n      return _.extend(defaultOptions, kendoOptions);\n    },\n\n    getType: function wcolGetType() {\n      return \"color\";\n    },\n\n    testValue: function wcolTestValue(value) {\n      this._super(value);\n      if (!_.isNumber(value.value)) {\n        throw new Error(\n          \"The value must be a number for (attrid : \" + this.options.id + \")\"\n        );\n      }\n    },\n\n    close: function wColor_close() {\n      if (this.kendoWidget && this.kendoWidget.data(\"kendoColorPicker\")) {\n        this.kendoWidget.data(\"kendoColorPicker\").close();\n      }\n      this._super();\n    },\n\n    _destroy: function _destroy() {\n      if (this.kendoWidget && this.kendoWidget.data(\"kendoColorPicker\")) {\n        this.kendoWidget.data(\"kendoColorPicker\").destroy();\n      }\n      this._super();\n    }\n  });\n\n  return $.fn.dcpColor;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3190a08206ef32128b6a\n");

/***/ }),

/***/ "32c978388bb1efe4e62a":
/*!****************************************************************************!*\
  !*** ./src/vendor/Anakeen/DOCUMENT/IHM/widgets/attributes/docid/wDocid.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*global define*/\n\n(function umdRequire(root, factory) {\n  \"use strict\";\n\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n      __webpack_require__(/*! jquery */ \"127c8cf59f228bb01a21\"),\n      __webpack_require__(/*! underscore */ \"8e08e542008e4aef1f58\"),\n      __webpack_require__(/*! mustache */ \"bcd31d01884fc294fd69\"),\n      __webpack_require__(/*! dcpDocument/widgets/attributes/wAttribute */ \"bd2b448fa3670797b988\")\n    ], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(window, function require_wDocid($, _, Mustache) {\n  \"use strict\";\n\n  //noinspection JSUnusedGlobalSymbols\n  $.widget(\"dcp.dcpDocid\", $.dcp.dcpAttribute, {\n    options: {\n      type: \"docid\",\n      renderOptions: {\n        kendoMultiSelectConfiguration: {\n          minLength: 1,\n          itemTemplate:\n            '<div class=\"dcpAutocomplete\"><span class=\"k-state-default\">#= data.title#</span>' +\n            \"#if (data.message) {#\" +\n            '<div class=\"dcpAutocomplete--#= data.message.type#\">#: data.message.contentText# #= data.message.contentHtml#</div>' +\n            \"#}# </div>\"\n        },\n        kendoComboBoxConfiguration: {\n          template:\n            '<div class=\"dcpAutocomplete\"><span class=\"k-state-default\">#= data.title#</span>' +\n            \"#if (data.message) {#\" +\n            '<div class=\"dcpAutocomplete--#= data.message.type#\">#: data.message.contentText# #= data.message.contentHtml#</div>' +\n            \"#}# </div>\"\n        },\n        editDisplay: \"autoCompletion\"\n      },\n      labels: {\n        allSelectedDocument: \"No more matching\"\n      }\n    },\n\n    kendoWidget: null,\n\n    _initDom: function wDocidInitDom() {\n      var scope = this;\n      this.element.addClass(\"dcpAttribute__content\");\n      this.element.attr(\"data-type\", this.getType());\n      this.element.attr(\"data-attrid\", this.options.id);\n\n      if (this._isMultiple()) {\n        this.options.attributeValues = _.toArray(this.options.attributeValue);\n        this.options.isMultiple = true;\n      }\n\n      if (this.getMode() === \"read\") {\n        if (this.options.renderOptions.format) {\n          if (this._isMultiple()) {\n            _.each(this.options.attributeValues, function wDocidinitDomFormat(\n              singleValue\n            ) {\n              singleValue.formatValue = Mustache.render(\n                scope.options.renderOptions.format,\n                singleValue\n              );\n            });\n          } else {\n            this.options.attributeValue.formatValue = Mustache.render(\n              this.options.renderOptions.format,\n              this.options.attributeValue\n            );\n          }\n        }\n        if (this.options.renderOptions.documentIconSize) {\n          var reSize = /sizes\\/([0-9xcfs]+)/;\n          var noIcon =\n            [\"0\", \"0x0\", \"x0\"].indexOf(\n              this.options.renderOptions.documentIconSize\n            ) !== -1;\n          if (this._isMultiple()) {\n            _.each(this.options.attributeValues, function wDocidResizeIcons(\n              singleValue\n            ) {\n              if (noIcon) {\n                singleValue.icon = null;\n              } else if (singleValue.icon) {\n                singleValue.icon = singleValue.icon.replace(\n                  reSize,\n                  \"sizes/\" + scope.options.renderOptions.documentIconSize\n                );\n              }\n            });\n          } else if (noIcon) {\n            this.options.attributeValue.icon = null;\n          } else if (this.options.attributeValue.icon) {\n            this.options.attributeValue.icon = this.options.attributeValue.icon.replace(\n              reSize,\n              \"sizes/\" + this.options.renderOptions.documentIconSize\n            );\n          }\n        }\n\n        //noinspection JSPotentiallyInvalidConstructorUsage,JSAccessibilityCheck\n        $.dcp.dcpAttribute.prototype._initDom.apply(this, []);\n      } else if (this.getMode() === \"write\") {\n        //noinspection JSPotentiallyInvalidConstructorUsage,JSAccessibilityCheck\n        $.dcp.dcpAttribute.prototype._initDom.apply(this, []);\n        this.kendoWidget = this.element.find(\".dcpAttribute__value--docid\");\n        if (this.options.renderOptions.placeHolder) {\n          this.options.renderOptions.kendoMultiSelectConfiguration.placeholder = this.options.renderOptions.placeHolder;\n          this.options.renderOptions.kendoComboBoxConfiguration.placeholder = this.options.renderOptions.placeHolder;\n        }\n        if (this._isMultiple()) {\n          this._decorateMultipleValue(this.kendoWidget);\n        } else {\n          switch (this.options.renderOptions.editDisplay) {\n            case \"singleMultiple\":\n              this._decorateSingleValue(this.kendoWidget);\n\n              break;\n            case \"autoCompletion\":\n              this.singleCombobox(this.kendoWidget);\n              break;\n            case \"list\":\n              this.singleDropdown(this.kendoWidget);\n              break;\n            default:\n              this.singleCombobox(this.kendoWidget);\n          }\n        }\n        this._updateCreateButton();\n      }\n    },\n\n    _updateCreateButton: function wDocid_updateCreateButton() {\n      var currentValue = this.options.attributeValue;\n      var buttonsConfig = this.options.renderOptions.buttons;\n\n      this.element\n        .find(\".dcpAttribute__content__button--create\")\n        .each(function wDocid_updateCreateButtonEach() {\n          var $button = $(this);\n          var buttonIndex = $button.data(\"index\");\n          var buttonConfig = buttonsConfig[buttonIndex];\n\n          $button.prop(\"disabled\", false);\n          if (currentValue.value) {\n            $button.html(\n              buttonConfig.renderHtmlContent + buttonConfig.htmlEditContent\n            );\n            // @TODO Find an efficient way to verify edit access of target\n            /*\n                     if (!currentValue.value) {\n                     $button.prop(\"disabled\", true);\n                     }*/\n          } else {\n            // also when mutiple always create\n            $button.html(\n              buttonConfig.renderHtmlContent + buttonConfig.htmlCreateContent\n            );\n          }\n        });\n    },\n\n    /**\n     * Init event when a hyperlink is associated to the attribute\n     *\n     * @protected\n     */\n    _initLinkEvent: function wDocidInitLinkEvent() {\n      this._super();\n      var htmlLink = this.getLink();\n      var currentWidget = this;\n      if (htmlLink) {\n        this.element.on(\n          \"click.\" + this.eventNamespace,\n          \".dcpAttribute__content__link\",\n          function wDocidInitLinkOnClick(event) {\n            var $this = $(this);\n            if (htmlLink.target === \"_render\") {\n              event.preventDefault();\n              currentWidget._trigger(\"fetchdocument\", event, {\n                index: $this.data(\"index\"),\n                tableLine: $this\n                  .closest(\".dcpArray__content__line\")\n                  .data(\"line\")\n              });\n            }\n          }\n        );\n      }\n      return this;\n    },\n    _initButtonsEvent: function _initButtonsEvent() {\n      var currentWidget = this;\n      this._super();\n\n      this.element.on(\n        \"click\" + this.eventNamespace,\n        \".dcpAttribute__content__button--create\",\n        function wAttributeButtonClick(event) {\n          var buttonsConfig = currentWidget.options.renderOptions.buttons;\n          var $button = $(this);\n          var buttonIndex = $button.data(\"index\");\n          var buttonConfig = buttonsConfig[buttonIndex];\n\n          currentWidget._trigger(\"externalLinkSelected\", event, {\n            target: event.target,\n            eventId: \"attribute.createDocumentRelation\",\n            index: currentWidget._getIndex(),\n            buttonConfig: buttonConfig\n          });\n        }\n      );\n      this.element.tooltip({\n        selector: \".dcpAttribute__content__buttons button\",\n        placement: \"top\",\n        trigger: \"hover\",\n        html: true,\n        title: function wAttributeGetButtonTitle() {\n          var title = $(this).data(\"title\");\n          var attrValue = currentWidget.getValue();\n          return Mustache.render(title || \"\", attrValue);\n        },\n        container: this.element\n      });\n\n      return this;\n    },\n    /**\n     * Define inputs for focus\n     * @protected\n     */\n    _getFocusInput: function wDocidFocusInput() {\n      return this.element.find(\"input\");\n    },\n\n    /**\n     * Get kendo option from normal options and from renderOptions.kendoMultiSelectConfiguration\n     * @returns {*}\n     */\n    getKendoOptions: function wDocidGetKendoOptions(inputValue, extraOptions) {\n      var currentWidget = this;\n      var options = {\n        autoBind: false,\n        clearButton: false,\n        dataTextField: \"docTitle\",\n        dataValueField: \"docId\",\n        highlightFirst: true,\n        //value: values,\n        dataSource: {\n          // type: \"json\",\n          serverFiltering: true,\n          transport: {\n            read: function wDocidSelectRead(options) {\n              currentWidget._hasBeenRequested = true;\n              options.data.index = currentWidget._getIndex();\n              return currentWidget.options.autocompleteRequest.call(\n                null,\n                options,\n                currentWidget._getIndex()\n              );\n            }\n          },\n          schema: {\n            // Add already recorded data to items\n            data: function wDocidSelectSchema(items) {\n              //Add new elements\n              _.each(items, function wDocidDataCompose(currentItem) {\n                if (\n                  currentItem.values &&\n                  currentItem.values[currentWidget.options.id]\n                ) {\n                  currentItem.docId =\n                    currentItem.values[currentWidget.options.id].value;\n                  currentItem.docTitle =\n                    currentItem.values[currentWidget.options.id].displayValue;\n                }\n              });\n\n              //Suppress multiple items\n              return _.uniq(items, false, function wDocidDataUniq(currentItem) {\n                return currentItem.docId || currentItem.message;\n              });\n            }\n          }\n        },\n        select: function kendoDocidSelect(event) {\n          if (!event.item || _.isUndefined(event.item.index())) {\n            return;\n          }\n\n          var valueIndex = currentWidget._getIndex();\n          var dataItem = this.dataSource.at(event.item.index()).toJSON();\n\n          if (dataItem.message) {\n            event.preventDefault();\n          } else {\n            //The object returned by dataSource.at are internal kendo object so I clean it with toJSON\n\n            _.defer(function wDocidChangeOnSelect() {\n              // Change others attributes designed by help returns\n              currentWidget._trigger(\n                \"changeattrsvalue\",\n                event,\n                {\n                  dataItem: dataItem,\n                  valueIndex: valueIndex\n                },\n                currentWidget._getIndex()\n              );\n            });\n          }\n        },\n        change: function kendoChangeSelect(event) {\n          // set in case of delete item\n          var oldValues = currentWidget.options.attributeValue;\n          var displayValue;\n          var newValues = [];\n          var kMultiSelect = this;\n          var widgetValue = this.value();\n\n          if (_.isArray(widgetValue)) {\n            _.each(widgetValue, function wDocidSelectChange(val) {\n              if (!_.isUndefined(val)) {\n                displayValue = _.where(oldValues, { value: val });\n                if (displayValue.length === 0) {\n                  displayValue = _.where(kMultiSelect.dataSource.data(), {\n                    docId: val\n                  });\n                  if (displayValue.length > 0) {\n                    displayValue = displayValue[0].docTitle;\n                  } else {\n                    displayValue = \"-\";\n                  }\n                } else {\n                  displayValue = displayValue[0].displayValue;\n                }\n\n                newValues.push({ value: val, displayValue: displayValue });\n              }\n            });\n\n            if (!currentWidget._isMultiple()) {\n              if (newValues.length > 0) {\n                newValues = newValues[0];\n              } else {\n                newValues = { value: null, displayValue: \"\" };\n              }\n            }\n          } else {\n            if (widgetValue) {\n              displayValue = _.where(kMultiSelect.dataSource.data(), {\n                docId: widgetValue\n              });\n              if (displayValue.length > 0) {\n                displayValue = displayValue[0].docTitle;\n                newValues = { value: widgetValue, displayValue: displayValue };\n              } else {\n                newValues = { value: null, displayValue: \"\" };\n              }\n            } else {\n              newValues = { value: null, displayValue: \"\" };\n            }\n          }\n\n          currentWidget.setValue(newValues, event);\n        },\n        open: function wDocidSelectOpen(event) {\n          if (currentWidget._hasBeenRequested !== true) {\n            event.preventDefault();\n            currentWidget.kendoWidgetObject.search(\"\");\n          }\n          this.ul.addClass(\"dcpAttribute__select--docid\");\n        },\n        close: function wDocidSelectClose() {\n          if (this.ns !== \".kendoDropDownList\") {\n            currentWidget._hasBeenRequested = false;\n          }\n        },\n        filtering: function wDocidSelectOpen() {\n          this._isFiltering = true;\n        },\n        dataBound: function wDocidFilteringNoOne() {\n          if (this._isFiltering) {\n            if (\n              this.ul.find(\"li:not(.k-state-selected)\").length === 0 &&\n              this.ul.find(\"li.k-state-selected\").length > 0\n            ) {\n              // No one more : display\n              var $noOne = $('<li class=\"k-item\"/>')\n                .append('<span class=\"k-state-default\"/>')\n                .append(\n                  $(\n                    '<span class=\"k-state-error dcpAttribute__select--docid-none\"/>'\n                  ).text(currentWidget.options.labels.allSelectedDocument)\n                );\n              this.ul.append($noOne);\n            }\n            this._isFiltering = false;\n          }\n        }\n      };\n\n      if (extraOptions) {\n        options = _.extend(options, extraOptions);\n      }\n      if (this.options.renderOptions.kendoComboBoxConfiguration) {\n        options = _.extend(\n          this.options.renderOptions.kendoComboBoxConfiguration,\n          options\n        );\n      }\n\n      return options;\n    },\n\n    /**\n     * When docid is not multiple, it is a multiselect limited to one element\n     * @param inputValue select  element\n     */\n    _decorateSingleValue: function wDocidDecorateSingleValue(inputValue) {\n      this.options.attributeValues = [];\n      if (this.options.attributeValue) {\n        this.options.attributeValues.push(this.options.attributeValue);\n      }\n\n      this._decorateMultipleValue(inputValue, {\n        maxSelectedItems: 1\n      });\n\n      if (\n        this.options.attributeValue &&\n        this.options.attributeValue.value !== null\n      ) {\n        this.element\n          .find(\".dcpAttribute__value--docid--button\")\n          .attr(\"disabled\", \"disabled\");\n        this.element.find(\"input.k-input\").attr(\"disabled\", \"disabled\");\n      }\n    },\n\n    _decorateMultipleValue: function wDocidDecorateMultipleValue(\n      inputValue,\n      extraOptions\n    ) {\n      var options = this.getKendoOptions(inputValue, {\n        filter: \"contains\"\n      });\n      var currentWidget = this,\n        values = _.map(this.options.attributeValues, function wDocidSelectMap(\n          val\n        ) {\n          var info = {};\n          info.docTitle = val.displayValue;\n          info.docId = val.value;\n          return info;\n        });\n\n      if (extraOptions) {\n        options = _.extend(options, extraOptions);\n      }\n\n      if (this.options.renderOptions.kendoMultiSelectConfiguration) {\n        options = _.extend(\n          this.options.renderOptions.kendoMultiSelectConfiguration,\n          options\n        );\n      }\n      //noinspection JSUnresolvedFunction\n      inputValue.kendoMultiSelect(options);\n      this.kendoWidgetObject = inputValue.data(\"kendoMultiSelect\");\n      this.kendoWidgetObject.dataSource.data(values);\n\n      if (this.options.attributeValues.value !== null) {\n        // Init kendo widget with identifier array\n        this.kendoWidgetObject.value(\n          _.filter(\n            _.map(values, function wDocidInitValue(item) {\n              return item.docId;\n            }),\n            function wDocidFilterEmpty(item) {\n              return !_.isEmpty(item);\n            }\n          )\n        );\n      }\n      this.element.on(\n        \"click\" + this.eventNamespace,\n        \".dcpAttribute__value--docid--button\",\n        function wDocidSelectClick(event) {\n          event.preventDefault();\n          currentWidget.kendoWidgetObject.search(\"\");\n        }\n      );\n\n      this.element.find(\".dcpAttribute__value--docid--button[title]\").tooltip({\n        html: true\n      });\n    },\n\n    singleDropdown: function wDocidSingleDropdown(inputValue) {\n      var kendoOptions = this.getKendoOptions(inputValue);\n\n      this.kendoWidgetObject = inputValue\n        .kendoDropDownList(kendoOptions)\n        .data(\"kendoDropDownList\");\n\n      this.kendoWidgetObject.list\n        .find(\".k-list-optionlabel\")\n        .addClass(\"placeholder--clear\");\n      this.kendoWidgetObject.value(this.options.attributeValue.value);\n      this.element\n        .find(\".dcpAttribute__value--docid--button\")\n        .parent()\n        .hide();\n    },\n\n    singleCombobox: function wDocidSingleCombobox(inputValue) {\n      var kendoOptions = this.getKendoOptions(inputValue, {\n        filter: \"startswith\" //@TODO use filter option in standard auto complete\n      });\n      var kendoSelect;\n\n      this.kendoWidgetObject = inputValue\n        .kendoComboBox(kendoOptions)\n        .data(\"kendoComboBox\");\n      kendoSelect = this.kendoWidgetObject;\n      this.kendoWidgetObject.list\n        .find(\".k-list-optionlabel\")\n        .addClass(\"placeholder--clear\");\n\n      if (this.options.attributeValue && this.options.attributeValue.value) {\n        kendoSelect.dataSource.add({\n          docId: this.options.attributeValue.value,\n          docTitle: this.options.attributeValue.displayValue\n        });\n      }\n\n      if (this.options.attributeValue.value) {\n        // Init value in kendo only if any : if not call to server is performed\n        this.kendoWidgetObject.value(this.options.attributeValue.value);\n      }\n      this.element\n        .find(\".dcpAttribute__value--docid--button\")\n        .parent()\n        .hide();\n    },\n\n    /**\n     * Return true if attribut has multiple option\n     * @returns bool\n     */\n    hasMultipleOption: function wDocidHasMultipleOption() {\n      return this.options.options && this.options.options.multiple === \"yes\";\n    },\n\n    setValue: function wDocidSetValue(value, event) {\n      var newValues;\n      this._super(value, event);\n      if (this.getMode() === \"write\") {\n        if (\n          !this.hasMultipleOption() &&\n          this.options.renderOptions.editDisplay === \"singleMultiple\"\n        ) {\n          if (!_.isArray(value)) {\n            if (value.value !== null) {\n              value = [value];\n            } else {\n              value = [];\n            }\n          } else if (value.length === 1 && value.value === null) {\n            value = [];\n          }\n          if (value.length === 0) {\n            this.element\n              .find(\".dcpAttribute__value--docid--button\")\n              .removeAttr(\"disabled\");\n            this.element.find(\"input.k-input\").removeAttr(\"disabled\");\n          } else {\n            this.element\n              .find(\".dcpAttribute__value--docid--button\")\n              .attr(\"disabled\", \"disabled\");\n            this.element.find(\"input.k-input\").attr(\"disabled\", \"disabled\");\n          }\n        }\n\n        if (\n          this.hasMultipleOption() ||\n          this.options.renderOptions.editDisplay === \"singleMultiple\"\n        ) {\n          newValues = _.map(value, function wDocidMapValue(val) {\n            return val.value;\n          });\n        } else {\n          newValues = value.value;\n        }\n        var kendoSelect = this.kendoWidgetObject;\n        var originalValues = _.clone(kendoSelect.value());\n        // update values in kendo widget\n\n        var dataOri = _.map(\n          _.filter(kendoSelect.dataSource.data(), function wDocIdFilter(item) {\n            return !_.isEmpty(item.docId);\n          }),\n          function wDocidFilterEmpty(currentElement) {\n            return {\n              docId: currentElement.docId,\n              docTitle: currentElement.docTitle\n            };\n          }\n        );\n\n        if (!_.isArray(value)) {\n          value = [value];\n        }\n        _.each(value, function wDocidEachData(val) {\n          var info = {};\n\n          if (\n            !_.some(dataOri, function wDocidEachUniq(elt) {\n              return val && elt.docId === val.value;\n            })\n          ) {\n            // add more static data in dataSource\n            if (val.value !== null) {\n              info.docTitle = val.displayValue;\n              info.docId = val.value;\n              kendoSelect.dataSource.add(info);\n            }\n          }\n        });\n\n        if (!this._isEqual(originalValues, newValues)) {\n          kendoSelect.value(newValues);\n          this.flashElement();\n        }\n        this._updateCreateButton();\n      } else if (this.getMode() === \"read\") {\n        this.redraw();\n      } else {\n        throw new Error(\n          \"Attribute \" + this.options.id + \" unkown mode \" + this.getMode()\n        );\n      }\n    },\n\n    _isEqual: function(values1, values2) {\n      var convertToString = function(currentValue) {\n        if (!currentValue || !currentValue.toString) {\n          currentValue = \"\";\n        }\n        return currentValue.toString();\n      };\n      if (!_.isArray(values1)) {\n        values1 = [values1];\n      }\n      if (!_.isArray(values2)) {\n        values2 = [values2];\n      }\n      values1 = _.filter(_.uniq(_.map(values1, convertToString)), function(\n        value\n      ) {\n        return !!value;\n      });\n      values2 = _.filter(_.uniq(_.map(values2, convertToString)), function(\n        value\n      ) {\n        return !!value;\n      });\n      return _.isEqual(values1, values2);\n    },\n\n    close: function wDocid_close() {\n      if (this.kendoWidget && this.kendoWidgetObject) {\n        this.kendoWidgetObject.close();\n      }\n    },\n\n    getType: function wDocid_getType() {\n      return \"docid\";\n    },\n\n    _destroy: function wDocid__destroy() {\n      if (this.kendoWidget && this.kendoWidgetObject) {\n        this.kendoWidgetObject.destroy();\n      }\n      $(\".dcpDocid-create-window\").each(function wDocid_destroyWindow() {\n        var kWindow = $(this).data(\"dcpWindow\");\n        if (kWindow) {\n          kWindow.destroy();\n        }\n      });\n      this._super();\n    }\n  });\n\n  return $.fn.dcpDocid;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///32c978388bb1efe4e62a\n");

/***/ }),

/***/ "37002e519de305be82e6":
/*!************************************************************************!*\
  !*** ./src/vendor/Anakeen/DOCUMENT/IHM/views/attributes/vAttribute.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*global define, console*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n  __webpack_require__(/*! jquery */ \"127c8cf59f228bb01a21\"),\n  __webpack_require__(/*! underscore */ \"8e08e542008e4aef1f58\"),\n  __webpack_require__(/*! backbone */ \"1858b45bf48591489d06\"),\n  __webpack_require__(/*! mustache */ \"bcd31d01884fc294fd69\"),\n  __webpack_require__(/*! dcpDocument/views/document/attributeTemplate */ \"7873a0bfc996b28836c2\"),\n  __webpack_require__(/*! dcpDocument/widgets/attributes/label/wLabel */ \"0b0c4285a24ad10a4490\"),\n  __webpack_require__(/*! dcpDocument/widgets/attributes/text/wText */ \"f54cd12cb65078ca4c4a\"),\n  __webpack_require__(/*! dcpDocument/widgets/attributes/int/wInt */ \"95a79e27bcf315df846c\"),\n  __webpack_require__(/*! dcpDocument/widgets/attributes/longtext/wLongtext */ \"5b78f14ebd4d5da18109\"),\n  __webpack_require__(/*! dcpDocument/widgets/attributes/htmltext/wHtmltext */ \"461fcd7a26781fe43cf1\"),\n  __webpack_require__(/*! dcpDocument/widgets/attributes/timestamp/wTimestamp */ \"e7cc2b18eb5701706e84\"),\n  __webpack_require__(/*! dcpDocument/widgets/attributes/time/wTime */ \"87b90efb87e69cd98fc1\"),\n  __webpack_require__(/*! dcpDocument/widgets/attributes/image/wImage */ \"a33e69cdc9c4b0ac110b\"),\n  __webpack_require__(/*! dcpDocument/widgets/attributes/money/wMoney */ \"9f7df8dbce40557c2277\"),\n  __webpack_require__(/*! dcpDocument/widgets/attributes/enum/wEnum */ \"069eaf2baef8e08544c3\"),\n  __webpack_require__(/*! dcpDocument/widgets/attributes/color/wColor */ \"3190a08206ef32128b6a\"),\n  __webpack_require__(/*! dcpDocument/widgets/attributes/password/wPassword */ \"d14214e551a3765c7e84\"),\n  __webpack_require__(/*! dcpDocument/widgets/attributes/file/wFile */ \"d756e10b1ea30dea6265\"),\n  __webpack_require__(/*! dcpDocument/widgets/attributes/double/wDouble */ \"7c75186b9433869ef678\"),\n  __webpack_require__(/*! dcpDocument/widgets/attributes/docid/wDocid */ \"32c978388bb1efe4e62a\")\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function vAttribute($, _, Backbone, Mustache, attributeTemplate) {\n  \"use strict\";\n\n  return Backbone.View.extend({\n    className: \"row dcpAttribute form-group\",\n    customView: false,\n    displayLabel: true,\n    //Don't use standard event to launch the event only when there is no template\n    //********************************************************************************************\n    // If you add an event here, you probably want to add it in vColumn.js and test it in an array\n    //********************************************************************************************\n    attributeEvents: {\n      \"dcpattributechange .dcpAttribute__content,[data-dcpattribute_content]\":\n        \"updateValue\",\n      \"dcpattributedelete .dcpAttribute__content\": \"deleteValue\",\n      \"dcpattributechangeattrmenuvisibility .dcpAttribute__content\":\n        \"changeMenuVisibility\",\n      \"dcpattributechangeattrsvalue .dcpAttribute__content\":\n        \"changeAttributesValue\",\n      \"dcpattributefetchdocument .dcpAttribute__content\": \"loadDocument\",\n      \"dcpattributeexternallinkselected .dcpAttribute__content\":\n        \"externalLinkSelected\",\n      dcplabelexternallinkselected: \"externalLinkSelected\",\n      \"dcpattributedownloadfile  .dcpAttribute__content\": \"downloadFileSelect\",\n      \"dcpattributeuploadfile  .dcpAttribute__content\": \"uploadFileSelect\",\n      \"dcpattributeuploadfiledone  .dcpAttribute__content\": \"uploadFileDone\",\n      \"dcpattributeanchorclick .dcpAttribute__content\": \"anchorClick\",\n      \"dcpattributewidgetready .dcpAttribute__content\": \"setWidgetReady\"\n    },\n\n    initialize: function vAttributeInitialize(options) {\n      var events;\n      this.listenTo(this.model, \"change:label\", this.refreshLabel);\n      this.listenTo(this.model, \"change:attributeValue\", this.refreshValue);\n      this.listenTo(this.model, \"change:errorMessage\", this.refreshError);\n      this.listenTo(this.model, \"moved\", this.moveValueIndex);\n      this.listenTo(this.model, \"destroy\", this.remove);\n      this.listenTo(this.model, \"showTab\", this.afterShow);\n      this.listenTo(this.model, \"hide\", this.hide);\n      this.listenTo(this.model, \"show\", this.show);\n      this.listenTo(this.model, \"haveView\", this._identifyView);\n      this.listenTo(this.model, \"closeWidget\", this._closeWidget);\n      this.templateWrapper = this.model.getTemplates().attribute.simpleWrapper;\n\n      options = options || {};\n\n      if (\n        options.displayLabel === false ||\n        this.model.getOption(\"labelPosition\") === \"none\"\n      ) {\n        this.displayLabel = false;\n      }\n\n      if (options.originalView === undefined) {\n        options.originalView = _.isEmpty(this.model.getOption(\"template\"));\n      }\n\n      //Attribute without custom template so we bind event\n      if (options.originalView === true) {\n        events = this.attributeEvents;\n        //For vColumn events\n        if (_.isFunction(events)) {\n          events = events.apply(this);\n        }\n        this.delegateEvents(events);\n      }\n\n      this.options = options;\n    },\n\n    /**\n     * The Data are the source of data shared with widget and templates\n     *\n     * @param index\n     * @returns {*}\n     */\n    getData: function vAttributeGetData(index) {\n      var data;\n\n      //Made to JSON for all the values, or to data for value indexed (in cas of multiple)\n      data = this.model.toData(index, true);\n      data.viewCid = this.cid + \"-\" + this.model.id;\n      data.labels.deleteAttributeNames = this.getDeleteLabels();\n      // autoComplete detected\n      data.autocompleteRequest = _.bind(this.autocompleteRequestRead, this);\n\n      return data;\n    },\n\n    render: function vAttributeRender() {\n      var currentView = this;\n      var renderPromise = new Promise(\n        _.bind(function vAttributeRender_Promise(resolve, reject) {\n          var data,\n            event = { prevent: false },\n            customRender;\n\n          currentView.model.trigger(\"beforeRender\", event, {\n            model: currentView.model,\n            $el: currentView.$el\n          });\n          if (event.prevent) {\n            resolve();\n            return currentView;\n          }\n\n          //We fetch data after beforeRender, if some data is modified by beforeRender we get it\n          data = currentView.getData();\n\n          currentView.$el.addClass(\n            \"dcpAttribute--type--\" + currentView.model.get(\"type\")\n          );\n          currentView.$el.addClass(\n            \"dcpAttribute--visibility--\" + currentView.model.get(\"visibility\")\n          );\n          currentView.$el.attr(\"data-attrid\", currentView.model.get(\"id\"));\n          if (currentView.model.get(\"needed\")) {\n            currentView.$el.addClass(\"dcpAttribute--needed\");\n          }\n\n          currentView.$el.append(\n            $(Mustache.render(currentView.templateWrapper || \"\", data))\n          );\n\n          attributeTemplate.insertDescription(currentView);\n\n          //analyze the display label and add display class\n          if (currentView.displayLabel === false) {\n            currentView.$el.find(\".dcpAttribute__label\").remove();\n            // set to 100% width\n            currentView.$el\n              .find(\".dcpAttribute__right\")\n              .addClass(\"dcpAttribute__right--full\");\n          } else {\n            if (currentView.model.getOption(\"labelPosition\") === \"left\") {\n              currentView.$el.addClass(\"dcpAttribute__labelPosition--left\");\n              currentView.$el\n                .find(\".dcpAttribute__right\")\n                .not(\".dcpAttribute__description\")\n                .addClass(\"dcpAttribute__labelPosition--left\");\n              currentView.$el\n                .find(\".dcpAttribute__left\")\n                .not(\".dcpAttribute__description\")\n                .addClass(\"dcpAttribute__labelPosition--left\");\n            }\n            if (currentView.model.getOption(\"labelPosition\") === \"up\") {\n              currentView.$el.addClass(\"dcpAttribute__labelPosition--up\");\n              currentView.$el\n                .find(\".dcpAttribute__right\")\n                .not(\".dcpAttribute__description\")\n                .addClass(\"dcpAttribute__labelPosition--up\");\n              currentView.$el\n                .find(\".dcpAttribute__left\")\n                .not(\".dcpAttribute__description\")\n                .addClass(\"dcpAttribute__labelPosition--up\");\n            }\n            if (currentView.model.getOption(\"labelPosition\") === \"auto\") {\n              currentView.$el.addClass(\"dcpAttribute__labelPosition--auto\");\n              currentView.$el\n                .find(\".dcpAttribute__right\")\n                .addClass(\"dcpAttribute__labelPosition--auto\");\n              currentView.$el\n                .find(\".dcpAttribute__left\")\n                .addClass(\"dcpAttribute__labelPosition--auto\");\n            }\n            currentView.$el.find(\".dcpAttribute__label\").dcpLabel(data);\n          }\n\n          //If there is a template render it\n          if (\n            currentView.options.originalView !== true &&\n            currentView.model.getOption(\"template\")\n          ) {\n            customRender = attributeTemplate.renderCustomView(\n              currentView.model\n            );\n            currentView.customView = customRender.$el;\n            currentView.$el\n              .find(\".dcpAttribute__content\")\n              .append(currentView.customView);\n            customRender.promise.then(resolve);\n            customRender.promise[\"catch\"](reject);\n          } else {\n            //there is not template render (default)\n            currentView.$el.one(\n              \"dcpattributewidgetready .dcpAttribute__content\",\n              function vattributeRender_widgetready() {\n                resolve();\n              }\n            );\n            currentView.currentDcpWidget = currentView.widgetInit(\n              currentView.$el.find(\".dcpAttribute__content\"),\n              data\n            );\n          }\n\n          currentView.renderDone = true;\n          if (currentView.customView) {\n            currentView.widgetReady = true;\n          }\n\n          currentView.triggerRenderDone();\n          return currentView;\n        }, this)\n      );\n      return renderPromise;\n    },\n\n    refreshLabel: function vAttributeRefreshLabel() {\n      var label = this.model.get(\"label\"),\n        labelDom = this.getDOMElements().find(\".dcpAttribute__label\");\n      if (this.model.getOption(\"attributeLabel\")) {\n        label = this.model.getOption(\"attributeLabel\");\n      }\n      if (labelDom.data(\"dcpDcpLabel\")) {\n        this.getDOMElements()\n          .find(\".dcpAttribute__label\")\n          .dcpLabel(\"setLabel\", label);\n      }\n    },\n\n    /**\n     * Autorefresh value when model change\n     */\n    refreshValue: function vAttributeRefreshValue(model, values, options) {\n      var scope = this,\n        allWrapper,\n        arrayWrapper;\n      if (options.notUpdateArray) {\n        return this;\n      }\n\n      allWrapper = this.getDOMElements();\n\n      if (this.model.isInArray()) {\n        // adjust line number to column length\n        arrayWrapper = this.$el;\n        arrayWrapper.dcpArray(\"setLines\", values.length, options).then(\n          _.bind(function vAttributeDrawValue() {\n            values = _.toArray(values);\n\n            if (_.isEqual(values, scope.model.getValue())) {\n              _.each(values, function analyzeValues(currentValue, index) {\n                if (_.isUndefined(currentValue)) {\n                  return;\n                }\n                var cssIndex =\n                  '.dcpAttribute__content--widget[data-attrid=\"' +\n                  model.id +\n                  '\"]';\n                $(allWrapper[index])\n                  .find(cssIndex)\n                  .addBack(cssIndex)\n                  .each(function vAttributeRefreshOneValue(index, element) {\n                    scope.widgetApply($(element), \"setValue\", currentValue);\n                  });\n              });\n            }\n          }, this)\n        );\n      } else {\n        this.widgetApply(\n          allWrapper.find(\n            '.dcpAttribute__content--widget[data-attrid=\"' + model.id + '\"]'\n          ),\n          \"setValue\",\n          values\n        );\n      }\n    },\n\n    /**\n     * Display error message around the widget if needed\n     * @param event\n     */\n    refreshError: function vAttributeRefreshError() {\n      this.$el\n        .find(\".dcpAttribute__label\")\n        .dcpLabel(\"setError\", this.model.get(\"errorMessage\"));\n      // andSelf method was removed from jQuery 3.0.0+ use addBack instead\n      var jqueryVersion = +$().jquery.split(\".\")[0];\n      if (jqueryVersion >= 3) {\n        this.widgetApply(\n          this.getDOMElements()\n            .find(\".dcpAttribute__content--widget\")\n            .addBack()\n            .filter(\".dcpAttribute__content--widget\"),\n          \"setError\",\n          this.model.get(\"errorMessage\")\n        );\n      } else {\n        this.widgetApply(\n          this.getDOMElements()\n            .find(\".dcpAttribute__content--widget\")\n            .andSelf()\n            .filter(\".dcpAttribute__content--widget\"),\n          \"setError\",\n          this.model.get(\"errorMessage\")\n        );\n      }\n    },\n\n    /**\n     * Modify several attribute\n     * @param event event object\n     * @param index the value rank in case of multiple\n     * @param options object {dataItem :, valueIndex :}\n     */\n    changeAttributesValue: function vAttributeChangeAttributesValue(\n      event,\n      options,\n      index\n    ) {\n      var externalEvent = { prevent: false },\n        currentView = this,\n        dataItem = options.dataItem,\n        valueIndex = options.valueIndex,\n        currentValue;\n      this.model.trigger(\n        \"helperSelect\",\n        externalEvent,\n        this.model.id,\n        dataItem,\n        index\n      );\n      if (externalEvent.prevent) {\n        return this;\n      }\n      _.each(dataItem.values, function vAttributeChangeAttributeValue(\n        attributeValue,\n        attributeId\n      ) {\n        if (typeof attributeValue === \"object\") {\n          if (attributeValue.value === null) {\n            //Value not completed by helper so don't use it\n            return;\n          }\n\n          var attrModel = currentView.model\n            .getDocumentModel()\n            .get(\"attributes\")\n            .get(attributeId);\n          if (attrModel) {\n            if (attrModel.hasMultipleOption()) {\n              currentValue = attrModel.getValue();\n              if (valueIndex >= 0) {\n                currentValue = currentValue[valueIndex];\n              }\n              // No add same value twice\n              if (\n                !_.some(currentValue, function vAttributeNoDouble(itemValue) {\n                  return itemValue.value === attributeValue.value;\n                })\n              ) {\n                attrModel.addValue(\n                  {\n                    value: attributeValue.value,\n                    displayValue: attributeValue.displayValue\n                  },\n                  valueIndex\n                );\n              }\n            } else {\n              attrModel.setValue(\n                {\n                  value: attributeValue.value,\n                  displayValue: attributeValue.displayValue\n                },\n                valueIndex\n              );\n            }\n          } else {\n            console.error(\"Unable to find \" + attributeId);\n          }\n        }\n      });\n    },\n\n    /**\n     * Modify view : triggered by wDocid\n     * @param event\n     * @param options\n     * @returns {*}\n     */\n    loadDocument: function changeAttributesValueLoadDocument(event, options) {\n      var index = options.index,\n        initid = null,\n        attributeValue = this.model.get(\"attributeValue\"),\n        documentModel = this.model.getDocumentModel(),\n        revision = -1;\n      if (_.isUndefined(index)) {\n        initid = attributeValue.value;\n        revision = attributeValue.revision;\n      } else {\n        initid = attributeValue[index].value;\n        revision = attributeValue[index].revision;\n      }\n\n      this.model.trigger(\"internalLinkSelected\", event, {\n        eventId: \"document.load\",\n        target: event.target,\n        attrid: this.model.id,\n        options: [initid, \"!defaultConsultation\"],\n        index: options.index\n      });\n\n      if (event.prevent) {\n        return this;\n      }\n\n      documentModel.trigger(\"loadDocument\", {\n        initid: initid,\n        viewId: \"!defaultConsultation\",\n        revision: revision\n      });\n    },\n\n    /**\n     * Create dialog window to create and insert document\n     */\n    displayFormDocument: function vAttributedisplayFormDocument(\n      event,\n      buttonConfig,\n      index\n    ) {\n      var attrid = this.model.id;\n      if (buttonConfig.createLabel) {\n        var documentModel = this.model.getDocumentModel();\n\n        Promise.all(/*! require.ensure | wCreateDocument */[__webpack_require__.e(\"wDocument\"), __webpack_require__.e(\"wCreateDocument\")]).then((function vDocumentCreateDocument() {\n            __webpack_require__(/*! dcpDocument/widgets/attributes/docid/wCreateDocument */ \"955c9322d369b41c1753\");\n            var $bdw = $('<div class=\"dcpDocid-create-window\"/>');\n            var $dcp = $bdw\n              .dcpCreateDocument(\n                _.extend(buttonConfig, {\n                  originDocumentModel: documentModel,\n                  attributeId: attrid,\n                  index: index,\n                  listener: function vDocumentCreateListener(\n                    event,\n                    triggerId,\n                    options\n                  ) {\n                    options.dialogDocument = this;\n                    options.triggerId = triggerId;\n                    documentModel.trigger(\n                      \"createDialogListener\",\n                      event,\n                      attrid,\n                      options\n                    );\n                  }\n                })\n              )\n              .data(\"dcpCreateDocument\");\n            $dcp.open();\n          }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);\n      }\n    },\n\n    externalLinkSelected: function vAttributeExternalLinkSelected(\n      event,\n      options\n    ) {\n      var documentModel = this.model.getDocumentModel();\n      options.attrid = this.model.id;\n      this.model.trigger(\"internalLinkSelected\", event, options);\n      if (event.prevent) {\n        return this;\n      }\n      if (options.eventId === \"attribute.createDocumentRelation\") {\n        this.displayFormDocument(event, options.buttonConfig, options.index);\n      } else {\n        documentModel.trigger(\"actionAttributeLink\", event, options);\n      }\n    },\n    downloadFileSelect: function vAttributedownloadFileSelect(\n      widgetEvent,\n      options\n    ) {\n      this.model.trigger(\"downloadFile\", widgetEvent, this.model.id, options);\n    },\n    uploadFileSelect: function vAttributeuploadFileSelect(\n      widgetEvent,\n      options\n    ) {\n      this.model.trigger(\"uploadFile\", widgetEvent, this.model.id, options);\n    },\n    uploadFileDone: function vAttributeuploadFileSEnd(widgetEvent, options) {\n      this.model.trigger(\"uploadFileDone\", widgetEvent, this.model.id, options);\n    },\n\n    anchorClick: function vAttributeAnchorClick(widgetEvent, options) {\n      this.model.trigger(\"anchorClick\", widgetEvent, this.model.id, options);\n    },\n\n    /**\n     * Delete value,\n     * If has help, clear also target attributes\n     * @param event\n     * @param data index info {index:\"the index}\n     */\n    deleteValue: function changeAttributesValueDeleteValue(event, data) {\n      if (data.id === this.model.id) {\n        var attrToClear = this.model.get(\"helpOutputs\"),\n          docModel = this.model.getDocumentModel();\n        if (!attrToClear || typeof attrToClear === \"undefined\") {\n          attrToClear = [this.model.id];\n        } else {\n          attrToClear = _.toArray(attrToClear);\n        }\n        _.each(attrToClear, function vAttributeCleanAssociatedElement(aid) {\n          var attr = docModel.get(\"attributes\").get(aid);\n          if (attr) {\n            if (attr.hasMultipleOption()) {\n              attr.setValue([], data.index);\n            } else {\n              attr.setValue({ value: null, displayValue: \"\" }, data.index);\n            }\n          }\n        });\n      }\n    },\n\n    /**\n     * Return another attribute model\n     *\n     * @param attributeId\n     * @returns {*}\n     */\n    getAttributeModel: function vAttributeGetAttributeModel(attributeId) {\n      var docModel = this.model.getDocumentModel();\n      return docModel.get(\"attributes\").get(attributeId);\n    },\n\n    /**\n     * Used for render attribute\n     *\n     * @returns {Array}\n     */\n    getDeleteLabels: function vAttributeGetDeleteLabels() {\n      var attrToClear = this.model.get(\"helpOutputs\"),\n        scope = this,\n        attrLabels;\n      if (!attrToClear || typeof attrToClear === \"undefined\") {\n        attrToClear = [this.model.id];\n      } else {\n        attrToClear = _.toArray(attrToClear);\n      }\n      attrLabels = _.map(attrToClear, function vAttributeGetAssociatedLabel(\n        aid\n      ) {\n        var attr = scope.getAttributeModel(aid);\n        if (attr) {\n          return attr.attributes.label;\n        }\n        return \"\";\n      });\n      return attrLabels;\n    },\n\n    /**\n     * Propagate move value event to widgets\n     * @param eventData\n     */\n    moveValueIndex: function vAttributeMoveValueIndex(eventData) {\n      this.getDOMElements().trigger(\"postMoved\", eventData);\n    },\n\n    /**\n     * method use for transport multiselect widget\n     * @param index the row index of autocomplete when it is in array\n     * @param options\n     */\n    autocompleteRequestRead: function vAttributeAutocompleteRequestRead(\n      options,\n      index\n    ) {\n      var currentView = this,\n        documentModel = this.model.getDocumentModel(),\n        success = options.success,\n        externalOptions = {\n          setResult: function vAttributeAutoCompleteSet(content) {\n            _.each(content, function(item) {\n              if (item.message) {\n                item.message.contentText = item.message.contentText || \"\";\n                item.message.contentHtml = item.message.contentHtml || \"\";\n                item.message.type = item.message.type || \"message\";\n              } else if (item.error) {\n                item.message = {\n                  contentHtml: \"\",\n                  contentText: item.error,\n                  type: \"error\"\n                };\n              }\n              item.title = item.title || \"\";\n            });\n            success(content);\n          },\n          data: options.data\n        },\n        autocompleteUrl,\n        event = { prevent: false };\n      //Add helperResonse event (can be used to reprocess the content of the request)\n      success = _.wrap(success, function vAttributeAutoCompleteSuccess(\n        success,\n        content\n      ) {\n        var options = {},\n          event = { prevent: false };\n        options.data = content;\n        currentView.model.trigger(\n          \"helperResponse\",\n          event,\n          currentView.model.id,\n          options,\n          index\n        );\n        if (event.prevent) {\n          return success([]);\n        }\n        success(content);\n      });\n\n      //Add helperSearch event (can prevent default ajax request)\n      options.data.attributes = documentModel.getValues();\n      this.model.trigger(\n        \"helperSearch\",\n        event,\n        this.model.id,\n        externalOptions,\n        index\n      );\n      if (event.prevent) {\n        return this;\n      }\n      autocompleteUrl =\n        \"api/v2/documents/\" +\n        (documentModel.id || \"0\") +\n        \"/autocomplete/\" +\n        this.model.id;\n\n      options.data.fromid = documentModel.get(\"properties\").get(\"family\").id;\n\n      $.ajax({\n        type: \"POST\",\n        url: autocompleteUrl,\n        data: options.data,\n\n        dataType: \"json\" // \"jsonp\" is required for cross-domain requests; use \"json\" for same-domain requestsons.error(result);\n      })\n        .pipe(\n          function vAttributeAutocompletehandleSuccessRequest(response) {\n            if (response.success) {\n              return response;\n            } else {\n              return $.Deferred().reject(response);\n            }\n          },\n          function vAttributeAutocompletehandleErrorRequest(response) {\n            if (response.status === 0) {\n              return {\n                success: false,\n                error: \"Your navigator seems offline, try later\"\n              };\n            }\n            if (\n              response.responseJSON &&\n              response.responseJSON.exceptionMessage\n            ) {\n              return {\n                success: false,\n                error: response.responseJSON.exceptionMessage\n              };\n            }\n            return {\n              success: false,\n              error:\n                \"Unexpected error: \" +\n                response.status +\n                \" \" +\n                response.statusText\n            };\n          }\n        )\n        .then(\n          function vAttributeAutocompleteSuccessResult(result) {\n            // notify the data source that the request succeeded\n            _.each(result.messages, function(message) {\n              message.contentText = message.contentText || \"\";\n              message.contentHtml = message.contentHtml || \"\";\n              result.data.unshift({\n                message: message,\n                title: \"\"\n              });\n            });\n            success(result.data);\n          },\n          function vAttributeAutocompleteErrorResult(result) {\n            // notify the data source that the request failed\n            if (_.isArray(result.error)) {\n              result.error = result.error.join(\" \");\n            }\n            //use the success callback because http error are handling by the pipe\n            success([\n              {\n                title: \"\",\n                message: {\n                  type: \"error\",\n                  contentHtml: \"\",\n                  contentText: result.error\n                }\n              }\n            ]);\n          }\n        );\n    },\n\n    /**\n     * Modify visibility access of an item menu\n     * @param event event object\n     * @param data menu config {id: menuId, visibility: \"disabled\", \"visible\", \"hidden\"}\n     */\n    changeMenuVisibility: function vAttributeChangeMenuVisibility(event, data) {\n      this.model.trigger(\"changeMenuVisibility\", event, data);\n    },\n\n    getDOMElements: function vAttributeGetDOMElements() {\n      if (this.options && this.options.els) {\n        return this.options.els();\n      } else {\n        return this.$el;\n      }\n    },\n\n    afterShow: function vAttributeAfterShow(/*event, data*/) {\n      // propagate event to widgets\n      this.getDOMElements().trigger(\"show\");\n    },\n    /**\n     *\n     * @param event\n     * @param data\n     */\n    updateValue: function vAttributeUpdateValue(event, data) {\n      this.model.setValue(data.value, data.index);\n    },\n\n    widgetInit: function vAttributeWidgetInit($element, data) {\n      $element.addClass(\"dcpAttribute__content--widget\");\n      return this.getWidgetClass($element).call($element, data);\n    },\n\n    widgetApply: function vAttributeWidgetApply($element, method, argument) {\n      try {\n        if (_.isString(method) && $element && this.getWidgetClass($element)) {\n          this.getWidgetClass($element).call($element, method, argument);\n        }\n      } catch (e) {\n        if (window.dcp.logger) {\n          window.dcp.logger(e);\n        } else {\n          console.error(e);\n        }\n      }\n      return this;\n    },\n\n    getWidgetClass: function vAttributeGetWidgetClass($element) {\n      $element = $element || this.$el;\n      if (!$element.data(\"currentWidgetClass\")) {\n        $element.data(\n          \"currentWidgetClass\",\n          this.getTypedWidgetClass(this.model.get(\"type\"))\n        );\n      }\n      return $element.data(\"currentWidgetClass\");\n    },\n\n    getTypedWidgetClass: function vAttributeGetTypedWidgetClass(type) {\n      var error = \"\",\n        customWidgetClass = this.model.getOption(\n          \"customWidgetAttributeFunction\"\n        );\n      if (customWidgetClass) {\n        if (_.isFunction($.fn[customWidgetClass])) {\n          return $.fn[customWidgetClass];\n        }\n        error =\n          \"Custom Widget Function : $.fn.\" +\n          customWidgetClass +\n          \" is not a function. Attribute : \" +\n          this.model.id;\n        console.error(error);\n        throw new Error(error);\n      }\n      switch (type) {\n        case \"text\":\n          return $.fn.dcpText;\n        case \"int\":\n          return $.fn.dcpInt;\n        case \"double\":\n          return $.fn.dcpDouble;\n        case \"money\":\n          return $.fn.dcpMoney;\n        case \"longtext\":\n          return $.fn.dcpLongtext;\n        case \"htmltext\":\n          return $.fn.dcpHtmltext;\n        case \"date\":\n          return $.fn.dcpDate;\n        case \"timestamp\":\n          return $.fn.dcpTimestamp;\n        case \"time\":\n          return $.fn.dcpTime;\n        case \"image\":\n          return $.fn.dcpImage;\n        case \"color\":\n          return $.fn.dcpColor;\n        case \"file\":\n          return $.fn.dcpFile;\n        case \"enum\":\n          return $.fn.dcpEnum;\n        case \"password\":\n          return $.fn.dcpPassword;\n        case \"thesaurus\":\n        case \"account\":\n        case \"docid\":\n          return $.fn.dcpDocid;\n        default:\n          return $.fn.dcpText;\n      }\n    },\n\n    setWidgetReady: function Vattribute_setWidgetReady() {\n      this.widgetReady = true;\n      this.triggerRenderDone();\n    },\n\n    triggerRenderDone: function vAttribute_triggerRenderDone() {\n      if (\n        this.noRenderEvent !== false &&\n        this.renderDone &&\n        this.widgetReady &&\n        !this.triggerRender\n      ) {\n        this.model.trigger(\"renderDone\", { model: this.model, $el: this.$el });\n        this.triggerRender = true;\n      }\n    },\n\n    remove: function vAttributeRemove() {\n      try {\n        if (\n          this.currentDcpWidget &&\n          this.getWidgetClass(this.currentDcpWidget) &&\n          this._findWidgetName(this.$el)\n        ) {\n          this.getWidgetClass(this.currentDcpWidget).call(this.$el, \"destroy\");\n        }\n      } catch (e) {\n        if (window.dcp.logger) {\n          window.dcp.logger(e);\n        } else {\n          console.error(e);\n        }\n      }\n      return Backbone.View.prototype.remove.call(this);\n    },\n\n    hide: function vAttributeHide() {\n      this.$el.hide();\n    },\n\n    show: function vAttributeShow() {\n      this.$el.show();\n    },\n\n    _closeWidget: function vAttribute__closeWidget() {\n      try {\n        if (\n          this.currentDcpWidget &&\n          this.getWidgetClass(this.currentDcpWidget) &&\n          this._findWidgetName(this.currentDcpWidget)\n        ) {\n          this.getWidgetClass(this.currentDcpWidget).call(\n            this.currentDcpWidget,\n            \"close\"\n          );\n        }\n      } catch (e) {\n        if (window.dcp.logger) {\n          window.dcp.logger(e);\n        } else {\n          console.error(e);\n        }\n      }\n    },\n\n    _findWidgetName: function vAttribute_findWidgetName($element) {\n      return _.find(\n        _.keys($element.data()),\n        function vAttribute_findWidgetNameFind(currentKey) {\n          return currentKey.indexOf(\"dcpDcp\") !== -1;\n        }\n      );\n    },\n\n    _identifyView: function vAttribute_identifyView(event) {\n      event.haveView = true;\n      //Add the pointer to the current jquery element to a list passed by the event\n      event.elements = event.elements.add(this.$el);\n    }\n  });\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///37002e519de305be82e6\n");

/***/ }),

/***/ "3d2e52a160dc74b891c1":
/*!****************************************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/cultures/kendo.culture.fr-FR.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t__webpack_require__(335);\n\tmodule.exports = __webpack_require__(335);\n\n\n/***/ }),\n\n/***/ 335:\n/***/ (function(module, exports) {\n\n\t(function( window, undefined ) {\n\t    kendo.cultures[\"fr-FR\"] = {\n\t        name: \"fr-FR\",\n\t        numberFormat: {\n\t            pattern: [\"-n\"],\n\t            decimals: 2,\n\t            \",\": \" \",\n\t            \".\": \",\",\n\t            groupSize: [3],\n\t            percent: {\n\t                pattern: [\"-n %\",\"n %\"],\n\t                decimals: 2,\n\t                \",\": \" \",\n\t                \".\": \",\",\n\t                groupSize: [3],\n\t                symbol: \"%\"\n\t            },\n\t            currency: {\n\t                name: \"Euro\",\n\t                abbr: \"EUR\",\n\t                pattern: [\"-n $\",\"n $\"],\n\t                decimals: 2,\n\t                \",\": \" \",\n\t                \".\": \",\",\n\t                groupSize: [3],\n\t                symbol: \"€\"\n\t            }\n\t        },\n\t        calendars: {\n\t            standard: {\n\t                days: {\n\t                    names: [\"dimanche\",\"lundi\",\"mardi\",\"mercredi\",\"jeudi\",\"vendredi\",\"samedi\"],\n\t                    namesAbbr: [\"dim.\",\"lun.\",\"mar.\",\"mer.\",\"jeu.\",\"ven.\",\"sam.\"],\n\t                    namesShort: [\"di\",\"lu\",\"ma\",\"me\",\"je\",\"ve\",\"sa\"]\n\t                },\n\t                months: {\n\t                    names: [\"janvier\",\"février\",\"mars\",\"avril\",\"mai\",\"juin\",\"juillet\",\"août\",\"septembre\",\"octobre\",\"novembre\",\"décembre\"],\n\t                    namesAbbr: [\"janv.\",\"févr.\",\"mars\",\"avr.\",\"mai\",\"juin\",\"juil.\",\"août\",\"sept.\",\"oct.\",\"nov.\",\"déc.\"]\n\t                },\n\t                AM: [\"\"],\n\t                PM: [\"\"],\n\t                patterns: {\n\t                    d: \"dd/MM/yyyy\",\n\t                    D: \"dddd d MMMM yyyy\",\n\t                    F: \"dddd d MMMM yyyy HH:mm:ss\",\n\t                    g: \"dd/MM/yyyy HH:mm\",\n\t                    G: \"dd/MM/yyyy HH:mm:ss\",\n\t                    m: \"d MMMM\",\n\t                    M: \"d MMMM\",\n\t                    s: \"yyyy'-'MM'-'dd'T'HH':'mm':'ss\",\n\t                    t: \"HH:mm\",\n\t                    T: \"HH:mm:ss\",\n\t                    u: \"yyyy'-'MM'-'dd HH':'mm':'ss'Z'\",\n\t                    y: \"MMMM yyyy\",\n\t                    Y: \"MMMM yyyy\"\n\t                },\n\t                \"/\": \"/\",\n\t                \":\": \":\",\n\t                firstDay: 1\n\t            }\n\t        }\n\t    }\n\t})(this);\n\n\n/***/ })\n\n/******/ });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiM2QyZTUyYTE2MGRjNzRiODkxYzEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHByb2dyZXNzL2tlbmRvLXVpL2pzL2N1bHR1cmVzL2tlbmRvLmN1bHR1cmUuZnItRlIuanM/ZDgwYiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9XG4vKioqKioqLyAoZnVuY3Rpb24obW9kdWxlcykgeyAvLyB3ZWJwYWNrQm9vdHN0cmFwXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbi8qKioqKiovIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbi8qKioqKiovIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSlcbi8qKioqKiovIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuXG4vKioqKioqLyBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHRleHBvcnRzOiB7fSxcbi8qKioqKiovIFx0XHRcdGlkOiBtb2R1bGVJZCxcbi8qKioqKiovIFx0XHRcdGxvYWRlZDogZmFsc2Vcbi8qKioqKiovIFx0XHR9O1xuXG4vKioqKioqLyBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4vKioqKioqLyBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbi8qKioqKiovIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4vKioqKioqLyBcdFx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG5cbi8qKioqKiovIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0fVxuXG5cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4vKioqKioqLyBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbi8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vKioqKioqLyBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuLyoqKioqKi8gfSlcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyAoe1xuXG4vKioqLyAwOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdF9fd2VicGFja19yZXF1aXJlX18oMzM1KTtcblx0bW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMzNSk7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDMzNTpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHQoZnVuY3Rpb24oIHdpbmRvdywgdW5kZWZpbmVkICkge1xuXHQgICAga2VuZG8uY3VsdHVyZXNbXCJmci1GUlwiXSA9IHtcblx0ICAgICAgICBuYW1lOiBcImZyLUZSXCIsXG5cdCAgICAgICAgbnVtYmVyRm9ybWF0OiB7XG5cdCAgICAgICAgICAgIHBhdHRlcm46IFtcIi1uXCJdLFxuXHQgICAgICAgICAgICBkZWNpbWFsczogMixcblx0ICAgICAgICAgICAgXCIsXCI6IFwiwqBcIixcblx0ICAgICAgICAgICAgXCIuXCI6IFwiLFwiLFxuXHQgICAgICAgICAgICBncm91cFNpemU6IFszXSxcblx0ICAgICAgICAgICAgcGVyY2VudDoge1xuXHQgICAgICAgICAgICAgICAgcGF0dGVybjogW1wiLW4gJVwiLFwibiAlXCJdLFxuXHQgICAgICAgICAgICAgICAgZGVjaW1hbHM6IDIsXG5cdCAgICAgICAgICAgICAgICBcIixcIjogXCLCoFwiLFxuXHQgICAgICAgICAgICAgICAgXCIuXCI6IFwiLFwiLFxuXHQgICAgICAgICAgICAgICAgZ3JvdXBTaXplOiBbM10sXG5cdCAgICAgICAgICAgICAgICBzeW1ib2w6IFwiJVwiXG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIGN1cnJlbmN5OiB7XG5cdCAgICAgICAgICAgICAgICBuYW1lOiBcIkV1cm9cIixcblx0ICAgICAgICAgICAgICAgIGFiYnI6IFwiRVVSXCIsXG5cdCAgICAgICAgICAgICAgICBwYXR0ZXJuOiBbXCItbiAkXCIsXCJuICRcIl0sXG5cdCAgICAgICAgICAgICAgICBkZWNpbWFsczogMixcblx0ICAgICAgICAgICAgICAgIFwiLFwiOiBcIsKgXCIsXG5cdCAgICAgICAgICAgICAgICBcIi5cIjogXCIsXCIsXG5cdCAgICAgICAgICAgICAgICBncm91cFNpemU6IFszXSxcblx0ICAgICAgICAgICAgICAgIHN5bWJvbDogXCLigqxcIlxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBjYWxlbmRhcnM6IHtcblx0ICAgICAgICAgICAgc3RhbmRhcmQ6IHtcblx0ICAgICAgICAgICAgICAgIGRheXM6IHtcblx0ICAgICAgICAgICAgICAgICAgICBuYW1lczogW1wiZGltYW5jaGVcIixcImx1bmRpXCIsXCJtYXJkaVwiLFwibWVyY3JlZGlcIixcImpldWRpXCIsXCJ2ZW5kcmVkaVwiLFwic2FtZWRpXCJdLFxuXHQgICAgICAgICAgICAgICAgICAgIG5hbWVzQWJicjogW1wiZGltLlwiLFwibHVuLlwiLFwibWFyLlwiLFwibWVyLlwiLFwiamV1LlwiLFwidmVuLlwiLFwic2FtLlwiXSxcblx0ICAgICAgICAgICAgICAgICAgICBuYW1lc1Nob3J0OiBbXCJkaVwiLFwibHVcIixcIm1hXCIsXCJtZVwiLFwiamVcIixcInZlXCIsXCJzYVwiXVxuXHQgICAgICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgICAgIG1vbnRoczoge1xuXHQgICAgICAgICAgICAgICAgICAgIG5hbWVzOiBbXCJqYW52aWVyXCIsXCJmw6l2cmllclwiLFwibWFyc1wiLFwiYXZyaWxcIixcIm1haVwiLFwianVpblwiLFwianVpbGxldFwiLFwiYW/Du3RcIixcInNlcHRlbWJyZVwiLFwib2N0b2JyZVwiLFwibm92ZW1icmVcIixcImTDqWNlbWJyZVwiXSxcblx0ICAgICAgICAgICAgICAgICAgICBuYW1lc0FiYnI6IFtcImphbnYuXCIsXCJmw6l2ci5cIixcIm1hcnNcIixcImF2ci5cIixcIm1haVwiLFwianVpblwiLFwianVpbC5cIixcImFvw7t0XCIsXCJzZXB0LlwiLFwib2N0LlwiLFwibm92LlwiLFwiZMOpYy5cIl1cblx0ICAgICAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgICAgICBBTTogW1wiXCJdLFxuXHQgICAgICAgICAgICAgICAgUE06IFtcIlwiXSxcblx0ICAgICAgICAgICAgICAgIHBhdHRlcm5zOiB7XG5cdCAgICAgICAgICAgICAgICAgICAgZDogXCJkZC9NTS95eXl5XCIsXG5cdCAgICAgICAgICAgICAgICAgICAgRDogXCJkZGRkIGQgTU1NTSB5eXl5XCIsXG5cdCAgICAgICAgICAgICAgICAgICAgRjogXCJkZGRkIGQgTU1NTSB5eXl5IEhIOm1tOnNzXCIsXG5cdCAgICAgICAgICAgICAgICAgICAgZzogXCJkZC9NTS95eXl5IEhIOm1tXCIsXG5cdCAgICAgICAgICAgICAgICAgICAgRzogXCJkZC9NTS95eXl5IEhIOm1tOnNzXCIsXG5cdCAgICAgICAgICAgICAgICAgICAgbTogXCJkIE1NTU1cIixcblx0ICAgICAgICAgICAgICAgICAgICBNOiBcImQgTU1NTVwiLFxuXHQgICAgICAgICAgICAgICAgICAgIHM6IFwieXl5eSctJ01NJy0nZGQnVCdISCc6J21tJzonc3NcIixcblx0ICAgICAgICAgICAgICAgICAgICB0OiBcIkhIOm1tXCIsXG5cdCAgICAgICAgICAgICAgICAgICAgVDogXCJISDptbTpzc1wiLFxuXHQgICAgICAgICAgICAgICAgICAgIHU6IFwieXl5eSctJ01NJy0nZGQgSEgnOidtbSc6J3NzJ1onXCIsXG5cdCAgICAgICAgICAgICAgICAgICAgeTogXCJNTU1NIHl5eXlcIixcblx0ICAgICAgICAgICAgICAgICAgICBZOiBcIk1NTU0geXl5eVwiXG5cdCAgICAgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICAgICAgXCIvXCI6IFwiL1wiLFxuXHQgICAgICAgICAgICAgICAgXCI6XCI6IFwiOlwiLFxuXHQgICAgICAgICAgICAgICAgZmlyc3REYXk6IDFcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgIH1cblx0fSkodGhpcyk7XG5cblxuLyoqKi8gfSlcblxuLyoqKioqKi8gfSk7Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///3d2e52a160dc74b891c1\n");

/***/ }),

/***/ "42ce03d6950c8982af08":
/*!*******************************************************************!*\
  !*** ./src/vendor/Anakeen/DOCUMENT/IHM/widgets/window/wWindow.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! underscore */ \"8e08e542008e4aef1f58\"), __webpack_require__(/*! jquery */ \"127c8cf59f228bb01a21\"), __webpack_require__(/*! dcpDocument/widgets/widget */ \"a903b12ace80b5b4ecce\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function wWindow(\n  _,\n  $\n) {\n  \"use strict\";\n\n  $.widget(\"dcp.dcpWindow\", {\n    intervalId: 0,\n    options: {\n      animation: {\n        open: {\n          effects: \"fade:in\",\n          duration: 1000\n        },\n        close: {\n          effects: \"fade:out\",\n          duration: 1000\n        }\n      },\n      actions: [\"Maximize\", \"Close\"],\n      visible: false,\n      height: \"300px\",\n      width: \"400px\",\n      /**\n       * Try to add iframe title if no title is set\n       */\n      open: function wWindowOpen() {\n        if (!this.options.title) {\n          try {\n            var kendoWindow = this;\n            var iframeTitle = this.element\n              .find(\"iframe\")\n              .contents()\n              .find(\"title\")\n              .html();\n            if (typeof iframeTitle === \"undefined\") {\n              _.defer(function wWindowOpenSetTitle() {\n                var currentTitle = \"\";\n                var $content = kendoWindow.element.find(\"iframe\").contents();\n                kendoWindow.element\n                  .find(\"iframe\")\n                  .on(\"load\", function wWindowOpenSetTitleNow() {\n                    try {\n                      var $scopeWindow = $(this);\n                      var $content = $scopeWindow.contents();\n\n                      kendoWindow.setOptions({\n                        title: currentTitle\n                      });\n                      $content.find(\"body\").addClass(\"window-dialog\");\n                    } catch (exp) {\n                      //no test here\n                    }\n                  });\n\n                // Verify if need to change title every seconds\n                kendoWindow.intervalId = window.setInterval(\n                  function wWindowOpenSetTitleIsChanged() {\n                    try {\n                      $content = kendoWindow.element.find(\"iframe\").contents();\n                      var newTitle = $content.find(\"title\").html();\n                      var currentIcon = $content\n                        .find('link[rel=\"shortcut icon\"]')\n                        .attr(\"href\");\n\n                      if (newTitle) {\n                        $content.find(\"body\").addClass(\"window-dialog\");\n                        if (currentIcon) {\n                          newTitle =\n                            '<img src=\"' + currentIcon + '\" /> ' + newTitle;\n                        }\n                        if (newTitle !== currentTitle) {\n                          currentTitle = newTitle;\n                          $(kendoWindow.element)\n                            .closest(\".k-window\")\n                            .find(\".k-window-title\")\n                            .html(newTitle);\n                        }\n                      }\n                    } catch (exp) {\n                      //no test here\n                    }\n                  },\n                  1000\n                );\n              });\n            } else {\n              kendoWindow.setOptions({\n                title: $(this)\n                  .contents()\n                  .find(\"title\")\n                  .html()\n              });\n            }\n          } catch (exp) {\n            //no test here\n          }\n        }\n      },\n      close: function wWindowClose() {\n        window.clearInterval(this.intervalId);\n      },\n      destroy: function wWindowDestroy() {\n        window.clearInterval(this.intervalId);\n      }\n    },\n\n    currentWidget: null,\n    _create: function wWindowCreate() {\n      this.currentWidget = $('<div class=\"dialog-window\"/>');\n      this.element.append(this.currentWidget);\n      this.element.data(\"dcpWindow\", this);\n\n      this.currentWidget.kendoWindow(this.options);\n    },\n\n    _getWindowTemplate: function wWindowCreate_getWindowTemplate(templateId) {\n      if (\n        this.options.templateData &&\n        this.options.templateData.templates &&\n        this.options.templateData.templates.window &&\n        this.options.templateData.templates.window[templateId]\n      ) {\n        return this.options.templateData.templates.window[templateId];\n      }\n      if (\n        window.dcp &&\n        window.dcp.templates &&\n        window.dcp.templates.window &&\n        window.dcp.templates.window[templateId]\n      ) {\n        return window.dcp.templates.window[templateId];\n      }\n      throw new Error(\"Unknown window template  \" + templateId);\n    },\n    destroy: function wWindowDestroy() {\n      window.clearInterval(this.intervalId);\n      if (this.currentWidget && this.currentWidget.data(\"kendoWindow\")) {\n        this.currentWidget.data(\"kendoWindow\").destroy();\n      }\n      this._super();\n    },\n    open: function wWindowopen() {\n      this.currentWidget.data(\"kendoWindow\").open();\n    },\n    close: function wWindowClose() {\n      window.clearInterval(this.intervalId);\n      this.currentWidget.data(\"kendoWindow\").close();\n    },\n    kendoWindow: function wWindowkendoWindow() {\n      return this.currentWidget.data(\"kendoWindow\");\n    }\n  });\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///42ce03d6950c8982af08\n");

/***/ }),

/***/ "461fcd7a26781fe43cf1":
/*!**********************************************************************************!*\
  !*** ./src/vendor/Anakeen/DOCUMENT/IHM/widgets/attributes/htmltext/wHtmltext.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*global define */\n(function umdRequire(root, factory) {\n  \"use strict\";\n\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n      __webpack_require__(/*! jquery */ \"127c8cf59f228bb01a21\"),\n      __webpack_require__(/*! underscore */ \"8e08e542008e4aef1f58\"),\n      __webpack_require__(/*! dcpDocument/widgets/attributes/text/wText */ \"f54cd12cb65078ca4c4a\")\n    ], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(window, function require_htmltext($, _) {\n  \"use strict\";\n\n  $.widget(\"dcp.dcpHtmltext\", $.dcp.dcpText, {\n    options: {\n      type: \"htmltext\",\n      renderOptions: {\n        anchors: {\n          target: \"_blank\"\n        },\n        toolbar: \"Basic\",\n        height: \"100px\",\n        toolbarStartupExpanded: true,\n        ckEditorConfiguration: {},\n        ckEditorAllowAllTags: false\n      },\n      inline: false,\n      locale: \"en\"\n    },\n\n    ckEditorInstance: null,\n\n    _initDom: function wHtmltext_InitDom() {\n      var currentWidget = this,\n        bind_super = _.bind(this._super, this),\n        bindInitEvent = _.bind(this._initEvent, this);\n      try {\n        this.popupWindows = {};\n        if (this.options.renderOptions.ckEditorInline) {\n          this.options.inline = true;\n        }\n        if (this.getMode() === \"write\") {\n          (function wHtmltext_umdRequire(factory) {\n            var init = function() {\n              fetch(\"/Anakeen/manifest/theme/prod.json\")\n                .then(function(response) {\n                  return response.json();\n                })\n                .then(function(data) {\n                  factory(data[\"ckeditor\"][\"css\"]);\n                });\n            };\n            if (true) {\n              Promise.all(/*! require.ensure | documentCkEditor */[__webpack_require__.e(\"vendors~documentCkEditor\"), __webpack_require__.e(\"documentCkEditor\")]).then((function() {\n                  __webpack_require__(/*! documentCkEditor */ \"94561e1138d7484d0327\");\n                  init();\n                }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);\n            } else {}\n          })(function wHtmltext_initEditDom(cssPath) {\n            var options = _.extend(\n              currentWidget.ckOptions(cssPath),\n              currentWidget.options.renderOptions.ckEditorConfiguration\n            );\n            bind_super();\n            if (currentWidget.options.renderOptions.ckEditorAllowAllTags) {\n              // Allow all HTML tags\n              options.allowedContent = {\n                $1: {\n                  // Use the ability to specify elements as an object.\n                  elements: window.CKEDITOR.dtd,\n                  attributes: true,\n                  styles: true,\n                  classes: true\n                }\n              };\n              options.disallowedContent = \"script; *[on*]\";\n            }\n\n            currentWidget.ckEditorInstance = currentWidget\n              .getContentElements()\n              .ckeditor(options).editor;\n            currentWidget.options.attributeValue.value = currentWidget.ckEditorInstance.getData();\n            bindInitEvent();\n          });\n        } else {\n          bind_super();\n        }\n      } catch (e) {\n        if (window.dcp.logger) {\n          window.dcp.logger(e);\n        } else {\n          console.error(e);\n        }\n      }\n    },\n\n    /**\n     * Define option set for ckEditor widget\n     * @returns {{language: string, contentsCss: string[], removePlugins: string, toolbarCanCollapse: boolean, entities: boolean, filebrowserImageBrowseUrl: string, filebrowserImageUploadUrl: string, toolbar_Full: *[], toolbar_Default: *[], toolbar_Simple: *[], toolbar_Basic: *[], removeButtons: string}}\n     */\n    ckOptions: function wHtmlTextCkOptions(cssPath) {\n      var locale = this.options.locale;\n      var hrefBase = $(\"head base\").attr(\"href\") || \"\"; // no use document.baseURI because get complete url if no base href defined\n      if (this.options.renderOptions.toolbar) {\n        this.options.renderOptions.ckEditorConfiguration.toolbar = this.options.renderOptions.toolbar;\n      }\n      if (this.options.renderOptions.height) {\n        this.options.renderOptions.ckEditorConfiguration.height = this.options.renderOptions.height;\n      }\n      if (!_.isUndefined(this.options.renderOptions.toolbarStartupExpanded)) {\n        this.options.renderOptions.ckEditorConfiguration.toolbarStartupExpanded = this.options.renderOptions.toolbarStartupExpanded;\n      }\n      return {\n        language: locale.substring(0, 2),\n        contentsCss: [cssPath],\n        removePlugins: \"elementspath\", // no see HTML path elements\n        extraPlugins:\n          \"a11yhelp,about,basicstyles,blockquote,clipboard,colorbutton,contextmenu,elementspath,enterkey,entities,filebrowser,floatingspace,font,format,horizontalrule,htmlwriter,image,indentlist,justify,link,list,magicline,maximize,pastefromword,pastetext,removeformat,resize,scayt,showborders,sourcearea,sourcedialog,specialchar,stylescombo,tab,table,tabletools,toolbar,undo,wsc,wysiwygarea\",\n        toolbarCanCollapse: true,\n        entities: false, // no use HTML entities\n        baseHref: hrefBase,\n        title: \"\",\n        toolbar_Full: [\n          {\n            name: \"document\",\n            items: [\n              \"Sourcedialog\",\n              \"-\",\n              \"NewPage\",\n              \"DocProps\",\n              \"Preview\",\n              \"Print\",\n              \"-\",\n              \"Templates\"\n            ]\n          },\n          {\n            name: \"clipboard\",\n            items: [\n              \"Cut\",\n              \"Copy\",\n              \"Paste\",\n              \"PasteText\",\n              \"PasteFromWord\",\n              \"-\",\n              \"Undo\",\n              \"Redo\"\n            ]\n          },\n          {\n            name: \"editing\",\n            items: [\"Find\", \"Replace\", \"-\", \"SelectAll\", \"-\"]\n          },\n          {\n            name: \"forms\",\n            items: [\n              \"Form\",\n              \"Checkbox\",\n              \"Radio\",\n              \"TextField\",\n              \"Textarea\",\n              \"Select\",\n              \"Button\",\n              \"ImageButton\",\n              \"HiddenField\"\n            ]\n          },\n          \"/\",\n          {\n            name: \"basicstyles\",\n            items: [\n              \"Bold\",\n              \"Italic\",\n              \"Underline\",\n              \"Strike\",\n              \"Subscript\",\n              \"Superscript\",\n              \"-\",\n              \"RemoveFormat\"\n            ]\n          },\n          {\n            name: \"paragraph\",\n            items: [\n              \"NumberedList\",\n              \"BulletedList\",\n              \"-\",\n              \"Outdent\",\n              \"Indent\",\n              \"-\",\n              \"Blockquote\",\n              \"CreateDiv\",\n              \"-\",\n              \"JustifyLeft\",\n              \"JustifyCenter\",\n              \"JustifyRight\",\n              \"JustifyBlock\",\n              \"-\",\n              \"BidiLtr\",\n              \"BidiRtl\"\n            ]\n          },\n          { name: \"links\", items: [\"Link\", \"Unlink\"] },\n          {\n            name: \"insert\",\n            items: [\n              \"Image\",\n              \"Table\",\n              \"HorizontalRule\",\n              \"Smiley\",\n              \"SpecialChar\",\n              \"PageBreak\",\n              \"Iframe\"\n            ]\n          },\n          \"/\",\n          { name: \"styles\", items: [\"Styles\", \"Format\", \"Font\", \"FontSize\"] },\n          { name: \"colors\", items: [\"TextColor\", \"BGColor\"] },\n          { name: \"tools\", items: [\"Maximize\", \"ShowBlocks\", \"-\", \"About\"] }\n        ],\n        toolbar_Default: [\n          { name: \"document\", items: [\"Sourcedialog\"] },\n          {\n            name: \"clipboard\",\n            items: [\n              \"Cut\",\n              \"Copy\",\n              \"Paste\",\n              \"PasteText\",\n              \"PasteFromWord\",\n              \"-\",\n              \"Undo\",\n              \"Redo\"\n            ]\n          },\n          { name: \"editing\", items: [\"Find\", \"Replace\", \"-\", \"SelectAll\"] },\n          {\n            name: \"basicstyles\",\n            items: [\n              \"Bold\",\n              \"Italic\",\n              \"Underline\",\n              \"Strike\",\n              \"Subscript\",\n              \"Superscript\",\n              \"-\",\n              \"RemoveFormat\"\n            ]\n          },\n          {\n            name: \"paragraph\",\n            items: [\n              \"NumberedList\",\n              \"BulletedList\",\n              \"-\",\n              \"Outdent\",\n              \"Indent\",\n              \"-\",\n              \"Blockquote\",\n              \"CreateDiv\",\n              \"-\",\n              \"JustifyLeft\",\n              \"JustifyCenter\",\n              \"JustifyRight\",\n              \"JustifyBlock\",\n              \"-\",\n              \"BidiLtr\",\n              \"BidiRtl\"\n            ]\n          },\n          { name: \"links\", items: [\"Link\", \"Unlink\"] },\n          {\n            name: \"insert\",\n            items: [\n              \"Image\",\n              \"Table\",\n              \"HorizontalRule\",\n              \"SpecialChar\",\n              \"PageBreak\",\n              \"Iframe\"\n            ]\n          },\n          { name: \"styles\", items: [\"Styles\", \"Format\", \"Font\", \"FontSize\"] },\n          { name: \"colors\", items: [\"TextColor\", \"BGColor\"] },\n          { name: \"tools\", items: [\"Maximize\", \"ShowBlocks\", \"-\", \"About\"] }\n        ],\n        toolbar_Simple: [\n          { name: \"document\", items: [] },\n          {\n            name: \"basicstyles\",\n            items: [\n              \"Bold\",\n              \"Italic\",\n              \"Underline\",\n              \"Strike\",\n              \"-\",\n              \"RemoveFormat\"\n            ]\n          },\n          {\n            name: \"paragraph\",\n            items: [\n              \"NumberedList\",\n              \"BulletedList\",\n              \"-\",\n              \"Outdent\",\n              \"Indent\",\n              \"-\",\n              \"-\",\n              \"JustifyLeft\",\n              \"JustifyCenter\",\n              \"JustifyRight\",\n              \"JustifyBlock\"\n            ]\n          },\n          { name: \"links\", items: [\"Link\", \"Unlink\"] },\n          { name: \"insert\", items: [\"Image\", \"Table\", \"SpecialChar\"] },\n          { name: \"styles\", items: [\"Format\", \"FontSize\"] },\n          { name: \"colors\", items: [\"TextColor\", \"BGColor\"] },\n          { name: \"tools\", items: [\"Maximize\", \"Sourcedialog\", \"-\", \"About\"] }\n        ],\n        toolbar_Basic: [\n          {\n            name: \"links\",\n            items: [\n              \"Bold\",\n              \"Italic\",\n              \"-\",\n              \"NumberedList\",\n              \"BulletedList\",\n              \"-\",\n              \"Link\",\n              \"Unlink\",\n              \"-\",\n              \"Maximize\",\n              \"About\"\n            ]\n          }\n        ],\n        removeButtons: \"\"\n      };\n    },\n\n    _initEvent: function _initEvent() {\n      var currentWidget = this;\n      this._super();\n      if (this.ckEditorInstance) {\n        this.ckEditorInstance.on(\"change\", function wHtmltext_change() {\n          currentWidget.setValue({ value: this.getData() });\n        });\n\n        this.ckEditorInstance.on(\"focus\", function wHtmltext_focus() {\n          var ktTarget = currentWidget.element.find(\".input-group\");\n          currentWidget.showInputTooltip(ktTarget);\n          currentWidget.element.find(\".cke\").addClass(\"k-state-focused\");\n          currentWidget.element\n            .closest(\".dcpAttribute__content\")\n            .addClass(\"dcpAttribute--focus\");\n        });\n\n        this.ckEditorInstance.on(\"blur\", function wHtmltext_blur() {\n          var ktTarget = currentWidget.element.find(\".input-group\");\n          currentWidget.hideInputTooltip(ktTarget);\n          currentWidget.element.find(\".cke\").removeClass(\"k-state-focused\");\n          currentWidget.element\n            .closest(\".dcpAttribute__content\")\n            .removeClass(\"dcpAttribute--focus\");\n        });\n\n        this.ckEditorInstance.on(\"instanceReady\", function wHtmltext_loaded() {\n          currentWidget._trigger(\"widgetReady\");\n        });\n\n        this.element.on(\n          \"postMoved\" + this.eventNamespace,\n          function wHtmlTextOnPostMoved(event, eventData) {\n            if (eventData && eventData.to === currentWidget.options.index) {\n              currentWidget.redraw();\n            }\n          }\n        );\n      }\n\n      //If we are not in CKEDITOR mode, we take care of anchor and redirect it\n      if (this.getMode() !== \"write\") {\n        this.element.on(\n          \"click.\" + this.eventNamespace,\n          'a:not([href^=\"#action/\"]):not([data-action])',\n          function wHtmlAnchorClick(event) {\n            var internalEvent = { prevent: false },\n              anchor = this,\n              $anchor = $(this),\n              isNotPrevented,\n              anchorsConfig,\n              anchorsTarget,\n              wFeature = \"\",\n              href,\n              dcpWindow;\n\n            if (event.stopPropagation) {\n              event.stopPropagation();\n            }\n            event.preventDefault();\n\n            anchorsConfig = _.extend(\n              {},\n              currentWidget.options.renderOptions.anchors\n            );\n\n            isNotPrevented = currentWidget._trigger(\n              \"anchorClick\",\n              internalEvent,\n              {\n                $el: currentWidget.element,\n                index: currentWidget._getIndex(),\n                options: {\n                  anchor: anchor,\n                  anchorsConfig: anchorsConfig\n                }\n              }\n            );\n            if (isNotPrevented) {\n              var $base = $(\"base\");\n              var isAbsUrl = new RegExp(\"^(?:[a-z]+:)?//\", \"i\");\n\n              anchorsTarget = anchorsConfig.target || \"_blank\";\n              href = anchor.href;\n\n              if (\n                $anchor.attr(\"href\") &&\n                $anchor.attr(\"href\").substring(0, 1) === \"#\"\n              ) {\n                href =\n                  window.location.protocol +\n                  \"//\" +\n                  window.location.hostname +\n                  (window.location.port ? \":\" + window.location.port : \"\") +\n                  (window.location.pathname ? window.location.pathname : \"/\") +\n                  (window.location.search ? window.location.search : \"\") +\n                  $anchor.attr(\"href\");\n              }\n\n              switch (anchorsTarget) {\n                case \"_dialog\":\n                  if (currentWidget.popupWindows[href]) {\n                    dcpWindow = currentWidget.popupWindows[href];\n                  } else {\n                    dcpWindow = $(\"<div/>\")\n                      .appendTo(\"body\")\n                      .dcpWindow({\n                        width: anchorsConfig.windowWidth,\n                        height: anchorsConfig.windowHeight,\n                        modal: anchorsConfig.modal,\n                        content: href,\n                        iframe: true\n                      });\n\n                    currentWidget.popupWindows[href] = dcpWindow;\n                    dcpWindow\n                      .data(\"dcpWindow\")\n                      .kendoWindow()\n                      .center();\n                  }\n                  dcpWindow.data(\"dcpWindow\").open();\n                  break;\n                case \"_self\":\n                  // For IE : Not honor base href in this case\n                  if (!isAbsUrl.test(href)) {\n                    window.location.href = $base.attr(\"href\") + href;\n                  } else {\n                    window.location.href = href;\n                  }\n                  break;\n                default:\n                  if (anchorsConfig.windowWidth || anchorsConfig.windowHeight) {\n                    if (anchorsConfig.windowWidth) {\n                      wFeature +=\n                        \"width=\" +\n                        parseInt(anchorsConfig.windowWidth, 10) +\n                        \",\";\n                    }\n                    if (anchorsConfig.windowHeight) {\n                      wFeature +=\n                        \"height=\" +\n                        parseInt(anchorsConfig.windowHeight, 10) +\n                        \",\";\n                    }\n                    wFeature += \"resizable=yes,scrollbars=yes\";\n                  }\n                  if (!isAbsUrl.test(href)) {\n                    href = $base.attr(\"href\") + href;\n                  }\n                  window.open(href, anchorsTarget, wFeature);\n                  break;\n              }\n            }\n          }\n        );\n      }\n    },\n    /**\n     * Define inputs for focus\n     * @protected\n     */\n    _getFocusInput: function wHtmltext_getFocusInput() {\n      return this.element;\n    },\n    /**\n     * No use parent change\n     */\n    _initChangeEvent: function wHtmltext_initChangeEvent() {},\n\n    getWidgetValue: function wHtmltext_getWidgetValue() {\n      return this.getContentElements().val();\n    },\n\n    /**\n     * Change the value of the widget\n     * @param value\n     */\n    setValue: function wHtmltextSetValue(value) {\n      value = _.clone(value);\n      if (value.value === null) {\n        // ckEditor restore original value if set to null\n        value.value = \"\";\n      }\n      if (_.has(value, \"value\") && !_.has(value, \"displayValue\")) {\n        value.displayValue = value.value;\n      }\n      if (this.getMode() === \"write\") {\n        // Flash element only\n        var originalValue = this.ckEditorInstance.getData();\n        // : explicit lazy equal\n\n        //noinspection JSHint\n        if (originalValue.trim() != value.value.trim()) {\n          // Modify value only if different\n          if (this.options.inline) {\n            this.getContentElements().html(value.value);\n          } else {\n            this.getContentElements().val(value.value);\n            this.flashElement(this.element.find(\"iframe\"));\n          }\n        }\n      } else if (this.getMode() === \"read\") {\n        this.getContentElements().html(value.displayValue);\n      } else {\n        throw new Error(\n          \"Attribute \" + this.options.id + \" unknown mode \" + this.getMode()\n        );\n      }\n\n      // call wAttribute::setValue()\n      $.dcp.dcpAttribute.prototype.setValue.call(this, value);\n    },\n\n    getType: function wHtmltext_getType() {\n      return \"htmltext\";\n    },\n\n    _destroy: function wHtmlTextDestroy() {\n      var currentWidget = this;\n      if (this.ckEditorInstance && this.ckEditorInstance.destroy) {\n        if (\n          this.ckEditorInstance.status === \"loaded\" ||\n          this.ckEditorInstance.status === \"ready\"\n        ) {\n          this.ckEditorInstance.destroy();\n          _.defer(function wHtmltext_deferDestroy() {\n            currentWidget._destroy();\n          });\n          return;\n        } else if (this.ckEditorInstance.status === \"unloaded\") {\n          this.ckEditorInstance.on(\"loaded\", function wHtmltext_loaded() {\n            currentWidget._destroy();\n          });\n          return;\n        }\n      }\n      _.each(this.popupWindows, function wHtmltextDestroyPopup(pWindow) {\n        pWindow.data(\"dcpWindow\").destroy();\n      });\n      this._super();\n    },\n\n    /**\n     * Trigger a ready event when widget is render\n     */\n    _triggerReady: function wAttributeReady() {\n      if (this.getMode() !== \"write\") {\n        this._super();\n      }\n    }\n  });\n\n  return $.fn.dcpHtmltext;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDYxZmNkN2EyNjc4MWZlNDNjZjEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdmVuZG9yL0FuYWtlZW4vRE9DVU1FTlQvSUhNL3dpZGdldHMvYXR0cmlidXRlcy9odG1sdGV4dC93SHRtbHRleHQuanM/NGRkNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKmdsb2JhbCBkZWZpbmUgKi9cbihmdW5jdGlvbiB1bWRSZXF1aXJlKHJvb3QsIGZhY3RvcnkpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKFtcbiAgICAgIFwianF1ZXJ5XCIsXG4gICAgICBcInVuZGVyc2NvcmVcIixcbiAgICAgIFwiZGNwRG9jdW1lbnQvd2lkZ2V0cy9hdHRyaWJ1dGVzL3RleHQvd1RleHRcIlxuICAgIF0sIGZhY3RvcnkpO1xuICB9IGVsc2Uge1xuICAgIC8vbm9pbnNwZWN0aW9uIEpTVW5yZXNvbHZlZFZhcmlhYmxlXG4gICAgZmFjdG9yeSh3aW5kb3cualF1ZXJ5LCB3aW5kb3cuXyk7XG4gIH1cbn0pKHdpbmRvdywgZnVuY3Rpb24gcmVxdWlyZV9odG1sdGV4dCgkLCBfKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gICQud2lkZ2V0KFwiZGNwLmRjcEh0bWx0ZXh0XCIsICQuZGNwLmRjcFRleHQsIHtcbiAgICBvcHRpb25zOiB7XG4gICAgICB0eXBlOiBcImh0bWx0ZXh0XCIsXG4gICAgICByZW5kZXJPcHRpb25zOiB7XG4gICAgICAgIGFuY2hvcnM6IHtcbiAgICAgICAgICB0YXJnZXQ6IFwiX2JsYW5rXCJcbiAgICAgICAgfSxcbiAgICAgICAgdG9vbGJhcjogXCJCYXNpY1wiLFxuICAgICAgICBoZWlnaHQ6IFwiMTAwcHhcIixcbiAgICAgICAgdG9vbGJhclN0YXJ0dXBFeHBhbmRlZDogdHJ1ZSxcbiAgICAgICAgY2tFZGl0b3JDb25maWd1cmF0aW9uOiB7fSxcbiAgICAgICAgY2tFZGl0b3JBbGxvd0FsbFRhZ3M6IGZhbHNlXG4gICAgICB9LFxuICAgICAgaW5saW5lOiBmYWxzZSxcbiAgICAgIGxvY2FsZTogXCJlblwiXG4gICAgfSxcblxuICAgIGNrRWRpdG9ySW5zdGFuY2U6IG51bGwsXG5cbiAgICBfaW5pdERvbTogZnVuY3Rpb24gd0h0bWx0ZXh0X0luaXREb20oKSB7XG4gICAgICB2YXIgY3VycmVudFdpZGdldCA9IHRoaXMsXG4gICAgICAgIGJpbmRfc3VwZXIgPSBfLmJpbmQodGhpcy5fc3VwZXIsIHRoaXMpLFxuICAgICAgICBiaW5kSW5pdEV2ZW50ID0gXy5iaW5kKHRoaXMuX2luaXRFdmVudCwgdGhpcyk7XG4gICAgICB0cnkge1xuICAgICAgICB0aGlzLnBvcHVwV2luZG93cyA9IHt9O1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnJlbmRlck9wdGlvbnMuY2tFZGl0b3JJbmxpbmUpIHtcbiAgICAgICAgICB0aGlzLm9wdGlvbnMuaW5saW5lID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5nZXRNb2RlKCkgPT09IFwid3JpdGVcIikge1xuICAgICAgICAgIChmdW5jdGlvbiB3SHRtbHRleHRfdW1kUmVxdWlyZShmYWN0b3J5KSB7XG4gICAgICAgICAgICB2YXIgaW5pdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBmZXRjaChcIi9BbmFrZWVuL21hbmlmZXN0L3RoZW1lL3Byb2QuanNvblwiKVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgICAgZmFjdG9yeShkYXRhW1wiY2tlZGl0b3JcIl1bXCJjc3NcIl0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuICAgICAgICAgICAgICByZXF1aXJlLmVuc3VyZShcbiAgICAgICAgICAgICAgICBbXCJkb2N1bWVudENrRWRpdG9yXCJdLFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgcmVxdWlyZShcImRvY3VtZW50Q2tFZGl0b3JcIik7XG4gICAgICAgICAgICAgICAgICBpbml0KCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBcImRvY3VtZW50Q2tFZGl0b3JcIlxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy9ub2luc3BlY3Rpb24gSlNVbnJlc29sdmVkVmFyaWFibGVcbiAgICAgICAgICAgICAgaW5pdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pKGZ1bmN0aW9uIHdIdG1sdGV4dF9pbml0RWRpdERvbShjc3NQYXRoKSB7XG4gICAgICAgICAgICB2YXIgb3B0aW9ucyA9IF8uZXh0ZW5kKFxuICAgICAgICAgICAgICBjdXJyZW50V2lkZ2V0LmNrT3B0aW9ucyhjc3NQYXRoKSxcbiAgICAgICAgICAgICAgY3VycmVudFdpZGdldC5vcHRpb25zLnJlbmRlck9wdGlvbnMuY2tFZGl0b3JDb25maWd1cmF0aW9uXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgYmluZF9zdXBlcigpO1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRXaWRnZXQub3B0aW9ucy5yZW5kZXJPcHRpb25zLmNrRWRpdG9yQWxsb3dBbGxUYWdzKSB7XG4gICAgICAgICAgICAgIC8vIEFsbG93IGFsbCBIVE1MIHRhZ3NcbiAgICAgICAgICAgICAgb3B0aW9ucy5hbGxvd2VkQ29udGVudCA9IHtcbiAgICAgICAgICAgICAgICAkMToge1xuICAgICAgICAgICAgICAgICAgLy8gVXNlIHRoZSBhYmlsaXR5IHRvIHNwZWNpZnkgZWxlbWVudHMgYXMgYW4gb2JqZWN0LlxuICAgICAgICAgICAgICAgICAgZWxlbWVudHM6IHdpbmRvdy5DS0VESVRPUi5kdGQsXG4gICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgc3R5bGVzOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgY2xhc3NlczogdHJ1ZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgb3B0aW9ucy5kaXNhbGxvd2VkQ29udGVudCA9IFwic2NyaXB0OyAqW29uKl1cIjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY3VycmVudFdpZGdldC5ja0VkaXRvckluc3RhbmNlID0gY3VycmVudFdpZGdldFxuICAgICAgICAgICAgICAuZ2V0Q29udGVudEVsZW1lbnRzKClcbiAgICAgICAgICAgICAgLmNrZWRpdG9yKG9wdGlvbnMpLmVkaXRvcjtcbiAgICAgICAgICAgIGN1cnJlbnRXaWRnZXQub3B0aW9ucy5hdHRyaWJ1dGVWYWx1ZS52YWx1ZSA9IGN1cnJlbnRXaWRnZXQuY2tFZGl0b3JJbnN0YW5jZS5nZXREYXRhKCk7XG4gICAgICAgICAgICBiaW5kSW5pdEV2ZW50KCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYmluZF9zdXBlcigpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmICh3aW5kb3cuZGNwLmxvZ2dlcikge1xuICAgICAgICAgIHdpbmRvdy5kY3AubG9nZ2VyKGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRGVmaW5lIG9wdGlvbiBzZXQgZm9yIGNrRWRpdG9yIHdpZGdldFxuICAgICAqIEByZXR1cm5zIHt7bGFuZ3VhZ2U6IHN0cmluZywgY29udGVudHNDc3M6IHN0cmluZ1tdLCByZW1vdmVQbHVnaW5zOiBzdHJpbmcsIHRvb2xiYXJDYW5Db2xsYXBzZTogYm9vbGVhbiwgZW50aXRpZXM6IGJvb2xlYW4sIGZpbGVicm93c2VySW1hZ2VCcm93c2VVcmw6IHN0cmluZywgZmlsZWJyb3dzZXJJbWFnZVVwbG9hZFVybDogc3RyaW5nLCB0b29sYmFyX0Z1bGw6ICpbXSwgdG9vbGJhcl9EZWZhdWx0OiAqW10sIHRvb2xiYXJfU2ltcGxlOiAqW10sIHRvb2xiYXJfQmFzaWM6ICpbXSwgcmVtb3ZlQnV0dG9uczogc3RyaW5nfX1cbiAgICAgKi9cbiAgICBja09wdGlvbnM6IGZ1bmN0aW9uIHdIdG1sVGV4dENrT3B0aW9ucyhjc3NQYXRoKSB7XG4gICAgICB2YXIgbG9jYWxlID0gdGhpcy5vcHRpb25zLmxvY2FsZTtcbiAgICAgIHZhciBocmVmQmFzZSA9ICQoXCJoZWFkIGJhc2VcIikuYXR0cihcImhyZWZcIikgfHwgXCJcIjsgLy8gbm8gdXNlIGRvY3VtZW50LmJhc2VVUkkgYmVjYXVzZSBnZXQgY29tcGxldGUgdXJsIGlmIG5vIGJhc2UgaHJlZiBkZWZpbmVkXG4gICAgICBpZiAodGhpcy5vcHRpb25zLnJlbmRlck9wdGlvbnMudG9vbGJhcikge1xuICAgICAgICB0aGlzLm9wdGlvbnMucmVuZGVyT3B0aW9ucy5ja0VkaXRvckNvbmZpZ3VyYXRpb24udG9vbGJhciA9IHRoaXMub3B0aW9ucy5yZW5kZXJPcHRpb25zLnRvb2xiYXI7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5vcHRpb25zLnJlbmRlck9wdGlvbnMuaGVpZ2h0KSB7XG4gICAgICAgIHRoaXMub3B0aW9ucy5yZW5kZXJPcHRpb25zLmNrRWRpdG9yQ29uZmlndXJhdGlvbi5oZWlnaHQgPSB0aGlzLm9wdGlvbnMucmVuZGVyT3B0aW9ucy5oZWlnaHQ7XG4gICAgICB9XG4gICAgICBpZiAoIV8uaXNVbmRlZmluZWQodGhpcy5vcHRpb25zLnJlbmRlck9wdGlvbnMudG9vbGJhclN0YXJ0dXBFeHBhbmRlZCkpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zLnJlbmRlck9wdGlvbnMuY2tFZGl0b3JDb25maWd1cmF0aW9uLnRvb2xiYXJTdGFydHVwRXhwYW5kZWQgPSB0aGlzLm9wdGlvbnMucmVuZGVyT3B0aW9ucy50b29sYmFyU3RhcnR1cEV4cGFuZGVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGFuZ3VhZ2U6IGxvY2FsZS5zdWJzdHJpbmcoMCwgMiksXG4gICAgICAgIGNvbnRlbnRzQ3NzOiBbY3NzUGF0aF0sXG4gICAgICAgIHJlbW92ZVBsdWdpbnM6IFwiZWxlbWVudHNwYXRoXCIsIC8vIG5vIHNlZSBIVE1MIHBhdGggZWxlbWVudHNcbiAgICAgICAgZXh0cmFQbHVnaW5zOlxuICAgICAgICAgIFwiYTExeWhlbHAsYWJvdXQsYmFzaWNzdHlsZXMsYmxvY2txdW90ZSxjbGlwYm9hcmQsY29sb3JidXR0b24sY29udGV4dG1lbnUsZWxlbWVudHNwYXRoLGVudGVya2V5LGVudGl0aWVzLGZpbGVicm93c2VyLGZsb2F0aW5nc3BhY2UsZm9udCxmb3JtYXQsaG9yaXpvbnRhbHJ1bGUsaHRtbHdyaXRlcixpbWFnZSxpbmRlbnRsaXN0LGp1c3RpZnksbGluayxsaXN0LG1hZ2ljbGluZSxtYXhpbWl6ZSxwYXN0ZWZyb213b3JkLHBhc3RldGV4dCxyZW1vdmVmb3JtYXQscmVzaXplLHNjYXl0LHNob3dib3JkZXJzLHNvdXJjZWFyZWEsc291cmNlZGlhbG9nLHNwZWNpYWxjaGFyLHN0eWxlc2NvbWJvLHRhYix0YWJsZSx0YWJsZXRvb2xzLHRvb2xiYXIsdW5kbyx3c2Msd3lzaXd5Z2FyZWFcIixcbiAgICAgICAgdG9vbGJhckNhbkNvbGxhcHNlOiB0cnVlLFxuICAgICAgICBlbnRpdGllczogZmFsc2UsIC8vIG5vIHVzZSBIVE1MIGVudGl0aWVzXG4gICAgICAgIGJhc2VIcmVmOiBocmVmQmFzZSxcbiAgICAgICAgdGl0bGU6IFwiXCIsXG4gICAgICAgIHRvb2xiYXJfRnVsbDogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIG5hbWU6IFwiZG9jdW1lbnRcIixcbiAgICAgICAgICAgIGl0ZW1zOiBbXG4gICAgICAgICAgICAgIFwiU291cmNlZGlhbG9nXCIsXG4gICAgICAgICAgICAgIFwiLVwiLFxuICAgICAgICAgICAgICBcIk5ld1BhZ2VcIixcbiAgICAgICAgICAgICAgXCJEb2NQcm9wc1wiLFxuICAgICAgICAgICAgICBcIlByZXZpZXdcIixcbiAgICAgICAgICAgICAgXCJQcmludFwiLFxuICAgICAgICAgICAgICBcIi1cIixcbiAgICAgICAgICAgICAgXCJUZW1wbGF0ZXNcIlxuICAgICAgICAgICAgXVxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogXCJjbGlwYm9hcmRcIixcbiAgICAgICAgICAgIGl0ZW1zOiBbXG4gICAgICAgICAgICAgIFwiQ3V0XCIsXG4gICAgICAgICAgICAgIFwiQ29weVwiLFxuICAgICAgICAgICAgICBcIlBhc3RlXCIsXG4gICAgICAgICAgICAgIFwiUGFzdGVUZXh0XCIsXG4gICAgICAgICAgICAgIFwiUGFzdGVGcm9tV29yZFwiLFxuICAgICAgICAgICAgICBcIi1cIixcbiAgICAgICAgICAgICAgXCJVbmRvXCIsXG4gICAgICAgICAgICAgIFwiUmVkb1wiXG4gICAgICAgICAgICBdXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiBcImVkaXRpbmdcIixcbiAgICAgICAgICAgIGl0ZW1zOiBbXCJGaW5kXCIsIFwiUmVwbGFjZVwiLCBcIi1cIiwgXCJTZWxlY3RBbGxcIiwgXCItXCJdXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiBcImZvcm1zXCIsXG4gICAgICAgICAgICBpdGVtczogW1xuICAgICAgICAgICAgICBcIkZvcm1cIixcbiAgICAgICAgICAgICAgXCJDaGVja2JveFwiLFxuICAgICAgICAgICAgICBcIlJhZGlvXCIsXG4gICAgICAgICAgICAgIFwiVGV4dEZpZWxkXCIsXG4gICAgICAgICAgICAgIFwiVGV4dGFyZWFcIixcbiAgICAgICAgICAgICAgXCJTZWxlY3RcIixcbiAgICAgICAgICAgICAgXCJCdXR0b25cIixcbiAgICAgICAgICAgICAgXCJJbWFnZUJ1dHRvblwiLFxuICAgICAgICAgICAgICBcIkhpZGRlbkZpZWxkXCJcbiAgICAgICAgICAgIF1cbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiL1wiLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIG5hbWU6IFwiYmFzaWNzdHlsZXNcIixcbiAgICAgICAgICAgIGl0ZW1zOiBbXG4gICAgICAgICAgICAgIFwiQm9sZFwiLFxuICAgICAgICAgICAgICBcIkl0YWxpY1wiLFxuICAgICAgICAgICAgICBcIlVuZGVybGluZVwiLFxuICAgICAgICAgICAgICBcIlN0cmlrZVwiLFxuICAgICAgICAgICAgICBcIlN1YnNjcmlwdFwiLFxuICAgICAgICAgICAgICBcIlN1cGVyc2NyaXB0XCIsXG4gICAgICAgICAgICAgIFwiLVwiLFxuICAgICAgICAgICAgICBcIlJlbW92ZUZvcm1hdFwiXG4gICAgICAgICAgICBdXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiBcInBhcmFncmFwaFwiLFxuICAgICAgICAgICAgaXRlbXM6IFtcbiAgICAgICAgICAgICAgXCJOdW1iZXJlZExpc3RcIixcbiAgICAgICAgICAgICAgXCJCdWxsZXRlZExpc3RcIixcbiAgICAgICAgICAgICAgXCItXCIsXG4gICAgICAgICAgICAgIFwiT3V0ZGVudFwiLFxuICAgICAgICAgICAgICBcIkluZGVudFwiLFxuICAgICAgICAgICAgICBcIi1cIixcbiAgICAgICAgICAgICAgXCJCbG9ja3F1b3RlXCIsXG4gICAgICAgICAgICAgIFwiQ3JlYXRlRGl2XCIsXG4gICAgICAgICAgICAgIFwiLVwiLFxuICAgICAgICAgICAgICBcIkp1c3RpZnlMZWZ0XCIsXG4gICAgICAgICAgICAgIFwiSnVzdGlmeUNlbnRlclwiLFxuICAgICAgICAgICAgICBcIkp1c3RpZnlSaWdodFwiLFxuICAgICAgICAgICAgICBcIkp1c3RpZnlCbG9ja1wiLFxuICAgICAgICAgICAgICBcIi1cIixcbiAgICAgICAgICAgICAgXCJCaWRpTHRyXCIsXG4gICAgICAgICAgICAgIFwiQmlkaVJ0bFwiXG4gICAgICAgICAgICBdXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7IG5hbWU6IFwibGlua3NcIiwgaXRlbXM6IFtcIkxpbmtcIiwgXCJVbmxpbmtcIl0gfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiBcImluc2VydFwiLFxuICAgICAgICAgICAgaXRlbXM6IFtcbiAgICAgICAgICAgICAgXCJJbWFnZVwiLFxuICAgICAgICAgICAgICBcIlRhYmxlXCIsXG4gICAgICAgICAgICAgIFwiSG9yaXpvbnRhbFJ1bGVcIixcbiAgICAgICAgICAgICAgXCJTbWlsZXlcIixcbiAgICAgICAgICAgICAgXCJTcGVjaWFsQ2hhclwiLFxuICAgICAgICAgICAgICBcIlBhZ2VCcmVha1wiLFxuICAgICAgICAgICAgICBcIklmcmFtZVwiXG4gICAgICAgICAgICBdXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIi9cIixcbiAgICAgICAgICB7IG5hbWU6IFwic3R5bGVzXCIsIGl0ZW1zOiBbXCJTdHlsZXNcIiwgXCJGb3JtYXRcIiwgXCJGb250XCIsIFwiRm9udFNpemVcIl0gfSxcbiAgICAgICAgICB7IG5hbWU6IFwiY29sb3JzXCIsIGl0ZW1zOiBbXCJUZXh0Q29sb3JcIiwgXCJCR0NvbG9yXCJdIH0sXG4gICAgICAgICAgeyBuYW1lOiBcInRvb2xzXCIsIGl0ZW1zOiBbXCJNYXhpbWl6ZVwiLCBcIlNob3dCbG9ja3NcIiwgXCItXCIsIFwiQWJvdXRcIl0gfVxuICAgICAgICBdLFxuICAgICAgICB0b29sYmFyX0RlZmF1bHQ6IFtcbiAgICAgICAgICB7IG5hbWU6IFwiZG9jdW1lbnRcIiwgaXRlbXM6IFtcIlNvdXJjZWRpYWxvZ1wiXSB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIG5hbWU6IFwiY2xpcGJvYXJkXCIsXG4gICAgICAgICAgICBpdGVtczogW1xuICAgICAgICAgICAgICBcIkN1dFwiLFxuICAgICAgICAgICAgICBcIkNvcHlcIixcbiAgICAgICAgICAgICAgXCJQYXN0ZVwiLFxuICAgICAgICAgICAgICBcIlBhc3RlVGV4dFwiLFxuICAgICAgICAgICAgICBcIlBhc3RlRnJvbVdvcmRcIixcbiAgICAgICAgICAgICAgXCItXCIsXG4gICAgICAgICAgICAgIFwiVW5kb1wiLFxuICAgICAgICAgICAgICBcIlJlZG9cIlxuICAgICAgICAgICAgXVxuICAgICAgICAgIH0sXG4gICAgICAgICAgeyBuYW1lOiBcImVkaXRpbmdcIiwgaXRlbXM6IFtcIkZpbmRcIiwgXCJSZXBsYWNlXCIsIFwiLVwiLCBcIlNlbGVjdEFsbFwiXSB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIG5hbWU6IFwiYmFzaWNzdHlsZXNcIixcbiAgICAgICAgICAgIGl0ZW1zOiBbXG4gICAgICAgICAgICAgIFwiQm9sZFwiLFxuICAgICAgICAgICAgICBcIkl0YWxpY1wiLFxuICAgICAgICAgICAgICBcIlVuZGVybGluZVwiLFxuICAgICAgICAgICAgICBcIlN0cmlrZVwiLFxuICAgICAgICAgICAgICBcIlN1YnNjcmlwdFwiLFxuICAgICAgICAgICAgICBcIlN1cGVyc2NyaXB0XCIsXG4gICAgICAgICAgICAgIFwiLVwiLFxuICAgICAgICAgICAgICBcIlJlbW92ZUZvcm1hdFwiXG4gICAgICAgICAgICBdXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiBcInBhcmFncmFwaFwiLFxuICAgICAgICAgICAgaXRlbXM6IFtcbiAgICAgICAgICAgICAgXCJOdW1iZXJlZExpc3RcIixcbiAgICAgICAgICAgICAgXCJCdWxsZXRlZExpc3RcIixcbiAgICAgICAgICAgICAgXCItXCIsXG4gICAgICAgICAgICAgIFwiT3V0ZGVudFwiLFxuICAgICAgICAgICAgICBcIkluZGVudFwiLFxuICAgICAgICAgICAgICBcIi1cIixcbiAgICAgICAgICAgICAgXCJCbG9ja3F1b3RlXCIsXG4gICAgICAgICAgICAgIFwiQ3JlYXRlRGl2XCIsXG4gICAgICAgICAgICAgIFwiLVwiLFxuICAgICAgICAgICAgICBcIkp1c3RpZnlMZWZ0XCIsXG4gICAgICAgICAgICAgIFwiSnVzdGlmeUNlbnRlclwiLFxuICAgICAgICAgICAgICBcIkp1c3RpZnlSaWdodFwiLFxuICAgICAgICAgICAgICBcIkp1c3RpZnlCbG9ja1wiLFxuICAgICAgICAgICAgICBcIi1cIixcbiAgICAgICAgICAgICAgXCJCaWRpTHRyXCIsXG4gICAgICAgICAgICAgIFwiQmlkaVJ0bFwiXG4gICAgICAgICAgICBdXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7IG5hbWU6IFwibGlua3NcIiwgaXRlbXM6IFtcIkxpbmtcIiwgXCJVbmxpbmtcIl0gfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiBcImluc2VydFwiLFxuICAgICAgICAgICAgaXRlbXM6IFtcbiAgICAgICAgICAgICAgXCJJbWFnZVwiLFxuICAgICAgICAgICAgICBcIlRhYmxlXCIsXG4gICAgICAgICAgICAgIFwiSG9yaXpvbnRhbFJ1bGVcIixcbiAgICAgICAgICAgICAgXCJTcGVjaWFsQ2hhclwiLFxuICAgICAgICAgICAgICBcIlBhZ2VCcmVha1wiLFxuICAgICAgICAgICAgICBcIklmcmFtZVwiXG4gICAgICAgICAgICBdXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7IG5hbWU6IFwic3R5bGVzXCIsIGl0ZW1zOiBbXCJTdHlsZXNcIiwgXCJGb3JtYXRcIiwgXCJGb250XCIsIFwiRm9udFNpemVcIl0gfSxcbiAgICAgICAgICB7IG5hbWU6IFwiY29sb3JzXCIsIGl0ZW1zOiBbXCJUZXh0Q29sb3JcIiwgXCJCR0NvbG9yXCJdIH0sXG4gICAgICAgICAgeyBuYW1lOiBcInRvb2xzXCIsIGl0ZW1zOiBbXCJNYXhpbWl6ZVwiLCBcIlNob3dCbG9ja3NcIiwgXCItXCIsIFwiQWJvdXRcIl0gfVxuICAgICAgICBdLFxuICAgICAgICB0b29sYmFyX1NpbXBsZTogW1xuICAgICAgICAgIHsgbmFtZTogXCJkb2N1bWVudFwiLCBpdGVtczogW10gfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiBcImJhc2ljc3R5bGVzXCIsXG4gICAgICAgICAgICBpdGVtczogW1xuICAgICAgICAgICAgICBcIkJvbGRcIixcbiAgICAgICAgICAgICAgXCJJdGFsaWNcIixcbiAgICAgICAgICAgICAgXCJVbmRlcmxpbmVcIixcbiAgICAgICAgICAgICAgXCJTdHJpa2VcIixcbiAgICAgICAgICAgICAgXCItXCIsXG4gICAgICAgICAgICAgIFwiUmVtb3ZlRm9ybWF0XCJcbiAgICAgICAgICAgIF1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIG5hbWU6IFwicGFyYWdyYXBoXCIsXG4gICAgICAgICAgICBpdGVtczogW1xuICAgICAgICAgICAgICBcIk51bWJlcmVkTGlzdFwiLFxuICAgICAgICAgICAgICBcIkJ1bGxldGVkTGlzdFwiLFxuICAgICAgICAgICAgICBcIi1cIixcbiAgICAgICAgICAgICAgXCJPdXRkZW50XCIsXG4gICAgICAgICAgICAgIFwiSW5kZW50XCIsXG4gICAgICAgICAgICAgIFwiLVwiLFxuICAgICAgICAgICAgICBcIi1cIixcbiAgICAgICAgICAgICAgXCJKdXN0aWZ5TGVmdFwiLFxuICAgICAgICAgICAgICBcIkp1c3RpZnlDZW50ZXJcIixcbiAgICAgICAgICAgICAgXCJKdXN0aWZ5UmlnaHRcIixcbiAgICAgICAgICAgICAgXCJKdXN0aWZ5QmxvY2tcIlxuICAgICAgICAgICAgXVxuICAgICAgICAgIH0sXG4gICAgICAgICAgeyBuYW1lOiBcImxpbmtzXCIsIGl0ZW1zOiBbXCJMaW5rXCIsIFwiVW5saW5rXCJdIH0sXG4gICAgICAgICAgeyBuYW1lOiBcImluc2VydFwiLCBpdGVtczogW1wiSW1hZ2VcIiwgXCJUYWJsZVwiLCBcIlNwZWNpYWxDaGFyXCJdIH0sXG4gICAgICAgICAgeyBuYW1lOiBcInN0eWxlc1wiLCBpdGVtczogW1wiRm9ybWF0XCIsIFwiRm9udFNpemVcIl0gfSxcbiAgICAgICAgICB7IG5hbWU6IFwiY29sb3JzXCIsIGl0ZW1zOiBbXCJUZXh0Q29sb3JcIiwgXCJCR0NvbG9yXCJdIH0sXG4gICAgICAgICAgeyBuYW1lOiBcInRvb2xzXCIsIGl0ZW1zOiBbXCJNYXhpbWl6ZVwiLCBcIlNvdXJjZWRpYWxvZ1wiLCBcIi1cIiwgXCJBYm91dFwiXSB9XG4gICAgICAgIF0sXG4gICAgICAgIHRvb2xiYXJfQmFzaWM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiBcImxpbmtzXCIsXG4gICAgICAgICAgICBpdGVtczogW1xuICAgICAgICAgICAgICBcIkJvbGRcIixcbiAgICAgICAgICAgICAgXCJJdGFsaWNcIixcbiAgICAgICAgICAgICAgXCItXCIsXG4gICAgICAgICAgICAgIFwiTnVtYmVyZWRMaXN0XCIsXG4gICAgICAgICAgICAgIFwiQnVsbGV0ZWRMaXN0XCIsXG4gICAgICAgICAgICAgIFwiLVwiLFxuICAgICAgICAgICAgICBcIkxpbmtcIixcbiAgICAgICAgICAgICAgXCJVbmxpbmtcIixcbiAgICAgICAgICAgICAgXCItXCIsXG4gICAgICAgICAgICAgIFwiTWF4aW1pemVcIixcbiAgICAgICAgICAgICAgXCJBYm91dFwiXG4gICAgICAgICAgICBdXG4gICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICByZW1vdmVCdXR0b25zOiBcIlwiXG4gICAgICB9O1xuICAgIH0sXG5cbiAgICBfaW5pdEV2ZW50OiBmdW5jdGlvbiBfaW5pdEV2ZW50KCkge1xuICAgICAgdmFyIGN1cnJlbnRXaWRnZXQgPSB0aGlzO1xuICAgICAgdGhpcy5fc3VwZXIoKTtcbiAgICAgIGlmICh0aGlzLmNrRWRpdG9ySW5zdGFuY2UpIHtcbiAgICAgICAgdGhpcy5ja0VkaXRvckluc3RhbmNlLm9uKFwiY2hhbmdlXCIsIGZ1bmN0aW9uIHdIdG1sdGV4dF9jaGFuZ2UoKSB7XG4gICAgICAgICAgY3VycmVudFdpZGdldC5zZXRWYWx1ZSh7IHZhbHVlOiB0aGlzLmdldERhdGEoKSB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5ja0VkaXRvckluc3RhbmNlLm9uKFwiZm9jdXNcIiwgZnVuY3Rpb24gd0h0bWx0ZXh0X2ZvY3VzKCkge1xuICAgICAgICAgIHZhciBrdFRhcmdldCA9IGN1cnJlbnRXaWRnZXQuZWxlbWVudC5maW5kKFwiLmlucHV0LWdyb3VwXCIpO1xuICAgICAgICAgIGN1cnJlbnRXaWRnZXQuc2hvd0lucHV0VG9vbHRpcChrdFRhcmdldCk7XG4gICAgICAgICAgY3VycmVudFdpZGdldC5lbGVtZW50LmZpbmQoXCIuY2tlXCIpLmFkZENsYXNzKFwiay1zdGF0ZS1mb2N1c2VkXCIpO1xuICAgICAgICAgIGN1cnJlbnRXaWRnZXQuZWxlbWVudFxuICAgICAgICAgICAgLmNsb3Nlc3QoXCIuZGNwQXR0cmlidXRlX19jb250ZW50XCIpXG4gICAgICAgICAgICAuYWRkQ2xhc3MoXCJkY3BBdHRyaWJ1dGUtLWZvY3VzXCIpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmNrRWRpdG9ySW5zdGFuY2Uub24oXCJibHVyXCIsIGZ1bmN0aW9uIHdIdG1sdGV4dF9ibHVyKCkge1xuICAgICAgICAgIHZhciBrdFRhcmdldCA9IGN1cnJlbnRXaWRnZXQuZWxlbWVudC5maW5kKFwiLmlucHV0LWdyb3VwXCIpO1xuICAgICAgICAgIGN1cnJlbnRXaWRnZXQuaGlkZUlucHV0VG9vbHRpcChrdFRhcmdldCk7XG4gICAgICAgICAgY3VycmVudFdpZGdldC5lbGVtZW50LmZpbmQoXCIuY2tlXCIpLnJlbW92ZUNsYXNzKFwiay1zdGF0ZS1mb2N1c2VkXCIpO1xuICAgICAgICAgIGN1cnJlbnRXaWRnZXQuZWxlbWVudFxuICAgICAgICAgICAgLmNsb3Nlc3QoXCIuZGNwQXR0cmlidXRlX19jb250ZW50XCIpXG4gICAgICAgICAgICAucmVtb3ZlQ2xhc3MoXCJkY3BBdHRyaWJ1dGUtLWZvY3VzXCIpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmNrRWRpdG9ySW5zdGFuY2Uub24oXCJpbnN0YW5jZVJlYWR5XCIsIGZ1bmN0aW9uIHdIdG1sdGV4dF9sb2FkZWQoKSB7XG4gICAgICAgICAgY3VycmVudFdpZGdldC5fdHJpZ2dlcihcIndpZGdldFJlYWR5XCIpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmVsZW1lbnQub24oXG4gICAgICAgICAgXCJwb3N0TW92ZWRcIiArIHRoaXMuZXZlbnROYW1lc3BhY2UsXG4gICAgICAgICAgZnVuY3Rpb24gd0h0bWxUZXh0T25Qb3N0TW92ZWQoZXZlbnQsIGV2ZW50RGF0YSkge1xuICAgICAgICAgICAgaWYgKGV2ZW50RGF0YSAmJiBldmVudERhdGEudG8gPT09IGN1cnJlbnRXaWRnZXQub3B0aW9ucy5pbmRleCkge1xuICAgICAgICAgICAgICBjdXJyZW50V2lkZ2V0LnJlZHJhdygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgLy9JZiB3ZSBhcmUgbm90IGluIENLRURJVE9SIG1vZGUsIHdlIHRha2UgY2FyZSBvZiBhbmNob3IgYW5kIHJlZGlyZWN0IGl0XG4gICAgICBpZiAodGhpcy5nZXRNb2RlKCkgIT09IFwid3JpdGVcIikge1xuICAgICAgICB0aGlzLmVsZW1lbnQub24oXG4gICAgICAgICAgXCJjbGljay5cIiArIHRoaXMuZXZlbnROYW1lc3BhY2UsXG4gICAgICAgICAgJ2E6bm90KFtocmVmXj1cIiNhY3Rpb24vXCJdKTpub3QoW2RhdGEtYWN0aW9uXSknLFxuICAgICAgICAgIGZ1bmN0aW9uIHdIdG1sQW5jaG9yQ2xpY2soZXZlbnQpIHtcbiAgICAgICAgICAgIHZhciBpbnRlcm5hbEV2ZW50ID0geyBwcmV2ZW50OiBmYWxzZSB9LFxuICAgICAgICAgICAgICBhbmNob3IgPSB0aGlzLFxuICAgICAgICAgICAgICAkYW5jaG9yID0gJCh0aGlzKSxcbiAgICAgICAgICAgICAgaXNOb3RQcmV2ZW50ZWQsXG4gICAgICAgICAgICAgIGFuY2hvcnNDb25maWcsXG4gICAgICAgICAgICAgIGFuY2hvcnNUYXJnZXQsXG4gICAgICAgICAgICAgIHdGZWF0dXJlID0gXCJcIixcbiAgICAgICAgICAgICAgaHJlZixcbiAgICAgICAgICAgICAgZGNwV2luZG93O1xuXG4gICAgICAgICAgICBpZiAoZXZlbnQuc3RvcFByb3BhZ2F0aW9uKSB7XG4gICAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgYW5jaG9yc0NvbmZpZyA9IF8uZXh0ZW5kKFxuICAgICAgICAgICAgICB7fSxcbiAgICAgICAgICAgICAgY3VycmVudFdpZGdldC5vcHRpb25zLnJlbmRlck9wdGlvbnMuYW5jaG9yc1xuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgaXNOb3RQcmV2ZW50ZWQgPSBjdXJyZW50V2lkZ2V0Ll90cmlnZ2VyKFxuICAgICAgICAgICAgICBcImFuY2hvckNsaWNrXCIsXG4gICAgICAgICAgICAgIGludGVybmFsRXZlbnQsXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAkZWw6IGN1cnJlbnRXaWRnZXQuZWxlbWVudCxcbiAgICAgICAgICAgICAgICBpbmRleDogY3VycmVudFdpZGdldC5fZ2V0SW5kZXgoKSxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgICBhbmNob3I6IGFuY2hvcixcbiAgICAgICAgICAgICAgICAgIGFuY2hvcnNDb25maWc6IGFuY2hvcnNDb25maWdcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpZiAoaXNOb3RQcmV2ZW50ZWQpIHtcbiAgICAgICAgICAgICAgdmFyICRiYXNlID0gJChcImJhc2VcIik7XG4gICAgICAgICAgICAgIHZhciBpc0Fic1VybCA9IG5ldyBSZWdFeHAoXCJeKD86W2Etel0rOik/Ly9cIiwgXCJpXCIpO1xuXG4gICAgICAgICAgICAgIGFuY2hvcnNUYXJnZXQgPSBhbmNob3JzQ29uZmlnLnRhcmdldCB8fCBcIl9ibGFua1wiO1xuICAgICAgICAgICAgICBocmVmID0gYW5jaG9yLmhyZWY7XG5cbiAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICRhbmNob3IuYXR0cihcImhyZWZcIikgJiZcbiAgICAgICAgICAgICAgICAkYW5jaG9yLmF0dHIoXCJocmVmXCIpLnN1YnN0cmluZygwLCAxKSA9PT0gXCIjXCJcbiAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgaHJlZiA9XG4gICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucHJvdG9jb2wgK1xuICAgICAgICAgICAgICAgICAgXCIvL1wiICtcbiAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZSArXG4gICAgICAgICAgICAgICAgICAod2luZG93LmxvY2F0aW9uLnBvcnQgPyBcIjpcIiArIHdpbmRvdy5sb2NhdGlvbi5wb3J0IDogXCJcIikgK1xuICAgICAgICAgICAgICAgICAgKHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSA/IHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSA6IFwiL1wiKSArXG4gICAgICAgICAgICAgICAgICAod2luZG93LmxvY2F0aW9uLnNlYXJjaCA/IHdpbmRvdy5sb2NhdGlvbi5zZWFyY2ggOiBcIlwiKSArXG4gICAgICAgICAgICAgICAgICAkYW5jaG9yLmF0dHIoXCJocmVmXCIpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgc3dpdGNoIChhbmNob3JzVGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgY2FzZSBcIl9kaWFsb2dcIjpcbiAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50V2lkZ2V0LnBvcHVwV2luZG93c1tocmVmXSkge1xuICAgICAgICAgICAgICAgICAgICBkY3BXaW5kb3cgPSBjdXJyZW50V2lkZ2V0LnBvcHVwV2luZG93c1tocmVmXTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGRjcFdpbmRvdyA9ICQoXCI8ZGl2Lz5cIilcbiAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kVG8oXCJib2R5XCIpXG4gICAgICAgICAgICAgICAgICAgICAgLmRjcFdpbmRvdyh7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogYW5jaG9yc0NvbmZpZy53aW5kb3dXaWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogYW5jaG9yc0NvbmZpZy53aW5kb3dIZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RhbDogYW5jaG9yc0NvbmZpZy5tb2RhbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGhyZWYsXG4gICAgICAgICAgICAgICAgICAgICAgICBpZnJhbWU6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50V2lkZ2V0LnBvcHVwV2luZG93c1tocmVmXSA9IGRjcFdpbmRvdztcbiAgICAgICAgICAgICAgICAgICAgZGNwV2luZG93XG4gICAgICAgICAgICAgICAgICAgICAgLmRhdGEoXCJkY3BXaW5kb3dcIilcbiAgICAgICAgICAgICAgICAgICAgICAua2VuZG9XaW5kb3coKVxuICAgICAgICAgICAgICAgICAgICAgIC5jZW50ZXIoKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGRjcFdpbmRvdy5kYXRhKFwiZGNwV2luZG93XCIpLm9wZW4oKTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJfc2VsZlwiOlxuICAgICAgICAgICAgICAgICAgLy8gRm9yIElFIDogTm90IGhvbm9yIGJhc2UgaHJlZiBpbiB0aGlzIGNhc2VcbiAgICAgICAgICAgICAgICAgIGlmICghaXNBYnNVcmwudGVzdChocmVmKSkge1xuICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9ICRiYXNlLmF0dHIoXCJocmVmXCIpICsgaHJlZjtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gaHJlZjtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICBpZiAoYW5jaG9yc0NvbmZpZy53aW5kb3dXaWR0aCB8fCBhbmNob3JzQ29uZmlnLndpbmRvd0hlaWdodCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYW5jaG9yc0NvbmZpZy53aW5kb3dXaWR0aCkge1xuICAgICAgICAgICAgICAgICAgICAgIHdGZWF0dXJlICs9XG4gICAgICAgICAgICAgICAgICAgICAgICBcIndpZHRoPVwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlSW50KGFuY2hvcnNDb25maWcud2luZG93V2lkdGgsIDEwKSArXG4gICAgICAgICAgICAgICAgICAgICAgICBcIixcIjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoYW5jaG9yc0NvbmZpZy53aW5kb3dIZWlnaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICB3RmVhdHVyZSArPVxuICAgICAgICAgICAgICAgICAgICAgICAgXCJoZWlnaHQ9XCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VJbnQoYW5jaG9yc0NvbmZpZy53aW5kb3dIZWlnaHQsIDEwKSArXG4gICAgICAgICAgICAgICAgICAgICAgICBcIixcIjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB3RmVhdHVyZSArPSBcInJlc2l6YWJsZT15ZXMsc2Nyb2xsYmFycz15ZXNcIjtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGlmICghaXNBYnNVcmwudGVzdChocmVmKSkge1xuICAgICAgICAgICAgICAgICAgICBocmVmID0gJGJhc2UuYXR0cihcImhyZWZcIikgKyBocmVmO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgd2luZG93Lm9wZW4oaHJlZiwgYW5jaG9yc1RhcmdldCwgd0ZlYXR1cmUpO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBEZWZpbmUgaW5wdXRzIGZvciBmb2N1c1xuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBfZ2V0Rm9jdXNJbnB1dDogZnVuY3Rpb24gd0h0bWx0ZXh0X2dldEZvY3VzSW5wdXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5lbGVtZW50O1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogTm8gdXNlIHBhcmVudCBjaGFuZ2VcbiAgICAgKi9cbiAgICBfaW5pdENoYW5nZUV2ZW50OiBmdW5jdGlvbiB3SHRtbHRleHRfaW5pdENoYW5nZUV2ZW50KCkge30sXG5cbiAgICBnZXRXaWRnZXRWYWx1ZTogZnVuY3Rpb24gd0h0bWx0ZXh0X2dldFdpZGdldFZhbHVlKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0Q29udGVudEVsZW1lbnRzKCkudmFsKCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENoYW5nZSB0aGUgdmFsdWUgb2YgdGhlIHdpZGdldFxuICAgICAqIEBwYXJhbSB2YWx1ZVxuICAgICAqL1xuICAgIHNldFZhbHVlOiBmdW5jdGlvbiB3SHRtbHRleHRTZXRWYWx1ZSh2YWx1ZSkge1xuICAgICAgdmFsdWUgPSBfLmNsb25lKHZhbHVlKTtcbiAgICAgIGlmICh2YWx1ZS52YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICAvLyBja0VkaXRvciByZXN0b3JlIG9yaWdpbmFsIHZhbHVlIGlmIHNldCB0byBudWxsXG4gICAgICAgIHZhbHVlLnZhbHVlID0gXCJcIjtcbiAgICAgIH1cbiAgICAgIGlmIChfLmhhcyh2YWx1ZSwgXCJ2YWx1ZVwiKSAmJiAhXy5oYXModmFsdWUsIFwiZGlzcGxheVZhbHVlXCIpKSB7XG4gICAgICAgIHZhbHVlLmRpc3BsYXlWYWx1ZSA9IHZhbHVlLnZhbHVlO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuZ2V0TW9kZSgpID09PSBcIndyaXRlXCIpIHtcbiAgICAgICAgLy8gRmxhc2ggZWxlbWVudCBvbmx5XG4gICAgICAgIHZhciBvcmlnaW5hbFZhbHVlID0gdGhpcy5ja0VkaXRvckluc3RhbmNlLmdldERhdGEoKTtcbiAgICAgICAgLy8gOiBleHBsaWNpdCBsYXp5IGVxdWFsXG5cbiAgICAgICAgLy9ub2luc3BlY3Rpb24gSlNIaW50XG4gICAgICAgIGlmIChvcmlnaW5hbFZhbHVlLnRyaW0oKSAhPSB2YWx1ZS52YWx1ZS50cmltKCkpIHtcbiAgICAgICAgICAvLyBNb2RpZnkgdmFsdWUgb25seSBpZiBkaWZmZXJlbnRcbiAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmlubGluZSkge1xuICAgICAgICAgICAgdGhpcy5nZXRDb250ZW50RWxlbWVudHMoKS5odG1sKHZhbHVlLnZhbHVlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5nZXRDb250ZW50RWxlbWVudHMoKS52YWwodmFsdWUudmFsdWUpO1xuICAgICAgICAgICAgdGhpcy5mbGFzaEVsZW1lbnQodGhpcy5lbGVtZW50LmZpbmQoXCJpZnJhbWVcIikpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0aGlzLmdldE1vZGUoKSA9PT0gXCJyZWFkXCIpIHtcbiAgICAgICAgdGhpcy5nZXRDb250ZW50RWxlbWVudHMoKS5odG1sKHZhbHVlLmRpc3BsYXlWYWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgXCJBdHRyaWJ1dGUgXCIgKyB0aGlzLm9wdGlvbnMuaWQgKyBcIiB1bmtub3duIG1vZGUgXCIgKyB0aGlzLmdldE1vZGUoKVxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICAvLyBjYWxsIHdBdHRyaWJ1dGU6OnNldFZhbHVlKClcbiAgICAgICQuZGNwLmRjcEF0dHJpYnV0ZS5wcm90b3R5cGUuc2V0VmFsdWUuY2FsbCh0aGlzLCB2YWx1ZSk7XG4gICAgfSxcblxuICAgIGdldFR5cGU6IGZ1bmN0aW9uIHdIdG1sdGV4dF9nZXRUeXBlKCkge1xuICAgICAgcmV0dXJuIFwiaHRtbHRleHRcIjtcbiAgICB9LFxuXG4gICAgX2Rlc3Ryb3k6IGZ1bmN0aW9uIHdIdG1sVGV4dERlc3Ryb3koKSB7XG4gICAgICB2YXIgY3VycmVudFdpZGdldCA9IHRoaXM7XG4gICAgICBpZiAodGhpcy5ja0VkaXRvckluc3RhbmNlICYmIHRoaXMuY2tFZGl0b3JJbnN0YW5jZS5kZXN0cm95KSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICB0aGlzLmNrRWRpdG9ySW5zdGFuY2Uuc3RhdHVzID09PSBcImxvYWRlZFwiIHx8XG4gICAgICAgICAgdGhpcy5ja0VkaXRvckluc3RhbmNlLnN0YXR1cyA9PT0gXCJyZWFkeVwiXG4gICAgICAgICkge1xuICAgICAgICAgIHRoaXMuY2tFZGl0b3JJbnN0YW5jZS5kZXN0cm95KCk7XG4gICAgICAgICAgXy5kZWZlcihmdW5jdGlvbiB3SHRtbHRleHRfZGVmZXJEZXN0cm95KCkge1xuICAgICAgICAgICAgY3VycmVudFdpZGdldC5fZGVzdHJveSgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmNrRWRpdG9ySW5zdGFuY2Uuc3RhdHVzID09PSBcInVubG9hZGVkXCIpIHtcbiAgICAgICAgICB0aGlzLmNrRWRpdG9ySW5zdGFuY2Uub24oXCJsb2FkZWRcIiwgZnVuY3Rpb24gd0h0bWx0ZXh0X2xvYWRlZCgpIHtcbiAgICAgICAgICAgIGN1cnJlbnRXaWRnZXQuX2Rlc3Ryb3koKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIF8uZWFjaCh0aGlzLnBvcHVwV2luZG93cywgZnVuY3Rpb24gd0h0bWx0ZXh0RGVzdHJveVBvcHVwKHBXaW5kb3cpIHtcbiAgICAgICAgcFdpbmRvdy5kYXRhKFwiZGNwV2luZG93XCIpLmRlc3Ryb3koKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5fc3VwZXIoKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlciBhIHJlYWR5IGV2ZW50IHdoZW4gd2lkZ2V0IGlzIHJlbmRlclxuICAgICAqL1xuICAgIF90cmlnZ2VyUmVhZHk6IGZ1bmN0aW9uIHdBdHRyaWJ1dGVSZWFkeSgpIHtcbiAgICAgIGlmICh0aGlzLmdldE1vZGUoKSAhPT0gXCJ3cml0ZVwiKSB7XG4gICAgICAgIHRoaXMuX3N1cGVyKCk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gJC5mbi5kY3BIdG1sdGV4dDtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBLFdBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdLQUVBO0FBQ0E7QUFDQTtBQUNBLGlGQUVBO0FBQ0EscUJBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///461fcd7a26781fe43cf1\n");

/***/ }),

/***/ "4dfa9ecb0933d2ac74e4":
/*!***************************************************************!*\
  !*** ./src/vendor/Anakeen/DOCUMENT/IHM/widgets/menu/wMenu.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n  __webpack_require__(/*! jquery */ \"127c8cf59f228bb01a21\"),\n  __webpack_require__(/*! underscore */ \"8e08e542008e4aef1f58\"),\n  __webpack_require__(/*! mustache */ \"bcd31d01884fc294fd69\"),\n  __webpack_require__(/*! dcpDocument/i18n/documentCatalog */ \"c58409cf810742518d6e\"),\n  __webpack_require__(/*! dcpDocument/widgets/widget */ \"a903b12ace80b5b4ecce\")\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function wMenu($, _, Mustache, i18n) {\n  \"use strict\";\n\n  $.widget(\"dcp.dcpMenu\", {\n    options: {\n      eventPrefix: \"dcpmenu\"\n    },\n\n    kendoMenuWidget: null,\n    _create: function wMenuCreate() {\n      this._tooltips = [];\n      this.popupWindows = [];\n      this._initStructure();\n    },\n\n    _initStructure: function wMenuInitStructure() {\n      var $content,\n        $mainElement,\n        scopeWidget = this;\n      //InitDom\n      $mainElement = $(\n        Mustache.render(\n          this._getTemplate(\"menu\") || \"\",\n          _.extend({ uuid: this.uuid }, this.options)\n        )\n      );\n      $content = $mainElement.find(\".menu__content\");\n      this._insertMenuContent(this.options.menus, $content);\n      this.element.append($mainElement);\n      //Init kendo widget\n      $content.kendoMenu({\n        openOnClick: true,\n        closeOnClick: true,\n\n        select: function wMenuSelect(event) {\n          var $menuElement = $(event.item),\n            eventContent,\n            $elementA,\n            href,\n            configMenu,\n            confirmText,\n            confirmOptions,\n            confirmDcpWindow,\n            target,\n            targetOptions,\n            dcpWindow,\n            $bodyDiv,\n            wFeature = \"\";\n\n          if ($menuElement.hasClass(\"menu__element--callable\")) {\n            scopeWidget.callMenu($menuElement);\n            return;\n          }\n\n          // Use specific select only for terminal items\n          if (!$menuElement.hasClass(\"menu__element--item\")) {\n            return;\n          }\n          $elementA = $(event.item).find(\"a\");\n          href = $elementA.data(\"url\");\n          //noinspection JSHint\n          if (href != \"\") {\n            //Display confirm message\n            if ($elementA.hasClass(\"menu--confirm\")) {\n              confirmText = Mustache.render(\n                $elementA.data(\"confirm-message\") || \"\",\n                scopeWidget.options\n              );\n\n              configMenu = $menuElement.data(\"menuConfiguration\");\n              confirmOptions = configMenu.confirmationOptions || {};\n              confirmDcpWindow = $(\"body\").dcpConfirm({\n                title: Mustache.render(\n                  confirmOptions.title || \"\",\n                  scopeWidget.options\n                ),\n                width: confirmOptions.windowWidth,\n                height: confirmOptions.windowHeight,\n                messages: {\n                  okMessage: Mustache.render(\n                    confirmOptions.confirmButton || \"\",\n                    scopeWidget.options\n                  ),\n                  cancelMessage: Mustache.render(\n                    confirmOptions.cancelButton || \"\",\n                    scopeWidget.options\n                  ),\n                  htmlMessage: confirmText,\n                  textMessage: \"\"\n                },\n                confirm: function wMenuConfirm() {\n                  $elementA.removeClass(\"menu--confirm\");\n                  $elementA.trigger(\"click\");\n                  $elementA.addClass(\"menu--confirm\");\n                },\n                templateData: scopeWidget.options\n              });\n\n              scopeWidget.popupWindows.push(confirmDcpWindow.data(\"dcpWindow\"));\n\n              confirmDcpWindow.data(\"dcpWindow\").open();\n            } else {\n              scopeWidget.element.data(\"menu-opening\", false);\n              //if href is event kind propagate event instead of default behaviour\n              if (href.substring(0, 8) === \"#action/\") {\n                event.preventDefault();\n                if (event.stopPropagation) {\n                  event.stopPropagation();\n                }\n                eventContent = href.substring(8).split(\":\");\n                scopeWidget._trigger(\"externalLinkSelected\", event, {\n                  target: event.target || event.item,\n                  eventId: eventContent.shift(),\n                  options: eventContent\n                });\n              } else {\n                var $base = $(\"base\");\n                var isAbsUrl = new RegExp(\"^(?:[a-z]+:)?//\", \"i\");\n\n                target = $elementA.attr(\"target\") || \"_self\";\n\n                if (\n                  $elementA.attr(\"href\") &&\n                  $elementA.attr(\"href\").substring(0, 1) === \"#\"\n                ) {\n                  href =\n                    window.location.protocol +\n                    \"//\" +\n                    window.location.hostname +\n                    (window.location.port ? \":\" + window.location.port : \"\") +\n                    (window.location.pathname\n                      ? window.location.pathname\n                      : \"/\") +\n                    (window.location.search ? window.location.search : \"\") +\n                    $elementA.attr(\"href\");\n                }\n\n                if (target === \"_self\") {\n                  // For IE : Not honor base href in this case\n\n                  if (!isAbsUrl.test(href)) {\n                    window.location.href = $base.attr(\"href\") + href;\n                  } else {\n                    window.location.href = href;\n                  }\n                } else {\n                  configMenu = $menuElement.data(\"menuConfiguration\");\n                  targetOptions = configMenu.targetOptions || {};\n                  if (target === \"_dialog\") {\n                    $bodyDiv = $(\"<div/>\");\n                    $(\"body\").append($bodyDiv);\n                    dcpWindow = $bodyDiv.dcpWindow({\n                      title: Mustache.render(\n                        targetOptions.title || \"\",\n                        window.dcp.documentData\n                      ),\n                      width: targetOptions.windowWidth,\n                      height: targetOptions.windowHeight,\n                      modal: targetOptions.modal,\n                      content: href,\n                      iframe: true\n                    });\n\n                    scopeWidget.popupWindows.push(dcpWindow.data(\"dcpWindow\"));\n                    dcpWindow\n                      .data(\"dcpWindow\")\n                      .kendoWindow()\n                      .center();\n                    dcpWindow.data(\"dcpWindow\").open();\n                  } else {\n                    if (\n                      targetOptions &&\n                      (targetOptions.windowWidth || targetOptions.windowHeight)\n                    ) {\n                      if (targetOptions.windowWidth) {\n                        wFeature +=\n                          \"width=\" +\n                          parseInt(targetOptions.windowWidth, 10) +\n                          \",\";\n                      }\n                      if (targetOptions.windowHeight) {\n                        wFeature +=\n                          \"height=\" +\n                          parseInt(targetOptions.windowHeight, 10) +\n                          \",\";\n                      }\n                      wFeature += \"resizable=yes,scrollbars=yes\";\n                    }\n                    if (!isAbsUrl.test(href)) {\n                      // For IE : Not honor base href in this case\n                      href = $base.attr(\"href\") + href;\n                    }\n                    window.open(href, target, wFeature);\n                  }\n                }\n              }\n            }\n          }\n        },\n        deactivate: function wMenuDeactivate(event) {\n          var $menuElement = $(event.item);\n\n          // Use for reopen for Dynamic menu\n          if ($menuElement.data(\"menu-openAgain\")) {\n            $menuElement.data(\"menu-openAgain\", false);\n            $menuElement.data(\"menu-noQuery\", true);\n            $content.data(\"kendoMenu\").open($menuElement);\n          }\n        },\n        open: function wMenuOpen(event) {\n          var $menuElement = $(event.item);\n\n          // Due to iOs artefact, an resize event is send, so need to inhibated during opening menu\n          scopeWidget.element.data(\"menu-opening\", true);\n          $menuElement.data(\"bodyWidth\", $(\"body\").width());\n\n          if (!$menuElement.hasClass(\"menu__element--item\")) {\n            var menuUrl = $menuElement.data(\"menu-url\");\n            if (menuUrl) {\n              // Open Dynamic menu : request server to get menu contents\n              if (!$menuElement.data(\"menu-noQuery\")) {\n                var loading = $menuElement.find(\".menu__loading\");\n\n                if (loading.length > 0) {\n                  // record initial loading item\n                  $menuElement.data(\"menu-loading\", loading);\n                }\n\n                // Display loading first\n                if (loading.length === 0 && $menuElement.data(\"menu-loading\")) {\n                  $menuElement\n                    .find(\".listmenu__content\")\n                    .html(\"\")\n                    .append($menuElement.data(\"menu-loading\"));\n                }\n\n                // Get subMenu\n                $.get(menuUrl, function wMenuDone(response) {\n                  var data = response.data;\n                  $menuElement.find(\".listmenu__content\").html(\"\");\n\n                  scopeWidget._insertMenuContent(\n                    data.content,\n                    $menuElement.find(\".listmenu__content\"),\n                    scopeWidget,\n                    $menuElement\n                  );\n                  $menuElement.kendoMenu({\n                    openOnClick: true,\n                    closeOnClick: true\n                  });\n\n                  if (\n                    parseInt(\n                      $menuElement.find(\".k-animation-container\").css(\"left\")\n                    ) !== 0 &&\n                    parseInt(\n                      $menuElement.find(\".k-animation-container\").css(\"right\")\n                    ) !== 0\n                  ) {\n                    // Need to close and reopen to adjust position menu because content has changed\n                    $menuElement.data(\"menu-openAgain\", true);\n                    $content.data(\"kendoMenu\").close($menuElement);\n                  }\n                }).fail(function wMenuFail(data) {\n                  try {\n                    var errorMessage = data.responseText;\n                    $menuElement.find(\".listmenu__content\").html(\n                      $(\"<div/>\")\n                        .text(errorMessage)\n                        .addClass(\"menu--error\")\n                    );\n                  } catch (e) {\n                    if (window.dcp.logger) {\n                      window.dcp.logger(e);\n                    } else {\n                      console.error(e);\n                    }\n                  }\n                });\n              }\n              $menuElement.data(\"menu-noQuery\", false);\n            }\n          }\n        },\n        activate: function wMenuActivate(event) {\n          // Correct Kendo position list when scrollbar is displayed\n          var $menuElement = $(event.item);\n          var $container = $menuElement.find(\".k-animation-container\");\n\n          var bodyWidth = $menuElement.data(\"bodyWidth\");\n          var menuWidth = $menuElement.outerWidth();\n          var menuLeft = $menuElement.offset().left;\n          var listWidth = $container.outerWidth();\n          var listLeft = $container.offset().left;\n\n          // The first condition is for iOS because no scroll window exists\n          if (\n            $(\"body\").width() > bodyWidth ||\n            window.document.documentElement.scrollHeight >\n              window.document.documentElement.clientHeight\n          ) {\n            // If the list menu is out of the body box, need to move it to the right\n            if (listLeft + listWidth > bodyWidth) {\n              $container\n                .css(\"left\", \"auto\")\n                .css(\"right\", menuLeft - bodyWidth + menuWidth + \"px\");\n            }\n          }\n\n          _.delay(function wMenuOpenDelay() {\n            // Due to iOs artefact, an resize event is send, so need to inhibated during opening menu\n            scopeWidget.element.data(\"menu-opening\", false);\n          }, 2000);\n        }\n      });\n\n      this.element\n        .find(\".menu--left\")\n        .last()\n        .addClass(\"menu--lastLeft\");\n      /**\n       * Fix menu when no see header\n       */\n      $(window).off(\"scroll.ddui\"); // reset\n\n      if (this.element.prop(\"nodeName\").toUpperCase() === \"NAV\") {\n        $(window).on(\"scroll.ddui\", function wMenuScroll() {\n          if ($(window).scrollTop() > $mainElement.position().top) {\n            if (!$mainElement.data(\"isFixed\")) {\n              $mainElement.data(\"isFixed\", \"1\");\n              $mainElement.parent().addClass(\"menu--fixed\");\n              $(window.document).trigger(\"redrawErrorMessages\");\n            }\n          } else {\n            if ($mainElement.data(\"isFixed\")) {\n              $mainElement.data(\"isFixed\", null);\n              $mainElement.parent().removeClass(\"menu--fixed\");\n              $(window.document).trigger(\"redrawErrorMessages\");\n            }\n          }\n        });\n      }\n      /**\n       * Responsive Menu\n       */\n      this.kendoMenuWidget = $content.data(\"kendoMenu\");\n      this.kendoMenuWidget.append([\n        {\n          text: i18n.___(\"Other\", \"UImenu\") + '<span class=\"menu--count\" />',\n          cssClass: \"menu__element  menu_element--hamburger \",\n          encoded: false, // Allows use of HTML for item text\n          items: [] // List items\n        }\n      ]);\n      $(window).on(\"resize.dcpMenu\", _.bind(this.inhibitBarMenu, this));\n      $(window).on(\n        \"resize.dcpMenu\",\n        _.debounce(_.bind(this.updateResponsiveMenu, this), 100, false)\n      );\n    },\n\n    callMenu: function callMenu($menuItem) {\n      var scopeWidget = this;\n      var $elementA = $menuItem.find(\"a\");\n\n      $.ajax({\n        dataType: \"json\",\n        url: $elementA.data(\"url\"),\n        method: $elementA.data(\"method\")\n      })\n        .then(function(data) {\n          _.each(data.messages, function(msg) {\n            scopeWidget._trigger(\"showMessage\", event, {\n              title: msg.contentText,\n              type: msg.type\n            });\n          });\n\n          if (data.data.needReload === true) {\n            _.delay(\n              function() {\n                scopeWidget._trigger(\"reload\", event, {});\n              },\n              // wait 1 second to see message before reload\n              data.messages ? 1000 : 0\n            );\n          }\n        })\n        .catch(function(info) {\n          scopeWidget._trigger(\"showMessage\", event, {\n            type: \"error\",\n            message:\n              info.responseJSON.error || info.responseJSON.exceptionMessage\n          });\n        });\n    },\n\n    inhibitBarMenu: function wMenuInhibitBarMenu() {\n      var widgetMenu = this;\n      if (\n        !widgetMenu.element.data(\"menu-opening\") &&\n        this.element.css(\"overflow\") !== \"hidden\"\n      ) {\n        this.element\n          .find(\"li.k-state-border-down\")\n          .each(function wMenuInhibitBarMenuClose() {\n            widgetMenu.kendoMenuWidget.close($(this));\n          });\n      }\n    },\n\n    /**\n     * Get scrollbar width by adding a element\n     * @returns {number|*}\n     */\n    getScrollBarWidth: function wMenugetScrollBarWidth() {\n      if (!this.scrollBarWidth) {\n        var inner = document.createElement(\"p\");\n        inner.style.width = \"100%\";\n        inner.style.height = \"200px\";\n\n        var outer = document.createElement(\"div\");\n        outer.style.position = \"absolute\";\n        outer.style.top = \"0px\";\n        outer.style.left = \"0px\";\n        outer.style.visibility = \"hidden\";\n        outer.style.width = \"200px\";\n        outer.style.height = \"150px\";\n        outer.style.overflow = \"hidden\";\n        outer.appendChild(inner);\n\n        document.body.appendChild(outer);\n        var w1 = inner.offsetWidth;\n        outer.style.overflow = \"scroll\";\n        var w2 = inner.offsetWidth;\n        if (w1 === w2) {\n          w2 = outer.clientWidth;\n        }\n\n        document.body.removeChild(outer);\n        this.scrollBarWidth = w1 - w2;\n      }\n\n      return this.scrollBarWidth;\n    },\n\n    /**\n     * Move menu to hamburger which can be displayed in same line menu\n     */\n    updateResponsiveMenu: function wMenuHideResponsiveMenu() {\n      var barMenu = this.element;\n      var $itemMenu = barMenu.find(\n        \"ul.k-menu > .menu__element:not(.menu--important,.menu_element--hamburger)\"\n      );\n      var $importantItemMenu = barMenu.find(\n        \"ul.k-menu > .menu__element.menu--important\"\n      );\n      var newHiddens = [];\n      var currentWidth = 0;\n      var visibleWidth = 0;\n      var freeWidth = 0;\n      var barmenuWidth = barMenu.width() - 2;\n      var kendoMenu = this.kendoMenuWidget;\n      var $hamburger = barMenu.find(\".menu_element--hamburger\");\n      var hiddenItemsCount;\n      var $hiddenItems = $($hamburger.find(\"ul\").get(0)).find(\"> li.k-item\");\n      var hiddenLeft = $hiddenItems.length;\n\n      if (barMenu.data(\"menu-opening\")) {\n        // Cannot redraw menu while menu is open because kendo failure occurs in touch device\n        return;\n      }\n      this.inhibitBarMenu();\n      $importantItemMenu.each(function wMenuComputeBarmenuWidth() {\n        barmenuWidth -= $(this).outerWidth();\n      });\n\n      barmenuWidth -= $hamburger.outerWidth();\n\n      if (barmenuWidth <= 0) {\n        return;\n      }\n\n      // When no scrollbar need to add hypothetic scrollbar width because no event to refresh when scrollbar appear\n      if (\n        window.document.documentElement.scrollHeight <=\n        window.document.documentElement.clientHeight\n      ) {\n        barmenuWidth -= this.getScrollBarWidth(); // Supposed that scrollbar width is max 20px\n      }\n\n      // Detect free menu available width  and record menu items which not contains to bar menu\n      $itemMenu.each(function wMenuComputeWidth() {\n        currentWidth += $(this).outerWidth();\n        if (currentWidth > barmenuWidth) {\n          $(this).data(\"original-width\", $(this).outerWidth());\n          newHiddens.push(this);\n        } else {\n          visibleWidth += $(this).outerWidth();\n        }\n      });\n\n      freeWidth = barmenuWidth - visibleWidth;\n\n      if (hiddenLeft === 0 && newHiddens.length === 1) {\n        // Special case for the last hidden may visible if hamburger is hide\n        if (\n          $(newHiddens[0]).outerWidth() <\n          freeWidth + $hamburger.outerWidth()\n        ) {\n          newHiddens = [];\n        }\n      }\n\n      // Move each new hidden menu to hamburger\n      _.each(newHiddens.reverse(), function wMenuItemToHamburger(item) {\n        // Prepend new menu to hamburger\n        if ($hamburger.find(\"li.k-item\").length === 0) {\n          kendoMenu.append($(item), $hamburger);\n        } else {\n          kendoMenu.insertBefore(\n            $(item),\n            $($hamburger.find(\"li.k-item\").get(0))\n          );\n        }\n      });\n      // No new hidden menu so ...\n      if (newHiddens.length === 0) {\n        // May be show hidden menu\n        $hiddenItems = $($hamburger.find(\"ul\").get(0)).find(\"> li.k-item\");\n        hiddenLeft = $hiddenItems.length;\n        $hiddenItems.each(function wMenuItemFromHamburger() {\n          if (freeWidth > 0) {\n            if (hiddenLeft === 1) {\n              freeWidth += $hamburger.width();\n            }\n            currentWidth = $(this).data(\"original-width\");\n\n            // If available width show move at initial place (right of the hamburger)\n            if (currentWidth < freeWidth) {\n              kendoMenu.insertBefore($(this), $hamburger);\n              freeWidth -= $(this).outerWidth();\n            } else {\n              freeWidth = -1; // stop test\n            }\n          }\n        });\n      }\n\n      // Number of items in hamburger\n      hiddenItemsCount = $($hamburger.find(\"ul\").get(0)).find(\"> li.k-item\")\n        .length;\n\n      // No view hamburger if empty\n      if (hiddenItemsCount === 0) {\n        $hamburger.hide();\n      }\n\n      // See sub-menu count\n      // $hamburger.find(\".menu--count\").text(hiddenItemsCount);\n\n      // View hamburger if not empty\n      if (newHiddens.length > 0) {\n        $hamburger.show();\n      }\n\n      // Restore css set by other resize callback\n      barMenu.css(\"overflow\", \"\").css(\"max-height\", \"\");\n    },\n\n    _insertMenuContent: function wMenuInsertMenuContent(\n      menus,\n      $content,\n      currentWidget,\n      scopeMenu\n    ) {\n      var subMenu;\n      var hasBeforeContent = false;\n      currentWidget = currentWidget || this;\n\n      if (scopeMenu) {\n        // Add fake before content if at least one element has before content to align all items\n        _.each(menus, function wMenuInsertMenuContentfake(currentMenu) {\n          if (currentMenu.iconUrl || currentMenu.beforeContent) {\n            hasBeforeContent = true;\n          }\n        });\n        if (hasBeforeContent) {\n          _.each(menus, function wMenuInsertMenuContentBeforeContent(\n            currentMenu\n          ) {\n            if (!currentMenu.iconUrl && !currentMenu.beforeContent) {\n              if (currentMenu.type !== \"separatorMenu\") {\n                currentMenu.beforeContent = \" \";\n              }\n            }\n          });\n        }\n      }\n\n      _.each(menus, function wMenuInsertMenuContentSet(currentMenu) {\n        var $currentMenu;\n        if (currentMenu.visibility === \"hidden\") {\n          return;\n        }\n        currentMenu.htmlAttr = [];\n        _.each(\n          currentMenu.htmlAttributes,\n          function wMenuInsertMenuContentSetHtml(attrValue, attrId) {\n            if (attrId === \"class\") {\n              currentMenu.cssClass = attrValue;\n            } else {\n              currentMenu.htmlAttr.push({\n                attrId: attrId,\n                attrValue: attrValue\n              });\n            }\n            if (currentMenu.htmlLabel) {\n              // reRender for variable labels\n              currentMenu.htmlLabel = Mustache.render(\n                currentMenu.htmlLabel || \"\",\n                { document: currentWidget.options.document }\n              );\n            }\n            if (currentMenu.label) {\n              // reRender for variable labels\n              currentMenu.label = Mustache.render(currentMenu.label || \"\", {\n                document: currentWidget.options.document\n              });\n            }\n            if (currentMenu.tooltipLabel) {\n              // reRender for variable labels\n              currentMenu.tooltipLabel = Mustache.render(\n                currentMenu.tooltipLabel || \"\",\n                { document: currentWidget.options.document }\n              );\n            }\n          }\n        );\n\n        currentMenu.contentLabel = currentMenu.htmlLabel || currentMenu.label;\n        currentMenu.disabled = currentMenu.visibility === \"disabled\";\n        if (currentMenu.type === \"listMenu\") {\n          subMenu = \"listMenu\";\n\n          $currentMenu = $(\n            Mustache.render(\n              currentWidget._getTemplate(subMenu) || \"\",\n              currentMenu\n            )\n          );\n          currentWidget._insertMenuContent(\n            currentMenu.content || \"\",\n            $currentMenu.find(\".listmenu__content\"),\n            currentWidget,\n            currentMenu\n          );\n        } else {\n          if (currentMenu.type === \"dynamicMenu\") {\n            subMenu = \"dynamicMenu\";\n            if (currentMenu.url) {\n              currentMenu.document = currentWidget.options.document;\n              currentMenu.url = Mustache.render(\n                currentMenu.url || \"\",\n                currentMenu\n              );\n            }\n            $currentMenu = $(\n              Mustache.render(\n                currentWidget._getTemplate(subMenu) || \"\",\n                currentMenu\n              )\n            );\n          } else {\n            currentMenu.document = currentWidget.options.document;\n            if (currentMenu.url) {\n              currentMenu.url = Mustache.render(\n                currentMenu.url || \"\",\n                currentMenu\n              );\n            }\n            $currentMenu = $(\n              Mustache.render(\n                currentWidget._getTemplate(currentMenu.type) || \"\",\n                currentMenu\n              )\n            );\n          }\n        }\n        if (currentMenu.tooltipLabel) {\n          currentWidget._tooltips.push(\n            $currentMenu.tooltip({\n              trigger: \"hover\",\n              html: currentMenu.tooltipHtml,\n              placement: currentMenu.tooltipPlacement\n                ? currentMenu.tooltipPlacement\n                : \"bottom\",\n              container: \".dcpDocument__menu\"\n            })\n          );\n        }\n        if (currentMenu.important) {\n          $currentMenu.addClass(\"menu--important\");\n        }\n        $currentMenu.data(\"menuConfiguration\", currentMenu);\n        $content.append($currentMenu);\n      });\n    },\n\n    _getTemplate: function wMenuTemplate(name) {\n      if (\n        this.options.templates &&\n        this.options.templates.menu &&\n        this.options.templates.menu[name]\n      ) {\n        return this.options.templates.menu[name];\n      }\n      if (\n        window.dcp.templates &&\n        window.dcp.templates.menu &&\n        window.dcp.templates.menu[name]\n      ) {\n        return window.dcp.templates.menu[name];\n      }\n      throw new Error(\"Menu unknown template \" + name);\n    },\n\n    _destroy: function wMenuDestroy() {\n      var kendoWidget = this.element.find(\".menu__content\").data(\"kendoMenu\");\n      if (kendoWidget) {\n        kendoWidget.destroy();\n      }\n      $(window).off(\".dcpMenu\");\n      _.each(this.popupWindows, function wMenuDestroyPopup(pWindow) {\n        pWindow.destroy();\n      });\n\n      _.each(this._tooltips, function wMenuDestroyTooltip(currentTooltip) {\n        currentTooltip.tooltip(\"dispose\");\n      });\n      this.element.empty();\n      this._super();\n    }\n  });\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNGRmYTllY2IwOTMzZDJhYzc0ZTQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdmVuZG9yL0FuYWtlZW4vRE9DVU1FTlQvSUhNL3dpZGdldHMvbWVudS93TWVudS5qcz81ZmM2Il0sInNvdXJjZXNDb250ZW50IjpbImRlZmluZShbXG4gIFwianF1ZXJ5XCIsXG4gIFwidW5kZXJzY29yZVwiLFxuICBcIm11c3RhY2hlXCIsXG4gIFwiZGNwRG9jdW1lbnQvaTE4bi9kb2N1bWVudENhdGFsb2dcIixcbiAgXCJkY3BEb2N1bWVudC93aWRnZXRzL3dpZGdldFwiXG5dLCBmdW5jdGlvbiB3TWVudSgkLCBfLCBNdXN0YWNoZSwgaTE4bikge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICAkLndpZGdldChcImRjcC5kY3BNZW51XCIsIHtcbiAgICBvcHRpb25zOiB7XG4gICAgICBldmVudFByZWZpeDogXCJkY3BtZW51XCJcbiAgICB9LFxuXG4gICAga2VuZG9NZW51V2lkZ2V0OiBudWxsLFxuICAgIF9jcmVhdGU6IGZ1bmN0aW9uIHdNZW51Q3JlYXRlKCkge1xuICAgICAgdGhpcy5fdG9vbHRpcHMgPSBbXTtcbiAgICAgIHRoaXMucG9wdXBXaW5kb3dzID0gW107XG4gICAgICB0aGlzLl9pbml0U3RydWN0dXJlKCk7XG4gICAgfSxcblxuICAgIF9pbml0U3RydWN0dXJlOiBmdW5jdGlvbiB3TWVudUluaXRTdHJ1Y3R1cmUoKSB7XG4gICAgICB2YXIgJGNvbnRlbnQsXG4gICAgICAgICRtYWluRWxlbWVudCxcbiAgICAgICAgc2NvcGVXaWRnZXQgPSB0aGlzO1xuICAgICAgLy9Jbml0RG9tXG4gICAgICAkbWFpbkVsZW1lbnQgPSAkKFxuICAgICAgICBNdXN0YWNoZS5yZW5kZXIoXG4gICAgICAgICAgdGhpcy5fZ2V0VGVtcGxhdGUoXCJtZW51XCIpIHx8IFwiXCIsXG4gICAgICAgICAgXy5leHRlbmQoeyB1dWlkOiB0aGlzLnV1aWQgfSwgdGhpcy5vcHRpb25zKVxuICAgICAgICApXG4gICAgICApO1xuICAgICAgJGNvbnRlbnQgPSAkbWFpbkVsZW1lbnQuZmluZChcIi5tZW51X19jb250ZW50XCIpO1xuICAgICAgdGhpcy5faW5zZXJ0TWVudUNvbnRlbnQodGhpcy5vcHRpb25zLm1lbnVzLCAkY29udGVudCk7XG4gICAgICB0aGlzLmVsZW1lbnQuYXBwZW5kKCRtYWluRWxlbWVudCk7XG4gICAgICAvL0luaXQga2VuZG8gd2lkZ2V0XG4gICAgICAkY29udGVudC5rZW5kb01lbnUoe1xuICAgICAgICBvcGVuT25DbGljazogdHJ1ZSxcbiAgICAgICAgY2xvc2VPbkNsaWNrOiB0cnVlLFxuXG4gICAgICAgIHNlbGVjdDogZnVuY3Rpb24gd01lbnVTZWxlY3QoZXZlbnQpIHtcbiAgICAgICAgICB2YXIgJG1lbnVFbGVtZW50ID0gJChldmVudC5pdGVtKSxcbiAgICAgICAgICAgIGV2ZW50Q29udGVudCxcbiAgICAgICAgICAgICRlbGVtZW50QSxcbiAgICAgICAgICAgIGhyZWYsXG4gICAgICAgICAgICBjb25maWdNZW51LFxuICAgICAgICAgICAgY29uZmlybVRleHQsXG4gICAgICAgICAgICBjb25maXJtT3B0aW9ucyxcbiAgICAgICAgICAgIGNvbmZpcm1EY3BXaW5kb3csXG4gICAgICAgICAgICB0YXJnZXQsXG4gICAgICAgICAgICB0YXJnZXRPcHRpb25zLFxuICAgICAgICAgICAgZGNwV2luZG93LFxuICAgICAgICAgICAgJGJvZHlEaXYsXG4gICAgICAgICAgICB3RmVhdHVyZSA9IFwiXCI7XG5cbiAgICAgICAgICBpZiAoJG1lbnVFbGVtZW50Lmhhc0NsYXNzKFwibWVudV9fZWxlbWVudC0tY2FsbGFibGVcIikpIHtcbiAgICAgICAgICAgIHNjb3BlV2lkZ2V0LmNhbGxNZW51KCRtZW51RWxlbWVudCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gVXNlIHNwZWNpZmljIHNlbGVjdCBvbmx5IGZvciB0ZXJtaW5hbCBpdGVtc1xuICAgICAgICAgIGlmICghJG1lbnVFbGVtZW50Lmhhc0NsYXNzKFwibWVudV9fZWxlbWVudC0taXRlbVwiKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICAkZWxlbWVudEEgPSAkKGV2ZW50Lml0ZW0pLmZpbmQoXCJhXCIpO1xuICAgICAgICAgIGhyZWYgPSAkZWxlbWVudEEuZGF0YShcInVybFwiKTtcbiAgICAgICAgICAvL25vaW5zcGVjdGlvbiBKU0hpbnRcbiAgICAgICAgICBpZiAoaHJlZiAhPSBcIlwiKSB7XG4gICAgICAgICAgICAvL0Rpc3BsYXkgY29uZmlybSBtZXNzYWdlXG4gICAgICAgICAgICBpZiAoJGVsZW1lbnRBLmhhc0NsYXNzKFwibWVudS0tY29uZmlybVwiKSkge1xuICAgICAgICAgICAgICBjb25maXJtVGV4dCA9IE11c3RhY2hlLnJlbmRlcihcbiAgICAgICAgICAgICAgICAkZWxlbWVudEEuZGF0YShcImNvbmZpcm0tbWVzc2FnZVwiKSB8fCBcIlwiLFxuICAgICAgICAgICAgICAgIHNjb3BlV2lkZ2V0Lm9wdGlvbnNcbiAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICBjb25maWdNZW51ID0gJG1lbnVFbGVtZW50LmRhdGEoXCJtZW51Q29uZmlndXJhdGlvblwiKTtcbiAgICAgICAgICAgICAgY29uZmlybU9wdGlvbnMgPSBjb25maWdNZW51LmNvbmZpcm1hdGlvbk9wdGlvbnMgfHwge307XG4gICAgICAgICAgICAgIGNvbmZpcm1EY3BXaW5kb3cgPSAkKFwiYm9keVwiKS5kY3BDb25maXJtKHtcbiAgICAgICAgICAgICAgICB0aXRsZTogTXVzdGFjaGUucmVuZGVyKFxuICAgICAgICAgICAgICAgICAgY29uZmlybU9wdGlvbnMudGl0bGUgfHwgXCJcIixcbiAgICAgICAgICAgICAgICAgIHNjb3BlV2lkZ2V0Lm9wdGlvbnNcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIHdpZHRoOiBjb25maXJtT3B0aW9ucy53aW5kb3dXaWR0aCxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IGNvbmZpcm1PcHRpb25zLndpbmRvd0hlaWdodCxcbiAgICAgICAgICAgICAgICBtZXNzYWdlczoge1xuICAgICAgICAgICAgICAgICAgb2tNZXNzYWdlOiBNdXN0YWNoZS5yZW5kZXIoXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpcm1PcHRpb25zLmNvbmZpcm1CdXR0b24gfHwgXCJcIixcbiAgICAgICAgICAgICAgICAgICAgc2NvcGVXaWRnZXQub3B0aW9uc1xuICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgIGNhbmNlbE1lc3NhZ2U6IE11c3RhY2hlLnJlbmRlcihcbiAgICAgICAgICAgICAgICAgICAgY29uZmlybU9wdGlvbnMuY2FuY2VsQnV0dG9uIHx8IFwiXCIsXG4gICAgICAgICAgICAgICAgICAgIHNjb3BlV2lkZ2V0Lm9wdGlvbnNcbiAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICBodG1sTWVzc2FnZTogY29uZmlybVRleHQsXG4gICAgICAgICAgICAgICAgICB0ZXh0TWVzc2FnZTogXCJcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY29uZmlybTogZnVuY3Rpb24gd01lbnVDb25maXJtKCkge1xuICAgICAgICAgICAgICAgICAgJGVsZW1lbnRBLnJlbW92ZUNsYXNzKFwibWVudS0tY29uZmlybVwiKTtcbiAgICAgICAgICAgICAgICAgICRlbGVtZW50QS50cmlnZ2VyKFwiY2xpY2tcIik7XG4gICAgICAgICAgICAgICAgICAkZWxlbWVudEEuYWRkQ2xhc3MoXCJtZW51LS1jb25maXJtXCIpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVEYXRhOiBzY29wZVdpZGdldC5vcHRpb25zXG4gICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgIHNjb3BlV2lkZ2V0LnBvcHVwV2luZG93cy5wdXNoKGNvbmZpcm1EY3BXaW5kb3cuZGF0YShcImRjcFdpbmRvd1wiKSk7XG5cbiAgICAgICAgICAgICAgY29uZmlybURjcFdpbmRvdy5kYXRhKFwiZGNwV2luZG93XCIpLm9wZW4oKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHNjb3BlV2lkZ2V0LmVsZW1lbnQuZGF0YShcIm1lbnUtb3BlbmluZ1wiLCBmYWxzZSk7XG4gICAgICAgICAgICAgIC8vaWYgaHJlZiBpcyBldmVudCBraW5kIHByb3BhZ2F0ZSBldmVudCBpbnN0ZWFkIG9mIGRlZmF1bHQgYmVoYXZpb3VyXG4gICAgICAgICAgICAgIGlmIChocmVmLnN1YnN0cmluZygwLCA4KSA9PT0gXCIjYWN0aW9uL1wiKSB7XG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQuc3RvcFByb3BhZ2F0aW9uKSB7XG4gICAgICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZXZlbnRDb250ZW50ID0gaHJlZi5zdWJzdHJpbmcoOCkuc3BsaXQoXCI6XCIpO1xuICAgICAgICAgICAgICAgIHNjb3BlV2lkZ2V0Ll90cmlnZ2VyKFwiZXh0ZXJuYWxMaW5rU2VsZWN0ZWRcIiwgZXZlbnQsIHtcbiAgICAgICAgICAgICAgICAgIHRhcmdldDogZXZlbnQudGFyZ2V0IHx8IGV2ZW50Lml0ZW0sXG4gICAgICAgICAgICAgICAgICBldmVudElkOiBldmVudENvbnRlbnQuc2hpZnQoKSxcbiAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IGV2ZW50Q29udGVudFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciAkYmFzZSA9ICQoXCJiYXNlXCIpO1xuICAgICAgICAgICAgICAgIHZhciBpc0Fic1VybCA9IG5ldyBSZWdFeHAoXCJeKD86W2Etel0rOik/Ly9cIiwgXCJpXCIpO1xuXG4gICAgICAgICAgICAgICAgdGFyZ2V0ID0gJGVsZW1lbnRBLmF0dHIoXCJ0YXJnZXRcIikgfHwgXCJfc2VsZlwiO1xuXG4gICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgJGVsZW1lbnRBLmF0dHIoXCJocmVmXCIpICYmXG4gICAgICAgICAgICAgICAgICAkZWxlbWVudEEuYXR0cihcImhyZWZcIikuc3Vic3RyaW5nKDAsIDEpID09PSBcIiNcIlxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgaHJlZiA9XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbCArXG4gICAgICAgICAgICAgICAgICAgIFwiLy9cIiArXG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZSArXG4gICAgICAgICAgICAgICAgICAgICh3aW5kb3cubG9jYXRpb24ucG9ydCA/IFwiOlwiICsgd2luZG93LmxvY2F0aW9uLnBvcnQgOiBcIlwiKSArXG4gICAgICAgICAgICAgICAgICAgICh3aW5kb3cubG9jYXRpb24ucGF0aG5hbWVcbiAgICAgICAgICAgICAgICAgICAgICA/IHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZVxuICAgICAgICAgICAgICAgICAgICAgIDogXCIvXCIpICtcbiAgICAgICAgICAgICAgICAgICAgKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2ggPyB3aW5kb3cubG9jYXRpb24uc2VhcmNoIDogXCJcIikgK1xuICAgICAgICAgICAgICAgICAgICAkZWxlbWVudEEuYXR0cihcImhyZWZcIik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldCA9PT0gXCJfc2VsZlwiKSB7XG4gICAgICAgICAgICAgICAgICAvLyBGb3IgSUUgOiBOb3QgaG9ub3IgYmFzZSBocmVmIGluIHRoaXMgY2FzZVxuXG4gICAgICAgICAgICAgICAgICBpZiAoIWlzQWJzVXJsLnRlc3QoaHJlZikpIHtcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSAkYmFzZS5hdHRyKFwiaHJlZlwiKSArIGhyZWY7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGhyZWY7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGNvbmZpZ01lbnUgPSAkbWVudUVsZW1lbnQuZGF0YShcIm1lbnVDb25maWd1cmF0aW9uXCIpO1xuICAgICAgICAgICAgICAgICAgdGFyZ2V0T3B0aW9ucyA9IGNvbmZpZ01lbnUudGFyZ2V0T3B0aW9ucyB8fCB7fTtcbiAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXQgPT09IFwiX2RpYWxvZ1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICRib2R5RGl2ID0gJChcIjxkaXYvPlwiKTtcbiAgICAgICAgICAgICAgICAgICAgJChcImJvZHlcIikuYXBwZW5kKCRib2R5RGl2KTtcbiAgICAgICAgICAgICAgICAgICAgZGNwV2luZG93ID0gJGJvZHlEaXYuZGNwV2luZG93KHtcbiAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogTXVzdGFjaGUucmVuZGVyKFxuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0T3B0aW9ucy50aXRsZSB8fCBcIlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmRjcC5kb2N1bWVudERhdGFcbiAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiB0YXJnZXRPcHRpb25zLndpbmRvd1dpZHRoLFxuICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogdGFyZ2V0T3B0aW9ucy53aW5kb3dIZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgICAgbW9kYWw6IHRhcmdldE9wdGlvbnMubW9kYWwsXG4gICAgICAgICAgICAgICAgICAgICAgY29udGVudDogaHJlZixcbiAgICAgICAgICAgICAgICAgICAgICBpZnJhbWU6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgc2NvcGVXaWRnZXQucG9wdXBXaW5kb3dzLnB1c2goZGNwV2luZG93LmRhdGEoXCJkY3BXaW5kb3dcIikpO1xuICAgICAgICAgICAgICAgICAgICBkY3BXaW5kb3dcbiAgICAgICAgICAgICAgICAgICAgICAuZGF0YShcImRjcFdpbmRvd1wiKVxuICAgICAgICAgICAgICAgICAgICAgIC5rZW5kb1dpbmRvdygpXG4gICAgICAgICAgICAgICAgICAgICAgLmNlbnRlcigpO1xuICAgICAgICAgICAgICAgICAgICBkY3BXaW5kb3cuZGF0YShcImRjcFdpbmRvd1wiKS5vcGVuKCk7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0T3B0aW9ucyAmJlxuICAgICAgICAgICAgICAgICAgICAgICh0YXJnZXRPcHRpb25zLndpbmRvd1dpZHRoIHx8IHRhcmdldE9wdGlvbnMud2luZG93SGVpZ2h0KVxuICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0T3B0aW9ucy53aW5kb3dXaWR0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgd0ZlYXR1cmUgKz1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ3aWR0aD1cIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlSW50KHRhcmdldE9wdGlvbnMud2luZG93V2lkdGgsIDEwKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwiLFwiO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0T3B0aW9ucy53aW5kb3dIZWlnaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdGZWF0dXJlICs9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwiaGVpZ2h0PVwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VJbnQodGFyZ2V0T3B0aW9ucy53aW5kb3dIZWlnaHQsIDEwKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwiLFwiO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB3RmVhdHVyZSArPSBcInJlc2l6YWJsZT15ZXMsc2Nyb2xsYmFycz15ZXNcIjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzQWJzVXJsLnRlc3QoaHJlZikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAvLyBGb3IgSUUgOiBOb3QgaG9ub3IgYmFzZSBocmVmIGluIHRoaXMgY2FzZVxuICAgICAgICAgICAgICAgICAgICAgIGhyZWYgPSAkYmFzZS5hdHRyKFwiaHJlZlwiKSArIGhyZWY7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgd2luZG93Lm9wZW4oaHJlZiwgdGFyZ2V0LCB3RmVhdHVyZSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBkZWFjdGl2YXRlOiBmdW5jdGlvbiB3TWVudURlYWN0aXZhdGUoZXZlbnQpIHtcbiAgICAgICAgICB2YXIgJG1lbnVFbGVtZW50ID0gJChldmVudC5pdGVtKTtcblxuICAgICAgICAgIC8vIFVzZSBmb3IgcmVvcGVuIGZvciBEeW5hbWljIG1lbnVcbiAgICAgICAgICBpZiAoJG1lbnVFbGVtZW50LmRhdGEoXCJtZW51LW9wZW5BZ2FpblwiKSkge1xuICAgICAgICAgICAgJG1lbnVFbGVtZW50LmRhdGEoXCJtZW51LW9wZW5BZ2FpblwiLCBmYWxzZSk7XG4gICAgICAgICAgICAkbWVudUVsZW1lbnQuZGF0YShcIm1lbnUtbm9RdWVyeVwiLCB0cnVlKTtcbiAgICAgICAgICAgICRjb250ZW50LmRhdGEoXCJrZW5kb01lbnVcIikub3BlbigkbWVudUVsZW1lbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgb3BlbjogZnVuY3Rpb24gd01lbnVPcGVuKGV2ZW50KSB7XG4gICAgICAgICAgdmFyICRtZW51RWxlbWVudCA9ICQoZXZlbnQuaXRlbSk7XG5cbiAgICAgICAgICAvLyBEdWUgdG8gaU9zIGFydGVmYWN0LCBhbiByZXNpemUgZXZlbnQgaXMgc2VuZCwgc28gbmVlZCB0byBpbmhpYmF0ZWQgZHVyaW5nIG9wZW5pbmcgbWVudVxuICAgICAgICAgIHNjb3BlV2lkZ2V0LmVsZW1lbnQuZGF0YShcIm1lbnUtb3BlbmluZ1wiLCB0cnVlKTtcbiAgICAgICAgICAkbWVudUVsZW1lbnQuZGF0YShcImJvZHlXaWR0aFwiLCAkKFwiYm9keVwiKS53aWR0aCgpKTtcblxuICAgICAgICAgIGlmICghJG1lbnVFbGVtZW50Lmhhc0NsYXNzKFwibWVudV9fZWxlbWVudC0taXRlbVwiKSkge1xuICAgICAgICAgICAgdmFyIG1lbnVVcmwgPSAkbWVudUVsZW1lbnQuZGF0YShcIm1lbnUtdXJsXCIpO1xuICAgICAgICAgICAgaWYgKG1lbnVVcmwpIHtcbiAgICAgICAgICAgICAgLy8gT3BlbiBEeW5hbWljIG1lbnUgOiByZXF1ZXN0IHNlcnZlciB0byBnZXQgbWVudSBjb250ZW50c1xuICAgICAgICAgICAgICBpZiAoISRtZW51RWxlbWVudC5kYXRhKFwibWVudS1ub1F1ZXJ5XCIpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGxvYWRpbmcgPSAkbWVudUVsZW1lbnQuZmluZChcIi5tZW51X19sb2FkaW5nXCIpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGxvYWRpbmcubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgLy8gcmVjb3JkIGluaXRpYWwgbG9hZGluZyBpdGVtXG4gICAgICAgICAgICAgICAgICAkbWVudUVsZW1lbnQuZGF0YShcIm1lbnUtbG9hZGluZ1wiLCBsb2FkaW5nKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBEaXNwbGF5IGxvYWRpbmcgZmlyc3RcbiAgICAgICAgICAgICAgICBpZiAobG9hZGluZy5sZW5ndGggPT09IDAgJiYgJG1lbnVFbGVtZW50LmRhdGEoXCJtZW51LWxvYWRpbmdcIikpIHtcbiAgICAgICAgICAgICAgICAgICRtZW51RWxlbWVudFxuICAgICAgICAgICAgICAgICAgICAuZmluZChcIi5saXN0bWVudV9fY29udGVudFwiKVxuICAgICAgICAgICAgICAgICAgICAuaHRtbChcIlwiKVxuICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCRtZW51RWxlbWVudC5kYXRhKFwibWVudS1sb2FkaW5nXCIpKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBHZXQgc3ViTWVudVxuICAgICAgICAgICAgICAgICQuZ2V0KG1lbnVVcmwsIGZ1bmN0aW9uIHdNZW51RG9uZShyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgdmFyIGRhdGEgPSByZXNwb25zZS5kYXRhO1xuICAgICAgICAgICAgICAgICAgJG1lbnVFbGVtZW50LmZpbmQoXCIubGlzdG1lbnVfX2NvbnRlbnRcIikuaHRtbChcIlwiKTtcblxuICAgICAgICAgICAgICAgICAgc2NvcGVXaWRnZXQuX2luc2VydE1lbnVDb250ZW50KFxuICAgICAgICAgICAgICAgICAgICBkYXRhLmNvbnRlbnQsXG4gICAgICAgICAgICAgICAgICAgICRtZW51RWxlbWVudC5maW5kKFwiLmxpc3RtZW51X19jb250ZW50XCIpLFxuICAgICAgICAgICAgICAgICAgICBzY29wZVdpZGdldCxcbiAgICAgICAgICAgICAgICAgICAgJG1lbnVFbGVtZW50XG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgJG1lbnVFbGVtZW50LmtlbmRvTWVudSh7XG4gICAgICAgICAgICAgICAgICAgIG9wZW5PbkNsaWNrOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBjbG9zZU9uQ2xpY2s6IHRydWVcbiAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgIHBhcnNlSW50KFxuICAgICAgICAgICAgICAgICAgICAgICRtZW51RWxlbWVudC5maW5kKFwiLmstYW5pbWF0aW9uLWNvbnRhaW5lclwiKS5jc3MoXCJsZWZ0XCIpXG4gICAgICAgICAgICAgICAgICAgICkgIT09IDAgJiZcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VJbnQoXG4gICAgICAgICAgICAgICAgICAgICAgJG1lbnVFbGVtZW50LmZpbmQoXCIuay1hbmltYXRpb24tY29udGFpbmVyXCIpLmNzcyhcInJpZ2h0XCIpXG4gICAgICAgICAgICAgICAgICAgICkgIT09IDBcbiAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAvLyBOZWVkIHRvIGNsb3NlIGFuZCByZW9wZW4gdG8gYWRqdXN0IHBvc2l0aW9uIG1lbnUgYmVjYXVzZSBjb250ZW50IGhhcyBjaGFuZ2VkXG4gICAgICAgICAgICAgICAgICAgICRtZW51RWxlbWVudC5kYXRhKFwibWVudS1vcGVuQWdhaW5cIiwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICRjb250ZW50LmRhdGEoXCJrZW5kb01lbnVcIikuY2xvc2UoJG1lbnVFbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KS5mYWlsKGZ1bmN0aW9uIHdNZW51RmFpbChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZXJyb3JNZXNzYWdlID0gZGF0YS5yZXNwb25zZVRleHQ7XG4gICAgICAgICAgICAgICAgICAgICRtZW51RWxlbWVudC5maW5kKFwiLmxpc3RtZW51X19jb250ZW50XCIpLmh0bWwoXG4gICAgICAgICAgICAgICAgICAgICAgJChcIjxkaXYvPlwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRleHQoZXJyb3JNZXNzYWdlKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKFwibWVudS0tZXJyb3JcIilcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHdpbmRvdy5kY3AubG9nZ2VyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgd2luZG93LmRjcC5sb2dnZXIoZSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICRtZW51RWxlbWVudC5kYXRhKFwibWVudS1ub1F1ZXJ5XCIsIGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGFjdGl2YXRlOiBmdW5jdGlvbiB3TWVudUFjdGl2YXRlKGV2ZW50KSB7XG4gICAgICAgICAgLy8gQ29ycmVjdCBLZW5kbyBwb3NpdGlvbiBsaXN0IHdoZW4gc2Nyb2xsYmFyIGlzIGRpc3BsYXllZFxuICAgICAgICAgIHZhciAkbWVudUVsZW1lbnQgPSAkKGV2ZW50Lml0ZW0pO1xuICAgICAgICAgIHZhciAkY29udGFpbmVyID0gJG1lbnVFbGVtZW50LmZpbmQoXCIuay1hbmltYXRpb24tY29udGFpbmVyXCIpO1xuXG4gICAgICAgICAgdmFyIGJvZHlXaWR0aCA9ICRtZW51RWxlbWVudC5kYXRhKFwiYm9keVdpZHRoXCIpO1xuICAgICAgICAgIHZhciBtZW51V2lkdGggPSAkbWVudUVsZW1lbnQub3V0ZXJXaWR0aCgpO1xuICAgICAgICAgIHZhciBtZW51TGVmdCA9ICRtZW51RWxlbWVudC5vZmZzZXQoKS5sZWZ0O1xuICAgICAgICAgIHZhciBsaXN0V2lkdGggPSAkY29udGFpbmVyLm91dGVyV2lkdGgoKTtcbiAgICAgICAgICB2YXIgbGlzdExlZnQgPSAkY29udGFpbmVyLm9mZnNldCgpLmxlZnQ7XG5cbiAgICAgICAgICAvLyBUaGUgZmlyc3QgY29uZGl0aW9uIGlzIGZvciBpT1MgYmVjYXVzZSBubyBzY3JvbGwgd2luZG93IGV4aXN0c1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICQoXCJib2R5XCIpLndpZHRoKCkgPiBib2R5V2lkdGggfHxcbiAgICAgICAgICAgIHdpbmRvdy5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsSGVpZ2h0ID5cbiAgICAgICAgICAgICAgd2luZG93LmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHRcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIC8vIElmIHRoZSBsaXN0IG1lbnUgaXMgb3V0IG9mIHRoZSBib2R5IGJveCwgbmVlZCB0byBtb3ZlIGl0IHRvIHRoZSByaWdodFxuICAgICAgICAgICAgaWYgKGxpc3RMZWZ0ICsgbGlzdFdpZHRoID4gYm9keVdpZHRoKSB7XG4gICAgICAgICAgICAgICRjb250YWluZXJcbiAgICAgICAgICAgICAgICAuY3NzKFwibGVmdFwiLCBcImF1dG9cIilcbiAgICAgICAgICAgICAgICAuY3NzKFwicmlnaHRcIiwgbWVudUxlZnQgLSBib2R5V2lkdGggKyBtZW51V2lkdGggKyBcInB4XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIF8uZGVsYXkoZnVuY3Rpb24gd01lbnVPcGVuRGVsYXkoKSB7XG4gICAgICAgICAgICAvLyBEdWUgdG8gaU9zIGFydGVmYWN0LCBhbiByZXNpemUgZXZlbnQgaXMgc2VuZCwgc28gbmVlZCB0byBpbmhpYmF0ZWQgZHVyaW5nIG9wZW5pbmcgbWVudVxuICAgICAgICAgICAgc2NvcGVXaWRnZXQuZWxlbWVudC5kYXRhKFwibWVudS1vcGVuaW5nXCIsIGZhbHNlKTtcbiAgICAgICAgICB9LCAyMDAwKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHRoaXMuZWxlbWVudFxuICAgICAgICAuZmluZChcIi5tZW51LS1sZWZ0XCIpXG4gICAgICAgIC5sYXN0KClcbiAgICAgICAgLmFkZENsYXNzKFwibWVudS0tbGFzdExlZnRcIik7XG4gICAgICAvKipcbiAgICAgICAqIEZpeCBtZW51IHdoZW4gbm8gc2VlIGhlYWRlclxuICAgICAgICovXG4gICAgICAkKHdpbmRvdykub2ZmKFwic2Nyb2xsLmRkdWlcIik7IC8vIHJlc2V0XG5cbiAgICAgIGlmICh0aGlzLmVsZW1lbnQucHJvcChcIm5vZGVOYW1lXCIpLnRvVXBwZXJDYXNlKCkgPT09IFwiTkFWXCIpIHtcbiAgICAgICAgJCh3aW5kb3cpLm9uKFwic2Nyb2xsLmRkdWlcIiwgZnVuY3Rpb24gd01lbnVTY3JvbGwoKSB7XG4gICAgICAgICAgaWYgKCQod2luZG93KS5zY3JvbGxUb3AoKSA+ICRtYWluRWxlbWVudC5wb3NpdGlvbigpLnRvcCkge1xuICAgICAgICAgICAgaWYgKCEkbWFpbkVsZW1lbnQuZGF0YShcImlzRml4ZWRcIikpIHtcbiAgICAgICAgICAgICAgJG1haW5FbGVtZW50LmRhdGEoXCJpc0ZpeGVkXCIsIFwiMVwiKTtcbiAgICAgICAgICAgICAgJG1haW5FbGVtZW50LnBhcmVudCgpLmFkZENsYXNzKFwibWVudS0tZml4ZWRcIik7XG4gICAgICAgICAgICAgICQod2luZG93LmRvY3VtZW50KS50cmlnZ2VyKFwicmVkcmF3RXJyb3JNZXNzYWdlc1wiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCRtYWluRWxlbWVudC5kYXRhKFwiaXNGaXhlZFwiKSkge1xuICAgICAgICAgICAgICAkbWFpbkVsZW1lbnQuZGF0YShcImlzRml4ZWRcIiwgbnVsbCk7XG4gICAgICAgICAgICAgICRtYWluRWxlbWVudC5wYXJlbnQoKS5yZW1vdmVDbGFzcyhcIm1lbnUtLWZpeGVkXCIpO1xuICAgICAgICAgICAgICAkKHdpbmRvdy5kb2N1bWVudCkudHJpZ2dlcihcInJlZHJhd0Vycm9yTWVzc2FnZXNcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIC8qKlxuICAgICAgICogUmVzcG9uc2l2ZSBNZW51XG4gICAgICAgKi9cbiAgICAgIHRoaXMua2VuZG9NZW51V2lkZ2V0ID0gJGNvbnRlbnQuZGF0YShcImtlbmRvTWVudVwiKTtcbiAgICAgIHRoaXMua2VuZG9NZW51V2lkZ2V0LmFwcGVuZChbXG4gICAgICAgIHtcbiAgICAgICAgICB0ZXh0OiBpMThuLl9fXyhcIk90aGVyXCIsIFwiVUltZW51XCIpICsgJzxzcGFuIGNsYXNzPVwibWVudS0tY291bnRcIiAvPicsXG4gICAgICAgICAgY3NzQ2xhc3M6IFwibWVudV9fZWxlbWVudCAgbWVudV9lbGVtZW50LS1oYW1idXJnZXIgXCIsXG4gICAgICAgICAgZW5jb2RlZDogZmFsc2UsIC8vIEFsbG93cyB1c2Ugb2YgSFRNTCBmb3IgaXRlbSB0ZXh0XG4gICAgICAgICAgaXRlbXM6IFtdIC8vIExpc3QgaXRlbXNcbiAgICAgICAgfVxuICAgICAgXSk7XG4gICAgICAkKHdpbmRvdykub24oXCJyZXNpemUuZGNwTWVudVwiLCBfLmJpbmQodGhpcy5pbmhpYml0QmFyTWVudSwgdGhpcykpO1xuICAgICAgJCh3aW5kb3cpLm9uKFxuICAgICAgICBcInJlc2l6ZS5kY3BNZW51XCIsXG4gICAgICAgIF8uZGVib3VuY2UoXy5iaW5kKHRoaXMudXBkYXRlUmVzcG9uc2l2ZU1lbnUsIHRoaXMpLCAxMDAsIGZhbHNlKVxuICAgICAgKTtcbiAgICB9LFxuXG4gICAgY2FsbE1lbnU6IGZ1bmN0aW9uIGNhbGxNZW51KCRtZW51SXRlbSkge1xuICAgICAgdmFyIHNjb3BlV2lkZ2V0ID0gdGhpcztcbiAgICAgIHZhciAkZWxlbWVudEEgPSAkbWVudUl0ZW0uZmluZChcImFcIik7XG5cbiAgICAgICQuYWpheCh7XG4gICAgICAgIGRhdGFUeXBlOiBcImpzb25cIixcbiAgICAgICAgdXJsOiAkZWxlbWVudEEuZGF0YShcInVybFwiKSxcbiAgICAgICAgbWV0aG9kOiAkZWxlbWVudEEuZGF0YShcIm1ldGhvZFwiKVxuICAgICAgfSlcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgIF8uZWFjaChkYXRhLm1lc3NhZ2VzLCBmdW5jdGlvbihtc2cpIHtcbiAgICAgICAgICAgIHNjb3BlV2lkZ2V0Ll90cmlnZ2VyKFwic2hvd01lc3NhZ2VcIiwgZXZlbnQsIHtcbiAgICAgICAgICAgICAgdGl0bGU6IG1zZy5jb250ZW50VGV4dCxcbiAgICAgICAgICAgICAgdHlwZTogbXNnLnR5cGVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaWYgKGRhdGEuZGF0YS5uZWVkUmVsb2FkID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLmRlbGF5KFxuICAgICAgICAgICAgICBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBzY29wZVdpZGdldC5fdHJpZ2dlcihcInJlbG9hZFwiLCBldmVudCwge30pO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAvLyB3YWl0IDEgc2Vjb25kIHRvIHNlZSBtZXNzYWdlIGJlZm9yZSByZWxvYWRcbiAgICAgICAgICAgICAgZGF0YS5tZXNzYWdlcyA/IDEwMDAgOiAwXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKGZ1bmN0aW9uKGluZm8pIHtcbiAgICAgICAgICBzY29wZVdpZGdldC5fdHJpZ2dlcihcInNob3dNZXNzYWdlXCIsIGV2ZW50LCB7XG4gICAgICAgICAgICB0eXBlOiBcImVycm9yXCIsXG4gICAgICAgICAgICBtZXNzYWdlOlxuICAgICAgICAgICAgICBpbmZvLnJlc3BvbnNlSlNPTi5lcnJvciB8fCBpbmZvLnJlc3BvbnNlSlNPTi5leGNlcHRpb25NZXNzYWdlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICBpbmhpYml0QmFyTWVudTogZnVuY3Rpb24gd01lbnVJbmhpYml0QmFyTWVudSgpIHtcbiAgICAgIHZhciB3aWRnZXRNZW51ID0gdGhpcztcbiAgICAgIGlmIChcbiAgICAgICAgIXdpZGdldE1lbnUuZWxlbWVudC5kYXRhKFwibWVudS1vcGVuaW5nXCIpICYmXG4gICAgICAgIHRoaXMuZWxlbWVudC5jc3MoXCJvdmVyZmxvd1wiKSAhPT0gXCJoaWRkZW5cIlxuICAgICAgKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudFxuICAgICAgICAgIC5maW5kKFwibGkuay1zdGF0ZS1ib3JkZXItZG93blwiKVxuICAgICAgICAgIC5lYWNoKGZ1bmN0aW9uIHdNZW51SW5oaWJpdEJhck1lbnVDbG9zZSgpIHtcbiAgICAgICAgICAgIHdpZGdldE1lbnUua2VuZG9NZW51V2lkZ2V0LmNsb3NlKCQodGhpcykpO1xuICAgICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBHZXQgc2Nyb2xsYmFyIHdpZHRoIGJ5IGFkZGluZyBhIGVsZW1lbnRcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfCp9XG4gICAgICovXG4gICAgZ2V0U2Nyb2xsQmFyV2lkdGg6IGZ1bmN0aW9uIHdNZW51Z2V0U2Nyb2xsQmFyV2lkdGgoKSB7XG4gICAgICBpZiAoIXRoaXMuc2Nyb2xsQmFyV2lkdGgpIHtcbiAgICAgICAgdmFyIGlubmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIik7XG4gICAgICAgIGlubmVyLnN0eWxlLndpZHRoID0gXCIxMDAlXCI7XG4gICAgICAgIGlubmVyLnN0eWxlLmhlaWdodCA9IFwiMjAwcHhcIjtcblxuICAgICAgICB2YXIgb3V0ZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBvdXRlci5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcbiAgICAgICAgb3V0ZXIuc3R5bGUudG9wID0gXCIwcHhcIjtcbiAgICAgICAgb3V0ZXIuc3R5bGUubGVmdCA9IFwiMHB4XCI7XG4gICAgICAgIG91dGVyLnN0eWxlLnZpc2liaWxpdHkgPSBcImhpZGRlblwiO1xuICAgICAgICBvdXRlci5zdHlsZS53aWR0aCA9IFwiMjAwcHhcIjtcbiAgICAgICAgb3V0ZXIuc3R5bGUuaGVpZ2h0ID0gXCIxNTBweFwiO1xuICAgICAgICBvdXRlci5zdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XG4gICAgICAgIG91dGVyLmFwcGVuZENoaWxkKGlubmVyKTtcblxuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKG91dGVyKTtcbiAgICAgICAgdmFyIHcxID0gaW5uZXIub2Zmc2V0V2lkdGg7XG4gICAgICAgIG91dGVyLnN0eWxlLm92ZXJmbG93ID0gXCJzY3JvbGxcIjtcbiAgICAgICAgdmFyIHcyID0gaW5uZXIub2Zmc2V0V2lkdGg7XG4gICAgICAgIGlmICh3MSA9PT0gdzIpIHtcbiAgICAgICAgICB3MiA9IG91dGVyLmNsaWVudFdpZHRoO1xuICAgICAgICB9XG5cbiAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChvdXRlcik7XG4gICAgICAgIHRoaXMuc2Nyb2xsQmFyV2lkdGggPSB3MSAtIHcyO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5zY3JvbGxCYXJXaWR0aDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogTW92ZSBtZW51IHRvIGhhbWJ1cmdlciB3aGljaCBjYW4gYmUgZGlzcGxheWVkIGluIHNhbWUgbGluZSBtZW51XG4gICAgICovXG4gICAgdXBkYXRlUmVzcG9uc2l2ZU1lbnU6IGZ1bmN0aW9uIHdNZW51SGlkZVJlc3BvbnNpdmVNZW51KCkge1xuICAgICAgdmFyIGJhck1lbnUgPSB0aGlzLmVsZW1lbnQ7XG4gICAgICB2YXIgJGl0ZW1NZW51ID0gYmFyTWVudS5maW5kKFxuICAgICAgICBcInVsLmstbWVudSA+IC5tZW51X19lbGVtZW50Om5vdCgubWVudS0taW1wb3J0YW50LC5tZW51X2VsZW1lbnQtLWhhbWJ1cmdlcilcIlxuICAgICAgKTtcbiAgICAgIHZhciAkaW1wb3J0YW50SXRlbU1lbnUgPSBiYXJNZW51LmZpbmQoXG4gICAgICAgIFwidWwuay1tZW51ID4gLm1lbnVfX2VsZW1lbnQubWVudS0taW1wb3J0YW50XCJcbiAgICAgICk7XG4gICAgICB2YXIgbmV3SGlkZGVucyA9IFtdO1xuICAgICAgdmFyIGN1cnJlbnRXaWR0aCA9IDA7XG4gICAgICB2YXIgdmlzaWJsZVdpZHRoID0gMDtcbiAgICAgIHZhciBmcmVlV2lkdGggPSAwO1xuICAgICAgdmFyIGJhcm1lbnVXaWR0aCA9IGJhck1lbnUud2lkdGgoKSAtIDI7XG4gICAgICB2YXIga2VuZG9NZW51ID0gdGhpcy5rZW5kb01lbnVXaWRnZXQ7XG4gICAgICB2YXIgJGhhbWJ1cmdlciA9IGJhck1lbnUuZmluZChcIi5tZW51X2VsZW1lbnQtLWhhbWJ1cmdlclwiKTtcbiAgICAgIHZhciBoaWRkZW5JdGVtc0NvdW50O1xuICAgICAgdmFyICRoaWRkZW5JdGVtcyA9ICQoJGhhbWJ1cmdlci5maW5kKFwidWxcIikuZ2V0KDApKS5maW5kKFwiPiBsaS5rLWl0ZW1cIik7XG4gICAgICB2YXIgaGlkZGVuTGVmdCA9ICRoaWRkZW5JdGVtcy5sZW5ndGg7XG5cbiAgICAgIGlmIChiYXJNZW51LmRhdGEoXCJtZW51LW9wZW5pbmdcIikpIHtcbiAgICAgICAgLy8gQ2Fubm90IHJlZHJhdyBtZW51IHdoaWxlIG1lbnUgaXMgb3BlbiBiZWNhdXNlIGtlbmRvIGZhaWx1cmUgb2NjdXJzIGluIHRvdWNoIGRldmljZVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLmluaGliaXRCYXJNZW51KCk7XG4gICAgICAkaW1wb3J0YW50SXRlbU1lbnUuZWFjaChmdW5jdGlvbiB3TWVudUNvbXB1dGVCYXJtZW51V2lkdGgoKSB7XG4gICAgICAgIGJhcm1lbnVXaWR0aCAtPSAkKHRoaXMpLm91dGVyV2lkdGgoKTtcbiAgICAgIH0pO1xuXG4gICAgICBiYXJtZW51V2lkdGggLT0gJGhhbWJ1cmdlci5vdXRlcldpZHRoKCk7XG5cbiAgICAgIGlmIChiYXJtZW51V2lkdGggPD0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFdoZW4gbm8gc2Nyb2xsYmFyIG5lZWQgdG8gYWRkIGh5cG90aGV0aWMgc2Nyb2xsYmFyIHdpZHRoIGJlY2F1c2Ugbm8gZXZlbnQgdG8gcmVmcmVzaCB3aGVuIHNjcm9sbGJhciBhcHBlYXJcbiAgICAgIGlmIChcbiAgICAgICAgd2luZG93LmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxIZWlnaHQgPD1cbiAgICAgICAgd2luZG93LmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHRcbiAgICAgICkge1xuICAgICAgICBiYXJtZW51V2lkdGggLT0gdGhpcy5nZXRTY3JvbGxCYXJXaWR0aCgpOyAvLyBTdXBwb3NlZCB0aGF0IHNjcm9sbGJhciB3aWR0aCBpcyBtYXggMjBweFxuICAgICAgfVxuXG4gICAgICAvLyBEZXRlY3QgZnJlZSBtZW51IGF2YWlsYWJsZSB3aWR0aCAgYW5kIHJlY29yZCBtZW51IGl0ZW1zIHdoaWNoIG5vdCBjb250YWlucyB0byBiYXIgbWVudVxuICAgICAgJGl0ZW1NZW51LmVhY2goZnVuY3Rpb24gd01lbnVDb21wdXRlV2lkdGgoKSB7XG4gICAgICAgIGN1cnJlbnRXaWR0aCArPSAkKHRoaXMpLm91dGVyV2lkdGgoKTtcbiAgICAgICAgaWYgKGN1cnJlbnRXaWR0aCA+IGJhcm1lbnVXaWR0aCkge1xuICAgICAgICAgICQodGhpcykuZGF0YShcIm9yaWdpbmFsLXdpZHRoXCIsICQodGhpcykub3V0ZXJXaWR0aCgpKTtcbiAgICAgICAgICBuZXdIaWRkZW5zLnB1c2godGhpcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmlzaWJsZVdpZHRoICs9ICQodGhpcykub3V0ZXJXaWR0aCgpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgZnJlZVdpZHRoID0gYmFybWVudVdpZHRoIC0gdmlzaWJsZVdpZHRoO1xuXG4gICAgICBpZiAoaGlkZGVuTGVmdCA9PT0gMCAmJiBuZXdIaWRkZW5zLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAvLyBTcGVjaWFsIGNhc2UgZm9yIHRoZSBsYXN0IGhpZGRlbiBtYXkgdmlzaWJsZSBpZiBoYW1idXJnZXIgaXMgaGlkZVxuICAgICAgICBpZiAoXG4gICAgICAgICAgJChuZXdIaWRkZW5zWzBdKS5vdXRlcldpZHRoKCkgPFxuICAgICAgICAgIGZyZWVXaWR0aCArICRoYW1idXJnZXIub3V0ZXJXaWR0aCgpXG4gICAgICAgICkge1xuICAgICAgICAgIG5ld0hpZGRlbnMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBNb3ZlIGVhY2ggbmV3IGhpZGRlbiBtZW51IHRvIGhhbWJ1cmdlclxuICAgICAgXy5lYWNoKG5ld0hpZGRlbnMucmV2ZXJzZSgpLCBmdW5jdGlvbiB3TWVudUl0ZW1Ub0hhbWJ1cmdlcihpdGVtKSB7XG4gICAgICAgIC8vIFByZXBlbmQgbmV3IG1lbnUgdG8gaGFtYnVyZ2VyXG4gICAgICAgIGlmICgkaGFtYnVyZ2VyLmZpbmQoXCJsaS5rLWl0ZW1cIikubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAga2VuZG9NZW51LmFwcGVuZCgkKGl0ZW0pLCAkaGFtYnVyZ2VyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBrZW5kb01lbnUuaW5zZXJ0QmVmb3JlKFxuICAgICAgICAgICAgJChpdGVtKSxcbiAgICAgICAgICAgICQoJGhhbWJ1cmdlci5maW5kKFwibGkuay1pdGVtXCIpLmdldCgwKSlcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIC8vIE5vIG5ldyBoaWRkZW4gbWVudSBzbyAuLi5cbiAgICAgIGlmIChuZXdIaWRkZW5zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAvLyBNYXkgYmUgc2hvdyBoaWRkZW4gbWVudVxuICAgICAgICAkaGlkZGVuSXRlbXMgPSAkKCRoYW1idXJnZXIuZmluZChcInVsXCIpLmdldCgwKSkuZmluZChcIj4gbGkuay1pdGVtXCIpO1xuICAgICAgICBoaWRkZW5MZWZ0ID0gJGhpZGRlbkl0ZW1zLmxlbmd0aDtcbiAgICAgICAgJGhpZGRlbkl0ZW1zLmVhY2goZnVuY3Rpb24gd01lbnVJdGVtRnJvbUhhbWJ1cmdlcigpIHtcbiAgICAgICAgICBpZiAoZnJlZVdpZHRoID4gMCkge1xuICAgICAgICAgICAgaWYgKGhpZGRlbkxlZnQgPT09IDEpIHtcbiAgICAgICAgICAgICAgZnJlZVdpZHRoICs9ICRoYW1idXJnZXIud2lkdGgoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN1cnJlbnRXaWR0aCA9ICQodGhpcykuZGF0YShcIm9yaWdpbmFsLXdpZHRoXCIpO1xuXG4gICAgICAgICAgICAvLyBJZiBhdmFpbGFibGUgd2lkdGggc2hvdyBtb3ZlIGF0IGluaXRpYWwgcGxhY2UgKHJpZ2h0IG9mIHRoZSBoYW1idXJnZXIpXG4gICAgICAgICAgICBpZiAoY3VycmVudFdpZHRoIDwgZnJlZVdpZHRoKSB7XG4gICAgICAgICAgICAgIGtlbmRvTWVudS5pbnNlcnRCZWZvcmUoJCh0aGlzKSwgJGhhbWJ1cmdlcik7XG4gICAgICAgICAgICAgIGZyZWVXaWR0aCAtPSAkKHRoaXMpLm91dGVyV2lkdGgoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGZyZWVXaWR0aCA9IC0xOyAvLyBzdG9wIHRlc3RcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyBOdW1iZXIgb2YgaXRlbXMgaW4gaGFtYnVyZ2VyXG4gICAgICBoaWRkZW5JdGVtc0NvdW50ID0gJCgkaGFtYnVyZ2VyLmZpbmQoXCJ1bFwiKS5nZXQoMCkpLmZpbmQoXCI+IGxpLmstaXRlbVwiKVxuICAgICAgICAubGVuZ3RoO1xuXG4gICAgICAvLyBObyB2aWV3IGhhbWJ1cmdlciBpZiBlbXB0eVxuICAgICAgaWYgKGhpZGRlbkl0ZW1zQ291bnQgPT09IDApIHtcbiAgICAgICAgJGhhbWJ1cmdlci5oaWRlKCk7XG4gICAgICB9XG5cbiAgICAgIC8vIFNlZSBzdWItbWVudSBjb3VudFxuICAgICAgLy8gJGhhbWJ1cmdlci5maW5kKFwiLm1lbnUtLWNvdW50XCIpLnRleHQoaGlkZGVuSXRlbXNDb3VudCk7XG5cbiAgICAgIC8vIFZpZXcgaGFtYnVyZ2VyIGlmIG5vdCBlbXB0eVxuICAgICAgaWYgKG5ld0hpZGRlbnMubGVuZ3RoID4gMCkge1xuICAgICAgICAkaGFtYnVyZ2VyLnNob3coKTtcbiAgICAgIH1cblxuICAgICAgLy8gUmVzdG9yZSBjc3Mgc2V0IGJ5IG90aGVyIHJlc2l6ZSBjYWxsYmFja1xuICAgICAgYmFyTWVudS5jc3MoXCJvdmVyZmxvd1wiLCBcIlwiKS5jc3MoXCJtYXgtaGVpZ2h0XCIsIFwiXCIpO1xuICAgIH0sXG5cbiAgICBfaW5zZXJ0TWVudUNvbnRlbnQ6IGZ1bmN0aW9uIHdNZW51SW5zZXJ0TWVudUNvbnRlbnQoXG4gICAgICBtZW51cyxcbiAgICAgICRjb250ZW50LFxuICAgICAgY3VycmVudFdpZGdldCxcbiAgICAgIHNjb3BlTWVudVxuICAgICkge1xuICAgICAgdmFyIHN1Yk1lbnU7XG4gICAgICB2YXIgaGFzQmVmb3JlQ29udGVudCA9IGZhbHNlO1xuICAgICAgY3VycmVudFdpZGdldCA9IGN1cnJlbnRXaWRnZXQgfHwgdGhpcztcblxuICAgICAgaWYgKHNjb3BlTWVudSkge1xuICAgICAgICAvLyBBZGQgZmFrZSBiZWZvcmUgY29udGVudCBpZiBhdCBsZWFzdCBvbmUgZWxlbWVudCBoYXMgYmVmb3JlIGNvbnRlbnQgdG8gYWxpZ24gYWxsIGl0ZW1zXG4gICAgICAgIF8uZWFjaChtZW51cywgZnVuY3Rpb24gd01lbnVJbnNlcnRNZW51Q29udGVudGZha2UoY3VycmVudE1lbnUpIHtcbiAgICAgICAgICBpZiAoY3VycmVudE1lbnUuaWNvblVybCB8fCBjdXJyZW50TWVudS5iZWZvcmVDb250ZW50KSB7XG4gICAgICAgICAgICBoYXNCZWZvcmVDb250ZW50ID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoaGFzQmVmb3JlQ29udGVudCkge1xuICAgICAgICAgIF8uZWFjaChtZW51cywgZnVuY3Rpb24gd01lbnVJbnNlcnRNZW51Q29udGVudEJlZm9yZUNvbnRlbnQoXG4gICAgICAgICAgICBjdXJyZW50TWVudVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgaWYgKCFjdXJyZW50TWVudS5pY29uVXJsICYmICFjdXJyZW50TWVudS5iZWZvcmVDb250ZW50KSB7XG4gICAgICAgICAgICAgIGlmIChjdXJyZW50TWVudS50eXBlICE9PSBcInNlcGFyYXRvck1lbnVcIikge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRNZW51LmJlZm9yZUNvbnRlbnQgPSBcIiBcIjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIF8uZWFjaChtZW51cywgZnVuY3Rpb24gd01lbnVJbnNlcnRNZW51Q29udGVudFNldChjdXJyZW50TWVudSkge1xuICAgICAgICB2YXIgJGN1cnJlbnRNZW51O1xuICAgICAgICBpZiAoY3VycmVudE1lbnUudmlzaWJpbGl0eSA9PT0gXCJoaWRkZW5cIikge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjdXJyZW50TWVudS5odG1sQXR0ciA9IFtdO1xuICAgICAgICBfLmVhY2goXG4gICAgICAgICAgY3VycmVudE1lbnUuaHRtbEF0dHJpYnV0ZXMsXG4gICAgICAgICAgZnVuY3Rpb24gd01lbnVJbnNlcnRNZW51Q29udGVudFNldEh0bWwoYXR0clZhbHVlLCBhdHRySWQpIHtcbiAgICAgICAgICAgIGlmIChhdHRySWQgPT09IFwiY2xhc3NcIikge1xuICAgICAgICAgICAgICBjdXJyZW50TWVudS5jc3NDbGFzcyA9IGF0dHJWYWx1ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGN1cnJlbnRNZW51Lmh0bWxBdHRyLnB1c2goe1xuICAgICAgICAgICAgICAgIGF0dHJJZDogYXR0cklkLFxuICAgICAgICAgICAgICAgIGF0dHJWYWx1ZTogYXR0clZhbHVlXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGN1cnJlbnRNZW51Lmh0bWxMYWJlbCkge1xuICAgICAgICAgICAgICAvLyByZVJlbmRlciBmb3IgdmFyaWFibGUgbGFiZWxzXG4gICAgICAgICAgICAgIGN1cnJlbnRNZW51Lmh0bWxMYWJlbCA9IE11c3RhY2hlLnJlbmRlcihcbiAgICAgICAgICAgICAgICBjdXJyZW50TWVudS5odG1sTGFiZWwgfHwgXCJcIixcbiAgICAgICAgICAgICAgICB7IGRvY3VtZW50OiBjdXJyZW50V2lkZ2V0Lm9wdGlvbnMuZG9jdW1lbnQgfVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGN1cnJlbnRNZW51LmxhYmVsKSB7XG4gICAgICAgICAgICAgIC8vIHJlUmVuZGVyIGZvciB2YXJpYWJsZSBsYWJlbHNcbiAgICAgICAgICAgICAgY3VycmVudE1lbnUubGFiZWwgPSBNdXN0YWNoZS5yZW5kZXIoY3VycmVudE1lbnUubGFiZWwgfHwgXCJcIiwge1xuICAgICAgICAgICAgICAgIGRvY3VtZW50OiBjdXJyZW50V2lkZ2V0Lm9wdGlvbnMuZG9jdW1lbnRcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY3VycmVudE1lbnUudG9vbHRpcExhYmVsKSB7XG4gICAgICAgICAgICAgIC8vIHJlUmVuZGVyIGZvciB2YXJpYWJsZSBsYWJlbHNcbiAgICAgICAgICAgICAgY3VycmVudE1lbnUudG9vbHRpcExhYmVsID0gTXVzdGFjaGUucmVuZGVyKFxuICAgICAgICAgICAgICAgIGN1cnJlbnRNZW51LnRvb2x0aXBMYWJlbCB8fCBcIlwiLFxuICAgICAgICAgICAgICAgIHsgZG9jdW1lbnQ6IGN1cnJlbnRXaWRnZXQub3B0aW9ucy5kb2N1bWVudCB9XG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICApO1xuXG4gICAgICAgIGN1cnJlbnRNZW51LmNvbnRlbnRMYWJlbCA9IGN1cnJlbnRNZW51Lmh0bWxMYWJlbCB8fCBjdXJyZW50TWVudS5sYWJlbDtcbiAgICAgICAgY3VycmVudE1lbnUuZGlzYWJsZWQgPSBjdXJyZW50TWVudS52aXNpYmlsaXR5ID09PSBcImRpc2FibGVkXCI7XG4gICAgICAgIGlmIChjdXJyZW50TWVudS50eXBlID09PSBcImxpc3RNZW51XCIpIHtcbiAgICAgICAgICBzdWJNZW51ID0gXCJsaXN0TWVudVwiO1xuXG4gICAgICAgICAgJGN1cnJlbnRNZW51ID0gJChcbiAgICAgICAgICAgIE11c3RhY2hlLnJlbmRlcihcbiAgICAgICAgICAgICAgY3VycmVudFdpZGdldC5fZ2V0VGVtcGxhdGUoc3ViTWVudSkgfHwgXCJcIixcbiAgICAgICAgICAgICAgY3VycmVudE1lbnVcbiAgICAgICAgICAgIClcbiAgICAgICAgICApO1xuICAgICAgICAgIGN1cnJlbnRXaWRnZXQuX2luc2VydE1lbnVDb250ZW50KFxuICAgICAgICAgICAgY3VycmVudE1lbnUuY29udGVudCB8fCBcIlwiLFxuICAgICAgICAgICAgJGN1cnJlbnRNZW51LmZpbmQoXCIubGlzdG1lbnVfX2NvbnRlbnRcIiksXG4gICAgICAgICAgICBjdXJyZW50V2lkZ2V0LFxuICAgICAgICAgICAgY3VycmVudE1lbnVcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChjdXJyZW50TWVudS50eXBlID09PSBcImR5bmFtaWNNZW51XCIpIHtcbiAgICAgICAgICAgIHN1Yk1lbnUgPSBcImR5bmFtaWNNZW51XCI7XG4gICAgICAgICAgICBpZiAoY3VycmVudE1lbnUudXJsKSB7XG4gICAgICAgICAgICAgIGN1cnJlbnRNZW51LmRvY3VtZW50ID0gY3VycmVudFdpZGdldC5vcHRpb25zLmRvY3VtZW50O1xuICAgICAgICAgICAgICBjdXJyZW50TWVudS51cmwgPSBNdXN0YWNoZS5yZW5kZXIoXG4gICAgICAgICAgICAgICAgY3VycmVudE1lbnUudXJsIHx8IFwiXCIsXG4gICAgICAgICAgICAgICAgY3VycmVudE1lbnVcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICRjdXJyZW50TWVudSA9ICQoXG4gICAgICAgICAgICAgIE11c3RhY2hlLnJlbmRlcihcbiAgICAgICAgICAgICAgICBjdXJyZW50V2lkZ2V0Ll9nZXRUZW1wbGF0ZShzdWJNZW51KSB8fCBcIlwiLFxuICAgICAgICAgICAgICAgIGN1cnJlbnRNZW51XG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGN1cnJlbnRNZW51LmRvY3VtZW50ID0gY3VycmVudFdpZGdldC5vcHRpb25zLmRvY3VtZW50O1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRNZW51LnVybCkge1xuICAgICAgICAgICAgICBjdXJyZW50TWVudS51cmwgPSBNdXN0YWNoZS5yZW5kZXIoXG4gICAgICAgICAgICAgICAgY3VycmVudE1lbnUudXJsIHx8IFwiXCIsXG4gICAgICAgICAgICAgICAgY3VycmVudE1lbnVcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICRjdXJyZW50TWVudSA9ICQoXG4gICAgICAgICAgICAgIE11c3RhY2hlLnJlbmRlcihcbiAgICAgICAgICAgICAgICBjdXJyZW50V2lkZ2V0Ll9nZXRUZW1wbGF0ZShjdXJyZW50TWVudS50eXBlKSB8fCBcIlwiLFxuICAgICAgICAgICAgICAgIGN1cnJlbnRNZW51XG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChjdXJyZW50TWVudS50b29sdGlwTGFiZWwpIHtcbiAgICAgICAgICBjdXJyZW50V2lkZ2V0Ll90b29sdGlwcy5wdXNoKFxuICAgICAgICAgICAgJGN1cnJlbnRNZW51LnRvb2x0aXAoe1xuICAgICAgICAgICAgICB0cmlnZ2VyOiBcImhvdmVyXCIsXG4gICAgICAgICAgICAgIGh0bWw6IGN1cnJlbnRNZW51LnRvb2x0aXBIdG1sLFxuICAgICAgICAgICAgICBwbGFjZW1lbnQ6IGN1cnJlbnRNZW51LnRvb2x0aXBQbGFjZW1lbnRcbiAgICAgICAgICAgICAgICA/IGN1cnJlbnRNZW51LnRvb2x0aXBQbGFjZW1lbnRcbiAgICAgICAgICAgICAgICA6IFwiYm90dG9tXCIsXG4gICAgICAgICAgICAgIGNvbnRhaW5lcjogXCIuZGNwRG9jdW1lbnRfX21lbnVcIlxuICAgICAgICAgICAgfSlcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjdXJyZW50TWVudS5pbXBvcnRhbnQpIHtcbiAgICAgICAgICAkY3VycmVudE1lbnUuYWRkQ2xhc3MoXCJtZW51LS1pbXBvcnRhbnRcIik7XG4gICAgICAgIH1cbiAgICAgICAgJGN1cnJlbnRNZW51LmRhdGEoXCJtZW51Q29uZmlndXJhdGlvblwiLCBjdXJyZW50TWVudSk7XG4gICAgICAgICRjb250ZW50LmFwcGVuZCgkY3VycmVudE1lbnUpO1xuICAgICAgfSk7XG4gICAgfSxcblxuICAgIF9nZXRUZW1wbGF0ZTogZnVuY3Rpb24gd01lbnVUZW1wbGF0ZShuYW1lKSB7XG4gICAgICBpZiAoXG4gICAgICAgIHRoaXMub3B0aW9ucy50ZW1wbGF0ZXMgJiZcbiAgICAgICAgdGhpcy5vcHRpb25zLnRlbXBsYXRlcy5tZW51ICYmXG4gICAgICAgIHRoaXMub3B0aW9ucy50ZW1wbGF0ZXMubWVudVtuYW1lXVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMudGVtcGxhdGVzLm1lbnVbbmFtZV07XG4gICAgICB9XG4gICAgICBpZiAoXG4gICAgICAgIHdpbmRvdy5kY3AudGVtcGxhdGVzICYmXG4gICAgICAgIHdpbmRvdy5kY3AudGVtcGxhdGVzLm1lbnUgJiZcbiAgICAgICAgd2luZG93LmRjcC50ZW1wbGF0ZXMubWVudVtuYW1lXVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiB3aW5kb3cuZGNwLnRlbXBsYXRlcy5tZW51W25hbWVdO1xuICAgICAgfVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWVudSB1bmtub3duIHRlbXBsYXRlIFwiICsgbmFtZSk7XG4gICAgfSxcblxuICAgIF9kZXN0cm95OiBmdW5jdGlvbiB3TWVudURlc3Ryb3koKSB7XG4gICAgICB2YXIga2VuZG9XaWRnZXQgPSB0aGlzLmVsZW1lbnQuZmluZChcIi5tZW51X19jb250ZW50XCIpLmRhdGEoXCJrZW5kb01lbnVcIik7XG4gICAgICBpZiAoa2VuZG9XaWRnZXQpIHtcbiAgICAgICAga2VuZG9XaWRnZXQuZGVzdHJveSgpO1xuICAgICAgfVxuICAgICAgJCh3aW5kb3cpLm9mZihcIi5kY3BNZW51XCIpO1xuICAgICAgXy5lYWNoKHRoaXMucG9wdXBXaW5kb3dzLCBmdW5jdGlvbiB3TWVudURlc3Ryb3lQb3B1cChwV2luZG93KSB7XG4gICAgICAgIHBXaW5kb3cuZGVzdHJveSgpO1xuICAgICAgfSk7XG5cbiAgICAgIF8uZWFjaCh0aGlzLl90b29sdGlwcywgZnVuY3Rpb24gd01lbnVEZXN0cm95VG9vbHRpcChjdXJyZW50VG9vbHRpcCkge1xuICAgICAgICBjdXJyZW50VG9vbHRpcC50b29sdGlwKFwiZGlzcG9zZVwiKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5lbGVtZW50LmVtcHR5KCk7XG4gICAgICB0aGlzLl9zdXBlcigpO1xuICAgIH1cbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///4dfa9ecb0933d2ac74e4\n");

/***/ }),

/***/ "4f34b8885c56ba40799e":
/*!***********************************************************************!*\
  !*** ./src/vendor/Anakeen/DOCUMENT/IHM/views/workflow/vTransition.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n  __webpack_require__(/*! underscore */ \"8e08e542008e4aef1f58\"),\n  __webpack_require__(/*! jquery */ \"127c8cf59f228bb01a21\"),\n  __webpack_require__(/*! backbone */ \"1858b45bf48591489d06\"),\n  __webpack_require__(/*! mustache */ \"bcd31d01884fc294fd69\"),\n  __webpack_require__(/*! dcpDocument/views/document/vDocument */ \"064e2f13daa5551c556c\"),\n  __webpack_require__(/*! dcpDocument/widgets/window/wDialog */ \"3120d707f7fb455e9bc0\")\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function vTransition(_, $, Backbone, Mustache, ViewDocument) {\n  \"use strict\";\n\n  return ViewDocument.extend({\n    messages: [],\n\n    templates: {\n      htmlContent:\n        '<div class=\"dcpTransition--content-activity\" >' +\n        ' <span class=\"dcpTransition--activity\" style=\"border-color:{{transition.beginState.color}}\">{{transition.beginState.displayValue}}</span>' +\n        '<span class=\"dcpTransition--transition {{^transition.id}}dcpTransition--transition--invalid{{/transition.id}}\" >{{transition.label}}</span>' +\n        '<span class=\"dcpTransition--arrow\"><span class=\"fa fa-caret-right fa-2x {{^transition.id}}dcpTransition--transition--invalid{{/transition.id}}\"></span></span>' +\n        '<span class=\"dcpTransition--activity\" style=\"border-color:{{transition.endState.color}}\">{{transition.endState.displayValue}}</span> ' +\n        \"</div>\",\n\n      htmlStateContent:\n        '<div class=\"dcpTransition--content-activity\">' +\n        '<span class=\"dcpTransition--success\" >{{labels.success}}</span>' +\n        \"</div>\",\n\n      htmlStateButtons:\n        '<button title=\"{{labels.close}}\" class=\"dcpTransition-button-close btn btn-outline-secondary btn-sm\">' +\n        \"{{labels.close}} </button>\",\n\n      htmlLoading:\n        '<div class=\"dcpTransition--loading\"><span class=\"fa fa-2x fa-spinner fa-spin\"></span> {{labels.inprogress}}</div>',\n\n      htmlButtons:\n        '{{#hasAttributes}}<button class=\"dcpTransition-button-cancel btn btn-outline-secondary btn-sm\">{{labels.cancel}}</button>' +\n        '<button title=\"{{transition.label}}\" ' +\n        'class=\"dcpTransition-button-ok btn {{#transition.id}}btn-primary{{/transition.id}}  {{^transition.id}}btn-danger{{/transition.id}} btn-sm\">' +\n        \"{{labels.confirm}}</button>{{/hasAttributes}}\"\n    },\n\n    events: {\n      \"click .dcpTransition-button-ok \": \"clickOnOk\",\n      \"click .dcpTransition-button-cancel\": \"clickOnCancel\",\n      \"click .dcpTransition-button-close\": \"clickOnClose\"\n    },\n\n    initialize: function vTransition_initialize(options) {\n      //Call parent\n      ViewDocument.prototype.initialize.apply(this, arguments);\n      this.listenTo(this.model, \"showError\", this.displayError);\n      //this.listenTo(this.model, 'invalid', this.displayError);\n      this.listenTo(this.model, \"request\", this.transitionDisplayLoading);\n      this.listenTo(this.model, \"hide\", function vTransition_hide() {\n        this.$el.hide();\n      });\n      this.listenTo(this.model, \"show\", function vTransition_show() {\n        this.$el.show();\n      });\n      this.listenTo(this.model, \"close\", function vTransition_close() {\n        if (this.transitionWindow) {\n          this.transitionWindow.close();\n        }\n      });\n      this.options = options;\n    },\n\n    remove: function vTransition_remove() {\n      if (this.transitionWindow) {\n        this.transitionWindow.close();\n      }\n      //Call parent\n      ViewDocument.prototype.remove.apply(this, arguments);\n      //Remove custom CSS\n      var customCss = _.pluck(this.model.get(\"customCSS\"), \"key\");\n      if (customCss.length > 0) {\n        _.each(customCss, function vTransition_removeLink(cssKey) {\n          $('link[data-view=true][data-id=\"' + cssKey + '\"]').remove();\n        });\n      }\n    },\n\n    displayError: function vTransition_displayError(error) {\n      var workflow = this.model.get(\"workflow\"),\n        attributes = this.model.get(\"attributes\"),\n        $okButton = this.$el.find(\".dcpTransition-button-ok\"),\n        $cancelButton = this.$el.find(\".dcpTransition-button-cancel\"),\n        errorMessage;\n      this.reactiveWidget();\n      if (_.isObject(error)) {\n        if (error.errorCode === \"offline\") {\n          errorMessage =\n            '<div class=\"dcpTransition--error\">{{{htmlMessage}}}</div>';\n        } else {\n          errorMessage =\n            '<div class=\"dcpTransition--error\">{{title}} {{{htmlMessage}}}</div>';\n        }\n        $(Mustache.render(errorMessage || \"\", error)).insertBefore(\n          this.$el.find(\".dcpTransition--buttons\")\n        );\n      }\n      if (attributes.length === 0) {\n        $okButton.hide();\n        $cancelButton.text(workflow.labels.close);\n      } else {\n        //noinspection JSUnresolvedVariable\n        $okButton.text(workflow.labels.retry);\n      }\n    },\n\n    cleanAndRender: function vTransition_cleanAndRender() {\n      var workflow = this.model.get(\"workflow\"),\n        transition = workflow.transition,\n        state = workflow.state;\n\n      this.render();\n      this.displayMessages(this.model.get(\"messages\"));\n      this.clearError();\n      this.reactiveWidget();\n      if (!transition && state) {\n        this.model.trigger(\"success\", this.messages);\n      }\n    },\n    /**\n     * Inject associated CSS in the DOM\n     *\n     * Inject new CSS, no remove old CSS\n     */\n    renderCss: function vTransitionRenderCss() {\n      ViewDocument.prototype.renderCss.apply(this, [true]);\n    },\n    updateTitle: function vTransitionupdateTitle() {\n      // No update title\n    },\n    updateIcon: function vTransitionupdateIcon() {\n      // No update icon\n    },\n    clearError: function vTransition_clearError() {\n      this.$el.find(\".dcpTransition--error\").remove();\n    },\n\n    reactiveWidget: function vTransition_reactiveWidget() {\n      var workflow = this.model.get(\"workflow\"),\n        attributes = this.model.get(\"attributes\"),\n        $loading = this.$el.find(\".dcpTransition--loading\"),\n        $okButton = this.$el.find(\".dcpTransition-button-ok\"),\n        $cancelButton = this.$el.find(\".dcpTransition-button-cancel\");\n\n      if (attributes.length > 0) {\n        if (workflow && workflow.labels.confirm) {\n          $okButton.text(workflow.labels.confirm);\n        }\n        $okButton.prop(\"disabled\", false);\n      }\n      $cancelButton.prop(\"disabled\", false);\n\n      this.$el.find(\".dcpDocument--disabled\").remove();\n      $loading.hide();\n    },\n\n    /**\n     * Display the loading widget\n     */\n    transitionDisplayLoading: function vTransition_transitionDisplayLoading() {\n      var $loading = this.$el.find(\".dcpTransition--loading\"),\n        $okButton = this.$el.find(\".dcpTransition-button-ok\"),\n        $cancelButton = this.$el.find(\".dcpTransition-button-cancel\");\n\n      $loading.show();\n      this.clearError();\n      $okButton.prop(\"disabled\", true);\n      $cancelButton.prop(\"disabled\", true);\n    },\n\n    displayMessages: function vTransition_displayMessages(messages) {\n      var currentView = this,\n        template =\n          '<div class=\"dcpTransition--message dcpTransition--message--{{type}}\">{{contentText}} {{{contentHtml}}}</div>',\n        $message = this.$el.find(\".dcpTransition--messages\");\n\n      this.messages = [];\n\n      _.each(messages, function vTransition_analyzeCurrentMessage(message) {\n        $message.append($(Mustache.render(template || \"\", message)));\n        //noinspection JSUnresolvedVariable\n        currentView.messages.push({\n          title: message.contentText,\n          type: message.type,\n          htmlMessage: message.contentHtml\n        });\n      });\n    },\n\n    /**\n     * Render the document view\n     * @returns {*}\n     */\n    render: function vTransition_render() {\n      var currentView = this,\n        workflow = this.model.get(\"workflow\"),\n        attributes = this.model.get(\"attributes\"),\n        transition = workflow.transition,\n        state = workflow.state;\n\n      //Call parent\n      ViewDocument.prototype.render.apply(this, arguments);\n\n      workflow.hasAttributes = attributes.length > 0;\n      if (transition) {\n        // Transition ask\n        this.$el\n          .find(\".dcpTransition--header\")\n          .append(Mustache.render(this.templates.htmlContent || \"\", workflow));\n        this.$el\n          .find(\".dcpTransition--messages\")\n          .append(Mustache.render(this.templates.htmlLoading || \"\", workflow));\n        this.$el\n          .find(\".dcpTransition--buttons\")\n          .append(Mustache.render(this.templates.htmlButtons || \"\", workflow));\n        this.$el.find(\".dcpTransition-button-ok\").tooltip();\n\n        if (attributes.length === 0) {\n          // Direct send transition without user control\n          _.defer(function vTransition_saveForMe() {\n            var event = { prevent: false },\n              saveXhr;\n            currentView.model.trigger(\"beforeChangeState\", event);\n            if (event.prevent === false) {\n              saveXhr = currentView.model.save();\n              if (saveXhr) {\n                saveXhr\n                  .then(function vTransition_direct_afterSave() {\n                    currentView.model.trigger(\n                      \"success\",\n                      currentView.getMessages()\n                    );\n                  })\n                  .fail(function vTransition_direct_error(\n                    response,\n                    statusTxt,\n                    errorTxt\n                  ) {\n                    if (response.responseJSON) {\n                      let userMessage = response.responseJSON.userMessage;\n\n                      response.responseJSON.messages =\n                        response.responseJSON.messages || [];\n                      response.responseJSON.messages.push({\n                        contentText: userMessage\n                      });\n                      _.each(\n                        response.responseJSON.messages,\n                        function vTransition_clickOnOk_displayError(aMessage) {\n                          currentView.displayError({\n                            title: aMessage.contentText\n                          });\n                        }\n                      );\n                    } else {\n                      if (errorTxt && !errorTxt.title && errorTxt.message) {\n                        errorTxt.title = errorTxt.message;\n                        currentView.displayError(errorTxt);\n                      } else if (_.isString(errorTxt)) {\n                        currentView.displayError({ title: errorTxt });\n                      }\n                    }\n                  });\n              }\n            }\n          });\n        }\n        this.$el.attr(\"data-state\", state.id);\n        if (transition.id) {\n          this.$el.attr(\"data-transition\", transition.id);\n        }\n\n        // No use border color if same as background\n        _.defer(function vTransition_renderWhiteOnWhite() {\n          currentView.$el\n            .find(\".dcpTransition--activity\")\n            .each(function vTransition_renderBorderColor() {\n              if (\n                currentView.$el.css(\"background-color\") ===\n                $(this).css(\"border-color\")\n              ) {\n                $(this).css(\"border-color\", \"\");\n              }\n            });\n        });\n      } else if (state) {\n        // Transition success\n        this.$el\n          .find(\".dcpTransition--header\")\n          .append(\n            Mustache.render(this.templates.htmlStateContent || \"\", workflow)\n          );\n        this.$el\n          .find(\".dcpTransition--buttons\")\n          .append(\n            Mustache.render(this.templates.htmlStateButtons || \"\", workflow)\n          );\n        this.$el.find(\".dcpTransition-button-close\").tooltip();\n      }\n\n      if (!this.transitionWindow) {\n        this.transitionWindow = this.$el\n          .dcpDialog({\n            window: {\n              // maxWidth: \"600px\",\n              height: \"auto\",\n              close: function registerCloseEvent(e) {\n                var event = { prevent: false };\n                currentView.model.trigger(\"beforeChangeStateClose\", event);\n                if (event.prevent !== false) {\n                  e.preventDefault();\n                }\n              }\n            }\n          })\n          .data(\"dcpDialog\");\n        this.$el.kendoWindow(\"title\", workflow.transition.label);\n        this.transitionWindow.open();\n      }\n      this.trigger(\"renderTransitionWindowDone\");\n    },\n\n    clickOnOk: function vTransition_clickOnOk() {\n      var event = { prevent: false },\n        currentView = this,\n        saveXhr;\n      this.model.trigger(\"beforeChangeState\", event);\n      this.$el.find(\".dcpTransition-button-ok\").tooltip(\"hide\");\n\n      if (event.prevent === false) {\n        saveXhr = this.model.save();\n        if (saveXhr) {\n          saveXhr\n            .then(function vTransition_clickOnOk_afterSave() {\n              currentView.model.trigger(\"success\", currentView.getMessages());\n            })\n            .fail(function vTransition_clickOnOk_error(\n              response,\n              statusTxt,\n              errorTxt\n            ) {\n              if (response.responseJSON) {\n                let userMessage = response.responseJSON.userMessage;\n\n                response.responseJSON.messages =\n                  response.responseJSON.messages || [];\n                response.responseJSON.messages.push({\n                  contentText: userMessage\n                });\n                _.each(\n                  response.responseJSON.messages,\n                  function vTransition_clickOnOk_displayError(aMessage) {\n                    currentView.displayError({\n                      title: aMessage.contentText\n                    });\n                  }\n                );\n              } else {\n                if (errorTxt && !errorTxt.title && errorTxt.message) {\n                  errorTxt.title = errorTxt.message;\n                  currentView.displayError(errorTxt);\n                } else if (_.isString(errorTxt)) {\n                  currentView.displayError({ title: errorTxt });\n                }\n              }\n            });\n        }\n      }\n    },\n\n    clickOnCancel: function vTransition_clickOnCancel() {\n      this.transitionWindow.close();\n    },\n\n    clickOnClose: function vTransition_clickOnClose() {\n      this.transitionWindow.close();\n    },\n\n    getMessages: function vTransition_getMessages() {\n      var messages = [];\n      _.each(\n        this.model.get(\"messages\"),\n        function vTransition_getMessagesAMessage(aMessage) {\n          messages.push({\n            type: aMessage.type,\n            title: aMessage.contentText,\n            htmlMessage: aMessage.contentHtml\n          });\n        }\n      );\n      return messages;\n    }\n  });\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4f34b8885c56ba40799e\n");

/***/ }),

/***/ "52a46e9f0cafec0a3802":
/*!***************************************************************************!*\
  !*** ./src/vendor/Anakeen/DOCUMENT/IHM/views/attributes/array/vColumn.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*global define*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n  __webpack_require__(/*! jquery */ \"127c8cf59f228bb01a21\"),\n  __webpack_require__(/*! underscore */ \"8e08e542008e4aef1f58\"),\n  __webpack_require__(/*! backbone */ \"1858b45bf48591489d06\"),\n  __webpack_require__(/*! mustache */ \"bcd31d01884fc294fd69\"),\n  __webpack_require__(/*! dcpDocument/views/attributes/vAttribute */ \"37002e519de305be82e6\"),\n  __webpack_require__(/*! dcpDocument/views/document/attributeTemplate */ \"7873a0bfc996b28836c2\")\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function vColumn(\n  $,\n  _,\n  Backbone,\n  Mustache,\n  ViewAttribute,\n  attributeTemplate\n) {\n  \"use strict\";\n\n  return ViewAttribute.extend({\n    /**\n     * Use special event to trigger only attributes of model\n     */\n    attributeEvents: function vColumnEvents() {\n      var events = {};\n      this._mergeEvent(events, \"delete\", \"deleteValue\");\n      this._mergeEvent(\n        events,\n        \"changeattrmenuvisibility\",\n        \"changeMenuVisibility\"\n      );\n      this._mergeEvent(events, \"changeattrsvalue\", \"changeAttributesValue\");\n      this._mergeEvent(events, \"fetchdocument\", \"loadDocument\");\n      this._mergeEvent(events, \"externallinkselected\", \"externalLinkSelected\");\n      this._mergeEvent(events, \"downloadfile\", \"downloadFileSelect\");\n      this._mergeEvent(events, \"uploadfile\", \"uploadFileSelect\");\n      this._mergeEvent(events, \"uploadfiledone\", \"uploadFileDone\");\n      this._mergeEvent(events, \"anchorclick\", \"anchorClick\");\n      this.listenTo(this.model, \"change:label\", this.changeLabel);\n      return events;\n    },\n\n    _mergeEvent: function vColumn_addEvent(events, name, method) {\n      events[\n        \"dcpattribute\" +\n          name +\n          ' .dcpArray__content__cell[data-attrid=\"' +\n          this.model.id +\n          '\"]'\n      ] = method;\n    },\n\n    render: function vColumnRender() {\n      var scope = this;\n      if (this.displayLabel === false) {\n        // Need to defer because thead is not construct yet\n        _.defer(function vColumnHideHead() {\n          var $head = scope.$el.find(\n            '.dcpArray__head__cell[data-attrid=\"' + scope.model.id + '\"]'\n          );\n          $head.hide();\n        });\n      } else {\n        // Need to defer because thead is not construct yet\n        _.defer(function vColumnDescriptionHead() {\n          var $head = scope.$el.find(\n            '.dcpArray__head__cell[data-attrid=\"' + scope.model.id + '\"]'\n          );\n          attributeTemplate.insertDescription(scope, $head);\n        });\n      }\n      this.model.trigger(\"renderColumnDone\", {\n        model: this.model,\n        $el: this.$el\n      });\n      return this;\n    },\n\n    /**\n     * Change the label of the column\n     */\n    changeLabel: function vColumnChangeLabel() {\n      this.$el\n        .find('.dcpArray__head__cell[data-attrid=\"' + this.model.id + '\"]')\n        .text(this.model.get(\"label\"));\n    },\n\n    /**\n     * called by vArray::addLine()\n     * @param index row index\n     * @param customView HTML fragment to use for a custom view\n     */\n    addNewWidget: function vColumnAddNewWidget(index, customView) {\n      return new Promise(\n        _.bind(function vColumnAddNewWidget_promise(resolve, reject) {\n          try {\n            if (this.options) {\n              var cells = this.options.parentElement.find(\n                  '.dcpArray__content__cell[data-attrid=\"' +\n                    this.model.id +\n                    '\"]'\n                ),\n                $el,\n                data = this.getData(index),\n                event = { prevent: false };\n\n              if (cells[index]) {\n                try {\n                  $el = $(cells[index]);\n                  this.model.trigger(\"beforeRender\", event, {\n                    model: this.model,\n                    $el: $el,\n                    index: index\n                  });\n                  if (event.prevent) {\n                    resolve();\n                    return this;\n                  }\n                  if (customView) {\n                    $el.append(customView);\n                    this.model.trigger(\"renderDone\", {\n                      model: this.model,\n                      $el: $el,\n                      index: index\n                    });\n                    this.moveValueIndex({});\n                    resolve($el);\n                  } else {\n                    $el.one(\n                      \"dcpattributewidgetready .dcpAttribute__content\",\n                      _.bind(function vcolumnRender_widgetready() {\n                        this.model.trigger(\"renderDone\", {\n                          model: this.model,\n                          $el: $el,\n                          index: index\n                        });\n                        this.moveValueIndex({});\n                        resolve();\n                      }, this)\n                    );\n                    this.widgetInit($el, data);\n                    attributeTemplate.insertDescription(this, $el.parent());\n                    resolve();\n                  }\n                } catch (error) {\n                  if (window.dcp.logger) {\n                    window.dcp.logger(error);\n                  } else {\n                    console.error(error);\n                  }\n                  resolve();\n                }\n              } else {\n                resolve();\n              }\n            } else {\n              resolve();\n            }\n          } catch (e) {\n            reject(e);\n          }\n        }, this)\n      );\n    },\n\n    /**\n     *\n     * @param event\n     * @param options\n     */\n    loadDocument: function vColumnLoadDocument(event, options) {\n      var tableLine = options.tableLine,\n        index = options.index,\n        initid,\n        valueLine = this.model.get(\"attributeValue\")[tableLine],\n        documentModel = this.model.getDocumentModel();\n      if (_.isUndefined(index)) {\n        initid = valueLine.value;\n      } else {\n        initid = valueLine[index].value;\n      }\n\n      this.model.trigger(\"internalLinkSelected\", event, {\n        eventId: \"document.load\",\n        target: event.target,\n        attrid: this.model.id,\n        options: [initid, \"!defaultConsultation\"],\n        index: options.index,\n        row: tableLine\n      });\n\n      if (event.prevent) {\n        return this;\n      }\n\n      documentModel.fetchDocument({\n        initid: initid,\n        revision: -1,\n        viewId: \"!defaultConsultation\"\n      });\n    },\n\n    /**\n     * Hide all items of the column\n     */\n    hide: function vColumnHide() {\n      this.getDOMElements().each(function vColumnHideEach() {\n        var $cell = $(this);\n        var tagName = $cell.prop(\"tagName\").toLowerCase();\n\n        if (tagName !== \"td\" && tagName !== \"th\") {\n          $cell = $cell.closest(\"td.dcpArray__cell, th.dcpArray__head\");\n        }\n        $cell.hide();\n      });\n\n      this.$el.find('thead th[data-attrid=\"' + this.model.id + '\"]').hide();\n    },\n    /**\n     * Show all hidden items of the column\n     */\n    show: function vColumnShow() {\n      this.getDOMElements().each(function vColumnShowEach() {\n        var $cell = $(this);\n        var tagName = $cell.prop(\"tagName\").toLowerCase();\n\n        if (tagName !== \"td\" && tagName !== \"th\") {\n          $cell = $cell.closest(\"td.dcpArray__cell, th.dcpArray__head\");\n        }\n        $cell.show();\n      });\n      this.$el.find('thead th[data-attrid=\"' + this.model.id + '\"]').show();\n    }\n  });\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///52a46e9f0cafec0a3802\n");

/***/ }),

/***/ "5363faafcae9085e6863":
/*!********************************************************************!*\
  !*** ./src/vendor/Anakeen/DOCUMENT/IHM/widgets/window/wLoading.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ \"127c8cf59f228bb01a21\"), __webpack_require__(/*! dcpDocument/widgets/widget */ \"a903b12ace80b5b4ecce\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function($) {\n  \"use strict\";\n\n  $.widget(\"dcp.dcpLoading\", {\n    pc: 0,\n    rest: 0,\n    restItem: 0,\n    currentWidget: null,\n    doneItems: 0,\n    original: null,\n\n    _create: function dcpLoading_create() {\n      this.stack = 0;\n      this.initBar = this.element.find(\".progress\");\n      this.$title = this.element.find(\".dcpLoading--title\");\n      this.$header = this.element.find(\".dcpLoading--header\");\n    },\n\n    reset: function dcpLoadingReset() {\n      this.initBar.show();\n    },\n\n    setTitle: function dcpLoadingsetTitle(val) {\n      this.element.find(\".dcpLoading--title\").html(val);\n    },\n\n    isDisplayed: function dcpLoadingIsDisplayed() {\n      return this.stack > 0;\n    },\n\n    hide: function dcpLoadinghide(force) {\n      this.stack -= 1;\n      if (!force && this.stack > 0) {\n        return this;\n      }\n      this.stack = 0;\n      this.element.hide();\n      this.element.removeClass(\"dcpLoading--hide\");\n      this.setPercent(0);\n    },\n\n    show: function dcpLoadingshow(text, pc) {\n      this.stack += 1;\n      if (text) {\n        this.setLabel(text);\n      }\n      if (pc) {\n        this.setPercent(pc);\n      }\n      this.element.show();\n      this.$header.show().removeClass(\"dcpLoading--hide\");\n    },\n\n    setLabel: function dcpLoadingsetLabel(text) {\n      if (text) {\n        this.$title.text(text);\n      } else {\n        this.$header.addClass(\"dcpLoading--hide\");\n      }\n    },\n\n    setPercent: function dcpLoadingsetPercent(pc) {\n      var $initbar = this.initBar.find(\".progress-bar\");\n      var rpc = Math.round(pc);\n      this.pc = pc;\n      if (window && window.requestAnimationFrame) {\n        window.requestAnimationFrame(function() {\n          $initbar.css(\"width\", rpc + \"%\");\n        });\n      }\n    },\n\n    setNbItem: function dcpLoadingSetNbItem(restItem) {\n      this.rest = 100 - this.pc;\n      this.restItem = restItem;\n    },\n\n    addItem: function dcpLoadingAddItem(number) {\n      number = number || 1;\n      number = parseInt(number, 10);\n      this.doneItems += number;\n      var pv = (this.rest / this.restItem) * number;\n      this.setPercent(this.pc + pv);\n    },\n\n    _destroy: function dcpLoading_destroy() {\n      this._trigger(\"destroy\");\n      this._super();\n    }\n  });\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTM2M2ZhYWZjYWU5MDg1ZTY4NjMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdmVuZG9yL0FuYWtlZW4vRE9DVU1FTlQvSUhNL3dpZGdldHMvd2luZG93L3dMb2FkaW5nLmpzPzQ3NzIiXSwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKFtcImpxdWVyeVwiLCBcImRjcERvY3VtZW50L3dpZGdldHMvd2lkZ2V0XCJdLCBmdW5jdGlvbigkKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gICQud2lkZ2V0KFwiZGNwLmRjcExvYWRpbmdcIiwge1xuICAgIHBjOiAwLFxuICAgIHJlc3Q6IDAsXG4gICAgcmVzdEl0ZW06IDAsXG4gICAgY3VycmVudFdpZGdldDogbnVsbCxcbiAgICBkb25lSXRlbXM6IDAsXG4gICAgb3JpZ2luYWw6IG51bGwsXG5cbiAgICBfY3JlYXRlOiBmdW5jdGlvbiBkY3BMb2FkaW5nX2NyZWF0ZSgpIHtcbiAgICAgIHRoaXMuc3RhY2sgPSAwO1xuICAgICAgdGhpcy5pbml0QmFyID0gdGhpcy5lbGVtZW50LmZpbmQoXCIucHJvZ3Jlc3NcIik7XG4gICAgICB0aGlzLiR0aXRsZSA9IHRoaXMuZWxlbWVudC5maW5kKFwiLmRjcExvYWRpbmctLXRpdGxlXCIpO1xuICAgICAgdGhpcy4kaGVhZGVyID0gdGhpcy5lbGVtZW50LmZpbmQoXCIuZGNwTG9hZGluZy0taGVhZGVyXCIpO1xuICAgIH0sXG5cbiAgICByZXNldDogZnVuY3Rpb24gZGNwTG9hZGluZ1Jlc2V0KCkge1xuICAgICAgdGhpcy5pbml0QmFyLnNob3coKTtcbiAgICB9LFxuXG4gICAgc2V0VGl0bGU6IGZ1bmN0aW9uIGRjcExvYWRpbmdzZXRUaXRsZSh2YWwpIHtcbiAgICAgIHRoaXMuZWxlbWVudC5maW5kKFwiLmRjcExvYWRpbmctLXRpdGxlXCIpLmh0bWwodmFsKTtcbiAgICB9LFxuXG4gICAgaXNEaXNwbGF5ZWQ6IGZ1bmN0aW9uIGRjcExvYWRpbmdJc0Rpc3BsYXllZCgpIHtcbiAgICAgIHJldHVybiB0aGlzLnN0YWNrID4gMDtcbiAgICB9LFxuXG4gICAgaGlkZTogZnVuY3Rpb24gZGNwTG9hZGluZ2hpZGUoZm9yY2UpIHtcbiAgICAgIHRoaXMuc3RhY2sgLT0gMTtcbiAgICAgIGlmICghZm9yY2UgJiYgdGhpcy5zdGFjayA+IDApIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICB0aGlzLnN0YWNrID0gMDtcbiAgICAgIHRoaXMuZWxlbWVudC5oaWRlKCk7XG4gICAgICB0aGlzLmVsZW1lbnQucmVtb3ZlQ2xhc3MoXCJkY3BMb2FkaW5nLS1oaWRlXCIpO1xuICAgICAgdGhpcy5zZXRQZXJjZW50KDApO1xuICAgIH0sXG5cbiAgICBzaG93OiBmdW5jdGlvbiBkY3BMb2FkaW5nc2hvdyh0ZXh0LCBwYykge1xuICAgICAgdGhpcy5zdGFjayArPSAxO1xuICAgICAgaWYgKHRleHQpIHtcbiAgICAgICAgdGhpcy5zZXRMYWJlbCh0ZXh0KTtcbiAgICAgIH1cbiAgICAgIGlmIChwYykge1xuICAgICAgICB0aGlzLnNldFBlcmNlbnQocGMpO1xuICAgICAgfVxuICAgICAgdGhpcy5lbGVtZW50LnNob3coKTtcbiAgICAgIHRoaXMuJGhlYWRlci5zaG93KCkucmVtb3ZlQ2xhc3MoXCJkY3BMb2FkaW5nLS1oaWRlXCIpO1xuICAgIH0sXG5cbiAgICBzZXRMYWJlbDogZnVuY3Rpb24gZGNwTG9hZGluZ3NldExhYmVsKHRleHQpIHtcbiAgICAgIGlmICh0ZXh0KSB7XG4gICAgICAgIHRoaXMuJHRpdGxlLnRleHQodGV4dCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLiRoZWFkZXIuYWRkQ2xhc3MoXCJkY3BMb2FkaW5nLS1oaWRlXCIpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBzZXRQZXJjZW50OiBmdW5jdGlvbiBkY3BMb2FkaW5nc2V0UGVyY2VudChwYykge1xuICAgICAgdmFyICRpbml0YmFyID0gdGhpcy5pbml0QmFyLmZpbmQoXCIucHJvZ3Jlc3MtYmFyXCIpO1xuICAgICAgdmFyIHJwYyA9IE1hdGgucm91bmQocGMpO1xuICAgICAgdGhpcy5wYyA9IHBjO1xuICAgICAgaWYgKHdpbmRvdyAmJiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKSB7XG4gICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgJGluaXRiYXIuY3NzKFwid2lkdGhcIiwgcnBjICsgXCIlXCIpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgc2V0TmJJdGVtOiBmdW5jdGlvbiBkY3BMb2FkaW5nU2V0TmJJdGVtKHJlc3RJdGVtKSB7XG4gICAgICB0aGlzLnJlc3QgPSAxMDAgLSB0aGlzLnBjO1xuICAgICAgdGhpcy5yZXN0SXRlbSA9IHJlc3RJdGVtO1xuICAgIH0sXG5cbiAgICBhZGRJdGVtOiBmdW5jdGlvbiBkY3BMb2FkaW5nQWRkSXRlbShudW1iZXIpIHtcbiAgICAgIG51bWJlciA9IG51bWJlciB8fCAxO1xuICAgICAgbnVtYmVyID0gcGFyc2VJbnQobnVtYmVyLCAxMCk7XG4gICAgICB0aGlzLmRvbmVJdGVtcyArPSBudW1iZXI7XG4gICAgICB2YXIgcHYgPSAodGhpcy5yZXN0IC8gdGhpcy5yZXN0SXRlbSkgKiBudW1iZXI7XG4gICAgICB0aGlzLnNldFBlcmNlbnQodGhpcy5wYyArIHB2KTtcbiAgICB9LFxuXG4gICAgX2Rlc3Ryb3k6IGZ1bmN0aW9uIGRjcExvYWRpbmdfZGVzdHJveSgpIHtcbiAgICAgIHRoaXMuX3RyaWdnZXIoXCJkZXN0cm95XCIpO1xuICAgICAgdGhpcy5fc3VwZXIoKTtcbiAgICB9XG4gIH0pO1xufSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///5363faafcae9085e6863\n");

/***/ }),

/***/ "59b870d5aad30b0e7e20":
/*!************************!*\
  !*** external "kendo" ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = kendo;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTliODcwZDVhYWQzMGIwZTdlMjAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJrZW5kb1wiP2FlYWMiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBrZW5kbzsiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///59b870d5aad30b0e7e20\n");

/***/ }),

/***/ "5b78f14ebd4d5da18109":
/*!**********************************************************************************!*\
  !*** ./src/vendor/Anakeen/DOCUMENT/IHM/widgets/attributes/longtext/wLongtext.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*global define*/\n(function umdRequire(root, factory) {\n  \"use strict\";\n\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n      __webpack_require__(/*! jquery */ \"127c8cf59f228bb01a21\"),\n      __webpack_require__(/*! underscore */ \"8e08e542008e4aef1f58\"),\n      __webpack_require__(/*! dcpDocument/widgets/attributes/text/wText */ \"f54cd12cb65078ca4c4a\")\n    ], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(window, function requireDcpLongText($, _) {\n  \"use strict\";\n\n  $.widget(\"dcp.dcpLongtext\", $.dcp.dcpText, {\n    options: {\n      type: \"longtext\",\n      renderOptions: {\n        displayedLineNumber: 5\n      }\n    },\n\n    _initDom: function dcpLongtext_initDom() {\n      var maxDisplayedLine = this.options.renderOptions.displayedLineNumber;\n\n      this._super();\n      this._maxLinesNumber(maxDisplayedLine);\n    },\n\n    _initEvent: function dcpLongtext_initEvent() {\n      if (this.getMode() === \"write\") {\n        this._initAutoFit();\n      }\n      this._super();\n    },\n\n    _maxLinesNumber: function dcpLongtext_maxLinesNumber(lineNumber) {\n      lineNumber = parseInt(lineNumber, 10);\n      if (lineNumber > 0) {\n        var scope = this;\n        _.defer(function dcpLongtext_deferComputeSize() {\n          var $element = scope.getContentElements();\n          var delta =\n            parseFloat($element.css(\"padding-top\")) +\n            parseFloat($element.css(\"padding-bottom\"));\n          var lineH = $element.css(\"line-height\");\n          // In IE9 , the result is just a number without unit\n          if (lineH) {\n            if (lineH.indexOf(\"px\") > 0) {\n              $element.css(\n                \"max-height\",\n                lineNumber * parseFloat(lineH) + delta + \"px\"\n              );\n            } else {\n              $element.css(\"max-height\", lineNumber * 1.1 + \"em\");\n            }\n          }\n        });\n      }\n    },\n    /**\n     * Define inputs for focus\n     * @protected\n     */\n    _getFocusInput: function dcpLongtext_getFocusInput() {\n      return this.element.find('textarea[name=\"' + this.options.id + '\"]');\n    },\n\n    _fitToContent: function dcpLongtext_fitToContent($element) {\n      var delta =\n          parseFloat($element.css(\"padding-top\")) +\n          parseFloat($element.css(\"padding-bottom\")),\n        element = $element.get(0),\n        maxHeight = parseFloat($element.css(\"max-height\"));\n      if (element && element.scrollHeight > element.clientHeight) {\n        $element.height(element.scrollHeight - delta + 1);\n        if (maxHeight > 0) {\n          if (element.scrollHeight > maxHeight) {\n            $element.css(\"resize\", \"none\");\n          } else {\n            $element.css(\"resize\", \"\");\n          }\n        }\n      }\n    },\n\n    _initAutoFit: function dcpLongtext_initAutoFit() {\n      var scope = this;\n      _.defer(function dcpLongtext_computeSize() {\n        scope._fitToContent(scope.getContentElements());\n      });\n      this.getContentElements()\n        .on(\n          \"keyup\" + this.eventNamespace,\n          function dcpLongtext_keyUpUpdateSize() {\n            scope._fitToContent($(this));\n          }\n        )\n        .on(\n          \"focus\" + this.eventNamespace,\n          function dcpLongtext_focusUpdateSize() {\n            scope._fitToContent($(this));\n          }\n        );\n\n      this.element.on(\n        \"show\" + this.eventNamespace,\n        function dcpLongtext_showUpdateSize() {\n          scope._fitToContent(scope.getContentElements());\n        }\n      );\n    },\n\n    getType: function dcpLongtext_getType() {\n      return \"longtext\";\n    }\n  });\n\n  return $.fn.dcpLongtext;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNWI3OGYxNGViZDRkNWRhMTgxMDkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdmVuZG9yL0FuYWtlZW4vRE9DVU1FTlQvSUhNL3dpZGdldHMvYXR0cmlidXRlcy9sb25ndGV4dC93TG9uZ3RleHQuanM/NzUyZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKmdsb2JhbCBkZWZpbmUqL1xuKGZ1bmN0aW9uIHVtZFJlcXVpcmUocm9vdCwgZmFjdG9yeSkge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoW1xuICAgICAgXCJqcXVlcnlcIixcbiAgICAgIFwidW5kZXJzY29yZVwiLFxuICAgICAgXCJkY3BEb2N1bWVudC93aWRnZXRzL2F0dHJpYnV0ZXMvdGV4dC93VGV4dFwiXG4gICAgXSwgZmFjdG9yeSk7XG4gIH0gZWxzZSB7XG4gICAgLy9ub2luc3BlY3Rpb24gSlNVbnJlc29sdmVkVmFyaWFibGVcbiAgICBmYWN0b3J5KHdpbmRvdy5qUXVlcnksIHdpbmRvdy5fKTtcbiAgfVxufSkod2luZG93LCBmdW5jdGlvbiByZXF1aXJlRGNwTG9uZ1RleHQoJCwgXykge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICAkLndpZGdldChcImRjcC5kY3BMb25ndGV4dFwiLCAkLmRjcC5kY3BUZXh0LCB7XG4gICAgb3B0aW9uczoge1xuICAgICAgdHlwZTogXCJsb25ndGV4dFwiLFxuICAgICAgcmVuZGVyT3B0aW9uczoge1xuICAgICAgICBkaXNwbGF5ZWRMaW5lTnVtYmVyOiA1XG4gICAgICB9XG4gICAgfSxcblxuICAgIF9pbml0RG9tOiBmdW5jdGlvbiBkY3BMb25ndGV4dF9pbml0RG9tKCkge1xuICAgICAgdmFyIG1heERpc3BsYXllZExpbmUgPSB0aGlzLm9wdGlvbnMucmVuZGVyT3B0aW9ucy5kaXNwbGF5ZWRMaW5lTnVtYmVyO1xuXG4gICAgICB0aGlzLl9zdXBlcigpO1xuICAgICAgdGhpcy5fbWF4TGluZXNOdW1iZXIobWF4RGlzcGxheWVkTGluZSk7XG4gICAgfSxcblxuICAgIF9pbml0RXZlbnQ6IGZ1bmN0aW9uIGRjcExvbmd0ZXh0X2luaXRFdmVudCgpIHtcbiAgICAgIGlmICh0aGlzLmdldE1vZGUoKSA9PT0gXCJ3cml0ZVwiKSB7XG4gICAgICAgIHRoaXMuX2luaXRBdXRvRml0KCk7XG4gICAgICB9XG4gICAgICB0aGlzLl9zdXBlcigpO1xuICAgIH0sXG5cbiAgICBfbWF4TGluZXNOdW1iZXI6IGZ1bmN0aW9uIGRjcExvbmd0ZXh0X21heExpbmVzTnVtYmVyKGxpbmVOdW1iZXIpIHtcbiAgICAgIGxpbmVOdW1iZXIgPSBwYXJzZUludChsaW5lTnVtYmVyLCAxMCk7XG4gICAgICBpZiAobGluZU51bWJlciA+IDApIHtcbiAgICAgICAgdmFyIHNjb3BlID0gdGhpcztcbiAgICAgICAgXy5kZWZlcihmdW5jdGlvbiBkY3BMb25ndGV4dF9kZWZlckNvbXB1dGVTaXplKCkge1xuICAgICAgICAgIHZhciAkZWxlbWVudCA9IHNjb3BlLmdldENvbnRlbnRFbGVtZW50cygpO1xuICAgICAgICAgIHZhciBkZWx0YSA9XG4gICAgICAgICAgICBwYXJzZUZsb2F0KCRlbGVtZW50LmNzcyhcInBhZGRpbmctdG9wXCIpKSArXG4gICAgICAgICAgICBwYXJzZUZsb2F0KCRlbGVtZW50LmNzcyhcInBhZGRpbmctYm90dG9tXCIpKTtcbiAgICAgICAgICB2YXIgbGluZUggPSAkZWxlbWVudC5jc3MoXCJsaW5lLWhlaWdodFwiKTtcbiAgICAgICAgICAvLyBJbiBJRTkgLCB0aGUgcmVzdWx0IGlzIGp1c3QgYSBudW1iZXIgd2l0aG91dCB1bml0XG4gICAgICAgICAgaWYgKGxpbmVIKSB7XG4gICAgICAgICAgICBpZiAobGluZUguaW5kZXhPZihcInB4XCIpID4gMCkge1xuICAgICAgICAgICAgICAkZWxlbWVudC5jc3MoXG4gICAgICAgICAgICAgICAgXCJtYXgtaGVpZ2h0XCIsXG4gICAgICAgICAgICAgICAgbGluZU51bWJlciAqIHBhcnNlRmxvYXQobGluZUgpICsgZGVsdGEgKyBcInB4XCJcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICRlbGVtZW50LmNzcyhcIm1heC1oZWlnaHRcIiwgbGluZU51bWJlciAqIDEuMSArIFwiZW1cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIC8qKlxuICAgICAqIERlZmluZSBpbnB1dHMgZm9yIGZvY3VzXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIF9nZXRGb2N1c0lucHV0OiBmdW5jdGlvbiBkY3BMb25ndGV4dF9nZXRGb2N1c0lucHV0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudC5maW5kKCd0ZXh0YXJlYVtuYW1lPVwiJyArIHRoaXMub3B0aW9ucy5pZCArICdcIl0nKTtcbiAgICB9LFxuXG4gICAgX2ZpdFRvQ29udGVudDogZnVuY3Rpb24gZGNwTG9uZ3RleHRfZml0VG9Db250ZW50KCRlbGVtZW50KSB7XG4gICAgICB2YXIgZGVsdGEgPVxuICAgICAgICAgIHBhcnNlRmxvYXQoJGVsZW1lbnQuY3NzKFwicGFkZGluZy10b3BcIikpICtcbiAgICAgICAgICBwYXJzZUZsb2F0KCRlbGVtZW50LmNzcyhcInBhZGRpbmctYm90dG9tXCIpKSxcbiAgICAgICAgZWxlbWVudCA9ICRlbGVtZW50LmdldCgwKSxcbiAgICAgICAgbWF4SGVpZ2h0ID0gcGFyc2VGbG9hdCgkZWxlbWVudC5jc3MoXCJtYXgtaGVpZ2h0XCIpKTtcbiAgICAgIGlmIChlbGVtZW50ICYmIGVsZW1lbnQuc2Nyb2xsSGVpZ2h0ID4gZWxlbWVudC5jbGllbnRIZWlnaHQpIHtcbiAgICAgICAgJGVsZW1lbnQuaGVpZ2h0KGVsZW1lbnQuc2Nyb2xsSGVpZ2h0IC0gZGVsdGEgKyAxKTtcbiAgICAgICAgaWYgKG1heEhlaWdodCA+IDApIHtcbiAgICAgICAgICBpZiAoZWxlbWVudC5zY3JvbGxIZWlnaHQgPiBtYXhIZWlnaHQpIHtcbiAgICAgICAgICAgICRlbGVtZW50LmNzcyhcInJlc2l6ZVwiLCBcIm5vbmVcIik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICRlbGVtZW50LmNzcyhcInJlc2l6ZVwiLCBcIlwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgX2luaXRBdXRvRml0OiBmdW5jdGlvbiBkY3BMb25ndGV4dF9pbml0QXV0b0ZpdCgpIHtcbiAgICAgIHZhciBzY29wZSA9IHRoaXM7XG4gICAgICBfLmRlZmVyKGZ1bmN0aW9uIGRjcExvbmd0ZXh0X2NvbXB1dGVTaXplKCkge1xuICAgICAgICBzY29wZS5fZml0VG9Db250ZW50KHNjb3BlLmdldENvbnRlbnRFbGVtZW50cygpKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5nZXRDb250ZW50RWxlbWVudHMoKVxuICAgICAgICAub24oXG4gICAgICAgICAgXCJrZXl1cFwiICsgdGhpcy5ldmVudE5hbWVzcGFjZSxcbiAgICAgICAgICBmdW5jdGlvbiBkY3BMb25ndGV4dF9rZXlVcFVwZGF0ZVNpemUoKSB7XG4gICAgICAgICAgICBzY29wZS5fZml0VG9Db250ZW50KCQodGhpcykpO1xuICAgICAgICAgIH1cbiAgICAgICAgKVxuICAgICAgICAub24oXG4gICAgICAgICAgXCJmb2N1c1wiICsgdGhpcy5ldmVudE5hbWVzcGFjZSxcbiAgICAgICAgICBmdW5jdGlvbiBkY3BMb25ndGV4dF9mb2N1c1VwZGF0ZVNpemUoKSB7XG4gICAgICAgICAgICBzY29wZS5fZml0VG9Db250ZW50KCQodGhpcykpO1xuICAgICAgICAgIH1cbiAgICAgICAgKTtcblxuICAgICAgdGhpcy5lbGVtZW50Lm9uKFxuICAgICAgICBcInNob3dcIiArIHRoaXMuZXZlbnROYW1lc3BhY2UsXG4gICAgICAgIGZ1bmN0aW9uIGRjcExvbmd0ZXh0X3Nob3dVcGRhdGVTaXplKCkge1xuICAgICAgICAgIHNjb3BlLl9maXRUb0NvbnRlbnQoc2NvcGUuZ2V0Q29udGVudEVsZW1lbnRzKCkpO1xuICAgICAgICB9XG4gICAgICApO1xuICAgIH0sXG5cbiAgICBnZXRUeXBlOiBmdW5jdGlvbiBkY3BMb25ndGV4dF9nZXRUeXBlKCkge1xuICAgICAgcmV0dXJuIFwibG9uZ3RleHRcIjtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiAkLmZuLmRjcExvbmd0ZXh0O1xufSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0EsV0FHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///5b78f14ebd4d5da18109\n");

/***/ }),

/***/ "6313c1253c848afae01c":
/*!***********************************************************************!*\
  !*** ./src/vendor/Anakeen/DOCUMENT/IHM/models/mDocumentProperties.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*global define*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! underscore */ \"8e08e542008e4aef1f58\"), __webpack_require__(/*! backbone */ \"1858b45bf48591489d06\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function(_, Backbone) {\n  \"use strict\";\n\n  return Backbone.Model.extend({\n    typeModel: \"ddui:properties\"\n  });\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjMxM2MxMjUzYzg0OGFmYWUwMWMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdmVuZG9yL0FuYWtlZW4vRE9DVU1FTlQvSUhNL21vZGVscy9tRG9jdW1lbnRQcm9wZXJ0aWVzLmpzP2YyY2YiXSwic291cmNlc0NvbnRlbnQiOlsiLypnbG9iYWwgZGVmaW5lKi9cbmRlZmluZShbXCJ1bmRlcnNjb3JlXCIsIFwiYmFja2JvbmVcIl0sIGZ1bmN0aW9uKF8sIEJhY2tib25lKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHJldHVybiBCYWNrYm9uZS5Nb2RlbC5leHRlbmQoe1xuICAgIHR5cGVNb2RlbDogXCJkZHVpOnByb3BlcnRpZXNcIlxuICB9KTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6313c1253c848afae01c\n");

/***/ }),

/***/ "64f8c3da02958f1cbdb3":
/*!*******************************************************************!*\
  !*** ./src/vendor/Anakeen/DOCUMENT/IHM/models/mAttributeArray.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! underscore */ \"8e08e542008e4aef1f58\"), __webpack_require__(/*! dcpDocument/models/mAttributeStructural */ \"687c2558a18abb757c14\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function(\n  _,\n  AttributeStructuralModel\n) {\n  \"use strict\";\n\n  return AttributeStructuralModel.extend({\n    typeModel: \"ddui:attributeArray\",\n    removeIndexedLine: function mAttributeArrayRemoveIndexLine(index) {\n      this.trigger(\"removeWidgetLine\", { index: index }, { silent: true });\n      this.trigger(\"array\", \"remove\", this, index);\n    },\n\n    addIndexedLine: function mAttributeArrayaddIndexedLine(index) {\n      this.trigger(\"addWidgetLine\", { index: index });\n      this.trigger(\"array\", \"add\", this, index);\n    }\n  });\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjRmOGMzZGEwMjk1OGYxY2JkYjMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdmVuZG9yL0FuYWtlZW4vRE9DVU1FTlQvSUhNL21vZGVscy9tQXR0cmlidXRlQXJyYXkuanM/NTM0NyJdLCJzb3VyY2VzQ29udGVudCI6WyJkZWZpbmUoW1widW5kZXJzY29yZVwiLCBcImRjcERvY3VtZW50L21vZGVscy9tQXR0cmlidXRlU3RydWN0dXJhbFwiXSwgZnVuY3Rpb24oXG4gIF8sXG4gIEF0dHJpYnV0ZVN0cnVjdHVyYWxNb2RlbFxuKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHJldHVybiBBdHRyaWJ1dGVTdHJ1Y3R1cmFsTW9kZWwuZXh0ZW5kKHtcbiAgICB0eXBlTW9kZWw6IFwiZGR1aTphdHRyaWJ1dGVBcnJheVwiLFxuICAgIHJlbW92ZUluZGV4ZWRMaW5lOiBmdW5jdGlvbiBtQXR0cmlidXRlQXJyYXlSZW1vdmVJbmRleExpbmUoaW5kZXgpIHtcbiAgICAgIHRoaXMudHJpZ2dlcihcInJlbW92ZVdpZGdldExpbmVcIiwgeyBpbmRleDogaW5kZXggfSwgeyBzaWxlbnQ6IHRydWUgfSk7XG4gICAgICB0aGlzLnRyaWdnZXIoXCJhcnJheVwiLCBcInJlbW92ZVwiLCB0aGlzLCBpbmRleCk7XG4gICAgfSxcblxuICAgIGFkZEluZGV4ZWRMaW5lOiBmdW5jdGlvbiBtQXR0cmlidXRlQXJyYXlhZGRJbmRleGVkTGluZShpbmRleCkge1xuICAgICAgdGhpcy50cmlnZ2VyKFwiYWRkV2lkZ2V0TGluZVwiLCB7IGluZGV4OiBpbmRleCB9KTtcbiAgICAgIHRoaXMudHJpZ2dlcihcImFycmF5XCIsIFwiYWRkXCIsIHRoaXMsIGluZGV4KTtcbiAgICB9XG4gIH0pO1xufSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///64f8c3da02958f1cbdb3\n");

/***/ }),

/***/ "687c2558a18abb757c14":
/*!************************************************************************!*\
  !*** ./src/vendor/Anakeen/DOCUMENT/IHM/models/mAttributeStructural.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n  __webpack_require__(/*! underscore */ \"8e08e542008e4aef1f58\"),\n  __webpack_require__(/*! dcpDocument/models/mAttribute */ \"7b46bf7e05a6e22e32e7\"),\n  __webpack_require__(/*! dcpDocument/collections/contentAttributes */ \"f45c9571cf0ee225b94c\")\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function(_, AttributeModel, CollectionContentAttributes) {\n  \"use strict\";\n\n  return AttributeModel.extend({\n    typeModel: \"ddui:structureAttribute\",\n    defaults: {\n      content: []\n    },\n\n    setContentCollection: function mAttributesetContentCollection(attributes) {\n      var collection = new CollectionContentAttributes();\n      _.each(attributes, function(currentChild) {\n        collection.push(currentChild);\n      });\n      this.set(\"content\", collection);\n    }\n  });\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjg3YzI1NThhMThhYmI3NTdjMTQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdmVuZG9yL0FuYWtlZW4vRE9DVU1FTlQvSUhNL21vZGVscy9tQXR0cmlidXRlU3RydWN0dXJhbC5qcz9lN2NhIl0sInNvdXJjZXNDb250ZW50IjpbImRlZmluZShbXG4gIFwidW5kZXJzY29yZVwiLFxuICBcImRjcERvY3VtZW50L21vZGVscy9tQXR0cmlidXRlXCIsXG4gIFwiZGNwRG9jdW1lbnQvY29sbGVjdGlvbnMvY29udGVudEF0dHJpYnV0ZXNcIlxuXSwgZnVuY3Rpb24oXywgQXR0cmlidXRlTW9kZWwsIENvbGxlY3Rpb25Db250ZW50QXR0cmlidXRlcykge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICByZXR1cm4gQXR0cmlidXRlTW9kZWwuZXh0ZW5kKHtcbiAgICB0eXBlTW9kZWw6IFwiZGR1aTpzdHJ1Y3R1cmVBdHRyaWJ1dGVcIixcbiAgICBkZWZhdWx0czoge1xuICAgICAgY29udGVudDogW11cbiAgICB9LFxuXG4gICAgc2V0Q29udGVudENvbGxlY3Rpb246IGZ1bmN0aW9uIG1BdHRyaWJ1dGVzZXRDb250ZW50Q29sbGVjdGlvbihhdHRyaWJ1dGVzKSB7XG4gICAgICB2YXIgY29sbGVjdGlvbiA9IG5ldyBDb2xsZWN0aW9uQ29udGVudEF0dHJpYnV0ZXMoKTtcbiAgICAgIF8uZWFjaChhdHRyaWJ1dGVzLCBmdW5jdGlvbihjdXJyZW50Q2hpbGQpIHtcbiAgICAgICAgY29sbGVjdGlvbi5wdXNoKGN1cnJlbnRDaGlsZCk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMuc2V0KFwiY29udGVudFwiLCBjb2xsZWN0aW9uKTtcbiAgICB9XG4gIH0pO1xufSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///687c2558a18abb757c14\n");

/***/ }),

/***/ "698d75b157f24ae829cc":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjk4ZDc1YjE1N2YyNGFlODI5Y2MuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzP2NkMDAiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCkgfHwgKDEsIGV2YWwpKFwidGhpc1wiKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///698d75b157f24ae829cc\n");

/***/ }),

/***/ "71c536497138046fbd5e":
/*!****************************************************************************!*\
  !*** ./src/vendor/Anakeen/DOCUMENT/IHM/widgets/attributes/array/wArray.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function umdRequire(root, factory) {\n  \"use strict\";\n\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n      __webpack_require__(/*! jquery */ \"127c8cf59f228bb01a21\"),\n      __webpack_require__(/*! underscore */ \"8e08e542008e4aef1f58\"),\n      __webpack_require__(/*! mustache */ \"bcd31d01884fc294fd69\"),\n      __webpack_require__(/*! dcpDocument/widgets/widget */ \"a903b12ace80b5b4ecce\")\n    ], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(window, function require_array($, _, Mustache) {\n  \"use strict\";\n\n  $.widget(\"dcp.dcpArray\", {\n    options: {\n      tools: true,\n      nbLines: 0,\n      renderOptions: {\n        rowCountThreshold: -1,\n        rowAddDisable: false,\n        rowDelDisable: false,\n        rowMoveDisable: false,\n        rowMinLimit: -1,\n        rowMinDefault: 0,\n        rowMaxLimit: -1,\n        collapse: false,\n        arrayBreakPoints: {\n          transpositionRule: \"@media (max-width: 768px)\",\n          upRule: \"@media (max-width: 1200px)\"\n        }\n      },\n      displayLabel: true,\n      customTemplate: false,\n      labels: {\n        closeErrorMessage: \"Close message\",\n        limitMaxMessage: \"Row count limit to {{limit}}\",\n        limitMinMessage: \"Min row limit is {{limit}}\"\n      }\n    },\n\n    /**\n     * get Selected line element (jquery, length = 0 if no selected)\n     * @returns {*}\n     */\n    getSelectedLineElement: function dcpArraygetSelectedLineElement() {\n      return this.element.find(\".dcpArray__content__line--selected.active\");\n    },\n    /**\n     * get Selected line index (0 : first, null : no selected line)\n     * @returns {*}\n     */\n    getSelectedLineIndex: function dcpArray_getSelectedLineIndex() {\n      var index = this.getSelectedLineElement().data(\"line\");\n      if (_.isUndefined(index) || _.isNull(index)) {\n        return null;\n      }\n      return index;\n    },\n    /**\n     *\n     * @private\n     */\n    _create: function dcpArray_create() {\n      this.options.tools =\n        this.options.mode === \"write\" && this.options.visibility !== \"U\";\n      if (\n        this.options.renderOptions.rowAddDisable === true &&\n        this.options.renderOptions.rowDelDisable === true &&\n        this.options.renderOptions.rowMoveDisable === true\n      ) {\n        this.options.tools = false;\n      }\n      if (this.options.renderOptions.attributeLabel) {\n        this.options.label = this.options.renderOptions.attributeLabel;\n      }\n\n      this.initializing = true;\n      this._initDom().then(\n        _.bind(function onDomOK() {\n          this._trigger(\"widgetReady\");\n        }, this)\n      );\n      if (!this._isEventBinded()) {\n        this._initActionClickEvent();\n        this._bindEvents();\n        this._isEventBinded(true);\n      }\n      this.element.find(\".dcpArray--collapsable\").on(\n        \"click\" + this.eventNamespace,\n        _.bind(function toogleTable() {\n          this.toggleCollapse.apply(this);\n        }, this)\n      );\n\n      if (this.options.renderOptions.collapse === \"collapse\") {\n        this.toggleCollapse(null, true);\n      }\n\n      this.initializing = false;\n    },\n\n    _isInitialized: function dcpArray_isInitialized(value) {\n      var $tbody = this.element.find(\".dcpArray__body\");\n      if (value !== undefined) {\n        $tbody.data(\"bodyGenerated\", value);\n      }\n      return $tbody.data(\"bodyGenerated\");\n    },\n    _isEventBinded: function dcpArray_isEventBinded(value) {\n      var $tbody = this.element.find(\".dcpArray__body\");\n      if (value !== undefined) {\n        $tbody.data(\"eventsBinded\", value);\n      }\n      return $tbody.data(\"eventsBinded\");\n    },\n\n    _initDom: function dcpArray_initDom() {\n      return new Promise(\n        _.bind(function dcpArray_initDom_initDom(resolve, reject) {\n          var scope = this,\n            $table;\n          if (\n            this.options.mode === \"read\" &&\n            this.options.nbLines === 0 &&\n            this.options.showEmpty !== true\n          ) {\n            if (this.options.showEmpty) {\n              this.element.addClass(\"card card-default\");\n              // showEmptyCOntent option\n              if (this.options.displayLabel !== false) {\n                this.element.append(\n                  Mustache.render(\n                    this._getTemplate(\"label\") || \"\",\n                    this.options\n                  )\n                );\n                if (this.options.renderOptions.labelPosition === \"left\") {\n                  this.element\n                    .find(\".dcpLabel\")\n                    .addClass(\"dcpArray__label--left\");\n                }\n              }\n\n              this.element.append(this.options.showEmpty);\n            }\n          } else {\n            this.element.addClass(\"card card-default\");\n            if (this.options.displayLabel !== false) {\n              this.element.append(\n                Mustache.render(\n                  this._getTemplate(\"label\") || \"\",\n                  _.extend(this.options, {\n                    collapsable: this.options.renderOptions.collapse !== \"none\",\n                    displayCount:\n                      this.options.renderOptions.rowCountThreshold >= 0 &&\n                      this.options.nbLines >=\n                        this.options.renderOptions.rowCountThreshold\n                  })\n                )\n              );\n            }\n\n            if (this.options.customTemplate) {\n              // The template is already composed on view\n              this.element.append(this.options.customTemplate);\n              this.element\n                .find(\".dcpCustomTemplate table.dcpArray__table > tbody > tr\")\n                .addClass(\"dcpArray__content__line\");\n              this._indexLine();\n              this.element\n                .find(\".dcpArray__content__line\")\n                .attr(\"data-attrid\", this.options.id);\n              this.element\n                .find(\".dcpCustomTemplate\")\n                .addClass(\"dcpArray__content dcpArray__content--open\");\n            } else {\n              _.each(this.options.content, function wArrayCopyRenderContent(\n                anOption\n              ) {\n                // Need duplicate because Mustache is confused when 2 attributes has same name\n                anOption.contentRenderOptions = anOption.renderOptions;\n              });\n              this.element.append(\n                Mustache.render(\n                  this._getTemplate(\"content\") || \"\",\n                  this.options\n                )\n              );\n\n              if (this.options.mode === \"write\") {\n                this.element\n                  .find(\".dcpArray__content\")\n                  .addClass(\"dcpArray--tooltips\");\n                this.element.tooltip({\n                  selector:\n                    \".dcpArray--tooltips .dcpArray__content__toolCell span, .dcpArray--tooltips .dcpArray__tools .dcpArray__button\",\n                  placement: function(tooltipDom, targetDom) {\n                    // Auto hide after 3s\n                    _.delay(function() {\n                      $(targetDom).tooltip(\"hide\");\n                    }, 3000);\n                    if ($(targetDom).closest(\".dcpArray__tools\").length > 0) {\n                      return \"bottom\";\n                    }\n                    return \"top\";\n                  },\n                  container: \".dcpDocument\",\n\n                  delay: {\n                    hide: 0,\n                    show: 500\n                  }\n                });\n              }\n            }\n            if (this.options.displayLabel !== false) {\n              var labelPosition = this.options.renderOptions.labelPosition;\n              if (labelPosition === \"auto\" || labelPosition === \"left\") {\n                this.element\n                  .find(\".dcpArray__label\")\n                  .addClass(\"dcpAttribute__left\");\n                this.element\n                  .find(\".dcpArray__content\")\n                  .addClass(\"dcpAttribute__right\");\n                this.element.addClass(\"dcpArray--left\");\n              }\n\n              this.element\n                .find(\".dcpAttribute__right\")\n                .addClass(\"dcpAttribute__labelPosition--\" + labelPosition);\n              this.element\n                .find(\".dcpAttribute__left\")\n                .addClass(\"dcpAttribute__labelPosition--\" + labelPosition);\n              this.element.addClass(\n                \"dcpAttribute__labelPosition--\" + labelPosition\n              );\n            }\n\n            if (this.options.renderOptions.rowAddDisable === true) {\n              this.element\n                .find(\".dcpArray__button--add, .dcpArray__button--copy\")\n                .hide();\n            }\n\n            // Set system css classes\n            $table = this.element.find(\".dcpArray__table\");\n            $table.addClass(\n              \"table table-condensed table-hover table-bordered responsive\"\n            );\n            $table\n              .find(\"> tbody\")\n              .addClass(\"dcpArray__body\")\n              .attr(\"data-attrid\", this.options.id);\n            $table\n              .find(\"> thead\")\n              .attr(\"data-attrid\", this.options.id)\n              .find(\"tr\")\n              .addClass(\"dcpArray__head\")\n              .attr(\"data-attrid\", this.options.id);\n\n            if (\n              this.options.mode === \"write\" &&\n              this.options.renderOptions.rowMoveDisable !== true\n            ) {\n              //Initiate drag drop events\n              this.element.find(\"tbody\").kendoDraggable({\n                axis: \"y\",\n                container: scope.element.find(\"tbody\"),\n                filter: \".dcpArray__content__toolCell__dragDrop\",\n                hint: function dcpArrayhint(element) {\n                  var dragLine = element.closest(\"tr\");\n                  var lineWidth = dragLine.width();\n                  var classTable = element.closest(\"table\").attr(\"class\");\n\n                  scope._hideTooltips();\n                  scope._disableTooltips();\n\n                  return $(\"<table/>\")\n                    .addClass(\"dcpArray__dragLine \" + classTable)\n                    .css(\"width\", lineWidth)\n                    .css(\n                      \"margin-left\",\n                      \"-\" +\n                        (element.offset().left - dragLine.offset().left) +\n                        \"px\"\n                    )\n                    .append(dragLine.clone());\n                },\n                dragstart: function dcpArraydragstart(event) {\n                  if (event.currentTarget) {\n                    var dragLine = $(event.currentTarget).closest(\"tr\");\n                    dragLine.css(\"opacity\", \"0\");\n                    dragLine.data(\"fromLine\", dragLine.data(\"line\"));\n                  }\n                },\n                dragend: function dcpArraydragend(event) {\n                  if (event.currentTarget) {\n                    var dragLine = $(event.currentTarget).closest(\"tr\");\n                    dragLine.css(\"opacity\", \"\");\n                    scope._trigger(\n                      \"lineMoved\",\n                      {},\n                      {\n                        fromLine: dragLine.data(\"fromLine\"),\n                        toLine: dragLine.data(\"line\")\n                      }\n                    );\n                  }\n\n                  scope._enableTooltips();\n                }\n              });\n\n              this.element.find(\"tbody\").kendoDropTargetArea({\n                filter:\n                  '.dcpArray__content__line[data-attrid=\"' +\n                  this.options.id +\n                  '\"]',\n                dragenter: function dragenter(event) {\n                  if (event.currentTarget) {\n                    var drap = event.draggable.currentTarget.closest(\"tr\");\n                    var drop = event.dropTarget;\n                    var drapLine = drap.data(\"line\");\n                    var dropLine = drop.data(\"line\");\n                    if (drapLine > dropLine) {\n                      drap.insertBefore(drop);\n                    } else {\n                      drap.insertAfter(drop);\n                    }\n                    scope._indexLine();\n                  }\n                }\n              });\n            }\n            this.element.on(\n              \"click\" + this.eventNamespace,\n              \".button-close-error\",\n              function destroyTable(/*event*/) {\n                scope.element\n                  .find(\".dcpArray__content table.table\")\n                  .tooltip(\"destroy\");\n              }\n            );\n          }\n          _.delay(_.bind(this._initCSSResponsive, this), 10);\n\n          if (!this._isInitialized()) {\n            this.addAllLines(this.options.nbLines)\n              .then(resolve)\n              .catch(reject);\n            this._isInitialized(true);\n          }\n        }, this)\n      );\n    },\n    /**\n     * Init event for #action/ links\n     *\n     * @protected\n     */\n    _initActionClickEvent: function wAttributeInitActionClickEvent() {\n      var scopeWidget = this;\n\n      this.element.on(\n        \"click.\" + this.eventNamespace,\n        'a[href^=\"#action/\"], a[data-action], button[data-action]',\n        function wAttributeActionClick(event) {\n          var $this = $(this),\n            action,\n            options,\n            eventOptions;\n\n          event.preventDefault();\n          if (event.stopPropagation) {\n            event.stopPropagation();\n          }\n\n          action = $this.data(\"action\") || $this.attr(\"href\");\n          options = action.substring(8).split(\":\");\n          eventOptions = {\n            target: event.target,\n            index: -1,\n            eventId: options.shift(),\n            options: options\n          };\n\n          scopeWidget._trigger(\"externalLinkSelected\", event, eventOptions);\n          return this;\n        }\n      );\n    },\n    _initCSSResponsive: function _initCSSResponsive() {\n      // I9 not support transposition table\n      var useTransposition = $(\"html.k-ie9\").length === 0;\n\n      this.element.append(\n        Mustache.render(\n          this._getTemplate(\"responsive\") || \"\",\n          _.extend(this.options, { useTransposition: useTransposition })\n        )\n      );\n\n      if (useTransposition) {\n        this.element.find(\"table.dcpArray__table\").addClass(\"responsive\");\n        var cssString,\n          cssTemplate,\n          headers = _.map(\n            this.element.find(\"table.responsive > thead th\"),\n            function addResponsiveKey(currentElement, index) {\n              var $currentElement = $(currentElement);\n              var $label = $currentElement.find(\".dcpArray__head__label\");\n\n              if ($label.length === 0) {\n                $label = $currentElement;\n              }\n              $label.attr(\"data-responsiveKey\", \"rk\" + index);\n              return {\n                key: $label.attr(\"data-responsiveKey\"),\n                attrid: $label.data(\"attrid\"),\n                label: $label.text().trim()\n              };\n            }\n          );\n\n        // Generate CSS string\n        cssString =\n          \"<style>\" +\n          this.options.renderOptions.arrayBreakPoints.transpositionRule +\n          \" { \";\n\n        cssTemplate = _.template(\n          \".dcpArray__content[data-attrid=\" +\n            this.options.id +\n            '] .dcpAttribute__content[data-responsiveKey=<%= key %>]:before { content: \"<%= label %>\"; }'\n        );\n\n        _.each(headers, function initCssHeader(currentHeader) {\n          currentHeader.label = currentHeader.label\n            .replace(/([\\\\\"])/g, \"\\\\$1\")\n            .replace(/\\n/g, \" \");\n          cssString += cssTemplate(currentHeader);\n        });\n        cssString += \" }</style>\";\n\n        this.element.append(cssString);\n      }\n    },\n\n    _hideTooltips: function wArray__hideTooltips() {\n      var $element = this.element;\n      $element.find(\"[aria-describedby^=tooltip]\").tooltip(\"hide\");\n      _.delay(function _hideTooltipsOneAgain() {\n        // Need redo cause animation delay of 500ms\n        $element.find(\"[aria-describedby^=tooltip]\").tooltip(\"hide\");\n      }, 500);\n    },\n    _disableTooltips: function wArray__disableTooltips() {\n      this.element.find(\".dcpArray__content\").removeClass(\"dcpArray--tooltips\");\n    },\n    _enableTooltips: function wArray__enableTooltips() {\n      this.element.find(\".dcpArray__content\").addClass(\"dcpArray--tooltips\");\n    },\n\n    _bindEvents: function dcpArray_bindEvents() {\n      var currentWidget = this;\n      this.element.on(\n        \"click\" + this.eventNamespace,\n        \".dcpArray__content__toolCell__check input\",\n        function selectLineEvent() {\n          var $this = $(this);\n          var isAlreadyChecked = $this\n            .closest(\".dcpArray__content__line\")\n            .hasClass(\"dcpArray__content__line--selected\");\n          currentWidget._hideTooltips();\n          currentWidget._unSelectLines();\n          if (isAlreadyChecked) {\n            currentWidget.element\n              .find(\".dcpArray__copy\")\n              .prop(\"disabled\", true);\n            $(this)\n              .prop(\"checked\", false)\n              .removeAttr(\"checked\");\n          } else {\n            $this.find(\".fa-check\").show();\n            $this\n              .closest(\".dcpArray__content__line\")\n              .addClass(\"dcpArray__content__line--selected active\");\n            currentWidget.element\n              .find(\".dcpArray__copy\")\n              .prop(\"disabled\", false);\n            $(this)\n              .prop(\"checked\", true)\n              .attr(\"checked\", \"checked\");\n          }\n        }\n      );\n      this.element.on(\n        \"click\" + this.eventNamespace,\n        \".dcpArray__add\",\n        function addLineEvent() {\n          var selectedLine = currentWidget.getSelectedLineIndex();\n          currentWidget._hideTooltips();\n          if (\n            currentWidget.options.renderOptions.rowMaxLimit < 0 ||\n            currentWidget.options.nbLines <\n              currentWidget.options.renderOptions.rowMaxLimit\n          ) {\n            if (selectedLine === null || _.isUndefined(selectedLine)) {\n              currentWidget.options.nbLines += 1;\n              currentWidget.addLine(currentWidget.options.nbLines - 1, {\n                needAddValue: true,\n                useSelectedLine: true\n              });\n            } else {\n              currentWidget.options.nbLines += 1;\n              currentWidget.addLine(selectedLine, {\n                needAddValue: true,\n                useSelectedLine: true\n              });\n            }\n          }\n        }\n      );\n      this.element.on(\n        \"click\" + this.eventNamespace,\n        \".dcpArray__copy\",\n        function copyLineEvent() {\n          var selectedLine = currentWidget.getSelectedLineIndex();\n\n          currentWidget._hideTooltips();\n          if (\n            currentWidget.options.renderOptions.rowMaxLimit < 0 ||\n            currentWidget.options.nbLines <\n              currentWidget.options.renderOptions.rowMaxLimit\n          ) {\n            currentWidget.options.nbLines += 1;\n            currentWidget.copyLine(selectedLine, {\n              needAddValue: true,\n              useSelectedLine: true\n            });\n          }\n        }\n      );\n      this.element.on(\n        \"click\" + this.eventNamespace,\n        \".dcpArray__content__toolCell__delete button\",\n        function deleteLineEvent() {\n          currentWidget._hideTooltips();\n          currentWidget.removeLine(\n            $(this)\n              .closest(\".dcpArray__content__line\")\n              .data(\"line\")\n          );\n          currentWidget.element.find(\".dcpArray__copy\").prop(\"disabled\", true);\n        }\n      );\n    },\n\n    toggleCollapse: function toggleCollapse(event, hideNow) {\n      this._hideTooltips();\n      var $contentElement = this.element.find(\".dcpArray__content\");\n      this.element\n        .find(\".dcp__array__caret\")\n        .toggleClass(\"fa-caret-right fa-caret-down\");\n      $contentElement.toggleClass(\n        \"dcpArray__content--open dcpArray__content--close\"\n      );\n      if (hideNow) {\n        $contentElement.hide();\n      } else {\n        $contentElement.slideToggle(200);\n      }\n    },\n\n    /**\n     * Redraw label with current count\n     */\n    redrawLabel: function wArrayRedrawLabel() {\n      this.element.find(\".dcpArray__label\").html(\n        $(\n          Mustache.render(\n            this._getTemplate(\"label\") || \"\",\n            _.extend(this.options, {\n              displayCount:\n                this.options.renderOptions.rowCountThreshold >= 0 &&\n                this.options.nbLines >=\n                  this.options.renderOptions.rowCountThreshold\n            })\n          )\n        ).html()\n      );\n    },\n    setLines: function wArraySetLines(lineNumber, options) {\n      return new Promise(\n        _.bind(function wArraySetLines_promise(resolve, reject) {\n          var linesPromise = [];\n          if (!this.initializing) {\n            // No auto add lines when array is initializing itself\n            var currentLineNumber = this.options.nbLines;\n            var i;\n            if (lineNumber > currentLineNumber) {\n              for (i = 0; i < lineNumber - currentLineNumber; i += 1) {\n                linesPromise.push(this.addLine(currentLineNumber + i, options));\n              }\n              Promise.all(linesPromise)\n                .then(resolve)\n                .catch(reject);\n            } else if (lineNumber < currentLineNumber) {\n              for (i = 0; i < currentLineNumber - lineNumber; i += 1) {\n                this.removeLine(this.options.nbLines - 1, options);\n              }\n              resolve();\n            } else {\n              resolve();\n            }\n          } else {\n            resolve();\n          }\n        }, this)\n      );\n    },\n\n    addAllLines: function dcpArrayaddAllLines(lineNumber) {\n      var i,\n        min,\n        allPromiseLines = [];\n      var $tbody = this.element.find(\".dcpArray__body\");\n      $tbody.empty();\n\n      for (i = 0; i < lineNumber; i += 1) {\n        this.addLine(i);\n      }\n\n      min = Math.max(\n        this.options.renderOptions.rowMinLimit,\n        this.options.renderOptions.rowMinDefault\n      );\n      if (min > 0) {\n        if (this.options.nbLines < min) {\n          for (i = this.options.nbLines; i < min; i += 1) {\n            allPromiseLines.push(this.addLine(i, { needAddValue: true }));\n          }\n        }\n      }\n\n      return Promise.all(allPromiseLines).then(\n        _.bind(function allLineAdded() {\n          this._trigger(\"linesGenerated\");\n        }, this)\n      );\n    },\n\n    _getLineContent: function dcpArray_getLineContent(index) {\n      var $content = \"NULL LINE\";\n\n      this.options.lineCid = _.uniqueId(this.options.id);\n      if (this.options.customTemplate) {\n        $content = this.options.customLineCallback.apply(this, [index]);\n        $content.addClass(\"dcpArray__content__line\");\n        $content.attr(\"data-attrid\", this.options.id);\n      } else {\n        $content = $(\n          Mustache.render(\n            this._getTemplate(\"line\") || \"\",\n            _.extend({ lineNumber: index }, this.options)\n          )\n        );\n      }\n      $content\n        .find(\".dcpArray__content__toolCell\")\n        .closest(\"td\")\n        .addClass(\"dcpArray__toolCell\");\n\n      if (this.options.renderOptions.rowDelDisable === true) {\n        $content.find(\".dcpArray__content__toolCell__delete\").hide();\n      }\n      if (this.options.renderOptions.rowMoveDisable === true) {\n        $content.find(\".dcpArray__content__toolCell__dragDrop\").hide();\n      }\n      _.each($content.find(\">td\"), function dcpArray_addCssClass(\n        currentCell,\n        index\n      ) {\n        $(currentCell)\n          .find(\".dcpArray__content__cell\")\n          .attr(\"data-responsiveKey\", \"rk\" + index)\n          .closest(\"td\")\n          .addClass(\"dcpArray__cell\");\n      });\n      return $content;\n    },\n\n    _addNewLine: function dcpArray_addNewLine(lineNumber, options) {\n      if (!_.isNumber(lineNumber)) {\n        throw new Error(\"You need to indicate the line number\");\n      }\n\n      var $content = this._getLineContent(lineNumber);\n      var selectedLine = [];\n\n      if (options && options.useSelectedLine) {\n        selectedLine = this.getSelectedLineElement();\n      }\n\n      if (selectedLine.length === 1) {\n        $content.insertBefore(selectedLine);\n      } else {\n        this.element.find(\".dcpArray__body\").append($content);\n      }\n      this._indexLine();\n      this.redrawLabel();\n      this._activateRowLimits();\n\n      return $content;\n    },\n\n    /**\n     * Disable/Enable Add/copy button\n     */\n    _activateRowLimits: function wArray_activateRowLimits() {\n      var currentWidget = this;\n      if (this.options.renderOptions.rowMaxLimit >= 0) {\n        if (this.options.nbLines >= this.options.renderOptions.rowMaxLimit) {\n          this.element\n            .find(\".dcpArray__add, .dcpArray__copy\")\n            .prop(\"disabled\", true);\n          this.element\n            .find(\".dcpArray__button--add, .dcpArray__button--copy\")\n            .each(function dcpArray_initLine() {\n              var $this = $(this);\n              if (!$this.data(\"originalTitle\")) {\n                $this.data(\"originalTitle\", $this.attr(\"title\"));\n              }\n              // reset tooltip\n              $this.tooltip(\"hide\").data(\"bs.tooltip\", null);\n\n              $this.attr(\n                \"title\",\n                Mustache.render(\n                  currentWidget.options.labels.limitMaxMessage || \"\",\n                  { limit: currentWidget.options.renderOptions.rowMaxLimit }\n                )\n              );\n            });\n        } else {\n          this.element\n            .find(\".dcpArray__add, .dcpArray__copy\")\n            .prop(\"disabled\", false);\n          this.element\n            .find(\".dcpArray__button--add, .dcpArray__button--copy\")\n            .each(function dcpArray_initLine() {\n              // reset tooltip\n              $(this)\n                .tooltip(\"hide\")\n                .data(\"bs.tooltip\", null);\n              $(this).attr(\"title\", $(this).data(\"originalTitle\"));\n            });\n        }\n      }\n\n      if (this.options.renderOptions.rowMinLimit >= 0) {\n        if (this.options.nbLines <= this.options.renderOptions.rowMinLimit) {\n          this.element\n            .find(\".dcpArray__content__toolCell__delete button\")\n            .prop(\"disabled\", true);\n          this.element\n            .find(\".dcpArray__content__toolCell__delete\")\n            .each(function dcpArray_initLine() {\n              if (!$(this).data(\"originalTitle\")) {\n                $(this).data(\"originalTitle\", $(this).attr(\"title\"));\n              }\n              // reset tooltip\n              $(this)\n                .tooltip(\"hide\")\n                .data(\"bs.tooltip\", null);\n\n              $(this).attr(\n                \"title\",\n                Mustache.render(\n                  currentWidget.options.labels.limitMinMessage || \"\",\n                  { limit: currentWidget.options.renderOptions.rowMinLimit }\n                )\n              );\n            });\n        } else {\n          this.element\n            .find(\".dcpArray__content__toolCell__delete button\")\n            .prop(\"disabled\", false);\n          this.element\n            .find(\".dcpArray__content__toolCell__delete\")\n            .each(function dcpArray_initLine() {\n              // reset tooltip\n              $(this)\n                .tooltip(\"hide\")\n                .data(\"bs.tooltip\", null);\n              $(this).attr(\"title\", $(this).data(\"originalTitle\"));\n            });\n        }\n      }\n    },\n\n    addLine: function dcpArrayaddLine(lineNumber, options) {\n      return new Promise(\n        _.bind(function dcpArrayaddLine_promise(resolve, reject) {\n          var $content = this._addNewLine(lineNumber, options);\n          if ($content) {\n            options = _.defaults(options || {}, {\n              silent: false,\n              needAddValue: false\n            });\n            if (options.silent !== true) {\n              this._trigger(\n                \"lineAdded\",\n                {},\n                {\n                  line: lineNumber,\n                  element: $content,\n                  needAddValue: options.needAddValue,\n                  resolve: resolve,\n                  reject: reject\n                }\n              );\n            }\n          }\n        }, this)\n      );\n    },\n\n    copyLine: function dcpArraycopyLine(lineNumber, options) {\n      return new Promise(\n        _.bind(function dcpArrayaddLine() {\n          var $content = this._addNewLine(lineNumber, options);\n          if ($content) {\n            this._trigger(\n              \"lineAdded\",\n              {},\n              { line: lineNumber, element: $content, copyValue: true }\n            );\n          }\n        }, this)\n      );\n    },\n\n    removeLine: function dcpArrayremoveLine(line, options) {\n      options = options || {};\n      this.element.find(\"[data-line=\" + line + \"]\").remove();\n      this._indexLine();\n      if (options.silent !== true) {\n        this._trigger(\"lineRemoved\", {}, { line: line });\n      }\n      this.redrawLabel();\n      this._activateRowLimits();\n    },\n\n    _destroy: function dcpArray_destroy() {\n      var tbody = this.element.find(\"tbody\");\n      if (tbody && tbody.data(\"kendoDropTargetArea\")) {\n        tbody.data(\"kendoDropTargetArea\").destroy();\n      }\n      if (tbody && tbody.data(\"kendoDraggable\")) {\n        tbody.data(\"kendoDraggable\").destroy();\n      }\n      this.element.empty();\n      this._super();\n    },\n\n    _indexLine: function dcpArray_indexLine() {\n      var i = 0;\n      this.element\n        .find(\".dcpArray__content__line\")\n        .each(function numeroteLine() {\n          $(this)\n            .attr(\"data-line\", i)\n            .data(\"line\", i);\n          i += 1;\n        });\n      this.options.nbLines = i;\n    },\n\n    _unSelectLines: function dcpArray_unSelectLines() {\n      this.element.find(\".dcpArray__content__toolCell__check .fa-check\").hide();\n      this.element\n        .find(\".dcpArray__content__line--selected\")\n        .removeClass(\"dcpArray__content__line--selected active\");\n    },\n    /**\n     * Display tooltip an error message\n     *\n     * @param message string or array of [{message:, index:}, ...]\n     */\n    setError: function dcpArray_SetError(message) {\n      var scope = this;\n      var $target = this.element.find(\".dcpArray__content table.table\");\n      if (message) {\n        $target\n          .tooltip({\n            placement: \"top\",\n            trigger: \"manual\",\n            animation: false,\n            html: true,\n            title: function dcpArray_computeTitleError() {\n              var rawMessage = $(\"<div/>\")\n                .text(message)\n                .html();\n              return (\n                \"<div>\" +\n                '<span title=\"' +\n                scope.options.labels.closeErrorMessage +\n                '\" class=\"btn fa fa-times button-close-error\"> &nbsp;</span>' +\n                rawMessage +\n                \"</div>\"\n              );\n            }\n          })\n          .one(\"shown.bs.tooltip\", function wErrorTooltip() {\n            var tipElement = $(this).data(\"bs.tooltip\").tip;\n            if (tipElement) {\n              $(tipElement).addClass(\"has-error\");\n            }\n          })\n          .tooltip(\"show\")\n          .addClass(\"dcpArray--error\");\n      } else {\n        $target.tooltip(\"hide\").removeClass(\"dcpArray--error\");\n      }\n    },\n    /**\n     * Get the template of the current attribute\n     *\n     * The template can be in the options or in a global var of dcp namespace (initiated by require for widget)\n     *\n     * @param key\n     * @returns string\n     * @private\n     */\n    _getTemplate: function dcpArray_getTemplate(key) {\n      if (this.options.templates && this.options.templates[key]) {\n        return this.options.templates[key];\n      }\n      if (\n        window.dcp &&\n        window.dcp.templates &&\n        window.dcp.templates[this.getType()] &&\n        window.dcp.templates[this.getType()][key]\n      ) {\n        return window.dcp.templates[this.getType()][key];\n      }\n      if (\n        window.dcp &&\n        window.dcp.templates &&\n        window.dcp.templates[\"default\"] &&\n        window.dcp.templates[\"default\"][key]\n      ) {\n        return window.dcp.templates[\"default\"][key];\n      }\n      throw new Error(\"Unknown template  \" + key + \"/\" + this.options.type);\n    },\n\n    getType: function dcpArray_getType() {\n      return \"array\";\n    }\n  });\n\n  return $.fn.dcpArray;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///71c536497138046fbd5e\n");

/***/ }),

/***/ "7873a0bfc996b28836c2":
/*!*****************************************************************************!*\
  !*** ./src/vendor/Anakeen/DOCUMENT/IHM/views/document/attributeTemplate.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;/*global define*/\n!(__WEBPACK_AMD_DEFINE_RESULT__ = (function attributeTemplate(require /*, exports, module*/) {\n  \"use strict\";\n  var _ = __webpack_require__(/*! underscore */ \"8e08e542008e4aef1f58\");\n  var $ = __webpack_require__(/*! jquery */ \"127c8cf59f228bb01a21\");\n  var Mustache = __webpack_require__(/*! mustache */ \"bcd31d01884fc294fd69\");\n\n  return {\n    customLineTemplate: \"\",\n\n    /**\n     * Get some data to complete custom attribute template\n     * @param documentModel document model\n     * @returns {{properties: *, attributes: {}}}\n     * @public\n     */\n    getTemplateModelInfo: function attributeTemplateGetTemplateModelInfo(\n      documentModel\n    ) {\n      var documentData = documentModel.getDocumentData();\n      var templateInfo = {\n        properties: documentData.properties,\n        attributes: {}\n      };\n      var currentTemplate = this;\n\n      templateInfo.properties.isWriteMode =\n        templateInfo.properties.renderMode === \"edit\";\n      templateInfo.properties.isReadMode =\n        templateInfo.properties.renderMode === \"view\";\n\n      _.each(documentData.attributeValues, function associateValue(\n        attributeValue,\n        attributeId\n      ) {\n        templateInfo.attributes[attributeId] = {\n          attributeValue: attributeValue\n        };\n      });\n      _.each(\n        documentData.attributeLabels,\n        function attributeTemplategetTemplateModelInfoEach(\n          attributeLabel,\n          attributeId\n        ) {\n          var currentAttributeModel = documentModel\n            .get(\"attributes\")\n            .get(attributeId);\n          if (currentAttributeModel.getOption(\"attributeLabel\")) {\n            attributeLabel = currentAttributeModel.getOption(\"attributeLabel\");\n          }\n\n          if (templateInfo.attributes[attributeId]) {\n            templateInfo.attributes[attributeId].label = attributeLabel;\n          } else {\n            templateInfo.attributes[attributeId] = { label: attributeLabel };\n          }\n\n          templateInfo.attributes[attributeId].id = attributeId;\n          templateInfo.attributes[\n            attributeId\n          ].isEmpty = currentTemplate._isEmptyAttribute(currentAttributeModel);\n\n          templateInfo.attributes[attributeId].htmlContent = _.bind(\n            currentTemplate.getCustomTemplate,\n            currentTemplate,\n            currentAttributeModel,\n            false,\n            false\n          );\n          templateInfo.attributes[attributeId].htmlView = _.bind(\n            currentTemplate.getCustomTemplate,\n            currentTemplate,\n            currentAttributeModel,\n            true,\n            false\n          );\n          templateInfo.attributes[attributeId].htmlDefaultContent = _.bind(\n            currentTemplate.getCustomTemplate,\n            currentTemplate,\n            currentAttributeModel,\n            false,\n            true\n          );\n          templateInfo.attributes[attributeId].htmlDefaultView = _.bind(\n            currentTemplate.getCustomTemplate,\n            currentTemplate,\n            currentAttributeModel,\n            true,\n            true\n          );\n          templateInfo.attributes[attributeId].isReadMode =\n            currentAttributeModel.get(\"mode\") === \"read\";\n          templateInfo.attributes[attributeId].isWriteMode =\n            currentAttributeModel.get(\"mode\") === \"write\";\n          templateInfo.attributes[attributeId].isVisible =\n            currentAttributeModel.get(\"mode\") !== \"hidden\";\n          templateInfo.attributes[\n            attributeId\n          ].renderOptions = currentAttributeModel.getOptions();\n          if (currentAttributeModel.get(\"type\") === \"array\") {\n            templateInfo.attributes[attributeId].toolsEnabled =\n              templateInfo.attributes[attributeId].isWriteMode &&\n              currentAttributeModel.get(\"visibility\") !== \"U\" &&\n              (currentAttributeModel.getOption(\"rowAddDisable\") !== true ||\n                currentAttributeModel.getOption(\"rowDelDisable\") !== true ||\n                currentAttributeModel.getOption(\"rowMoveDisable\") !== true);\n            templateInfo.attributes[attributeId].rows = _.bind(\n              currentTemplate.getArrayRowInfo,\n              currentTemplate,\n              currentAttributeModel\n            );\n            templateInfo.attributes[attributeId].tableTools = _.bind(\n              currentTemplate.getArrayTools,\n              currentTemplate,\n              currentAttributeModel\n            );\n          }\n        }\n      );\n      return templateInfo;\n    },\n\n    _isEmptyAttribute: function attributeTemplate_isEmptyAttribute(\n      attributeModel\n    ) {\n      var currentTemplate = this;\n      if (attributeModel.get(\"isValueAttribute\")) {\n        var attrValue = attributeModel.get(\"attributeValue\");\n        return (\n          _.isEmpty(attrValue) ||\n          (attrValue.value === \"\" || attrValue.value === null)\n        );\n      }\n      if (\n        !attributeModel.get(\"content\") ||\n        attributeModel.get(\"content\").length === 0\n      ) {\n        return true;\n      }\n      if (attributeModel.get(\"content\").some) {\n        return !attributeModel\n          .get(\"content\")\n          .some(function attributeTemplate_isEmptyAttribute_checkEmpty(value) {\n            return !currentTemplate._isEmptyAttribute(value);\n          });\n      }\n    },\n\n    /**\n     * Get some data to complete custom attribute template\n     * @returns {{properties: *, attributes: {}}}\n     * @private\n     */\n    getTemplateInfo: function attributeTemplateGetTemplateInfo(attributeModel) {\n      var templateInfo = this.getTemplateModelInfo(\n        attributeModel.getDocumentModel()\n      );\n      var attributeId = attributeModel.id;\n      var extraKeys = attributeModel.getOption(\"templateKeys\");\n\n      templateInfo.attribute = templateInfo.attributes[attributeId];\n      if (extraKeys) {\n        var copyextraKeys = _.clone(extraKeys);\n        if (copyextraKeys.attribute && copyextraKeys.attribute.rows) {\n          copyextraKeys.attribute = _.clone(extraKeys.attribute);\n          delete copyextraKeys.attribute.rows;\n        }\n        templateInfo = this._deepExtend(templateInfo, copyextraKeys);\n      }\n      return templateInfo;\n    },\n\n    /**\n     * Recursively extend data\n     *\n     * @param target\n     * @param source\n     * @returns {*}\n     */\n    _deepExtend: function attributeTemplate_deepExtend(target, source) {\n      for (var prop in source) {\n        if (source.hasOwnProperty(prop)) {\n          if (prop in target) {\n            this._deepExtend(target[prop], source[prop]);\n          } else {\n            target[prop] = source[prop];\n          }\n        }\n      }\n      return target;\n    },\n\n    /**\n     * Construct custom view based on template options\n     *\n     * @param attrModel Attribute model\n     * @param callBackView Callback to call after\n     * @returns {*|HTMLElement}\n     * @param config\n     */\n    renderCustomView: function attributeTemplateCustomView(\n      attrModel,\n      callBackView,\n      config\n    ) {\n      var customTemplate =\n        '<div class=\"dcpCustomTemplate\" data-attrid=\"' +\n        attrModel.id +\n        '\">' +\n        attrModel.getOption(\"template\") +\n        \"</div>\";\n      var templateInfo = this.getTemplateInfo(attrModel);\n      var $render;\n      var completePromise;\n\n      if (config && !_.isUndefined(config.index) && config.index >= 0) {\n        templateInfo.attribute.attributeValue =\n          templateInfo.attribute.attributeValue[config.index];\n      }\n      $render = $(Mustache.render(customTemplate || \"\", templateInfo));\n      completePromise = this.completeCustomContent(\n        $render,\n        attrModel.getDocumentModel(),\n        callBackView,\n        config\n      );\n      return { $el: $render, promise: completePromise };\n    },\n\n    /**\n     *\n     * Render the custom element of the template\n     *\n     * @param $el\n     * @param documentModel\n     * @param callBackView\n     * @param config\n     */\n    completeCustomContent: function attributeTemplateCompleteCustomContent(\n      $el,\n      documentModel,\n      callBackView,\n      config\n    ) {\n      var renderElementPromises = [];\n      $el\n        .find(\".dcpCustomTemplate--content\")\n        .each(function attributeTemplatecompleteCustomContentEach() {\n          var attrId = $(this).data(\"attrid\"),\n            displayLabel = $(this).data(\"displaylabel\") === true,\n            currentAttributeModel = documentModel.get(\"attributes\").get(attrId),\n            attrContent = \"NO VIEW FOR \" + attrId,\n            view = \"\",\n            BackView = null,\n            // guess if the template is the true version (without template, only the widget)\n            originalView = $(this).data(\"originalview\") === true;\n\n          if (currentAttributeModel) {\n            try {\n              if (_.isFunction(callBackView)) {\n                // When called from vColumn to render widget in a cell\n                callBackView.apply($(this));\n                attrContent = \"\";\n              } else {\n                switch (currentAttributeModel.get(\"type\")) {\n                  case \"array\":\n                    BackView = __webpack_require__(/*! dcpDocument/views/attributes/array/vArray */ \"e6be0392327aaf29201b\");\n                    break;\n                  case \"tab\":\n                    BackView = __webpack_require__(/*! dcpDocument/views/attributes/tab/vTabContent */ \"7e8010bf5f211813538c\");\n                    break;\n                  case \"frame\":\n                    BackView = __webpack_require__(/*! dcpDocument/views/attributes/frame/vFrame */ \"9fad28b160b8ea467ae3\");\n                    break;\n                  default:\n                    BackView = __webpack_require__(/*! dcpDocument/views/attributes/vAttribute */ \"37002e519de305be82e6\");\n                }\n\n                //If the attribute has no template, so it's the view with the widget, we annotate it to bind the events\n                if (!currentAttributeModel.getOption(\"template\")) {\n                  originalView = true;\n                }\n\n                if (\n                  originalView === false &&\n                  currentAttributeModel.customViewRended === true\n                ) {\n                  throw new Error(\n                    'Cannot use \"htmlView\" / \"htmlContent\" for itself on own custom view for ' +\n                      currentAttributeModel.id +\n                      '. Use \"htmlDefaultView\" / \"htmlDefaultContent\" instead'\n                  );\n                }\n                if (originalView === false) {\n                  currentAttributeModel.customViewRended = true;\n                }\n\n                view = new BackView({\n                  model: currentAttributeModel,\n                  originalView: originalView,\n                  initializeContent:\n                    (config && config.initializeContent) || false,\n                  displayLabel: displayLabel\n                });\n                renderElementPromises.push(view.render());\n                attrContent = view.$el;\n              }\n            } catch (e) {\n              attrContent = $(\"<div/>\")\n                .addClass(\"bg-danger\")\n                .text(e.message);\n            }\n          }\n          $(this).append(attrContent);\n        });\n      return Promise.all(renderElementPromises);\n    },\n\n    /**\n     * Information used when add new line\n     * @param attributeModel\n     * @param index line index\n     * @private\n     * @returns {{properties: *, attributes: {}}}\n     */\n    getLineInfo: function attributeTemplategetLineInfo(attributeModel, index) {\n      var documentData = attributeModel.getDocumentModel().getDocumentData();\n      var templateInfo = this.getTemplateInfo(attributeModel);\n      var extraKeys = attributeModel.getOption(\"templateKeys\");\n\n      _.each(documentData.attributeLabels, function attributeTemplate_eachLabel(\n        attributeLabel,\n        attributeId\n      ) {\n        var currentAttributeModel = attributeModel\n          .getDocumentModel()\n          .get(\"attributes\")\n          .get(attributeId);\n        // Reset some special keys which are not allowed here\n        if (currentAttributeModel.get(\"type\") === \"array\") {\n          templateInfo.attributes[attributeId].rows = [];\n          templateInfo.attributes[attributeId].tableTools =\n            \"NO TABLE TOOL ALLOWED HERE\";\n        }\n      });\n\n      templateInfo.rowTools = this.getRowTool(attributeModel);\n      templateInfo.content = {};\n      attributeModel\n        .get(\"content\")\n        .each(function attributeTemplate_eachContent(currentAttribute) {\n          var attributeId = currentAttribute.id;\n          var attributeLabel = currentAttribute.get(\"label\");\n\n          if (!currentAttribute.isDisplayable()) {\n            return;\n          }\n\n          if (currentAttribute.getOption(\"attributeLabel\")) {\n            attributeLabel = currentAttribute.getOption(\"attributeLabel\");\n          }\n          templateInfo.content[attributeId] = {};\n          templateInfo.content[attributeId].attributeValue = {\n            value: null, // No value for the moment. Value will be set by array view with default values\n            displayValue: \"\"\n          };\n          templateInfo.content[attributeId].label = attributeLabel;\n          templateInfo.content[attributeId].htmlContent =\n            '<div class=\"dcpCustomTemplate--row dcpArray__content__cell dcpAttribute__content\" data-displaylabel=\"false\" data-attrid=\"' +\n            attributeId +\n            '\"/>';\n        });\n\n      if (extraKeys && extraKeys.attribute && extraKeys.attribute.rows) {\n        _.each(\n          extraKeys.attribute.rows,\n          function attributeTemplategetLineInfoEach(extraValues, extraKey) {\n            templateInfo[extraKey] = extraValues[index];\n          }\n        );\n      }\n\n      return templateInfo;\n    },\n\n    /**\n     * Extract rows template line to customLineTemplate\n     * @param attrModel\n     * @private\n     * @returns {{attribute: {rows: Function}}}\n     */\n    extractRow: function attributeTemplateExtractRow(attrModel) {\n      var scope = this;\n      var info;\n\n      info = {\n        attribute: {\n          rows: function attributeTemplateExtractRowContent() {\n            return function attributeTemplate_getRowContent(text) {\n              scope.customLineTemplate = text.trim();\n            };\n          }\n        }\n      };\n      info.attributes = {};\n      info.attributes[attrModel.id] = info.attributes;\n      return info;\n    },\n\n    /**\n     * Construct custom line (declared in vArray::render and used in wArray::_getLineContent)\n     * @param index\n     * @param attrModel\n     * @returns {*|HTMLElement}\n     */\n    customArrayRowView: function attributeTemplateCustomArrayRowView(\n      index,\n      attrModel\n    ) {\n      var $render;\n\n      // Extract line to customLineTemplate variable\n      Mustache.render(\n        attrModel.getOption(\"template\") || \"\",\n        this.extractRow(attrModel)\n      );\n      $render = $(\n        Mustache.render(\n          this.customLineTemplate || \"\",\n          this.getLineInfo(attrModel, index)\n        )\n      );\n\n      return $render;\n    },\n\n    /**\n     * Get element where custom template will be inserted (htmlContent and htmlView)\n     * @param attributeModel\n     * @param displayLabel\n     * @param originalView\n     * @private\n     * @returns {string}\n     */\n    getCustomTemplate: function attributeTemplategetCustomTemplate(\n      attributeModel,\n      displayLabel,\n      originalView\n    ) {\n      if (attributeModel.get(\"mode\") === \"hidden\") {\n        return \"\";\n      }\n      return (\n        '<div class=\"dcpCustomTemplate--content ' +\n        (displayLabel\n          ? \"dcpCustomTemplate--content--view\"\n          : \"dcpCustomTemplate--content--value\") +\n        '\" data-displaylabel=\"' +\n        (displayLabel ? \"true\" : \"false\") +\n        '\" data-originalview=\"' +\n        (originalView ? \"true\" : \"false\") +\n        '\" data-attrid=\"' +\n        attributeModel.id +\n        '\"/>'\n      );\n    },\n\n    /**\n     * Extract dcpArray__tools from content array template\n     * @param attributeModel\n     * @private\n     * @returns {*}\n     */\n    getArrayTools: function attributeTemplateGetArrayTools(attributeModel) {\n      var tpls = attributeModel.getTemplates().attribute[\n        attributeModel.get(\"type\")\n      ];\n      if (tpls && tpls.content) {\n        return $(Mustache.render(tpls.content || \"\", { tools: true }))\n          .find(\".dcpArray__tools\")\n          .get(0).outerHTML;\n      }\n      return \"no tools\";\n    },\n\n    /**\n     * Extract dcpArray__content__toolCell from line array template\n     * @param attributeModel\n     * @private\n     * @returns {*}\n     */\n    getRowTool: function attributeTemplateGetRowTool(attributeModel) {\n      var templates = attributeModel.getTemplates().attribute[\n        attributeModel.get(\"type\")\n      ];\n      var tool = \"\";\n      if (templates && templates.line) {\n        tool = $(\n          Mustache.render(templates.line || \"\", {\n            tools: true,\n            lineCid: _.uniqueId(attributeModel.id)\n          })\n        )\n          .find(\".dcpArray__toolCell\")\n          .html();\n      }\n      return tool;\n    },\n\n    /**\n     * Get data for mustache \"rows\" variable\n     * @param attributeModel\n     * @private\n     * @returns {Array}\n     */\n    getArrayRowInfo: function attributeTemplategetArrayRowInfo(attributeModel) {\n      var rows = [];\n      var line = this.getRowTool(attributeModel);\n\n      attributeModel\n        .get(\"content\")\n        .each(function attributeTemplate_eachContent(currentAttribute) {\n          var values;\n          var attributeId = currentAttribute.id;\n          var attributeLabel = currentAttribute.get(\"label\");\n          if (!currentAttribute.isDisplayable()) {\n            return;\n          }\n\n          if (currentAttribute.getOption(\"attributeLabel\")) {\n            attributeLabel = currentAttribute.getOption(\"attributeLabel\");\n          }\n          values = currentAttribute.get(\"attributeValue\");\n          _.each(values, function attributeTemplategetArrayRowInfoEach(\n            singleValue,\n            index\n          ) {\n            if (_.isUndefined(rows[index])) {\n              rows[index] = { content: {} };\n            }\n            rows[index].index = index;\n            rows[index].content[attributeId] = {\n              label: attributeLabel,\n              attributeValue: singleValue,\n              htmlContent:\n                '<div class=\"dcpCustomTemplate--row dcpArray__content__cell dcpAttribute__content\"  data-attrid=\"' +\n                currentAttribute.id +\n                '\"/>'\n            };\n\n            rows[index].rowTools = line;\n          });\n        });\n\n      return rows;\n    },\n\n    renderClickDesc: function($tip, nsOn) {\n      $tip\n        .on(\"click\" + nsOn, function vAttributeShowDesc(event) {\n          event.stopPropagation();\n          $(this).tooltip(\"toggle\");\n        })\n        .one(\"show.bs.tooltip\", function wDescTooltip() {\n          var tipElement = $(this).data(\"bs.tooltip\").tip;\n          if (tipElement) {\n            $(tipElement).addClass(\"dcpAttribute__description-info\");\n          }\n        })\n        .one(\"shown.bs.tooltip\", function wDescTooltip() {\n          var tipElement = $(this).data(\"bs.tooltip\").tip;\n          if (tipElement) {\n            $(tipElement)\n              .find(\".tooltip-inner\")\n              .prepend(\n                '<span class=\"btn btn-secondary button-close-error\"><span class=\"fa fa-times\" />&nbsp;</span>'\n              );\n\n            $(tipElement).on(\n              \"click\" + nsOn,\n              \".button-close-error\",\n              function vAttributeCloseDesc(event) {\n                event.stopPropagation();\n                $(tipElement).tooltip(\"hide\");\n              }\n            );\n          }\n        });\n    },\n\n    /**\n     * Insert attribute description\n     * @param attributeView Backbone view\n     * @param $customElement specific other DOM element instead of default element view\n     */\n    insertDescription: function attributeTemplateInsertDescription(\n      attributeView,\n      $customElement\n    ) {\n      var data = attributeView.model.toData(null, true);\n\n      if (!data.renderOptions.description) {\n        return;\n      }\n      var descriptionTemplate;\n      var $tip;\n      var nsOn = \".v\" + attributeView.model.cid;\n      var $viewElement = $customElement ? $customElement : attributeView.$el;\n      var isFrame = $viewElement.hasClass(\"dcpFrame\");\n      var isArray = $viewElement.hasClass(\"dcpArray\");\n      var isArrayHead = $viewElement.hasClass(\"dcpArray__head__cell\");\n      var isArrayCell = $viewElement.hasClass(\"dcpArray__cell\");\n      var isAttribute = $viewElement.hasClass(\"dcpAttribute\");\n      var isTabContent = $viewElement.hasClass(\"dcpTab__content\");\n      var isTabLabel = $viewElement.hasClass(\"dcpTab__label\");\n      var $descriptionElement;\n\n      descriptionTemplate = attributeView.model.getTemplates().attribute\n        .description;\n      data.renderOptions.description.htmlContentRender = Mustache.render(\n        data.renderOptions.description.htmlContent,\n        data\n      );\n      data.renderOptions.description.htmlTitleRender = Mustache.render(\n        data.renderOptions.description.htmlTitle,\n        data\n      );\n\n      $descriptionElement = $(Mustache.render(descriptionTemplate || \"\", data));\n\n      if (isFrame) {\n        switch (data.renderOptions.description.position) {\n          case \"bottom\":\n            $viewElement.append($descriptionElement);\n            break;\n          case \"top\":\n          case \"topLabel\":\n            $viewElement.prepend($descriptionElement);\n            break;\n          case \"left\":\n            $viewElement\n              .find(\".dcpFrame__content\")\n              .addClass(\"dcpFrame__content--left-description\");\n            $descriptionElement.insertAfter(\n              $viewElement.find(\".dcpFrame__label\")\n            );\n            break;\n          case \"right\":\n            // Need to add class because no have css selector\n            $viewElement.append($descriptionElement);\n            $viewElement\n              .find(\".dcpFrame__content\")\n              .addClass(\"dcpFrame__content--right-description\");\n            break;\n          case \"bottomLabel\":\n            $descriptionElement.insertAfter(\n              $viewElement.find(\".dcpFrame__label\")\n            );\n            break;\n          case \"topValue\":\n            $viewElement\n              .find(\".dcpFrame__content\")\n              .prepend($descriptionElement);\n            break;\n          case \"bottomValue\":\n            $viewElement.find(\".dcpFrame__content\").append($descriptionElement);\n            break;\n          case \"click\":\n            $viewElement.append($descriptionElement);\n            $viewElement\n              .find(\".dcpFrame__label\")\n              .prepend(\n                '<a class=\"dcpAttribute__label_description\"><span class=\"fa fa-info-circle\"></span></a>'\n              );\n            $tip = $viewElement\n              .find(\".dcpFrame__label > .dcpAttribute__label_description\")\n              .tooltip({\n                html: true,\n                container: $viewElement,\n                title: $descriptionElement,\n                placement: \"auto\",\n                trigger: \"manual\"\n              });\n\n            this.renderClickDesc($tip, nsOn);\n        }\n      }\n      if (isTabContent || isTabLabel) {\n        switch (data.renderOptions.description.position) {\n          case \"top\":\n          case \"topValue\":\n            if (isTabContent) {\n              $viewElement.prepend($descriptionElement);\n            }\n            break;\n          case \"bottom\":\n          case \"bottomValue\":\n            if (isTabContent) {\n              $viewElement.append($descriptionElement);\n            }\n            break;\n          case \"click\":\n            if (isTabLabel) {\n              $viewElement.append($descriptionElement);\n              $viewElement\n                .find(\".dcpLabel__text\")\n                .prepend(\n                  '<a class=\"dcpAttribute__label_description\"><span class=\"fa fa-info-circle\"></span></a>'\n                );\n\n              $tip = $viewElement\n                .find(\".dcpAttribute__label_description\")\n                .tooltip({\n                  html: true,\n                  container: \".dcpDocument\",\n                  title: $descriptionElement,\n                  placement: \"auto\",\n                  trigger: \"manual\"\n                });\n\n              this.renderClickDesc($tip, nsOn);\n            }\n            break;\n\n          case \"bottomLabel\":\n          case \"topLabel\":\n          case \"left\":\n          case \"right\":\n            console.error(\n              'Cannot use \"' +\n                data.renderOptions.description.position +\n                '\" description position in tab attribute : ' +\n                data.id\n            );\n        }\n      }\n      if (isArray) {\n        switch (data.renderOptions.description.position) {\n          case \"top\":\n            $viewElement.prepend($descriptionElement);\n            break;\n          case \"topLabel\":\n            $viewElement.find(\".dcpArray__label\").prepend($descriptionElement);\n            break;\n          case \"bottomLabel\":\n            $viewElement.find(\".dcpArray__label\").append($descriptionElement);\n            break;\n          case \"topValue\":\n            $viewElement\n              .find(\".dcpArray__content\")\n              .prepend($descriptionElement);\n            break;\n          case \"bottomValue\":\n            $descriptionElement.insertAfter(\n              $viewElement.find(\".dcpArray__table\")\n            );\n            break;\n          case \"bottom\":\n            $viewElement.append($descriptionElement);\n            break;\n          case \"click\":\n            $viewElement.append($descriptionElement);\n            $viewElement\n              .find(\".dcpArray__label\")\n              .prepend(\n                '<a class=\"dcpAttribute__label_description\"><span class=\"fa fa-info-circle\"></span></a>'\n              );\n\n            $tip = $viewElement\n              .find(\".dcpArray__label > .dcpAttribute__label_description\")\n              .tooltip({\n                html: true,\n                container: $viewElement,\n                title: $descriptionElement,\n                placement: \"auto\",\n                trigger: \"manual\"\n              });\n\n            this.renderClickDesc($tip, nsOn);\n\n            break;\n\n          case \"left\":\n          case \"right\":\n            console.error(\n              'Cannot use \"' +\n                data.renderOptions.description.position +\n                '\" description position in array attribute : ' +\n                data.id\n            );\n            break;\n        }\n      }\n      if (isAttribute) {\n        switch (data.renderOptions.description.position) {\n          case \"bottom\":\n            $viewElement.append($descriptionElement);\n            break;\n          case \"top\":\n            $viewElement.prepend($descriptionElement);\n            break;\n          case \"left\":\n            $viewElement\n              .find(\".dcpAttribute__label\")\n              .append($descriptionElement);\n            break;\n          case \"right\":\n            $viewElement\n              .find(\".dcpAttribute__content\")\n              .append($descriptionElement);\n            break;\n          case \"topValue\":\n            $viewElement.prepend($descriptionElement);\n            $descriptionElement.addClass(\"dcpAttribute__right\");\n            break;\n          case \"topLabel\":\n            $viewElement.prepend($descriptionElement);\n            $descriptionElement.addClass(\"dcpAttribute__left\");\n            break;\n          case \"bottomValue\":\n            $viewElement.append($descriptionElement);\n            $descriptionElement.addClass(\"dcpAttribute__right\");\n            break;\n          case \"bottomLabel\":\n            $viewElement.append($descriptionElement);\n            $descriptionElement.addClass(\"dcpAttribute__left\");\n            break;\n          case \"click\":\n            $viewElement.append($descriptionElement);\n            $viewElement\n              .find(\".dcpAttribute__label\")\n              .append(\n                '<a class=\"dcpAttribute__label_description\"><span class=\"fa fa-info-circle\"></span></a>'\n              );\n\n            $tip = $viewElement\n              .find(\".dcpAttribute__label_description\")\n              .tooltip({\n                html: true,\n                container: $viewElement,\n                placement: \"auto\",\n                title: $descriptionElement,\n                trigger: \"manual\"\n              });\n\n            this.renderClickDesc($tip, nsOn);\n        }\n      }\n\n      if (isArrayCell || isArrayHead) {\n        switch (data.renderOptions.description.position) {\n          case \"topLabel\":\n          case \"top\":\n            if (isArrayHead) {\n              $viewElement.prepend($descriptionElement);\n            }\n            break;\n          case \"topValue\":\n            if (isArrayCell) {\n              $viewElement.prepend($descriptionElement);\n            }\n            break;\n          case \"bottomValue\":\n            if (isArrayCell) {\n              $viewElement.append($descriptionElement);\n            }\n            break;\n          case \"bottom\":\n          case \"bottomLabel\":\n            if (isArrayHead) {\n              $viewElement.append($descriptionElement);\n            }\n            break;\n          case \"click\":\n            if (isArrayHead) {\n              $viewElement.append($descriptionElement);\n              $viewElement.prepend(\n                '<a class=\"dcpAttribute__label_description\"><span class=\"fa fa-info-circle\"></span></a>'\n              );\n\n              $tip = $viewElement\n                .find(\".dcpAttribute__label_description\")\n                .tooltip({\n                  html: true,\n                  container: $viewElement,\n                  placement: \"auto\",\n                  title: $viewElement.find(\"> .dcpAttribute__description\"),\n                  trigger: \"manual\"\n                });\n\n              this.renderClickDesc($tip, nsOn);\n            }\n            break;\n          case \"left\":\n          case \"right\":\n            // No use in column context\n            console.error(\n              'Cannot use \"' +\n                data.renderOptions.description.position +\n                '\" description position in column attribute : ' +\n                data.id\n            );\n            break;\n        }\n      }\n      if (data.renderOptions.description.htmlContent) {\n        $viewElement.on(\n          \"click\" + nsOn,\n          \".dcpAttribute__description__title\",\n          function vAttribute_descToggle() {\n            var $contentElement = $(this)\n              .closest(\".dcpAttribute__description\")\n              .find(\".dcpAttribute__description__content\");\n            $(this)\n              .find(\".dcpAttribute__description__title__expand\")\n              .toggleClass(\"fa-caret-right fa-caret-down\");\n            $contentElement.slideToggle(200);\n          }\n        );\n        if (data.renderOptions.description.collapsed === true) {\n          $viewElement\n            .find(\".dcpAttribute__description__title__expand\")\n            .toggleClass(\"fa-caret-right fa-caret-down\");\n          $viewElement.find(\".dcpAttribute__description__content\").hide();\n        }\n      }\n    }\n  };\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7873a0bfc996b28836c2\n");

/***/ }),

/***/ "7b46bf7e05a6e22e32e7":
/*!**************************************************************!*\
  !*** ./src/vendor/Anakeen/DOCUMENT/IHM/models/mAttribute.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*global define*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! underscore */ \"8e08e542008e4aef1f58\"), __webpack_require__(/*! jquery */ \"127c8cf59f228bb01a21\"), __webpack_require__(/*! backbone */ \"1858b45bf48591489d06\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function require_mAttribute(\n  _,\n  $,\n  Backbone\n) {\n  \"use strict\";\n\n  return Backbone.Model.extend({\n    typeModel: \"ddui:attribute\",\n    defaults: {\n      title: null,\n      isValueAttribute: false,\n      parent: undefined,\n      mode: \"read\",\n      errorMessage: null\n    },\n\n    initialize: function mAttributeinitialize() {\n      this.listenTo(this, \"change:documentMode\", this._computeMode);\n      this.listenTo(this, \"change:visibility\", this._computeMode);\n      this._computeValueMode();\n      this._computeMode();\n      this.set(\"title\", this.id + \"(\" + this.get(\"label\") + \")\");\n      this.set(\"errorMessage\", null);\n    },\n\n    toData: function mAttributetoData(index, extended) {\n      var content = this.toJSON();\n      if (\n        typeof index !== \"undefined\" &&\n        index !== null &&\n        this.get(\"multiple\") === false\n      ) {\n        throw new Error(\"You need to be multiple\");\n      }\n      if (_.isNumber(index)) {\n        content.attributeValue = content.attributeValue\n          ? content.attributeValue[index]\n          : null;\n        content.index = index;\n      }\n      content.isDisplayable = this.isDisplayable();\n      content.content = [];\n      if (this.get(\"content\") && _.isFunction(this.get(\"content\").toData)) {\n        content.content = this.get(\"content\").toData(index, extended);\n      }\n      if (extended) {\n        content.renderOptions = this.getOptions();\n        content.labels = content.labels || {};\n        content.locale = this.getDocumentModel().get(\"locale\");\n        content.templates = {};\n        if (this.getTemplates().attribute) {\n          if (this.getTemplates().attribute[this.get(\"type\")]) {\n            content.templates = this.getTemplates().attribute[this.get(\"type\")];\n          } else {\n            // fallback in case of no specific templates\n            content.templates = this.getTemplates().attribute[\"default\"];\n          }\n        }\n        content.deleteButton = true;\n        content.sourceValues = this.get(\"enumItems\");\n        content.sourceUri = this.get(\"enumUrl\");\n        if (!content.templates.label) {\n          content.templates.label = this.getTemplates().attribute.label;\n        }\n      }\n      return content;\n    },\n\n    isDisplayable: function mAttributeisDisplayable() {\n      var canBeDisplayable;\n      if (this.get(\"mode\") === \"hidden\") {\n        return false;\n      }\n      if (this.get(\"isValueAttribute\")) {\n        if (this.get(\"mode\") === \"read\") {\n          if (this.getOption(\"showEmptyContent\") !== null) {\n            return true;\n          }\n          if (\n            this.get(\"visibility\") === \"S\" &&\n            this.getDocumentModel().get(\"renderMode\") === \"edit\"\n          ) {\n            return true;\n          }\n\n          canBeDisplayable =\n            this.get(\"attributeValue\") &&\n            this.get(\"attributeValue\").value !== null;\n          if (_.isArray(this.get(\"attributeValue\"))) {\n            canBeDisplayable =\n              _.isArray(this.get(\"attributeValue\")) &&\n              this.get(\"attributeValue\").length > 0;\n          }\n          return canBeDisplayable;\n        } else if (this.get(\"mode\") === \"write\") {\n          return true;\n        }\n      }\n      if (this.get(\"content\").length === 0) {\n        return false;\n      }\n      if (this.getOption(\"showEmptyContent\") === null) {\n        if (this.get(\"content\").some) {\n          return this.get(\"content\").some(function mAttribute_checkDisplayable(\n            value\n          ) {\n            return value.isDisplayable();\n          });\n        }\n        return false;\n      }\n      return true;\n    },\n\n    hasMultipleOption: function mAttributehasMultipleOption() {\n      return (\n        this.attributes.options && this.attributes.options.multiple === \"yes\"\n      );\n    },\n\n    isDoubleMultiple: function mAttributehasMultipleOption() {\n      return (\n        this.hasMultipleOption() && this.getParent().get(\"type\") === \"array\"\n      );\n    },\n\n    getParent: function mAttributegetParent() {\n      if (this.attributes.parent) {\n        return this.getDocumentModel()\n          .get(\"attributes\")\n          .get(this.attributes.parent);\n      }\n      return null;\n    },\n\n    hasValueChanged: function mAttributehasReallyChanged() {\n      return (\n        this.get(\"attributeValue\") &&\n        ((this.get(\"attributeValue\").value !== undefined &&\n          ((this._initialAttributeValue || {}).value || \"\") !==\n            (this.get(\"attributeValue\").value || \"\")) ||\n          !_.isEqual(\n            _.pluck(_.flatten(this._initialAttributeValue), \"value\"),\n            _.pluck(_.flatten(this.get(\"attributeValue\")), \"value\")\n          ))\n      );\n    },\n\n    _computeMode: function mAttribute_computeMode() {\n      var visibility = this.get(\"visibility\"),\n        documentMode = this.collection.renderMode;\n      if (visibility === \"H\" || visibility === \"I\") {\n        this.set(\"mode\", \"hidden\");\n        return;\n      }\n      if (documentMode === \"view\") {\n        if (visibility === \"O\") {\n          this.set(\"mode\", \"hidden\");\n          return;\n        }\n        if (\n          this.get(\"isValueAttribute\") &&\n          (_.isEmpty(this.get(\"attributeValue\")) ||\n            _.isUndefined(\n              this.get(\"attributeValue\") ||\n                this.get(\"attributeValue\").value === null\n            ))\n        ) {\n          if (this.getOption(\"showEmptyContent\") === null) {\n            this.set(\"mode\", \"hidden\");\n            return;\n          }\n        }\n        this.set(\"mode\", \"read\");\n        return;\n      }\n      if (documentMode === \"edit\") {\n        if (visibility === \"W\" || visibility === \"O\") {\n          this.set(\"mode\", \"write\");\n          return;\n        }\n        if (visibility === \"R\") {\n          this.set(\"mode\", \"hidden\");\n          return;\n        }\n        if (visibility === \"R\" || visibility === \"S\") {\n          this.set(\"mode\", \"read\");\n          return;\n        }\n        if (visibility === \"U\") {\n          this.set(\"mode\", \"write\");\n          this.set(\"addTool\", false);\n          return;\n        }\n      }\n      throw new Error(\n        \"unkown mode \" +\n          documentMode +\n          \" or visibility \" +\n          visibility +\n          \" \" +\n          this.get(\"id\")\n      );\n    },\n\n    _computeValueMode: function mAttribute_computeValueMode() {\n      var type = this.get(\"type\"),\n        visibility = this.get(\"visibility\");\n      if (\n        type === \"frame\" ||\n        type === \"array\" ||\n        type === \"tab\" ||\n        visibility === \"I\"\n      ) {\n        this.set(\"isValueAttribute\", false);\n      }\n    },\n    /**\n     * Return all options for an attribute\n     *\n     * @returns {{}}\n     */\n    getOptions: function mAttributegetOptions() {\n      var optionsCommon = {},\n        optionsValue = {},\n        optionsAttribute = {},\n        renderOptions,\n        labels = {};\n      this._options = this._options || false;\n\n      if (this._options === false) {\n        renderOptions = this.collection.renderOptions;\n        if (renderOptions.common) {\n          optionsCommon = renderOptions.common || {};\n          labels = _.clone(optionsCommon.translatedLabels) || {};\n        }\n\n        if (renderOptions.types) {\n          optionsValue = renderOptions.types[this.get(\"type\")] || {};\n          labels = _.extend(labels, _.clone(optionsValue.translatedLabels));\n        }\n        if (renderOptions.attributes) {\n          optionsAttribute = renderOptions.attributes[this.id] || {};\n        }\n        // labels must be merged\n        optionsAttribute.labels = _.extend(\n          labels,\n          optionsAttribute.translatedLabels\n        );\n        this._options = {};\n      }\n\n      _.extend(this._options, optionsCommon, optionsValue, optionsAttribute);\n\n      return this._options;\n    },\n\n    /**\n     * Get value for an option\n     *\n     * @param key option identifier\n     * @returns {*}\n     */\n    getOption: function mAttributegetOption(key) {\n      var options = this.getOptions();\n      if (typeof options[key] !== \"undefined\") {\n        return options[key];\n      }\n      return null;\n    },\n\n    /**\n     * Set the value of an option\n     *\n     * @param key\n     * @param value\n     * @returns {*}\n     */\n    setOption: function mAttributesetOption(key, value) {\n      var options = this.getOptions();\n      options[key] = value;\n      this._options = options;\n      this.trigger(\"optionModified\", key);\n      return this;\n    },\n\n    getDocumentModel: function mAttributegetDocumentModelgetDocumentModel() {\n      return this.collection.documentModel;\n    },\n\n    getTemplates: function mAttributegetTemplatesgetTemplates() {\n      var templates = this.getDocumentModel().get(\"templates\");\n      if (!templates) {\n        templates = window.dcp.templates;\n      }\n      return templates;\n    },\n\n    setErrorMessage: function mAttributesetErrorMessage(message, index) {\n      var parentId = this.get(\"parent\");\n      if (this.get(\"multiple\") && typeof index !== \"undefined\") {\n        var errorMessage = this.get(\"errorMessage\") || [];\n        // delete duplicate\n        _.reject(errorMessage, function mAttribute_reindex(indexMessage) {\n          return indexMessage.index === index;\n        });\n        this.set(\n          \"errorMessage\",\n          [{ message: message, index: index }].concat(errorMessage)\n        );\n      } else {\n        this.set(\"errorMessage\", message);\n      }\n      if (parentId) {\n        // Propagate error message on parent structure\n        var parentModel = this.getDocumentModel()\n          .get(\"attributes\")\n          .get(parentId);\n        if (parentModel) {\n          parentModel.setErrorMessage(message);\n        }\n      }\n    },\n\n    checkConstraint: function mAttributecheckConstraint() {\n      return true;\n    },\n\n    haveView: function mAttributeHaveView() {\n      var view = { haveView: false, elements: $() };\n      this.trigger(\"haveView\", view);\n      return view;\n    },\n    /**\n     * Attribute model are not linked to REST element so always new\n     * @returns {boolean}\n     */\n    isNew: function mAttribute_isNew() {\n      return true;\n    }\n  });\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7b46bf7e05a6e22e32e7\n");

/***/ }),

/***/ "7c75186b9433869ef678":
/*!******************************************************************************!*\
  !*** ./src/vendor/Anakeen/DOCUMENT/IHM/widgets/attributes/double/wDouble.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function umdRequire(root, factory) {\n  \"use strict\";\n\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ \"127c8cf59f228bb01a21\"), __webpack_require__(/*! dcpDocument/widgets/attributes/int/wInt */ \"95a79e27bcf315df846c\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(window, function require_double($) {\n  \"use strict\";\n\n  $.widget(\"dcp.dcpDouble\", $.dcp.dcpInt, {\n    options: {\n      type: \"double\",\n      renderOptions: {\n        decimalPrecision: null, // unlimited precision\n        numberFormat: \"#,#.######################\"\n      }\n    },\n\n    _initDom: function wDoubleInitDom() {\n      if (\n        this.options.renderOptions.decimalPrecision !== null &&\n        this.options.renderOptions.decimalPrecision >= 0\n      ) {\n        // view decimal precision\n        this.options.renderOptions.numberFormat = \"#,#.\";\n        for (\n          var idx = 0;\n          idx < this.options.renderOptions.decimalPrecision;\n          idx++\n        ) {\n          this.options.renderOptions.numberFormat += \"0\";\n        }\n      }\n\n      this._super();\n    },\n    /**\n     * Get kendo option from normal options and from renderOptions.kendoNumeric\n     * @returns {*}\n     */\n    getKendoNumericOptions: function wDoubleGetKendoNumericOptions() {\n      var options = this._super(); // get from wInt\n      //Limits are linked to this bug => https://github.com/telerik/kendo-ui-core/issues/423\n      if (options.max === null) {\n        options.max = 9.99999e19;\n      }\n      if (options.min === null) {\n        options.min = -9.9999e19;\n      }\n      if (this.options.renderOptions.decimalPrecision !== null) {\n        options.decimals = this.options.renderOptions.decimalPrecision;\n      } else {\n        options.decimals = 20;\n      }\n      return options;\n    },\n\n    getType: function wDoubleGetType() {\n      return \"double\";\n    }\n  });\n\n  return $.fn.dcpDouble;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiN2M3NTE4NmI5NDMzODY5ZWY2NzguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdmVuZG9yL0FuYWtlZW4vRE9DVU1FTlQvSUhNL3dpZGdldHMvYXR0cmlidXRlcy9kb3VibGUvd0RvdWJsZS5qcz9jOGNiIl0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB1bWRSZXF1aXJlKHJvb3QsIGZhY3RvcnkpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKFtcImpxdWVyeVwiLCBcImRjcERvY3VtZW50L3dpZGdldHMvYXR0cmlidXRlcy9pbnQvd0ludFwiXSwgZmFjdG9yeSk7XG4gIH0gZWxzZSB7XG4gICAgLy9ub2luc3BlY3Rpb24gSlNVbnJlc29sdmVkVmFyaWFibGVcbiAgICBmYWN0b3J5KHdpbmRvdy5qUXVlcnkpO1xuICB9XG59KSh3aW5kb3csIGZ1bmN0aW9uIHJlcXVpcmVfZG91YmxlKCQpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgJC53aWRnZXQoXCJkY3AuZGNwRG91YmxlXCIsICQuZGNwLmRjcEludCwge1xuICAgIG9wdGlvbnM6IHtcbiAgICAgIHR5cGU6IFwiZG91YmxlXCIsXG4gICAgICByZW5kZXJPcHRpb25zOiB7XG4gICAgICAgIGRlY2ltYWxQcmVjaXNpb246IG51bGwsIC8vIHVubGltaXRlZCBwcmVjaXNpb25cbiAgICAgICAgbnVtYmVyRm9ybWF0OiBcIiMsIy4jIyMjIyMjIyMjIyMjIyMjIyMjIyMjXCJcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgX2luaXREb206IGZ1bmN0aW9uIHdEb3VibGVJbml0RG9tKCkge1xuICAgICAgaWYgKFxuICAgICAgICB0aGlzLm9wdGlvbnMucmVuZGVyT3B0aW9ucy5kZWNpbWFsUHJlY2lzaW9uICE9PSBudWxsICYmXG4gICAgICAgIHRoaXMub3B0aW9ucy5yZW5kZXJPcHRpb25zLmRlY2ltYWxQcmVjaXNpb24gPj0gMFxuICAgICAgKSB7XG4gICAgICAgIC8vIHZpZXcgZGVjaW1hbCBwcmVjaXNpb25cbiAgICAgICAgdGhpcy5vcHRpb25zLnJlbmRlck9wdGlvbnMubnVtYmVyRm9ybWF0ID0gXCIjLCMuXCI7XG4gICAgICAgIGZvciAoXG4gICAgICAgICAgdmFyIGlkeCA9IDA7XG4gICAgICAgICAgaWR4IDwgdGhpcy5vcHRpb25zLnJlbmRlck9wdGlvbnMuZGVjaW1hbFByZWNpc2lvbjtcbiAgICAgICAgICBpZHgrK1xuICAgICAgICApIHtcbiAgICAgICAgICB0aGlzLm9wdGlvbnMucmVuZGVyT3B0aW9ucy5udW1iZXJGb3JtYXQgKz0gXCIwXCI7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5fc3VwZXIoKTtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIEdldCBrZW5kbyBvcHRpb24gZnJvbSBub3JtYWwgb3B0aW9ucyBhbmQgZnJvbSByZW5kZXJPcHRpb25zLmtlbmRvTnVtZXJpY1xuICAgICAqIEByZXR1cm5zIHsqfVxuICAgICAqL1xuICAgIGdldEtlbmRvTnVtZXJpY09wdGlvbnM6IGZ1bmN0aW9uIHdEb3VibGVHZXRLZW5kb051bWVyaWNPcHRpb25zKCkge1xuICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLl9zdXBlcigpOyAvLyBnZXQgZnJvbSB3SW50XG4gICAgICAvL0xpbWl0cyBhcmUgbGlua2VkIHRvIHRoaXMgYnVnID0+IGh0dHBzOi8vZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLXVpLWNvcmUvaXNzdWVzLzQyM1xuICAgICAgaWYgKG9wdGlvbnMubWF4ID09PSBudWxsKSB7XG4gICAgICAgIG9wdGlvbnMubWF4ID0gOS45OTk5OWUxOTtcbiAgICAgIH1cbiAgICAgIGlmIChvcHRpb25zLm1pbiA9PT0gbnVsbCkge1xuICAgICAgICBvcHRpb25zLm1pbiA9IC05Ljk5OTllMTk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5vcHRpb25zLnJlbmRlck9wdGlvbnMuZGVjaW1hbFByZWNpc2lvbiAhPT0gbnVsbCkge1xuICAgICAgICBvcHRpb25zLmRlY2ltYWxzID0gdGhpcy5vcHRpb25zLnJlbmRlck9wdGlvbnMuZGVjaW1hbFByZWNpc2lvbjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9wdGlvbnMuZGVjaW1hbHMgPSAyMDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvcHRpb25zO1xuICAgIH0sXG5cbiAgICBnZXRUeXBlOiBmdW5jdGlvbiB3RG91YmxlR2V0VHlwZSgpIHtcbiAgICAgIHJldHVybiBcImRvdWJsZVwiO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuICQuZm4uZGNwRG91YmxlO1xufSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQSxXQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///7c75186b9433869ef678\n");

/***/ }),

/***/ "7e54fcb56e1bb81a7fb8":
/*!**************************************************************************!*\
  !*** ./src/vendor/Anakeen/DOCUMENT/IHM/widgets/attributes/date/wDate.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*global define */\n\n(function umdRequire(root, factory) {\n  \"use strict\";\n\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n      __webpack_require__(/*! jquery */ \"127c8cf59f228bb01a21\"),\n      __webpack_require__(/*! underscore */ \"8e08e542008e4aef1f58\"),\n      __webpack_require__(/*! mustache */ \"bcd31d01884fc294fd69\"),\n      __webpack_require__(/*! dcpDocument/widgets/attributes/text/wText */ \"f54cd12cb65078ca4c4a\"),\n      __webpack_require__(/*! kendo-culture-fr */ \"3d2e52a160dc74b891c1\")\n    ], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(window, function wDate($, _, Mustache) {\n  \"use strict\";\n\n  $.widget(\"dcp.dcpDate\", $.dcp.dcpText, {\n    options: {\n      type: \"date\",\n      minDate: new Date(1700, 0, 1),\n      renderOptions: {\n        kendoDateConfiguration: {\n          parseFormats: [\"yyyy-MM-dd\"],\n          format: null\n        }\n      },\n      labels: {\n        invalidDate: \"Invalid Date\"\n      }\n    },\n\n    kendoWidgetClass: \"kendoDatePicker\",\n\n    _initDom: function wDateInitDom() {\n      if (this.options.renderOptions.kendoDateConfiguration.format) {\n        this.options.attributeValue.displayValue = this.formatDate(\n          this.parseDate(this.options.attributeValue.value)\n        );\n      }\n      if (this.getMode() === \"read\") {\n        if (this.options.renderOptions.format) {\n          this.options.attributeValue.formatValue = Mustache.render(\n            this.options.renderOptions.format || \"\",\n            this.options.attributeValue\n          );\n        }\n      }\n      this.element.addClass(\"dcpAttribute__content\");\n      this.element.attr(\"data-type\", this.getType());\n      this.element.attr(\"data-attrid\", this.options.id);\n      //noinspection JSPotentiallyInvalidConstructorUsage,JSAccessibilityCheck\n      $.dcp.dcpAttribute.prototype._initDom.apply(this, []);\n\n      this.kendoWidget = this.element.find(\".dcpAttribute__value--edit\");\n\n      if (this.kendoWidget.length) {\n        if (this.options.hasAutocomplete) {\n          this.activateAutocomplete(this.kendoWidget);\n        } else {\n          this._activateDate(this.kendoWidget);\n        }\n      }\n\n      if (\n        this.element.find(\".dcpAttribute__content__buttons button\").length === 0\n      ) {\n        this.element\n          .find(\".k-picker-wrap\")\n          .addClass(\"dcpAttribute__content__nobutton\");\n      }\n    },\n\n    _initChangeEvent: function wDate_initChangeEvent() {\n      // set by widget if no autocomplete\n      if (this.options.hasAutocomplete) {\n        this._super();\n      }\n    },\n\n    setValue: function wDateSetValue(value) {\n      // this._super.(value);\n      // Don't call dcpText::setValue()\n\n      var originalValue, originalDate;\n      value = _.clone(value);\n      if (_.has(value, \"value\") && !_.has(value, \"displayValue\")) {\n        value.displayValue = this.formatDate(this.parseDate(value.value));\n      } else {\n        if (this.options.renderOptions.kendoDateConfiguration.format) {\n          value.displayValue = this.formatDate(this.parseDate(value.value));\n        }\n      }\n\n      //noinspection JSPotentiallyInvalidConstructorUsage\n      $.dcp.dcpAttribute.prototype.setValue.call(this, value);\n\n      if (this.getMode() === \"write\") {\n        originalValue = this.convertDateToPseudoIsoString(\n          this.kendoWidget.data(this.kendoWidgetClass).value()\n        );\n        // : explicit lazy equal\n        //noinspection JSHint, EqualityComparisonWithCoercionJS\n        if (originalValue != value.value) {\n          if (value.value) {\n            originalDate = new Date(value.value);\n            if (!isNaN(originalDate.getTime())) {\n              this.kendoWidget.data(this.kendoWidgetClass).value(originalDate);\n            }\n          } else {\n            this.getContentElements().val(\"\");\n          }\n          // Modify value only if different\n          if (originalValue || value.value) {\n            this.flashElement();\n          }\n        }\n      } else if (this.getMode() === \"read\") {\n        this.getContentElements().text(value.displayValue);\n      } else {\n        throw new Error(\n          \"Attribute \" + this.options.id + \" unkown mode \" + this.getMode()\n        );\n      }\n    },\n\n    _activateDate: function wDateSetValueActivateDate(inputValue) {\n      var currentWidget = this;\n      var kOptions = this.getKendoOptions();\n\n      kOptions.change = function wDateChange() {\n        if (this.value() !== null) {\n          // only valid date are setted\n          // wrong date are set by blur event\n          var isoDate = currentWidget.convertDateToPseudoIsoString(\n            this.value()\n          );\n          // Need to set by widget to use raw date\n          currentWidget.setValue({\n            value: isoDate,\n            displayValue: inputValue.val()\n          });\n        }\n      };\n\n      inputValue.kendoDatePicker(kOptions);\n\n      // Workaround for date paste : change event is not trigger in this case\n      inputValue.on(\"paste\" + this.eventNamespace, function wDatePaste() {\n        var $input = $(this);\n        _.defer(function wDatePasteAfter() {\n          // set Value after\n          inputValue.data(\"kendoDatePicker\").value($input.val().trim());\n          inputValue.data(\"kendoDatePicker\").trigger(\"change\");\n        });\n      });\n\n      this._controlDate(inputValue);\n    },\n\n    _controlDate: function wDateControlDate(inputValue) {\n      var currentWidget = this;\n      inputValue.on(\n        \"blur\" + this.eventNamespace,\n        function validateDate(/*event*/) {\n          var dateValue = $(this)\n            .val()\n            .trim();\n\n          if (currentWidget.invalidDate) {\n            currentWidget.setError(null); // clear Error before\n            currentWidget.invalidDate = false;\n          }\n\n          currentWidget._setVisibilitySavingMenu(\"visible\");\n\n          if (dateValue) {\n            if (!currentWidget.parseDate(dateValue)) {\n              currentWidget._setVisibilitySavingMenu(\"disabled\");\n              _.defer(function wDateFocus() {\n                currentWidget._getFocusInput().focus();\n              });\n              currentWidget.invalidDate = true;\n              currentWidget.setError(currentWidget.options.labels.invalidDate);\n            }\n          }\n        }\n      );\n    },\n\n    formatDate: function wDateFormatDate(value) {\n      if (this.options.renderOptions.kendoDateConfiguration.format) {\n        return kendo.toString(\n          value,\n          this.options.renderOptions.kendoDateConfiguration.format\n        );\n      }\n      return kendo.toString(value, \"d\");\n    },\n\n    parseDate: function wDateParseDate(value) {\n      var parseFormat = this.options.renderOptions.kendoDateConfiguration\n        .parseFormats;\n      var goodDate = kendo.parseDate(value);\n      if (goodDate) {\n        return goodDate;\n      }\n      if (this.options.renderOptions.kendoDateConfiguration.format) {\n        parseFormat.push(\n          this.options.renderOptions.kendoDateConfiguration.format\n        );\n      }\n      return kendo.parseDate(value, parseFormat);\n    },\n\n    convertDateToPseudoIsoString: function wDateconvertDateToPseudoIsoString(\n      dateObject\n    ) {\n      if (dateObject && _.isDate(dateObject)) {\n        return (\n          dateObject.getFullYear() +\n          \"-\" +\n          this.padNumber(dateObject.getMonth() + 1) +\n          \"-\" +\n          this.padNumber(dateObject.getDate())\n        );\n      }\n      return \"\";\n    },\n\n    padNumber: function wDatePadNumber(number) {\n      if (number < 10) {\n        return \"0\" + number;\n      }\n      return number;\n    },\n\n    /**\n     * Get kendo option from normal options and from renderOptions.kendoNumeric\n     * @returns {*}\n     */\n    getKendoOptions: function wDategetKendoOptions() {\n      var currentWidget = this,\n        kendoOptions = {},\n        defaultOptions = {\n          min: this.options.minDate\n        };\n\n      if (\n        _.isObject(currentWidget.options.renderOptions.kendoDateConfiguration)\n      ) {\n        kendoOptions =\n          currentWidget.options.renderOptions.kendoDateConfiguration;\n      }\n\n      return _.extend(defaultOptions, kendoOptions);\n    },\n\n    close: function wDate_close() {\n      if (this.kendoWidget.data(this.kendoWidgetClass)) {\n        this.kendoWidget.data(this.kendoWidgetClass).close();\n      }\n      return this._super();\n    },\n\n    _destroy: function wDateDestroy() {\n      if (this.kendoWidget.data(this.kendoWidgetClass)) {\n        this.kendoWidget.data(this.kendoWidgetClass).destroy();\n      }\n      this._super();\n    }\n  });\n\n  return $.fn.dcpDate;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7e54fcb56e1bb81a7fb8\n");

/***/ }),

/***/ "7e8010bf5f211813538c":
/*!*****************************************************************************!*\
  !*** ./src/vendor/Anakeen/DOCUMENT/IHM/views/attributes/tab/vTabContent.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*global define, console*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n  __webpack_require__(/*! jquery */ \"127c8cf59f228bb01a21\"),\n  __webpack_require__(/*! underscore */ \"8e08e542008e4aef1f58\"),\n  __webpack_require__(/*! backbone */ \"1858b45bf48591489d06\"),\n  __webpack_require__(/*! mustache */ \"bcd31d01884fc294fd69\"),\n  __webpack_require__(/*! dcpDocument/views/attributes/frame/vFrame */ \"9fad28b160b8ea467ae3\"),\n  __webpack_require__(/*! dcpDocument/views/document/attributeTemplate */ \"7873a0bfc996b28836c2\"),\n  __webpack_require__(/*! dcpDocument/i18n/documentCatalog */ \"c58409cf810742518d6e\")\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function vTabContent(\n  $,\n  _,\n  Backbone,\n  Mustache,\n  ViewAttributeFrame,\n  attributeTemplate,\n  i18n\n) {\n  \"use strict\";\n\n  return Backbone.View.extend({\n    tagName: \"div\",\n\n    className: \"dcpTab__content\",\n    customView: false,\n\n    initialize: function vTabContentInitialize(options) {\n      this.listenTo(this.model, \"change:label\", this.updateLabel);\n      this.listenTo(this.model.get(\"content\"), \"add\", this.render);\n      this.listenTo(this.model.get(\"content\"), \"remove\", this.render);\n      this.listenTo(this.model.get(\"content\"), \"reset\", this.render);\n      this.listenTo(this.model, \"cleanView\", this.remove);\n      this.listenTo(this.model, \"destroy\", this.remove);\n      this.listenTo(this.model, \"showTab\", this.renderContent);\n      this.listenTo(this.model, \"hide\", this.hide);\n      this.listenTo(this.model, \"show\", this.show);\n      this.listenTo(this.model, \"haveView\", this._identifyView);\n      this.initializeContent = options.initializeContent;\n      this.initializing = false;\n      this.options = options;\n    },\n\n    render: function vTabContentRender() {\n      var currentView = this;\n      return new Promise(\n        _.bind(function vTabContentRender_Promise(resolve, reject) {\n          try {\n            var hasOneContent;\n            currentView.$el\n              .empty()\n              .append(\n                $(\n                  '<div class=\"dcpTab__content--loading\"><span class=\"fa fa-spinner fa-spin\"></span>' +\n                    i18n.___(\"Displaying\", \"ddui\") +\n                    \"</div>\"\n                )\n              );\n            currentView.$el.attr(\"id\", currentView.model.id);\n            currentView.$el.attr(\"data-attrid\", currentView.model.id);\n\n            hasOneContent = currentView.model\n              .get(\"content\")\n              .some(function vTabContentIsDisplayable(value) {\n                return value.isDisplayable();\n              });\n\n            if (!hasOneContent) {\n              currentView.$el.append(\n                currentView.model.getOption(\"showEmptyContent\")\n              );\n              currentView.$el.removeClass(\"dcpTab__content--loading\");\n              currentView.model.trigger(\"renderDone\", {\n                model: currentView.model,\n                $el: currentView.$el\n              });\n              currentView.propageShowTab();\n              resolve(currentView);\n            } else {\n              if (currentView.initializeContent === true) {\n                currentView\n                  .renderContent()\n                  .then(function vTabContentRender_renderContent() {\n                    resolve(currentView);\n                  })\n                  .catch(reject);\n              } else {\n                resolve(currentView);\n              }\n            }\n          } catch (e) {\n            reject(e);\n          }\n        }, this)\n      );\n    },\n\n    renderContent: function vTabContentRenderContent(event) {\n      var currentView = this;\n      var pTabRenderPromise = new Promise(\n        _.bind(function vTabContentRenderContent_Promise(resolve, reject) {\n          var customRender,\n            $content = currentView.$el,\n            model = currentView.model,\n            promisesFrame = [];\n          if (currentView.initializing === false) {\n            currentView.initializing = true;\n            currentView.$el.empty();\n            if (currentView.originalView !== true) {\n              if (currentView.model.getOption(\"template\")) {\n                customRender = attributeTemplate.renderCustomView(\n                  currentView.model\n                );\n                currentView.customView = customRender.$el;\n                promisesFrame.push(customRender.promise);\n              }\n            }\n            if (currentView.customView) {\n              $content.append(currentView.customView);\n            } else {\n              currentView.model\n                .get(\"content\")\n                .each(function vTabContentRenderContent(currentAttr) {\n                  var view;\n                  try {\n                    if (!currentAttr.isDisplayable()) {\n                      return;\n                    }\n                    if (currentAttr.get(\"type\") === \"frame\") {\n                      view = new ViewAttributeFrame({ model: currentAttr });\n                      promisesFrame.push(view.render());\n                      $content.append(view.$el);\n                    } else {\n                      //noinspection ExceptionCaughtLocallyJS\n                      throw new Error(\n                        \"unkown type \" +\n                          currentAttr.get(\"type\") +\n                          \" for id \" +\n                          currentAttr.id +\n                          \" for tab \" +\n                          model.id\n                      );\n                    }\n                  } catch (e) {\n                    if (window.dcp.logger) {\n                      window.dcp.logger(e);\n                    } else {\n                      console.error(e);\n                    }\n                  }\n                });\n              attributeTemplate.insertDescription(this);\n              if (currentView.model.getOption(\"responsiveColumns\")) {\n                currentView.responsiveColumns();\n              }\n            }\n\n            Promise.all(promisesFrame)\n              .then(function tabAllFramesRenderDone() {\n                currentView.$el.removeClass(\"dcpTab__content--loading\");\n                currentView.model.trigger(\"renderDone\", {\n                  model: currentView.model,\n                  $el: currentView.$el\n                });\n\n                resolve();\n              })\n              .catch(reject);\n          } else {\n            resolve();\n          }\n          currentView.model.getDocumentModel().trigger(\"redrawErrorMessages\");\n          currentView.model.get(\"content\").propageEvent(\"resize\");\n        }, this)\n      );\n\n      pTabRenderPromise.then(function() {\n        if (currentView.model.isRealSelected) {\n          currentView.model.trigger(\n            \"attributeAfterTabSelect\",\n            event,\n            currentView.model.id\n          );\n          currentView.model.isRealSelected = false;\n        }\n      });\n\n      return pTabRenderPromise;\n    },\n\n    /**\n     * Add responsive column classes according to responsiveColumns render option\n     */\n    responsiveColumns: function vTab_responsiveColumns() {\n      var responseColumnsDefs = this.model.getOption(\"responsiveColumns\") || [];\n      var _this = this;\n      var $fake = $(\"<div/>\").css({\n        position: \"absolute\",\n        top: 0,\n        overflow: \"hidden\"\n      });\n      var $fakeWidth = $(\"<div/>\");\n      var setResponsiveClasse = function vTab_setResponsiveClasses() {\n        var fWidth = $(_this.$el).width();\n        var matchesResponsive = 0;\n\n        _.each(responseColumnsDefs, function vTab_setResponsiveClasses(\n          responseColumnsInfo\n        ) {\n          if (\n            fWidth >= responseColumnsInfo.minAbsWidth &&\n            fWidth < responseColumnsInfo.maxAbsWidth\n          ) {\n            _this.$el.addClass(\"dcp-column--\" + responseColumnsInfo.number);\n            matchesResponsive = responseColumnsInfo.number;\n            if (responseColumnsInfo.grow === true) {\n              _this.$el.addClass(\"dcp-column--grow\");\n            } else {\n              _this.$el.removeClass(\"dcp-column--grow\");\n            }\n          } else {\n            _this.$el.removeClass(\"dcp-column--\" + responseColumnsInfo.number);\n          }\n        });\n\n        if (matchesResponsive > 1) {\n          _this.$el.addClass(\"dcp-column\");\n        } else {\n          _this.$el.removeClass(\"dcp-column\");\n        }\n        if (matchesResponsive !== _this.frameIsResized) {\n          _this.frameIsResized = matchesResponsive;\n          // Send resize to frame in case they have also responsive.\n          _this.model.get(\"content\").propageEvent(\"resize\");\n        }\n      };\n\n      $(\"body\").append($fake.append($fakeWidth));\n\n      // Compute absolute width\n      _.each(responseColumnsDefs, function vTab_computeResponsiveWidth(\n        responseColumnsInfo\n      ) {\n        if (!responseColumnsInfo.minWidth) {\n          responseColumnsInfo.minAbsWidth = 0;\n        } else {\n          $fakeWidth.width(responseColumnsInfo.minWidth);\n          responseColumnsInfo.minAbsWidth = $fakeWidth.width();\n        }\n\n        if (!responseColumnsInfo.maxWidth) {\n          responseColumnsInfo.maxAbsWidth = Infinity;\n        } else {\n          $fakeWidth.width(responseColumnsInfo.maxWidth);\n          responseColumnsInfo.maxAbsWidth = $fakeWidth.width();\n        }\n      });\n\n      $fake.remove();\n      $(window).on(\"resize.v\" + this.model.cid, setResponsiveClasse);\n      _.defer(setResponsiveClasse);\n    },\n    propageShowTab: function vTabContentPropageShowTab() {\n      this.model.get(\"content\").propageEvent(\"showTab\");\n    },\n\n    updateLabel: function vTabContentUpdateLabel() {\n      this.$el.find(\".dcpFrame__label\").text(this.model.get(\"label\"));\n    },\n\n    hide: function vTabContentHide() {\n      this.$el.hide();\n    },\n\n    show: function vTabContentShow() {\n      this.$el.show();\n    },\n\n    _identifyView: function vAttribute_identifyView(event) {\n      event.haveView = true;\n      //Add the pointer to the current jquery element to a list passed by the event\n      event.elements = event.elements.add(this.$el);\n    },\n    remove: function vFrame_Remove() {\n      $(window).off(\".v\" + this.model.cid);\n\n      return Backbone.View.prototype.remove.call(this);\n    }\n  });\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7e8010bf5f211813538c\n");

/***/ }),

/***/ "82bccd253212b9f33353":
/*!****************************************************************************!*\
  !*** ./src/vendor/Anakeen/DOCUMENT/IHM/views/workflow/vTransitionGraph.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n  __webpack_require__(/*! underscore */ \"8e08e542008e4aef1f58\"),\n  __webpack_require__(/*! jquery */ \"127c8cf59f228bb01a21\"),\n  __webpack_require__(/*! backbone */ \"1858b45bf48591489d06\"),\n  __webpack_require__(/*! mustache */ \"bcd31d01884fc294fd69\"),\n  __webpack_require__(/*! dcpDocument/i18n/documentCatalog */ \"c58409cf810742518d6e\"),\n  __webpack_require__(/*! dcpDocument/widgets/window/wDialog */ \"3120d707f7fb455e9bc0\")\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function vTransitionGraph(_, $, Backbone, Mustache, i18n) {\n  \"use strict\";\n\n  return Backbone.View.extend({\n    messages: [],\n\n    remove: function vTransitionGraph_remove() {\n      if (this.transitionGraphWindow && this.$el.data(\"kendoWindow\")) {\n        this.transitionGraphWindow.destroy();\n      }\n\n      //Call parent\n      Backbone.View.prototype.remove.apply(this, arguments);\n    },\n\n    /**\n     * Render the document view\n     * @returns {*}\n     */\n    render: function vTransitionGraph_render() {\n      var currentView = this;\n\n      this.$el.append(\n        $(\n          '<div class=\"dcpTransitionGraph--from\"/>' +\n            '<div class=\"dcpTransitionGraph--to\"/>'\n        )\n      );\n\n      this.displayCurrentState();\n\n      // Init Events\n      this.$el.on(\n        \"mouseover\",\n        \".dcpTransitionGraph--to .dcpTransitionGraph_state\",\n        function vTransitionGraph_renderMouseOver() {\n          var to = $(this).data(\"to\");\n          if (!$(this).hasClass(\"dcpTransitionGraph_state--error\")) {\n            currentView.$el\n              .find(\".dcpTransitionGraph__arrow--\" + to)\n              .addClass(\"dcpTransitionGraph__arrow--selected\");\n          }\n        }\n      );\n      this.$el.on(\n        \"mouseout\",\n        \".dcpTransitionGraph--to .dcpTransitionGraph_state\",\n        function vTransitionGraph_renderMouseOut() {\n          currentView.$el\n            .find(\".dcpTransitionGraph__arrow\")\n            .removeClass(\"dcpTransitionGraph__arrow--selected\");\n        }\n      );\n\n      this.$el.on(\n        \"click\",\n        \".dcpTransitionGraph--to .dcpTransitionGraph_state\",\n        function vTransitionGraph_renderClick() {\n          var to = $(this).data(\"to\");\n\n          if (!$(this).hasClass(\"dcpTransitionGraph_state--error\")) {\n            currentView.$el.trigger(\"viewTransition\", to);\n          }\n        }\n      );\n\n      this.$el.find(\".dcpTransitionGraph_state \").tooltip({\n        placement: \"top\",\n        html: true\n      });\n\n      if (!this.transitionGraphWindow) {\n        this.transitionGraphWindow = this.$el\n          .dcpDialog({\n            window: {\n              height: \"auto\",\n              width: \"600px\",\n              close: function registerCloseEvent() {\n                currentView.remove();\n              },\n              activate: function vTransitionGraph_windowActivate() {\n                currentView.displayArrows();\n                currentView.previousHeight = currentView.$el.height();\n              },\n              resize: function vTransitionGraph_windowResize() {\n                var isMaximized = currentView.$el.data(\"kendoWindow\").options\n                  .isMaximized;\n\n                if (!isMaximized && currentView.isMaximizedNow) {\n                  currentView.$el\n                    .find(\".dcpTransitionGraph--to\")\n                    .height(currentView.previousHeight);\n                  currentView.$el\n                    .find(\".dcpTransitionGraph--from\")\n                    .height(currentView.previousHeight);\n                  currentView.isMaximizedNow = false;\n                }\n                currentView.displayArrows();\n\n                if (!isMaximized) {\n                  currentView.previousHeight = currentView.$el.height();\n                } else {\n                  currentView.isMaximizedNow = true;\n                }\n              }\n            }\n          })\n          .data(\"dcpDialog\");\n        this.$el.kendoWindow(\"title\", i18n.___(\"Transition Graph\", \"ddui\"));\n        this.transitionGraphWindow.open();\n      }\n    },\n\n    displayCurrentState: function vTransitionGraphdisplayCurrentState() {\n      var tpl =\n        '<div class=\"dcpTransitionGraph_state {{#transition.error}}dcpTransitionGraph_state--error{{/transition.error}}\" ' +\n        'data-to=\"{{id}}\" {{^transition.error}}title=\"{{title}}{{transition.error}}\"{{/transition.error}} style=\"border-color:{{color}}\">{{displayValue}}' +\n        '{{#transition.error}}<div class=\"dcpTransitionGraph_state_message\">{{transition.error}}</div>{{/transition.error}}' +\n        \"</div>\";\n      var states = this.model.get(\"workflowStates\");\n      var currentState = this.model.get(\"state\");\n      var currentView = this;\n\n      this.$el.find(\".dcpTransitionGraph--from\").append(\n        Mustache.render(\n          tpl || \"\",\n          _.extend(currentState, {\n            title: i18n.___(\"Current workflow activity\", \"ddui\")\n          })\n        )\n      );\n\n      _.each(states, function vTransitionGraphdisplayCurrentStateEach(item) {\n        if (item.transition && item.transition.authorized !== false) {\n          item.title = Mustache.render(\n            i18n.___(\"Next step. Apply transition {{label}}\", \"ddui\"),\n            { label: item.transition.label }\n          );\n          currentView.$el\n            .find(\".dcpTransitionGraph--to\")\n            .append(Mustache.render(tpl, item));\n        }\n      });\n    },\n\n    displayArrows: function vTransitionGraph_displayArrows() {\n      var states = this.model.get(\"workflowStates\");\n      var currentView = this;\n\n      var $from = this.$el.find(\n        \".dcpTransitionGraph--from .dcpTransitionGraph_state\"\n      );\n      var $to;\n\n      this.$el.find(\".dcpTransitionGraph__arrow\").remove();\n\n      this.$el.find(\".dcpTransitionGraph--to\").height(this.$el.height());\n      this.$el.find(\".dcpTransitionGraph--from\").height(this.$el.height());\n      _.each(states, function vTransitionGraph_connectStates(item) {\n        if (item.transition && item.transition.authorized !== false) {\n          $to = currentView.$el.find(\n            \".dcpTransitionGraph--to .dcpTransitionGraph_state[data-to=\" +\n              item.id +\n              \"]\"\n          );\n          currentView.connect(\n            $from.get(0),\n            $to.get(0),\n            2,\n            item\n          );\n        }\n      });\n    },\n\n    /**\n     * return element top, left, width, height\n     * @param el DOM element\n     * @returns {*|jQuery}\n     */\n    getOffset: function vTransitionGraph_getOffset(el) {\n      var offset = $(el).offset();\n      offset.width = $(el).outerWidth();\n      offset.height = $(el).outerHeight();\n      return offset;\n    },\n\n    /**\n     * draw a line connecting elements\n     * @param div1 from div\n     * @param div2 to div\n     * @param thickness of the arraow\n     * @param item transition info\n     */\n    connect: function vTransitionGraph_connect(div1, div2, thickness, item) {\n      var off1 = this.getOffset(div1);\n      var off2 = this.getOffset(div2);\n      var origin = this.getOffset(this.$el.get(0));\n\n      // bottom right\n      var x2 = off1.left + off1.width - origin.left;\n      var y2 = off1.top + off1.height / 2 - origin.top;\n      // top right\n      var x1 = off2.left - origin.left;\n      var y1 = off2.top + off2.height / 2 - origin.top;\n      // distance\n      var length = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n      // center\n      var cx = (x1 + x2) / 2 - length / 2;\n      var cy = (y1 + y2) / 2 - thickness / 2;\n      // angle\n      var angle = Math.atan2(y1 - y2, x1 - x2) * (180 / Math.PI);\n\n      //\n      var htmlLine =\n        \"<div class='dcpTransitionGraph__arrow dcpTransitionGraph__arrow--{{id}} {{#error}}dcpTransitionGraph__arrow--error{{/error}}' \" +\n        \"style=' height:{{height}}px;left:{{left}}px; top:{{top}}px; width:{{width}}px;\" +\n        \" -moz-transform:rotate({{angle}}deg); \" +\n        \"-webkit-transform:rotate({{angle}}deg); \" +\n        \"-o-transform:rotate({{angle}}deg); \" +\n        \"-ms-transform:rotate({{angle}}deg); \" +\n        \"transform:rotate({{angle}}deg);' ><div class='dcpTransitionGraph__arrow__label'>{{text}}</div>\" +\n        \"<span class='dcpTransitionGraph__arrow__end fa fa-2x fa-caret-right'></span> </div>\";\n\n      this.$el.append(\n        Mustache.render(htmlLine || \"\", {\n          error: item.transition.error,\n          id: item.id,\n          height: thickness,\n          width: length,\n          top: cy,\n          left: cx,\n          angle: angle,\n          text: item.transition.label\n        })\n      );\n    }\n  });\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///82bccd253212b9f33353\n");

/***/ }),

/***/ "87b90efb87e69cd98fc1":
/*!**************************************************************************!*\
  !*** ./src/vendor/Anakeen/DOCUMENT/IHM/widgets/attributes/time/wTime.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function umdRequire(root, factory) {\n  \"use strict\";\n\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n      __webpack_require__(/*! jquery */ \"127c8cf59f228bb01a21\"),\n      __webpack_require__(/*! underscore */ \"8e08e542008e4aef1f58\"),\n      __webpack_require__(/*! dcpDocument/widgets/attributes/date/wDate */ \"7e54fcb56e1bb81a7fb8\")\n    ], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(window, function($, _) {\n  \"use strict\";\n\n  $.widget(\"dcp.dcpTime\", $.dcp.dcpDate, {\n    options: {\n      type: \"time\",\n      renderOptions: {\n        kendoTimeConfiguration: {\n          timeDataFormat: [\"HH:mm\", \"HH:mm:ss\"]\n        }\n      }\n    },\n\n    kendoWidgetClass: \"kendoTimePicker\",\n\n    _initDom: function wTimeInitDom() {\n      if (this.options.renderOptions.kendoTimeConfiguration.format) {\n        this.options.attributeValue.displayValue = this.formatDate(\n          this.parseDate(this.options.attributeValue.value)\n        );\n      }\n      this._super();\n    },\n\n    _activateDate: function wTimeActivateDate(inputValue) {\n      var scope = this;\n      var kOptions = this.getKendoOptions();\n\n      kOptions.change = function() {\n        // only valid date are setted\n        // wrong date are set by blur event\n        var isoDate = scope.convertDateToPseudoIsoString(this.value());\n        // Need to set by widget to use raw date\n\n        scope.setValue({ value: isoDate, displayValue: inputValue.val() });\n      };\n      inputValue.kendoTimePicker(kOptions);\n      this._controlDate(inputValue);\n      if (this.options.attributeValue && this.options.attributeValue.value) {\n        this.setValue(this.options.attributeValue);\n      }\n    },\n\n    setValue: function wTimeSetValue(value) {\n      var originalValue;\n\n      value = _.clone(value);\n\n      if (_.has(value, \"value\") && !_.has(value, \"displayValue\")) {\n        value.displayValue = this.formatDate(this.parseDate(value.value));\n      }\n\n      $.dcp.dcpAttribute.prototype.setValue.call(this, value);\n\n      if (this.getMode() === \"write\") {\n        originalValue = this.convertDateToPseudoIsoString(\n          this.kendoWidget.data(this.kendoWidgetClass).value()\n        );\n        // : explicit lazy equal\n        //noinspection JSHint\n        if (originalValue != value.value) {\n          if (value.value) {\n            this.kendoWidget.data(this.kendoWidgetClass).value(value.value);\n          } else {\n            this.getContentElements().val(\"\");\n          }\n          // Modify value only if different\n          this.flashElement();\n        }\n      } else if (this.getMode() === \"read\") {\n        this.getContentElements().text(value.displayValue);\n      } else {\n        throw new Error(\n          \"Attribute \" + this.options.id + \" unkown mode \" + this.getMode()\n        );\n      }\n    },\n\n    getValue: function wTimeGetValue() {\n      var value = this._super();\n      if (value.value && _.isDate(value.value)) {\n        value.value = this.convertDateToPseudoIsoString(value.value);\n      }\n      return value;\n    },\n\n    convertDateToPseudoIsoString: function wTimeConvertDateToPseudoIsoString(\n      date\n    ) {\n      if (_.isDate(date)) {\n        return (\n          this.padNumber(date.getHours()) +\n          \":\" +\n          this.padNumber(date.getMinutes())\n        );\n      }\n      return \"\";\n    },\n\n    formatDate: function wTimeFormatDate(value) {\n      if (this.options.renderOptions.kendoTimeConfiguration.format) {\n        return kendo.toString(\n          value,\n          this.options.renderOptions.kendoTimeConfiguration.format\n        );\n      }\n      return kendo.toString(value, \"T\");\n    },\n\n    parseDate: function wTimeParseDate(value) {\n      return kendo.parseDate(\n        value,\n        this.options.renderOptions.kendoTimeConfiguration.timeDataFormat\n      );\n    },\n\n    /**\n     * Get kendo option from normal options and from renderOptions.kendoNumeric\n     * @returns {*}\n     */\n    getKendoOptions: function wTimegetKendoOptions() {\n      var scope = this,\n        kendoOptions = {},\n        defaultOptions = {\n          min: this.options.minDate\n        };\n\n      if (_.isObject(scope.options.renderOptions.kendoTimeConfiguration)) {\n        kendoOptions = scope.options.renderOptions.kendoTimeConfiguration;\n      }\n\n      return _.extend(defaultOptions, kendoOptions);\n    },\n\n    getType: function() {\n      return \"time\";\n    }\n  });\n\n  return $.fn.dcpTime;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODdiOTBlZmI4N2U2OWNkOThmYzEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdmVuZG9yL0FuYWtlZW4vRE9DVU1FTlQvSUhNL3dpZGdldHMvYXR0cmlidXRlcy90aW1lL3dUaW1lLmpzPzI4OWEiXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHVtZFJlcXVpcmUocm9vdCwgZmFjdG9yeSkge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoW1xuICAgICAgXCJqcXVlcnlcIixcbiAgICAgIFwidW5kZXJzY29yZVwiLFxuICAgICAgXCJkY3BEb2N1bWVudC93aWRnZXRzL2F0dHJpYnV0ZXMvZGF0ZS93RGF0ZVwiXG4gICAgXSwgZmFjdG9yeSk7XG4gIH0gZWxzZSB7XG4gICAgLy9ub2luc3BlY3Rpb24gSlNVbnJlc29sdmVkVmFyaWFibGVcbiAgICBmYWN0b3J5KHdpbmRvdy5qUXVlcnksIHdpbmRvdy5fKTtcbiAgfVxufSkod2luZG93LCBmdW5jdGlvbigkLCBfKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gICQud2lkZ2V0KFwiZGNwLmRjcFRpbWVcIiwgJC5kY3AuZGNwRGF0ZSwge1xuICAgIG9wdGlvbnM6IHtcbiAgICAgIHR5cGU6IFwidGltZVwiLFxuICAgICAgcmVuZGVyT3B0aW9uczoge1xuICAgICAgICBrZW5kb1RpbWVDb25maWd1cmF0aW9uOiB7XG4gICAgICAgICAgdGltZURhdGFGb3JtYXQ6IFtcIkhIOm1tXCIsIFwiSEg6bW06c3NcIl1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBrZW5kb1dpZGdldENsYXNzOiBcImtlbmRvVGltZVBpY2tlclwiLFxuXG4gICAgX2luaXREb206IGZ1bmN0aW9uIHdUaW1lSW5pdERvbSgpIHtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMucmVuZGVyT3B0aW9ucy5rZW5kb1RpbWVDb25maWd1cmF0aW9uLmZvcm1hdCkge1xuICAgICAgICB0aGlzLm9wdGlvbnMuYXR0cmlidXRlVmFsdWUuZGlzcGxheVZhbHVlID0gdGhpcy5mb3JtYXREYXRlKFxuICAgICAgICAgIHRoaXMucGFyc2VEYXRlKHRoaXMub3B0aW9ucy5hdHRyaWJ1dGVWYWx1ZS52YWx1ZSlcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX3N1cGVyKCk7XG4gICAgfSxcblxuICAgIF9hY3RpdmF0ZURhdGU6IGZ1bmN0aW9uIHdUaW1lQWN0aXZhdGVEYXRlKGlucHV0VmFsdWUpIHtcbiAgICAgIHZhciBzY29wZSA9IHRoaXM7XG4gICAgICB2YXIga09wdGlvbnMgPSB0aGlzLmdldEtlbmRvT3B0aW9ucygpO1xuXG4gICAgICBrT3B0aW9ucy5jaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gb25seSB2YWxpZCBkYXRlIGFyZSBzZXR0ZWRcbiAgICAgICAgLy8gd3JvbmcgZGF0ZSBhcmUgc2V0IGJ5IGJsdXIgZXZlbnRcbiAgICAgICAgdmFyIGlzb0RhdGUgPSBzY29wZS5jb252ZXJ0RGF0ZVRvUHNldWRvSXNvU3RyaW5nKHRoaXMudmFsdWUoKSk7XG4gICAgICAgIC8vIE5lZWQgdG8gc2V0IGJ5IHdpZGdldCB0byB1c2UgcmF3IGRhdGVcblxuICAgICAgICBzY29wZS5zZXRWYWx1ZSh7IHZhbHVlOiBpc29EYXRlLCBkaXNwbGF5VmFsdWU6IGlucHV0VmFsdWUudmFsKCkgfSk7XG4gICAgICB9O1xuICAgICAgaW5wdXRWYWx1ZS5rZW5kb1RpbWVQaWNrZXIoa09wdGlvbnMpO1xuICAgICAgdGhpcy5fY29udHJvbERhdGUoaW5wdXRWYWx1ZSk7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmF0dHJpYnV0ZVZhbHVlICYmIHRoaXMub3B0aW9ucy5hdHRyaWJ1dGVWYWx1ZS52YWx1ZSkge1xuICAgICAgICB0aGlzLnNldFZhbHVlKHRoaXMub3B0aW9ucy5hdHRyaWJ1dGVWYWx1ZSk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIHNldFZhbHVlOiBmdW5jdGlvbiB3VGltZVNldFZhbHVlKHZhbHVlKSB7XG4gICAgICB2YXIgb3JpZ2luYWxWYWx1ZTtcblxuICAgICAgdmFsdWUgPSBfLmNsb25lKHZhbHVlKTtcblxuICAgICAgaWYgKF8uaGFzKHZhbHVlLCBcInZhbHVlXCIpICYmICFfLmhhcyh2YWx1ZSwgXCJkaXNwbGF5VmFsdWVcIikpIHtcbiAgICAgICAgdmFsdWUuZGlzcGxheVZhbHVlID0gdGhpcy5mb3JtYXREYXRlKHRoaXMucGFyc2VEYXRlKHZhbHVlLnZhbHVlKSk7XG4gICAgICB9XG5cbiAgICAgICQuZGNwLmRjcEF0dHJpYnV0ZS5wcm90b3R5cGUuc2V0VmFsdWUuY2FsbCh0aGlzLCB2YWx1ZSk7XG5cbiAgICAgIGlmICh0aGlzLmdldE1vZGUoKSA9PT0gXCJ3cml0ZVwiKSB7XG4gICAgICAgIG9yaWdpbmFsVmFsdWUgPSB0aGlzLmNvbnZlcnREYXRlVG9Qc2V1ZG9Jc29TdHJpbmcoXG4gICAgICAgICAgdGhpcy5rZW5kb1dpZGdldC5kYXRhKHRoaXMua2VuZG9XaWRnZXRDbGFzcykudmFsdWUoKVxuICAgICAgICApO1xuICAgICAgICAvLyA6IGV4cGxpY2l0IGxhenkgZXF1YWxcbiAgICAgICAgLy9ub2luc3BlY3Rpb24gSlNIaW50XG4gICAgICAgIGlmIChvcmlnaW5hbFZhbHVlICE9IHZhbHVlLnZhbHVlKSB7XG4gICAgICAgICAgaWYgKHZhbHVlLnZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLmtlbmRvV2lkZ2V0LmRhdGEodGhpcy5rZW5kb1dpZGdldENsYXNzKS52YWx1ZSh2YWx1ZS52YWx1ZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZ2V0Q29udGVudEVsZW1lbnRzKCkudmFsKFwiXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBNb2RpZnkgdmFsdWUgb25seSBpZiBkaWZmZXJlbnRcbiAgICAgICAgICB0aGlzLmZsYXNoRWxlbWVudCgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuZ2V0TW9kZSgpID09PSBcInJlYWRcIikge1xuICAgICAgICB0aGlzLmdldENvbnRlbnRFbGVtZW50cygpLnRleHQodmFsdWUuZGlzcGxheVZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICBcIkF0dHJpYnV0ZSBcIiArIHRoaXMub3B0aW9ucy5pZCArIFwiIHVua293biBtb2RlIFwiICsgdGhpcy5nZXRNb2RlKClcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgZ2V0VmFsdWU6IGZ1bmN0aW9uIHdUaW1lR2V0VmFsdWUoKSB7XG4gICAgICB2YXIgdmFsdWUgPSB0aGlzLl9zdXBlcigpO1xuICAgICAgaWYgKHZhbHVlLnZhbHVlICYmIF8uaXNEYXRlKHZhbHVlLnZhbHVlKSkge1xuICAgICAgICB2YWx1ZS52YWx1ZSA9IHRoaXMuY29udmVydERhdGVUb1BzZXVkb0lzb1N0cmluZyh2YWx1ZS52YWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSxcblxuICAgIGNvbnZlcnREYXRlVG9Qc2V1ZG9Jc29TdHJpbmc6IGZ1bmN0aW9uIHdUaW1lQ29udmVydERhdGVUb1BzZXVkb0lzb1N0cmluZyhcbiAgICAgIGRhdGVcbiAgICApIHtcbiAgICAgIGlmIChfLmlzRGF0ZShkYXRlKSkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIHRoaXMucGFkTnVtYmVyKGRhdGUuZ2V0SG91cnMoKSkgK1xuICAgICAgICAgIFwiOlwiICtcbiAgICAgICAgICB0aGlzLnBhZE51bWJlcihkYXRlLmdldE1pbnV0ZXMoKSlcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBcIlwiO1xuICAgIH0sXG5cbiAgICBmb3JtYXREYXRlOiBmdW5jdGlvbiB3VGltZUZvcm1hdERhdGUodmFsdWUpIHtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMucmVuZGVyT3B0aW9ucy5rZW5kb1RpbWVDb25maWd1cmF0aW9uLmZvcm1hdCkge1xuICAgICAgICByZXR1cm4ga2VuZG8udG9TdHJpbmcoXG4gICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgdGhpcy5vcHRpb25zLnJlbmRlck9wdGlvbnMua2VuZG9UaW1lQ29uZmlndXJhdGlvbi5mb3JtYXRcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBrZW5kby50b1N0cmluZyh2YWx1ZSwgXCJUXCIpO1xuICAgIH0sXG5cbiAgICBwYXJzZURhdGU6IGZ1bmN0aW9uIHdUaW1lUGFyc2VEYXRlKHZhbHVlKSB7XG4gICAgICByZXR1cm4ga2VuZG8ucGFyc2VEYXRlKFxuICAgICAgICB2YWx1ZSxcbiAgICAgICAgdGhpcy5vcHRpb25zLnJlbmRlck9wdGlvbnMua2VuZG9UaW1lQ29uZmlndXJhdGlvbi50aW1lRGF0YUZvcm1hdFxuICAgICAgKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogR2V0IGtlbmRvIG9wdGlvbiBmcm9tIG5vcm1hbCBvcHRpb25zIGFuZCBmcm9tIHJlbmRlck9wdGlvbnMua2VuZG9OdW1lcmljXG4gICAgICogQHJldHVybnMgeyp9XG4gICAgICovXG4gICAgZ2V0S2VuZG9PcHRpb25zOiBmdW5jdGlvbiB3VGltZWdldEtlbmRvT3B0aW9ucygpIHtcbiAgICAgIHZhciBzY29wZSA9IHRoaXMsXG4gICAgICAgIGtlbmRvT3B0aW9ucyA9IHt9LFxuICAgICAgICBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgICAgICAgICBtaW46IHRoaXMub3B0aW9ucy5taW5EYXRlXG4gICAgICAgIH07XG5cbiAgICAgIGlmIChfLmlzT2JqZWN0KHNjb3BlLm9wdGlvbnMucmVuZGVyT3B0aW9ucy5rZW5kb1RpbWVDb25maWd1cmF0aW9uKSkge1xuICAgICAgICBrZW5kb09wdGlvbnMgPSBzY29wZS5vcHRpb25zLnJlbmRlck9wdGlvbnMua2VuZG9UaW1lQ29uZmlndXJhdGlvbjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF8uZXh0ZW5kKGRlZmF1bHRPcHRpb25zLCBrZW5kb09wdGlvbnMpO1xuICAgIH0sXG5cbiAgICBnZXRUeXBlOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBcInRpbWVcIjtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiAkLmZuLmRjcFRpbWU7XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0EsV0FHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///87b90efb87e69cd98fc1\n");

/***/ }),

/***/ "899d4bc6ec89ae64ab42":
/*!*********************************************************!*\
  !*** ./src/vendor/Anakeen/DOCUMENT/IHM/mainDocument.js ***!
  \*********************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ \"127c8cf59f228bb01a21\");\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);\n/**\n * Main bootstraper\n */\n/*global require, console*/\n\n\njquery__WEBPACK_IMPORTED_MODULE_0___default.a.get(\"api/v2/i18n/DOCUMENT\").done(function translationLoaded(catalog) {\n  //Trigger an event when translation loaded\n  window.dcp.i18n = catalog;\n\n  var _ = __webpack_require__(/*! underscore */ \"8e08e542008e4aef1f58\");\n  __webpack_require__(/*! dcpExternals/KendoUI/KendoUI */ \"59b870d5aad30b0e7e20\");\n  __webpack_require__(/*! dcpDocument/widgets/documentController/documentController */ \"cd42c09cb5294e18cda8\");\n\n  (\"use strict\");\n  console.timeEnd(\"js loading\");\n\n  var $document = jquery__WEBPACK_IMPORTED_MODULE_0___default()(\".document\"),\n    currentValues,\n    varWidgetValue = \"widgetValue\";\n\n  window.dcp = window.dcp || {};\n\n  window.dcp.documentReady = false;\n\n  if (!window.dcp.viewData && window.location.hash) {\n    currentValues = window.location.hash;\n    if (currentValues[0] === \"#\") {\n      currentValues = currentValues.slice(1);\n    }\n    if (currentValues.indexOf(varWidgetValue) === 0) {\n      try {\n        window.dcp.viewData = JSON.parse(\n          currentValues.slice(varWidgetValue.length)\n        );\n      } catch (ex1) {\n        try {\n          window.dcp.viewData = JSON.parse(\n            decodeURI(currentValues.slice(varWidgetValue.length))\n          );\n        } catch (ex2) {\n          $document.documentController(\"showMessage\", {\n            type: \"error\",\n            message: \"unable to retrieve document\"\n          });\n        }\n      }\n    }\n  }\n\n  window.dcp.triggerReload = function triggerReload() {\n    // Init bind events in case of use extern document controller\n    if (\n      window.documentLoaded &&\n      _.isFunction(window.documentLoaded) &&\n      !window.dcp.documentReady\n    ) {\n      window.documentLoaded($document, window.dcp.viewData);\n      window.dcp.documentReady = true;\n    }\n  };\n\n  if (window.dcp.viewData !== false && window.dcp.viewData.initid) {\n    $document.documentController(window.dcp.viewData);\n    $document.one(\"documentready\", function launchReady() {\n      window.dcp.triggerReload();\n      _.each(window.dcp.messages, function(msg) {\n        $document.documentController(\"showMessage\", {\n          type: msg.type,\n          message: msg.contentText\n        });\n      });\n    });\n  } else {\n    $document.documentController();\n    window.dcp.triggerReload();\n  }\n\n  window.dcp.document = $document;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODk5ZDRiYzZlYzg5YWU2NGFiNDIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdmVuZG9yL0FuYWtlZW4vRE9DVU1FTlQvSUhNL21haW5Eb2N1bWVudC5qcz83NGNhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTWFpbiBib290c3RyYXBlclxuICovXG4vKmdsb2JhbCByZXF1aXJlLCBjb25zb2xlKi9cbmltcG9ydCAkIGZyb20gXCJqcXVlcnlcIjtcblxuJC5nZXQoXCJhcGkvdjIvaTE4bi9ET0NVTUVOVFwiKS5kb25lKGZ1bmN0aW9uIHRyYW5zbGF0aW9uTG9hZGVkKGNhdGFsb2cpIHtcbiAgLy9UcmlnZ2VyIGFuIGV2ZW50IHdoZW4gdHJhbnNsYXRpb24gbG9hZGVkXG4gIHdpbmRvdy5kY3AuaTE4biA9IGNhdGFsb2c7XG5cbiAgdmFyIF8gPSByZXF1aXJlKFwidW5kZXJzY29yZVwiKTtcbiAgcmVxdWlyZShcImRjcEV4dGVybmFscy9LZW5kb1VJL0tlbmRvVUlcIik7XG4gIHJlcXVpcmUoXCJkY3BEb2N1bWVudC93aWRnZXRzL2RvY3VtZW50Q29udHJvbGxlci9kb2N1bWVudENvbnRyb2xsZXJcIik7XG5cbiAgKFwidXNlIHN0cmljdFwiKTtcbiAgY29uc29sZS50aW1lRW5kKFwianMgbG9hZGluZ1wiKTtcblxuICB2YXIgJGRvY3VtZW50ID0gJChcIi5kb2N1bWVudFwiKSxcbiAgICBjdXJyZW50VmFsdWVzLFxuICAgIHZhcldpZGdldFZhbHVlID0gXCJ3aWRnZXRWYWx1ZVwiO1xuXG4gIHdpbmRvdy5kY3AgPSB3aW5kb3cuZGNwIHx8IHt9O1xuXG4gIHdpbmRvdy5kY3AuZG9jdW1lbnRSZWFkeSA9IGZhbHNlO1xuXG4gIGlmICghd2luZG93LmRjcC52aWV3RGF0YSAmJiB3aW5kb3cubG9jYXRpb24uaGFzaCkge1xuICAgIGN1cnJlbnRWYWx1ZXMgPSB3aW5kb3cubG9jYXRpb24uaGFzaDtcbiAgICBpZiAoY3VycmVudFZhbHVlc1swXSA9PT0gXCIjXCIpIHtcbiAgICAgIGN1cnJlbnRWYWx1ZXMgPSBjdXJyZW50VmFsdWVzLnNsaWNlKDEpO1xuICAgIH1cbiAgICBpZiAoY3VycmVudFZhbHVlcy5pbmRleE9mKHZhcldpZGdldFZhbHVlKSA9PT0gMCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgd2luZG93LmRjcC52aWV3RGF0YSA9IEpTT04ucGFyc2UoXG4gICAgICAgICAgY3VycmVudFZhbHVlcy5zbGljZSh2YXJXaWRnZXRWYWx1ZS5sZW5ndGgpXG4gICAgICAgICk7XG4gICAgICB9IGNhdGNoIChleDEpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB3aW5kb3cuZGNwLnZpZXdEYXRhID0gSlNPTi5wYXJzZShcbiAgICAgICAgICAgIGRlY29kZVVSSShjdXJyZW50VmFsdWVzLnNsaWNlKHZhcldpZGdldFZhbHVlLmxlbmd0aCkpXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBjYXRjaCAoZXgyKSB7XG4gICAgICAgICAgJGRvY3VtZW50LmRvY3VtZW50Q29udHJvbGxlcihcInNob3dNZXNzYWdlXCIsIHtcbiAgICAgICAgICAgIHR5cGU6IFwiZXJyb3JcIixcbiAgICAgICAgICAgIG1lc3NhZ2U6IFwidW5hYmxlIHRvIHJldHJpZXZlIGRvY3VtZW50XCJcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHdpbmRvdy5kY3AudHJpZ2dlclJlbG9hZCA9IGZ1bmN0aW9uIHRyaWdnZXJSZWxvYWQoKSB7XG4gICAgLy8gSW5pdCBiaW5kIGV2ZW50cyBpbiBjYXNlIG9mIHVzZSBleHRlcm4gZG9jdW1lbnQgY29udHJvbGxlclxuICAgIGlmIChcbiAgICAgIHdpbmRvdy5kb2N1bWVudExvYWRlZCAmJlxuICAgICAgXy5pc0Z1bmN0aW9uKHdpbmRvdy5kb2N1bWVudExvYWRlZCkgJiZcbiAgICAgICF3aW5kb3cuZGNwLmRvY3VtZW50UmVhZHlcbiAgICApIHtcbiAgICAgIHdpbmRvdy5kb2N1bWVudExvYWRlZCgkZG9jdW1lbnQsIHdpbmRvdy5kY3Audmlld0RhdGEpO1xuICAgICAgd2luZG93LmRjcC5kb2N1bWVudFJlYWR5ID0gdHJ1ZTtcbiAgICB9XG4gIH07XG5cbiAgaWYgKHdpbmRvdy5kY3Audmlld0RhdGEgIT09IGZhbHNlICYmIHdpbmRvdy5kY3Audmlld0RhdGEuaW5pdGlkKSB7XG4gICAgJGRvY3VtZW50LmRvY3VtZW50Q29udHJvbGxlcih3aW5kb3cuZGNwLnZpZXdEYXRhKTtcbiAgICAkZG9jdW1lbnQub25lKFwiZG9jdW1lbnRyZWFkeVwiLCBmdW5jdGlvbiBsYXVuY2hSZWFkeSgpIHtcbiAgICAgIHdpbmRvdy5kY3AudHJpZ2dlclJlbG9hZCgpO1xuICAgICAgXy5lYWNoKHdpbmRvdy5kY3AubWVzc2FnZXMsIGZ1bmN0aW9uKG1zZykge1xuICAgICAgICAkZG9jdW1lbnQuZG9jdW1lbnRDb250cm9sbGVyKFwic2hvd01lc3NhZ2VcIiwge1xuICAgICAgICAgIHR5cGU6IG1zZy50eXBlLFxuICAgICAgICAgIG1lc3NhZ2U6IG1zZy5jb250ZW50VGV4dFxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgICRkb2N1bWVudC5kb2N1bWVudENvbnRyb2xsZXIoKTtcbiAgICB3aW5kb3cuZGNwLnRyaWdnZXJSZWxvYWQoKTtcbiAgfVxuXG4gIHdpbmRvdy5kY3AuZG9jdW1lbnQgPSAkZG9jdW1lbnQ7XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///899d4bc6ec89ae64ab42\n");

/***/ }),

/***/ "8e08e542008e4aef1f58":
/*!***********************************************!*\
  !*** ./node_modules/underscore/underscore.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, module) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;//     Underscore.js 1.9.1\n//     http://underscorejs.org\n//     (c) 2009-2018 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n//     Underscore may be freely distributed under the MIT license.\n\n(function() {\n\n  // Baseline setup\n  // --------------\n\n  // Establish the root object, `window` (`self`) in the browser, `global`\n  // on the server, or `this` in some virtual machines. We use `self`\n  // instead of `window` for `WebWorker` support.\n  var root = typeof self == 'object' && self.self === self && self ||\n            typeof global == 'object' && global.global === global && global ||\n            this ||\n            {};\n\n  // Save the previous value of the `_` variable.\n  var previousUnderscore = root._;\n\n  // Save bytes in the minified (but not gzipped) version:\n  var ArrayProto = Array.prototype, ObjProto = Object.prototype;\n  var SymbolProto = typeof Symbol !== 'undefined' ? Symbol.prototype : null;\n\n  // Create quick reference variables for speed access to core prototypes.\n  var push = ArrayProto.push,\n      slice = ArrayProto.slice,\n      toString = ObjProto.toString,\n      hasOwnProperty = ObjProto.hasOwnProperty;\n\n  // All **ECMAScript 5** native function implementations that we hope to use\n  // are declared here.\n  var nativeIsArray = Array.isArray,\n      nativeKeys = Object.keys,\n      nativeCreate = Object.create;\n\n  // Naked function reference for surrogate-prototype-swapping.\n  var Ctor = function(){};\n\n  // Create a safe reference to the Underscore object for use below.\n  var _ = function(obj) {\n    if (obj instanceof _) return obj;\n    if (!(this instanceof _)) return new _(obj);\n    this._wrapped = obj;\n  };\n\n  // Export the Underscore object for **Node.js**, with\n  // backwards-compatibility for their old module API. If we're in\n  // the browser, add `_` as a global object.\n  // (`nodeType` is checked to ensure that `module`\n  // and `exports` are not HTML elements.)\n  if ( true && !exports.nodeType) {\n    if ( true && !module.nodeType && module.exports) {\n      exports = module.exports = _;\n    }\n    exports._ = _;\n  } else {\n    root._ = _;\n  }\n\n  // Current version.\n  _.VERSION = '1.9.1';\n\n  // Internal function that returns an efficient (for current engines) version\n  // of the passed-in callback, to be repeatedly applied in other Underscore\n  // functions.\n  var optimizeCb = function(func, context, argCount) {\n    if (context === void 0) return func;\n    switch (argCount == null ? 3 : argCount) {\n      case 1: return function(value) {\n        return func.call(context, value);\n      };\n      // The 2-argument case is omitted because we’re not using it.\n      case 3: return function(value, index, collection) {\n        return func.call(context, value, index, collection);\n      };\n      case 4: return function(accumulator, value, index, collection) {\n        return func.call(context, accumulator, value, index, collection);\n      };\n    }\n    return function() {\n      return func.apply(context, arguments);\n    };\n  };\n\n  var builtinIteratee;\n\n  // An internal function to generate callbacks that can be applied to each\n  // element in a collection, returning the desired result — either `identity`,\n  // an arbitrary callback, a property matcher, or a property accessor.\n  var cb = function(value, context, argCount) {\n    if (_.iteratee !== builtinIteratee) return _.iteratee(value, context);\n    if (value == null) return _.identity;\n    if (_.isFunction(value)) return optimizeCb(value, context, argCount);\n    if (_.isObject(value) && !_.isArray(value)) return _.matcher(value);\n    return _.property(value);\n  };\n\n  // External wrapper for our callback generator. Users may customize\n  // `_.iteratee` if they want additional predicate/iteratee shorthand styles.\n  // This abstraction hides the internal-only argCount argument.\n  _.iteratee = builtinIteratee = function(value, context) {\n    return cb(value, context, Infinity);\n  };\n\n  // Some functions take a variable number of arguments, or a few expected\n  // arguments at the beginning and then a variable number of values to operate\n  // on. This helper accumulates all remaining arguments past the function’s\n  // argument length (or an explicit `startIndex`), into an array that becomes\n  // the last argument. Similar to ES6’s \"rest parameter\".\n  var restArguments = function(func, startIndex) {\n    startIndex = startIndex == null ? func.length - 1 : +startIndex;\n    return function() {\n      var length = Math.max(arguments.length - startIndex, 0),\n          rest = Array(length),\n          index = 0;\n      for (; index < length; index++) {\n        rest[index] = arguments[index + startIndex];\n      }\n      switch (startIndex) {\n        case 0: return func.call(this, rest);\n        case 1: return func.call(this, arguments[0], rest);\n        case 2: return func.call(this, arguments[0], arguments[1], rest);\n      }\n      var args = Array(startIndex + 1);\n      for (index = 0; index < startIndex; index++) {\n        args[index] = arguments[index];\n      }\n      args[startIndex] = rest;\n      return func.apply(this, args);\n    };\n  };\n\n  // An internal function for creating a new object that inherits from another.\n  var baseCreate = function(prototype) {\n    if (!_.isObject(prototype)) return {};\n    if (nativeCreate) return nativeCreate(prototype);\n    Ctor.prototype = prototype;\n    var result = new Ctor;\n    Ctor.prototype = null;\n    return result;\n  };\n\n  var shallowProperty = function(key) {\n    return function(obj) {\n      return obj == null ? void 0 : obj[key];\n    };\n  };\n\n  var has = function(obj, path) {\n    return obj != null && hasOwnProperty.call(obj, path);\n  }\n\n  var deepGet = function(obj, path) {\n    var length = path.length;\n    for (var i = 0; i < length; i++) {\n      if (obj == null) return void 0;\n      obj = obj[path[i]];\n    }\n    return length ? obj : void 0;\n  };\n\n  // Helper for collection methods to determine whether a collection\n  // should be iterated as an array or as an object.\n  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength\n  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094\n  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;\n  var getLength = shallowProperty('length');\n  var isArrayLike = function(collection) {\n    var length = getLength(collection);\n    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;\n  };\n\n  // Collection Functions\n  // --------------------\n\n  // The cornerstone, an `each` implementation, aka `forEach`.\n  // Handles raw objects in addition to array-likes. Treats all\n  // sparse array-likes as if they were dense.\n  _.each = _.forEach = function(obj, iteratee, context) {\n    iteratee = optimizeCb(iteratee, context);\n    var i, length;\n    if (isArrayLike(obj)) {\n      for (i = 0, length = obj.length; i < length; i++) {\n        iteratee(obj[i], i, obj);\n      }\n    } else {\n      var keys = _.keys(obj);\n      for (i = 0, length = keys.length; i < length; i++) {\n        iteratee(obj[keys[i]], keys[i], obj);\n      }\n    }\n    return obj;\n  };\n\n  // Return the results of applying the iteratee to each element.\n  _.map = _.collect = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length,\n        results = Array(length);\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      results[index] = iteratee(obj[currentKey], currentKey, obj);\n    }\n    return results;\n  };\n\n  // Create a reducing function iterating left or right.\n  var createReduce = function(dir) {\n    // Wrap code that reassigns argument variables in a separate function than\n    // the one that accesses `arguments.length` to avoid a perf hit. (#1991)\n    var reducer = function(obj, iteratee, memo, initial) {\n      var keys = !isArrayLike(obj) && _.keys(obj),\n          length = (keys || obj).length,\n          index = dir > 0 ? 0 : length - 1;\n      if (!initial) {\n        memo = obj[keys ? keys[index] : index];\n        index += dir;\n      }\n      for (; index >= 0 && index < length; index += dir) {\n        var currentKey = keys ? keys[index] : index;\n        memo = iteratee(memo, obj[currentKey], currentKey, obj);\n      }\n      return memo;\n    };\n\n    return function(obj, iteratee, memo, context) {\n      var initial = arguments.length >= 3;\n      return reducer(obj, optimizeCb(iteratee, context, 4), memo, initial);\n    };\n  };\n\n  // **Reduce** builds up a single result from a list of values, aka `inject`,\n  // or `foldl`.\n  _.reduce = _.foldl = _.inject = createReduce(1);\n\n  // The right-associative version of reduce, also known as `foldr`.\n  _.reduceRight = _.foldr = createReduce(-1);\n\n  // Return the first value which passes a truth test. Aliased as `detect`.\n  _.find = _.detect = function(obj, predicate, context) {\n    var keyFinder = isArrayLike(obj) ? _.findIndex : _.findKey;\n    var key = keyFinder(obj, predicate, context);\n    if (key !== void 0 && key !== -1) return obj[key];\n  };\n\n  // Return all the elements that pass a truth test.\n  // Aliased as `select`.\n  _.filter = _.select = function(obj, predicate, context) {\n    var results = [];\n    predicate = cb(predicate, context);\n    _.each(obj, function(value, index, list) {\n      if (predicate(value, index, list)) results.push(value);\n    });\n    return results;\n  };\n\n  // Return all the elements for which a truth test fails.\n  _.reject = function(obj, predicate, context) {\n    return _.filter(obj, _.negate(cb(predicate)), context);\n  };\n\n  // Determine whether all of the elements match a truth test.\n  // Aliased as `all`.\n  _.every = _.all = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length;\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      if (!predicate(obj[currentKey], currentKey, obj)) return false;\n    }\n    return true;\n  };\n\n  // Determine if at least one element in the object matches a truth test.\n  // Aliased as `any`.\n  _.some = _.any = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length;\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      if (predicate(obj[currentKey], currentKey, obj)) return true;\n    }\n    return false;\n  };\n\n  // Determine if the array or object contains a given item (using `===`).\n  // Aliased as `includes` and `include`.\n  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {\n    if (!isArrayLike(obj)) obj = _.values(obj);\n    if (typeof fromIndex != 'number' || guard) fromIndex = 0;\n    return _.indexOf(obj, item, fromIndex) >= 0;\n  };\n\n  // Invoke a method (with arguments) on every item in a collection.\n  _.invoke = restArguments(function(obj, path, args) {\n    var contextPath, func;\n    if (_.isFunction(path)) {\n      func = path;\n    } else if (_.isArray(path)) {\n      contextPath = path.slice(0, -1);\n      path = path[path.length - 1];\n    }\n    return _.map(obj, function(context) {\n      var method = func;\n      if (!method) {\n        if (contextPath && contextPath.length) {\n          context = deepGet(context, contextPath);\n        }\n        if (context == null) return void 0;\n        method = context[path];\n      }\n      return method == null ? method : method.apply(context, args);\n    });\n  });\n\n  // Convenience version of a common use case of `map`: fetching a property.\n  _.pluck = function(obj, key) {\n    return _.map(obj, _.property(key));\n  };\n\n  // Convenience version of a common use case of `filter`: selecting only objects\n  // containing specific `key:value` pairs.\n  _.where = function(obj, attrs) {\n    return _.filter(obj, _.matcher(attrs));\n  };\n\n  // Convenience version of a common use case of `find`: getting the first object\n  // containing specific `key:value` pairs.\n  _.findWhere = function(obj, attrs) {\n    return _.find(obj, _.matcher(attrs));\n  };\n\n  // Return the maximum element (or element-based computation).\n  _.max = function(obj, iteratee, context) {\n    var result = -Infinity, lastComputed = -Infinity,\n        value, computed;\n    if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {\n      obj = isArrayLike(obj) ? obj : _.values(obj);\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n        if (value != null && value > result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(v, index, list) {\n        computed = iteratee(v, index, list);\n        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {\n          result = v;\n          lastComputed = computed;\n        }\n      });\n    }\n    return result;\n  };\n\n  // Return the minimum element (or element-based computation).\n  _.min = function(obj, iteratee, context) {\n    var result = Infinity, lastComputed = Infinity,\n        value, computed;\n    if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {\n      obj = isArrayLike(obj) ? obj : _.values(obj);\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n        if (value != null && value < result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(v, index, list) {\n        computed = iteratee(v, index, list);\n        if (computed < lastComputed || computed === Infinity && result === Infinity) {\n          result = v;\n          lastComputed = computed;\n        }\n      });\n    }\n    return result;\n  };\n\n  // Shuffle a collection.\n  _.shuffle = function(obj) {\n    return _.sample(obj, Infinity);\n  };\n\n  // Sample **n** random values from a collection using the modern version of the\n  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).\n  // If **n** is not specified, returns a single random element.\n  // The internal `guard` argument allows it to work with `map`.\n  _.sample = function(obj, n, guard) {\n    if (n == null || guard) {\n      if (!isArrayLike(obj)) obj = _.values(obj);\n      return obj[_.random(obj.length - 1)];\n    }\n    var sample = isArrayLike(obj) ? _.clone(obj) : _.values(obj);\n    var length = getLength(sample);\n    n = Math.max(Math.min(n, length), 0);\n    var last = length - 1;\n    for (var index = 0; index < n; index++) {\n      var rand = _.random(index, last);\n      var temp = sample[index];\n      sample[index] = sample[rand];\n      sample[rand] = temp;\n    }\n    return sample.slice(0, n);\n  };\n\n  // Sort the object's values by a criterion produced by an iteratee.\n  _.sortBy = function(obj, iteratee, context) {\n    var index = 0;\n    iteratee = cb(iteratee, context);\n    return _.pluck(_.map(obj, function(value, key, list) {\n      return {\n        value: value,\n        index: index++,\n        criteria: iteratee(value, key, list)\n      };\n    }).sort(function(left, right) {\n      var a = left.criteria;\n      var b = right.criteria;\n      if (a !== b) {\n        if (a > b || a === void 0) return 1;\n        if (a < b || b === void 0) return -1;\n      }\n      return left.index - right.index;\n    }), 'value');\n  };\n\n  // An internal function used for aggregate \"group by\" operations.\n  var group = function(behavior, partition) {\n    return function(obj, iteratee, context) {\n      var result = partition ? [[], []] : {};\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(value, index) {\n        var key = iteratee(value, index, obj);\n        behavior(result, value, key);\n      });\n      return result;\n    };\n  };\n\n  // Groups the object's values by a criterion. Pass either a string attribute\n  // to group by, or a function that returns the criterion.\n  _.groupBy = group(function(result, value, key) {\n    if (has(result, key)) result[key].push(value); else result[key] = [value];\n  });\n\n  // Indexes the object's values by a criterion, similar to `groupBy`, but for\n  // when you know that your index values will be unique.\n  _.indexBy = group(function(result, value, key) {\n    result[key] = value;\n  });\n\n  // Counts instances of an object that group by a certain criterion. Pass\n  // either a string attribute to count by, or a function that returns the\n  // criterion.\n  _.countBy = group(function(result, value, key) {\n    if (has(result, key)) result[key]++; else result[key] = 1;\n  });\n\n  var reStrSymbol = /[^\\ud800-\\udfff]|[\\ud800-\\udbff][\\udc00-\\udfff]|[\\ud800-\\udfff]/g;\n  // Safely create a real, live array from anything iterable.\n  _.toArray = function(obj) {\n    if (!obj) return [];\n    if (_.isArray(obj)) return slice.call(obj);\n    if (_.isString(obj)) {\n      // Keep surrogate pair characters together\n      return obj.match(reStrSymbol);\n    }\n    if (isArrayLike(obj)) return _.map(obj, _.identity);\n    return _.values(obj);\n  };\n\n  // Return the number of elements in an object.\n  _.size = function(obj) {\n    if (obj == null) return 0;\n    return isArrayLike(obj) ? obj.length : _.keys(obj).length;\n  };\n\n  // Split a collection into two arrays: one whose elements all satisfy the given\n  // predicate, and one whose elements all do not satisfy the predicate.\n  _.partition = group(function(result, value, pass) {\n    result[pass ? 0 : 1].push(value);\n  }, true);\n\n  // Array Functions\n  // ---------------\n\n  // Get the first element of an array. Passing **n** will return the first N\n  // values in the array. Aliased as `head` and `take`. The **guard** check\n  // allows it to work with `_.map`.\n  _.first = _.head = _.take = function(array, n, guard) {\n    if (array == null || array.length < 1) return n == null ? void 0 : [];\n    if (n == null || guard) return array[0];\n    return _.initial(array, array.length - n);\n  };\n\n  // Returns everything but the last entry of the array. Especially useful on\n  // the arguments object. Passing **n** will return all the values in\n  // the array, excluding the last N.\n  _.initial = function(array, n, guard) {\n    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));\n  };\n\n  // Get the last element of an array. Passing **n** will return the last N\n  // values in the array.\n  _.last = function(array, n, guard) {\n    if (array == null || array.length < 1) return n == null ? void 0 : [];\n    if (n == null || guard) return array[array.length - 1];\n    return _.rest(array, Math.max(0, array.length - n));\n  };\n\n  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.\n  // Especially useful on the arguments object. Passing an **n** will return\n  // the rest N values in the array.\n  _.rest = _.tail = _.drop = function(array, n, guard) {\n    return slice.call(array, n == null || guard ? 1 : n);\n  };\n\n  // Trim out all falsy values from an array.\n  _.compact = function(array) {\n    return _.filter(array, Boolean);\n  };\n\n  // Internal implementation of a recursive `flatten` function.\n  var flatten = function(input, shallow, strict, output) {\n    output = output || [];\n    var idx = output.length;\n    for (var i = 0, length = getLength(input); i < length; i++) {\n      var value = input[i];\n      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {\n        // Flatten current level of array or arguments object.\n        if (shallow) {\n          var j = 0, len = value.length;\n          while (j < len) output[idx++] = value[j++];\n        } else {\n          flatten(value, shallow, strict, output);\n          idx = output.length;\n        }\n      } else if (!strict) {\n        output[idx++] = value;\n      }\n    }\n    return output;\n  };\n\n  // Flatten out an array, either recursively (by default), or just one level.\n  _.flatten = function(array, shallow) {\n    return flatten(array, shallow, false);\n  };\n\n  // Return a version of the array that does not contain the specified value(s).\n  _.without = restArguments(function(array, otherArrays) {\n    return _.difference(array, otherArrays);\n  });\n\n  // Produce a duplicate-free version of the array. If the array has already\n  // been sorted, you have the option of using a faster algorithm.\n  // The faster algorithm will not work with an iteratee if the iteratee\n  // is not a one-to-one function, so providing an iteratee will disable\n  // the faster algorithm.\n  // Aliased as `unique`.\n  _.uniq = _.unique = function(array, isSorted, iteratee, context) {\n    if (!_.isBoolean(isSorted)) {\n      context = iteratee;\n      iteratee = isSorted;\n      isSorted = false;\n    }\n    if (iteratee != null) iteratee = cb(iteratee, context);\n    var result = [];\n    var seen = [];\n    for (var i = 0, length = getLength(array); i < length; i++) {\n      var value = array[i],\n          computed = iteratee ? iteratee(value, i, array) : value;\n      if (isSorted && !iteratee) {\n        if (!i || seen !== computed) result.push(value);\n        seen = computed;\n      } else if (iteratee) {\n        if (!_.contains(seen, computed)) {\n          seen.push(computed);\n          result.push(value);\n        }\n      } else if (!_.contains(result, value)) {\n        result.push(value);\n      }\n    }\n    return result;\n  };\n\n  // Produce an array that contains the union: each distinct element from all of\n  // the passed-in arrays.\n  _.union = restArguments(function(arrays) {\n    return _.uniq(flatten(arrays, true, true));\n  });\n\n  // Produce an array that contains every item shared between all the\n  // passed-in arrays.\n  _.intersection = function(array) {\n    var result = [];\n    var argsLength = arguments.length;\n    for (var i = 0, length = getLength(array); i < length; i++) {\n      var item = array[i];\n      if (_.contains(result, item)) continue;\n      var j;\n      for (j = 1; j < argsLength; j++) {\n        if (!_.contains(arguments[j], item)) break;\n      }\n      if (j === argsLength) result.push(item);\n    }\n    return result;\n  };\n\n  // Take the difference between one array and a number of other arrays.\n  // Only the elements present in just the first array will remain.\n  _.difference = restArguments(function(array, rest) {\n    rest = flatten(rest, true, true);\n    return _.filter(array, function(value){\n      return !_.contains(rest, value);\n    });\n  });\n\n  // Complement of _.zip. Unzip accepts an array of arrays and groups\n  // each array's elements on shared indices.\n  _.unzip = function(array) {\n    var length = array && _.max(array, getLength).length || 0;\n    var result = Array(length);\n\n    for (var index = 0; index < length; index++) {\n      result[index] = _.pluck(array, index);\n    }\n    return result;\n  };\n\n  // Zip together multiple lists into a single array -- elements that share\n  // an index go together.\n  _.zip = restArguments(_.unzip);\n\n  // Converts lists into objects. Pass either a single array of `[key, value]`\n  // pairs, or two parallel arrays of the same length -- one of keys, and one of\n  // the corresponding values. Passing by pairs is the reverse of _.pairs.\n  _.object = function(list, values) {\n    var result = {};\n    for (var i = 0, length = getLength(list); i < length; i++) {\n      if (values) {\n        result[list[i]] = values[i];\n      } else {\n        result[list[i][0]] = list[i][1];\n      }\n    }\n    return result;\n  };\n\n  // Generator function to create the findIndex and findLastIndex functions.\n  var createPredicateIndexFinder = function(dir) {\n    return function(array, predicate, context) {\n      predicate = cb(predicate, context);\n      var length = getLength(array);\n      var index = dir > 0 ? 0 : length - 1;\n      for (; index >= 0 && index < length; index += dir) {\n        if (predicate(array[index], index, array)) return index;\n      }\n      return -1;\n    };\n  };\n\n  // Returns the first index on an array-like that passes a predicate test.\n  _.findIndex = createPredicateIndexFinder(1);\n  _.findLastIndex = createPredicateIndexFinder(-1);\n\n  // Use a comparator function to figure out the smallest index at which\n  // an object should be inserted so as to maintain order. Uses binary search.\n  _.sortedIndex = function(array, obj, iteratee, context) {\n    iteratee = cb(iteratee, context, 1);\n    var value = iteratee(obj);\n    var low = 0, high = getLength(array);\n    while (low < high) {\n      var mid = Math.floor((low + high) / 2);\n      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;\n    }\n    return low;\n  };\n\n  // Generator function to create the indexOf and lastIndexOf functions.\n  var createIndexFinder = function(dir, predicateFind, sortedIndex) {\n    return function(array, item, idx) {\n      var i = 0, length = getLength(array);\n      if (typeof idx == 'number') {\n        if (dir > 0) {\n          i = idx >= 0 ? idx : Math.max(idx + length, i);\n        } else {\n          length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;\n        }\n      } else if (sortedIndex && idx && length) {\n        idx = sortedIndex(array, item);\n        return array[idx] === item ? idx : -1;\n      }\n      if (item !== item) {\n        idx = predicateFind(slice.call(array, i, length), _.isNaN);\n        return idx >= 0 ? idx + i : -1;\n      }\n      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {\n        if (array[idx] === item) return idx;\n      }\n      return -1;\n    };\n  };\n\n  // Return the position of the first occurrence of an item in an array,\n  // or -1 if the item is not included in the array.\n  // If the array is large and already in sort order, pass `true`\n  // for **isSorted** to use binary search.\n  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);\n  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);\n\n  // Generate an integer Array containing an arithmetic progression. A port of\n  // the native Python `range()` function. See\n  // [the Python documentation](http://docs.python.org/library/functions.html#range).\n  _.range = function(start, stop, step) {\n    if (stop == null) {\n      stop = start || 0;\n      start = 0;\n    }\n    if (!step) {\n      step = stop < start ? -1 : 1;\n    }\n\n    var length = Math.max(Math.ceil((stop - start) / step), 0);\n    var range = Array(length);\n\n    for (var idx = 0; idx < length; idx++, start += step) {\n      range[idx] = start;\n    }\n\n    return range;\n  };\n\n  // Chunk a single array into multiple arrays, each containing `count` or fewer\n  // items.\n  _.chunk = function(array, count) {\n    if (count == null || count < 1) return [];\n    var result = [];\n    var i = 0, length = array.length;\n    while (i < length) {\n      result.push(slice.call(array, i, i += count));\n    }\n    return result;\n  };\n\n  // Function (ahem) Functions\n  // ------------------\n\n  // Determines whether to execute a function as a constructor\n  // or a normal function with the provided arguments.\n  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {\n    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);\n    var self = baseCreate(sourceFunc.prototype);\n    var result = sourceFunc.apply(self, args);\n    if (_.isObject(result)) return result;\n    return self;\n  };\n\n  // Create a function bound to a given object (assigning `this`, and arguments,\n  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if\n  // available.\n  _.bind = restArguments(function(func, context, args) {\n    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');\n    var bound = restArguments(function(callArgs) {\n      return executeBound(func, bound, context, this, args.concat(callArgs));\n    });\n    return bound;\n  });\n\n  // Partially apply a function by creating a version that has had some of its\n  // arguments pre-filled, without changing its dynamic `this` context. _ acts\n  // as a placeholder by default, allowing any combination of arguments to be\n  // pre-filled. Set `_.partial.placeholder` for a custom placeholder argument.\n  _.partial = restArguments(function(func, boundArgs) {\n    var placeholder = _.partial.placeholder;\n    var bound = function() {\n      var position = 0, length = boundArgs.length;\n      var args = Array(length);\n      for (var i = 0; i < length; i++) {\n        args[i] = boundArgs[i] === placeholder ? arguments[position++] : boundArgs[i];\n      }\n      while (position < arguments.length) args.push(arguments[position++]);\n      return executeBound(func, bound, this, this, args);\n    };\n    return bound;\n  });\n\n  _.partial.placeholder = _;\n\n  // Bind a number of an object's methods to that object. Remaining arguments\n  // are the method names to be bound. Useful for ensuring that all callbacks\n  // defined on an object belong to it.\n  _.bindAll = restArguments(function(obj, keys) {\n    keys = flatten(keys, false, false);\n    var index = keys.length;\n    if (index < 1) throw new Error('bindAll must be passed function names');\n    while (index--) {\n      var key = keys[index];\n      obj[key] = _.bind(obj[key], obj);\n    }\n  });\n\n  // Memoize an expensive function by storing its results.\n  _.memoize = function(func, hasher) {\n    var memoize = function(key) {\n      var cache = memoize.cache;\n      var address = '' + (hasher ? hasher.apply(this, arguments) : key);\n      if (!has(cache, address)) cache[address] = func.apply(this, arguments);\n      return cache[address];\n    };\n    memoize.cache = {};\n    return memoize;\n  };\n\n  // Delays a function for the given number of milliseconds, and then calls\n  // it with the arguments supplied.\n  _.delay = restArguments(function(func, wait, args) {\n    return setTimeout(function() {\n      return func.apply(null, args);\n    }, wait);\n  });\n\n  // Defers a function, scheduling it to run after the current call stack has\n  // cleared.\n  _.defer = _.partial(_.delay, _, 1);\n\n  // Returns a function, that, when invoked, will only be triggered at most once\n  // during a given window of time. Normally, the throttled function will run\n  // as much as it can, without ever going more than once per `wait` duration;\n  // but if you'd like to disable the execution on the leading edge, pass\n  // `{leading: false}`. To disable execution on the trailing edge, ditto.\n  _.throttle = function(func, wait, options) {\n    var timeout, context, args, result;\n    var previous = 0;\n    if (!options) options = {};\n\n    var later = function() {\n      previous = options.leading === false ? 0 : _.now();\n      timeout = null;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    };\n\n    var throttled = function() {\n      var now = _.now();\n      if (!previous && options.leading === false) previous = now;\n      var remaining = wait - (now - previous);\n      context = this;\n      args = arguments;\n      if (remaining <= 0 || remaining > wait) {\n        if (timeout) {\n          clearTimeout(timeout);\n          timeout = null;\n        }\n        previous = now;\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      } else if (!timeout && options.trailing !== false) {\n        timeout = setTimeout(later, remaining);\n      }\n      return result;\n    };\n\n    throttled.cancel = function() {\n      clearTimeout(timeout);\n      previous = 0;\n      timeout = context = args = null;\n    };\n\n    return throttled;\n  };\n\n  // Returns a function, that, as long as it continues to be invoked, will not\n  // be triggered. The function will be called after it stops being called for\n  // N milliseconds. If `immediate` is passed, trigger the function on the\n  // leading edge, instead of the trailing.\n  _.debounce = function(func, wait, immediate) {\n    var timeout, result;\n\n    var later = function(context, args) {\n      timeout = null;\n      if (args) result = func.apply(context, args);\n    };\n\n    var debounced = restArguments(function(args) {\n      if (timeout) clearTimeout(timeout);\n      if (immediate) {\n        var callNow = !timeout;\n        timeout = setTimeout(later, wait);\n        if (callNow) result = func.apply(this, args);\n      } else {\n        timeout = _.delay(later, wait, this, args);\n      }\n\n      return result;\n    });\n\n    debounced.cancel = function() {\n      clearTimeout(timeout);\n      timeout = null;\n    };\n\n    return debounced;\n  };\n\n  // Returns the first function passed as an argument to the second,\n  // allowing you to adjust arguments, run code before and after, and\n  // conditionally execute the original function.\n  _.wrap = function(func, wrapper) {\n    return _.partial(wrapper, func);\n  };\n\n  // Returns a negated version of the passed-in predicate.\n  _.negate = function(predicate) {\n    return function() {\n      return !predicate.apply(this, arguments);\n    };\n  };\n\n  // Returns a function that is the composition of a list of functions, each\n  // consuming the return value of the function that follows.\n  _.compose = function() {\n    var args = arguments;\n    var start = args.length - 1;\n    return function() {\n      var i = start;\n      var result = args[start].apply(this, arguments);\n      while (i--) result = args[i].call(this, result);\n      return result;\n    };\n  };\n\n  // Returns a function that will only be executed on and after the Nth call.\n  _.after = function(times, func) {\n    return function() {\n      if (--times < 1) {\n        return func.apply(this, arguments);\n      }\n    };\n  };\n\n  // Returns a function that will only be executed up to (but not including) the Nth call.\n  _.before = function(times, func) {\n    var memo;\n    return function() {\n      if (--times > 0) {\n        memo = func.apply(this, arguments);\n      }\n      if (times <= 1) func = null;\n      return memo;\n    };\n  };\n\n  // Returns a function that will be executed at most one time, no matter how\n  // often you call it. Useful for lazy initialization.\n  _.once = _.partial(_.before, 2);\n\n  _.restArguments = restArguments;\n\n  // Object Functions\n  // ----------------\n\n  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.\n  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');\n  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',\n    'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];\n\n  var collectNonEnumProps = function(obj, keys) {\n    var nonEnumIdx = nonEnumerableProps.length;\n    var constructor = obj.constructor;\n    var proto = _.isFunction(constructor) && constructor.prototype || ObjProto;\n\n    // Constructor is a special case.\n    var prop = 'constructor';\n    if (has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);\n\n    while (nonEnumIdx--) {\n      prop = nonEnumerableProps[nonEnumIdx];\n      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {\n        keys.push(prop);\n      }\n    }\n  };\n\n  // Retrieve the names of an object's own properties.\n  // Delegates to **ECMAScript 5**'s native `Object.keys`.\n  _.keys = function(obj) {\n    if (!_.isObject(obj)) return [];\n    if (nativeKeys) return nativeKeys(obj);\n    var keys = [];\n    for (var key in obj) if (has(obj, key)) keys.push(key);\n    // Ahem, IE < 9.\n    if (hasEnumBug) collectNonEnumProps(obj, keys);\n    return keys;\n  };\n\n  // Retrieve all the property names of an object.\n  _.allKeys = function(obj) {\n    if (!_.isObject(obj)) return [];\n    var keys = [];\n    for (var key in obj) keys.push(key);\n    // Ahem, IE < 9.\n    if (hasEnumBug) collectNonEnumProps(obj, keys);\n    return keys;\n  };\n\n  // Retrieve the values of an object's properties.\n  _.values = function(obj) {\n    var keys = _.keys(obj);\n    var length = keys.length;\n    var values = Array(length);\n    for (var i = 0; i < length; i++) {\n      values[i] = obj[keys[i]];\n    }\n    return values;\n  };\n\n  // Returns the results of applying the iteratee to each element of the object.\n  // In contrast to _.map it returns an object.\n  _.mapObject = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    var keys = _.keys(obj),\n        length = keys.length,\n        results = {};\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys[index];\n      results[currentKey] = iteratee(obj[currentKey], currentKey, obj);\n    }\n    return results;\n  };\n\n  // Convert an object into a list of `[key, value]` pairs.\n  // The opposite of _.object.\n  _.pairs = function(obj) {\n    var keys = _.keys(obj);\n    var length = keys.length;\n    var pairs = Array(length);\n    for (var i = 0; i < length; i++) {\n      pairs[i] = [keys[i], obj[keys[i]]];\n    }\n    return pairs;\n  };\n\n  // Invert the keys and values of an object. The values must be serializable.\n  _.invert = function(obj) {\n    var result = {};\n    var keys = _.keys(obj);\n    for (var i = 0, length = keys.length; i < length; i++) {\n      result[obj[keys[i]]] = keys[i];\n    }\n    return result;\n  };\n\n  // Return a sorted list of the function names available on the object.\n  // Aliased as `methods`.\n  _.functions = _.methods = function(obj) {\n    var names = [];\n    for (var key in obj) {\n      if (_.isFunction(obj[key])) names.push(key);\n    }\n    return names.sort();\n  };\n\n  // An internal function for creating assigner functions.\n  var createAssigner = function(keysFunc, defaults) {\n    return function(obj) {\n      var length = arguments.length;\n      if (defaults) obj = Object(obj);\n      if (length < 2 || obj == null) return obj;\n      for (var index = 1; index < length; index++) {\n        var source = arguments[index],\n            keys = keysFunc(source),\n            l = keys.length;\n        for (var i = 0; i < l; i++) {\n          var key = keys[i];\n          if (!defaults || obj[key] === void 0) obj[key] = source[key];\n        }\n      }\n      return obj;\n    };\n  };\n\n  // Extend a given object with all the properties in passed-in object(s).\n  _.extend = createAssigner(_.allKeys);\n\n  // Assigns a given object with all the own properties in the passed-in object(s).\n  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)\n  _.extendOwn = _.assign = createAssigner(_.keys);\n\n  // Returns the first key on an object that passes a predicate test.\n  _.findKey = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = _.keys(obj), key;\n    for (var i = 0, length = keys.length; i < length; i++) {\n      key = keys[i];\n      if (predicate(obj[key], key, obj)) return key;\n    }\n  };\n\n  // Internal pick helper function to determine if `obj` has key `key`.\n  var keyInObj = function(value, key, obj) {\n    return key in obj;\n  };\n\n  // Return a copy of the object only containing the whitelisted properties.\n  _.pick = restArguments(function(obj, keys) {\n    var result = {}, iteratee = keys[0];\n    if (obj == null) return result;\n    if (_.isFunction(iteratee)) {\n      if (keys.length > 1) iteratee = optimizeCb(iteratee, keys[1]);\n      keys = _.allKeys(obj);\n    } else {\n      iteratee = keyInObj;\n      keys = flatten(keys, false, false);\n      obj = Object(obj);\n    }\n    for (var i = 0, length = keys.length; i < length; i++) {\n      var key = keys[i];\n      var value = obj[key];\n      if (iteratee(value, key, obj)) result[key] = value;\n    }\n    return result;\n  });\n\n  // Return a copy of the object without the blacklisted properties.\n  _.omit = restArguments(function(obj, keys) {\n    var iteratee = keys[0], context;\n    if (_.isFunction(iteratee)) {\n      iteratee = _.negate(iteratee);\n      if (keys.length > 1) context = keys[1];\n    } else {\n      keys = _.map(flatten(keys, false, false), String);\n      iteratee = function(value, key) {\n        return !_.contains(keys, key);\n      };\n    }\n    return _.pick(obj, iteratee, context);\n  });\n\n  // Fill in a given object with default properties.\n  _.defaults = createAssigner(_.allKeys, true);\n\n  // Creates an object that inherits from the given prototype object.\n  // If additional properties are provided then they will be added to the\n  // created object.\n  _.create = function(prototype, props) {\n    var result = baseCreate(prototype);\n    if (props) _.extendOwn(result, props);\n    return result;\n  };\n\n  // Create a (shallow-cloned) duplicate of an object.\n  _.clone = function(obj) {\n    if (!_.isObject(obj)) return obj;\n    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);\n  };\n\n  // Invokes interceptor with the obj, and then returns obj.\n  // The primary purpose of this method is to \"tap into\" a method chain, in\n  // order to perform operations on intermediate results within the chain.\n  _.tap = function(obj, interceptor) {\n    interceptor(obj);\n    return obj;\n  };\n\n  // Returns whether an object has a given set of `key:value` pairs.\n  _.isMatch = function(object, attrs) {\n    var keys = _.keys(attrs), length = keys.length;\n    if (object == null) return !length;\n    var obj = Object(object);\n    for (var i = 0; i < length; i++) {\n      var key = keys[i];\n      if (attrs[key] !== obj[key] || !(key in obj)) return false;\n    }\n    return true;\n  };\n\n\n  // Internal recursive comparison function for `isEqual`.\n  var eq, deepEq;\n  eq = function(a, b, aStack, bStack) {\n    // Identical objects are equal. `0 === -0`, but they aren't identical.\n    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).\n    if (a === b) return a !== 0 || 1 / a === 1 / b;\n    // `null` or `undefined` only equal to itself (strict comparison).\n    if (a == null || b == null) return false;\n    // `NaN`s are equivalent, but non-reflexive.\n    if (a !== a) return b !== b;\n    // Exhaust primitive checks\n    var type = typeof a;\n    if (type !== 'function' && type !== 'object' && typeof b != 'object') return false;\n    return deepEq(a, b, aStack, bStack);\n  };\n\n  // Internal recursive comparison function for `isEqual`.\n  deepEq = function(a, b, aStack, bStack) {\n    // Unwrap any wrapped objects.\n    if (a instanceof _) a = a._wrapped;\n    if (b instanceof _) b = b._wrapped;\n    // Compare `[[Class]]` names.\n    var className = toString.call(a);\n    if (className !== toString.call(b)) return false;\n    switch (className) {\n      // Strings, numbers, regular expressions, dates, and booleans are compared by value.\n      case '[object RegExp]':\n      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')\n      case '[object String]':\n        // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n        // equivalent to `new String(\"5\")`.\n        return '' + a === '' + b;\n      case '[object Number]':\n        // `NaN`s are equivalent, but non-reflexive.\n        // Object(NaN) is equivalent to NaN.\n        if (+a !== +a) return +b !== +b;\n        // An `egal` comparison is performed for other numeric values.\n        return +a === 0 ? 1 / +a === 1 / b : +a === +b;\n      case '[object Date]':\n      case '[object Boolean]':\n        // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n        // millisecond representations. Note that invalid dates with millisecond representations\n        // of `NaN` are not equivalent.\n        return +a === +b;\n      case '[object Symbol]':\n        return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);\n    }\n\n    var areArrays = className === '[object Array]';\n    if (!areArrays) {\n      if (typeof a != 'object' || typeof b != 'object') return false;\n\n      // Objects with different constructors are not equivalent, but `Object`s or `Array`s\n      // from different frames are.\n      var aCtor = a.constructor, bCtor = b.constructor;\n      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&\n                               _.isFunction(bCtor) && bCtor instanceof bCtor)\n                          && ('constructor' in a && 'constructor' in b)) {\n        return false;\n      }\n    }\n    // Assume equality for cyclic structures. The algorithm for detecting cyclic\n    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n\n    // Initializing stack of traversed objects.\n    // It's done here since we only need them for objects and arrays comparison.\n    aStack = aStack || [];\n    bStack = bStack || [];\n    var length = aStack.length;\n    while (length--) {\n      // Linear search. Performance is inversely proportional to the number of\n      // unique nested structures.\n      if (aStack[length] === a) return bStack[length] === b;\n    }\n\n    // Add the first object to the stack of traversed objects.\n    aStack.push(a);\n    bStack.push(b);\n\n    // Recursively compare objects and arrays.\n    if (areArrays) {\n      // Compare array lengths to determine if a deep comparison is necessary.\n      length = a.length;\n      if (length !== b.length) return false;\n      // Deep compare the contents, ignoring non-numeric properties.\n      while (length--) {\n        if (!eq(a[length], b[length], aStack, bStack)) return false;\n      }\n    } else {\n      // Deep compare objects.\n      var keys = _.keys(a), key;\n      length = keys.length;\n      // Ensure that both objects contain the same number of properties before comparing deep equality.\n      if (_.keys(b).length !== length) return false;\n      while (length--) {\n        // Deep compare each member\n        key = keys[length];\n        if (!(has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;\n      }\n    }\n    // Remove the first object from the stack of traversed objects.\n    aStack.pop();\n    bStack.pop();\n    return true;\n  };\n\n  // Perform a deep comparison to check if two objects are equal.\n  _.isEqual = function(a, b) {\n    return eq(a, b);\n  };\n\n  // Is a given array, string, or object empty?\n  // An \"empty\" object has no enumerable own-properties.\n  _.isEmpty = function(obj) {\n    if (obj == null) return true;\n    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;\n    return _.keys(obj).length === 0;\n  };\n\n  // Is a given value a DOM element?\n  _.isElement = function(obj) {\n    return !!(obj && obj.nodeType === 1);\n  };\n\n  // Is a given value an array?\n  // Delegates to ECMA5's native Array.isArray\n  _.isArray = nativeIsArray || function(obj) {\n    return toString.call(obj) === '[object Array]';\n  };\n\n  // Is a given variable an object?\n  _.isObject = function(obj) {\n    var type = typeof obj;\n    return type === 'function' || type === 'object' && !!obj;\n  };\n\n  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError, isMap, isWeakMap, isSet, isWeakSet.\n  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error', 'Symbol', 'Map', 'WeakMap', 'Set', 'WeakSet'], function(name) {\n    _['is' + name] = function(obj) {\n      return toString.call(obj) === '[object ' + name + ']';\n    };\n  });\n\n  // Define a fallback version of the method in browsers (ahem, IE < 9), where\n  // there isn't any inspectable \"Arguments\" type.\n  if (!_.isArguments(arguments)) {\n    _.isArguments = function(obj) {\n      return has(obj, 'callee');\n    };\n  }\n\n  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,\n  // IE 11 (#1621), Safari 8 (#1929), and PhantomJS (#2236).\n  var nodelist = root.document && root.document.childNodes;\n  if ( true && typeof Int8Array != 'object' && typeof nodelist != 'function') {\n    _.isFunction = function(obj) {\n      return typeof obj == 'function' || false;\n    };\n  }\n\n  // Is a given object a finite number?\n  _.isFinite = function(obj) {\n    return !_.isSymbol(obj) && isFinite(obj) && !isNaN(parseFloat(obj));\n  };\n\n  // Is the given value `NaN`?\n  _.isNaN = function(obj) {\n    return _.isNumber(obj) && isNaN(obj);\n  };\n\n  // Is a given value a boolean?\n  _.isBoolean = function(obj) {\n    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';\n  };\n\n  // Is a given value equal to null?\n  _.isNull = function(obj) {\n    return obj === null;\n  };\n\n  // Is a given variable undefined?\n  _.isUndefined = function(obj) {\n    return obj === void 0;\n  };\n\n  // Shortcut function for checking if an object has a given property directly\n  // on itself (in other words, not on a prototype).\n  _.has = function(obj, path) {\n    if (!_.isArray(path)) {\n      return has(obj, path);\n    }\n    var length = path.length;\n    for (var i = 0; i < length; i++) {\n      var key = path[i];\n      if (obj == null || !hasOwnProperty.call(obj, key)) {\n        return false;\n      }\n      obj = obj[key];\n    }\n    return !!length;\n  };\n\n  // Utility Functions\n  // -----------------\n\n  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its\n  // previous owner. Returns a reference to the Underscore object.\n  _.noConflict = function() {\n    root._ = previousUnderscore;\n    return this;\n  };\n\n  // Keep the identity function around for default iteratees.\n  _.identity = function(value) {\n    return value;\n  };\n\n  // Predicate-generating functions. Often useful outside of Underscore.\n  _.constant = function(value) {\n    return function() {\n      return value;\n    };\n  };\n\n  _.noop = function(){};\n\n  // Creates a function that, when passed an object, will traverse that object’s\n  // properties down the given `path`, specified as an array of keys or indexes.\n  _.property = function(path) {\n    if (!_.isArray(path)) {\n      return shallowProperty(path);\n    }\n    return function(obj) {\n      return deepGet(obj, path);\n    };\n  };\n\n  // Generates a function for a given object that returns a given property.\n  _.propertyOf = function(obj) {\n    if (obj == null) {\n      return function(){};\n    }\n    return function(path) {\n      return !_.isArray(path) ? obj[path] : deepGet(obj, path);\n    };\n  };\n\n  // Returns a predicate for checking whether an object has a given set of\n  // `key:value` pairs.\n  _.matcher = _.matches = function(attrs) {\n    attrs = _.extendOwn({}, attrs);\n    return function(obj) {\n      return _.isMatch(obj, attrs);\n    };\n  };\n\n  // Run a function **n** times.\n  _.times = function(n, iteratee, context) {\n    var accum = Array(Math.max(0, n));\n    iteratee = optimizeCb(iteratee, context, 1);\n    for (var i = 0; i < n; i++) accum[i] = iteratee(i);\n    return accum;\n  };\n\n  // Return a random integer between min and max (inclusive).\n  _.random = function(min, max) {\n    if (max == null) {\n      max = min;\n      min = 0;\n    }\n    return min + Math.floor(Math.random() * (max - min + 1));\n  };\n\n  // A (possibly faster) way to get the current timestamp as an integer.\n  _.now = Date.now || function() {\n    return new Date().getTime();\n  };\n\n  // List of HTML entities for escaping.\n  var escapeMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#x27;',\n    '`': '&#x60;'\n  };\n  var unescapeMap = _.invert(escapeMap);\n\n  // Functions for escaping and unescaping strings to/from HTML interpolation.\n  var createEscaper = function(map) {\n    var escaper = function(match) {\n      return map[match];\n    };\n    // Regexes for identifying a key that needs to be escaped.\n    var source = '(?:' + _.keys(map).join('|') + ')';\n    var testRegexp = RegExp(source);\n    var replaceRegexp = RegExp(source, 'g');\n    return function(string) {\n      string = string == null ? '' : '' + string;\n      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;\n    };\n  };\n  _.escape = createEscaper(escapeMap);\n  _.unescape = createEscaper(unescapeMap);\n\n  // Traverses the children of `obj` along `path`. If a child is a function, it\n  // is invoked with its parent as context. Returns the value of the final\n  // child, or `fallback` if any child is undefined.\n  _.result = function(obj, path, fallback) {\n    if (!_.isArray(path)) path = [path];\n    var length = path.length;\n    if (!length) {\n      return _.isFunction(fallback) ? fallback.call(obj) : fallback;\n    }\n    for (var i = 0; i < length; i++) {\n      var prop = obj == null ? void 0 : obj[path[i]];\n      if (prop === void 0) {\n        prop = fallback;\n        i = length; // Ensure we don't continue iterating.\n      }\n      obj = _.isFunction(prop) ? prop.call(obj) : prop;\n    }\n    return obj;\n  };\n\n  // Generate a unique integer id (unique within the entire client session).\n  // Useful for temporary DOM ids.\n  var idCounter = 0;\n  _.uniqueId = function(prefix) {\n    var id = ++idCounter + '';\n    return prefix ? prefix + id : id;\n  };\n\n  // By default, Underscore uses ERB-style template delimiters, change the\n  // following template settings to use alternative delimiters.\n  _.templateSettings = {\n    evaluate: /<%([\\s\\S]+?)%>/g,\n    interpolate: /<%=([\\s\\S]+?)%>/g,\n    escape: /<%-([\\s\\S]+?)%>/g\n  };\n\n  // When customizing `templateSettings`, if you don't want to define an\n  // interpolation, evaluation or escaping regex, we need one that is\n  // guaranteed not to match.\n  var noMatch = /(.)^/;\n\n  // Certain characters need to be escaped so that they can be put into a\n  // string literal.\n  var escapes = {\n    \"'\": \"'\",\n    '\\\\': '\\\\',\n    '\\r': 'r',\n    '\\n': 'n',\n    '\\u2028': 'u2028',\n    '\\u2029': 'u2029'\n  };\n\n  var escapeRegExp = /\\\\|'|\\r|\\n|\\u2028|\\u2029/g;\n\n  var escapeChar = function(match) {\n    return '\\\\' + escapes[match];\n  };\n\n  // JavaScript micro-templating, similar to John Resig's implementation.\n  // Underscore templating handles arbitrary delimiters, preserves whitespace,\n  // and correctly escapes quotes within interpolated code.\n  // NB: `oldSettings` only exists for backwards compatibility.\n  _.template = function(text, settings, oldSettings) {\n    if (!settings && oldSettings) settings = oldSettings;\n    settings = _.defaults({}, settings, _.templateSettings);\n\n    // Combine delimiters into one regular expression via alternation.\n    var matcher = RegExp([\n      (settings.escape || noMatch).source,\n      (settings.interpolate || noMatch).source,\n      (settings.evaluate || noMatch).source\n    ].join('|') + '|$', 'g');\n\n    // Compile the template source, escaping string literals appropriately.\n    var index = 0;\n    var source = \"__p+='\";\n    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {\n      source += text.slice(index, offset).replace(escapeRegExp, escapeChar);\n      index = offset + match.length;\n\n      if (escape) {\n        source += \"'+\\n((__t=(\" + escape + \"))==null?'':_.escape(__t))+\\n'\";\n      } else if (interpolate) {\n        source += \"'+\\n((__t=(\" + interpolate + \"))==null?'':__t)+\\n'\";\n      } else if (evaluate) {\n        source += \"';\\n\" + evaluate + \"\\n__p+='\";\n      }\n\n      // Adobe VMs need the match returned to produce the correct offset.\n      return match;\n    });\n    source += \"';\\n\";\n\n    // If a variable is not specified, place data values in local scope.\n    if (!settings.variable) source = 'with(obj||{}){\\n' + source + '}\\n';\n\n    source = \"var __t,__p='',__j=Array.prototype.join,\" +\n      \"print=function(){__p+=__j.call(arguments,'');};\\n\" +\n      source + 'return __p;\\n';\n\n    var render;\n    try {\n      render = new Function(settings.variable || 'obj', '_', source);\n    } catch (e) {\n      e.source = source;\n      throw e;\n    }\n\n    var template = function(data) {\n      return render.call(this, data, _);\n    };\n\n    // Provide the compiled source as a convenience for precompilation.\n    var argument = settings.variable || 'obj';\n    template.source = 'function(' + argument + '){\\n' + source + '}';\n\n    return template;\n  };\n\n  // Add a \"chain\" function. Start chaining a wrapped Underscore object.\n  _.chain = function(obj) {\n    var instance = _(obj);\n    instance._chain = true;\n    return instance;\n  };\n\n  // OOP\n  // ---------------\n  // If Underscore is called as a function, it returns a wrapped object that\n  // can be used OO-style. This wrapper holds altered versions of all the\n  // underscore functions. Wrapped objects may be chained.\n\n  // Helper function to continue chaining intermediate results.\n  var chainResult = function(instance, obj) {\n    return instance._chain ? _(obj).chain() : obj;\n  };\n\n  // Add your own custom functions to the Underscore object.\n  _.mixin = function(obj) {\n    _.each(_.functions(obj), function(name) {\n      var func = _[name] = obj[name];\n      _.prototype[name] = function() {\n        var args = [this._wrapped];\n        push.apply(args, arguments);\n        return chainResult(this, func.apply(_, args));\n      };\n    });\n    return _;\n  };\n\n  // Add all of the Underscore functions to the wrapper object.\n  _.mixin(_);\n\n  // Add all mutator Array functions to the wrapper.\n  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function() {\n      var obj = this._wrapped;\n      method.apply(obj, arguments);\n      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];\n      return chainResult(this, obj);\n    };\n  });\n\n  // Add all accessor Array functions to the wrapper.\n  _.each(['concat', 'join', 'slice'], function(name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function() {\n      return chainResult(this, method.apply(this._wrapped, arguments));\n    };\n  });\n\n  // Extracts the result from a wrapped and chained object.\n  _.prototype.value = function() {\n    return this._wrapped;\n  };\n\n  // Provide unwrapping proxy for some methods used in engine operations\n  // such as arithmetic and JSON stringification.\n  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;\n\n  _.prototype.toString = function() {\n    return String(this._wrapped);\n  };\n\n  // AMD registration happens at the end for compatibility with AMD loaders\n  // that may not enforce next-turn semantics on modules. Even though general\n  // practice for AMD registration is to be anonymous, underscore registers\n  // as a named module because, like jQuery, it is a base library that is\n  // popular enough to be bundled in a third party lib, but not be part of\n  // an AMD load request. Those cases could generate an error when an\n  // anonymous define() is called outside of a loader request.\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n      return _;\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  }\n}());\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"698d75b157f24ae829cc\"), __webpack_require__(/*! ./../webpack/buildin/module.js */ \"f586cf5b9f4b7719b2c1\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8e08e542008e4aef1f58\n");

/***/ }),

/***/ "8f65c0d74c5ad6bfe953":
/*!****************************************************************!*\
  !*** ./src/vendor/Anakeen/DOCUMENT/IHM/models/mDocumentTab.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! underscore */ \"8e08e542008e4aef1f58\"), __webpack_require__(/*! backbone */ \"1858b45bf48591489d06\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function(_, Backbone) {\n  \"use strict\";\n\n  var url = _.template(\"api/v2/documents/<%- initid %>/usertags/lasttab\");\n\n  return Backbone.Model.extend({\n    typeModel: \"ddui:attributeTab\",\n    idAttribute: \"initid\",\n\n    url: function mDocumentTag_url() {\n      return url({ initid: this.get(\"initid\") });\n    },\n\n    toJSON: function mDocumentTag_toJSON() {\n      return this.get(\"tabId\");\n    }\n  });\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOGY2NWMwZDc0YzVhZDZiZmU5NTMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdmVuZG9yL0FuYWtlZW4vRE9DVU1FTlQvSUhNL21vZGVscy9tRG9jdW1lbnRUYWIuanM/MDE4NiJdLCJzb3VyY2VzQ29udGVudCI6WyJkZWZpbmUoW1widW5kZXJzY29yZVwiLCBcImJhY2tib25lXCJdLCBmdW5jdGlvbihfLCBCYWNrYm9uZSkge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgdXJsID0gXy50ZW1wbGF0ZShcImFwaS92Mi9kb2N1bWVudHMvPCUtIGluaXRpZCAlPi91c2VydGFncy9sYXN0dGFiXCIpO1xuXG4gIHJldHVybiBCYWNrYm9uZS5Nb2RlbC5leHRlbmQoe1xuICAgIHR5cGVNb2RlbDogXCJkZHVpOmF0dHJpYnV0ZVRhYlwiLFxuICAgIGlkQXR0cmlidXRlOiBcImluaXRpZFwiLFxuXG4gICAgdXJsOiBmdW5jdGlvbiBtRG9jdW1lbnRUYWdfdXJsKCkge1xuICAgICAgcmV0dXJuIHVybCh7IGluaXRpZDogdGhpcy5nZXQoXCJpbml0aWRcIikgfSk7XG4gICAgfSxcblxuICAgIHRvSlNPTjogZnVuY3Rpb24gbURvY3VtZW50VGFnX3RvSlNPTigpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldChcInRhYklkXCIpO1xuICAgIH1cbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///8f65c0d74c5ad6bfe953\n");

/***/ }),

/***/ "91e09db81854b0efbcde":
/*!***************************************************************************!*\
  !*** ./src/vendor/Anakeen/DOCUMENT/IHM/views/attributes/tab/vTabLabel.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*global define*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n  __webpack_require__(/*! jquery */ \"127c8cf59f228bb01a21\"),\n  __webpack_require__(/*! underscore */ \"8e08e542008e4aef1f58\"),\n  __webpack_require__(/*! backbone */ \"1858b45bf48591489d06\"),\n  __webpack_require__(/*! mustache */ \"bcd31d01884fc294fd69\"),\n  __webpack_require__(/*! dcpDocument/views/document/attributeTemplate */ \"7873a0bfc996b28836c2\")\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function vTabLabel($, _, Backbone, Mustache, attributeTemplate) {\n  \"use strict\";\n\n  return Backbone.View.extend({\n    tagName: \"li\",\n\n    className: \"dcpTab__label dcpLabel\",\n\n    events: {\n      'click a[href^=\"#action/\"], a[data-action], button[data-action]':\n        \"externalLinkSelected\"\n    },\n\n    displayLabel: true,\n\n    initialize: function vTabLabel_initialize(options) {\n      if (\n        options.displayLabel === false ||\n        this.model.getOption(\"labelPosition\") === \"none\"\n      ) {\n        this.displayLabel = false;\n      }\n      this.listenTo(this.model, \"change:label\", this.updateLabel);\n      this.listenTo(this.model.get(\"content\"), \"add\", this.render);\n      this.listenTo(this.model.get(\"content\"), \"remove\", this.render);\n      this.listenTo(this.model.get(\"content\"), \"reset\", this.render);\n      this.listenTo(this.model, \"errorMessage\", this.setError);\n      this.listenTo(this.model, \"change:errorMessage\", this.setError);\n      this.listenTo(this.model, \"destroy\", this.remove);\n      this.listenTo(this.model, \"cleanView\", this.remove);\n      this.listenTo(this.model, \"hide\", this.hide);\n      this.listenTo(this.model, \"show\", this.show);\n    },\n\n    render: function vTabLabel_render() {\n      var label = this.model.get(\"label\");\n      var tooltipLabel = this.model.getOption(\"tooltipLabel\");\n      var attrData = this.model.attributes;\n      var helpId = this.model.getOption(\"helpLinkIdentifier\");\n\n      this.$el.empty();\n      if (this.displayLabel !== false) {\n        if (this.model.getOption(\"attributeLabel\")) {\n          label = this.model.getOption(\"attributeLabel\");\n        }\n\n        if (helpId) {\n          this.$el.append(\n            Mustache.render(\n              '<span class=\"dcpLabel__text\">{{label}} <a class=\"dcpLabel__help__link\" href=\"#action/document.help:{{helpId}}:{{attrid}}\"><span class=\"fa fa-question-circle\"></span></a></span>',\n              {\n                helpId: helpId,\n                attrid: this.model.id,\n                label: label\n              }\n            )\n          );\n        } else {\n          this.$el.html($('<span class=\"dcpLabel__text\" />').text(label));\n        }\n\n        attributeTemplate.insertDescription(this);\n        if (tooltipLabel) {\n          tooltipLabel = Mustache.render(tooltipLabel || \"\", attrData);\n          if (!this.model.getOption(\"tooltipHtml\")) {\n            // Need encode itself because the dropselect tooltip also need\n            tooltipLabel = $(\"<div/>\")\n              .text(tooltipLabel)\n              .html();\n          }\n          this.$el.data(\n            \"tooltipLabel\",\n            Mustache.render(tooltipLabel || \"\", attrData)\n          );\n          this.$el.tooltip({\n            placement: \"top\",\n            container: \".dcpDocument\",\n            html: true,\n            title: function vDocumentTooltipTitle() {\n              if ($(this).find(\".k-input.dcpTab__label__select\").length > 0) {\n                // It is a selected Tab\n                return $(this).data(\"tooltipLabelSelect\");\n              }\n              return $(this).data(\"tooltipLabel\"); // set the element text as content of the tooltip\n            }\n          });\n        }\n      }\n\n      this.$el.attr(\"data-attrid\", this.model.id);\n\n      return this;\n    },\n\n    setError: function vTabLabel_setError(event, data) {\n      this.model.trigger(\"attributeTabChange\", event, this.model.id, this.$el, {\n        error: data\n      });\n      if (event.prevent) {\n        return;\n      }\n      if (data) {\n        this.$el.addClass(\"has-error\");\n      } else {\n        this.$el.removeClass(\"has-error\");\n      }\n    },\n\n    updateLabel: function vTabLabel_updateLabel() {\n      this.model.trigger(\n        \"attributeTabChange\",\n        event,\n        this.model.id,\n        this.$el,\n        {}\n      );\n      this.$el.text(this.model.get(\"label\"));\n    },\n\n    hide: function vTabLabel_hide() {\n      this.$el.hide();\n    },\n\n    show: function vTabLabel_show() {\n      this.$el.show();\n    },\n\n    externalLinkSelected: function vAttributeExternalLinkSelected(event) {\n      var $target = $(event.currentTarget),\n        action,\n        options,\n        eventOptions,\n        documentModel,\n        internalEvent = {\n          prevent: false\n        };\n\n      event.preventDefault();\n      if (event.stopPropagation) {\n        event.stopPropagation();\n      }\n\n      action = $target.data(\"action\") || $target.attr(\"href\");\n      options = action.substring(8).split(\":\");\n      eventOptions = {\n        target: event.target,\n        index: -1,\n        eventId: options.shift(),\n        options: options\n      };\n      documentModel = this.model.getDocumentModel();\n\n      this.model.trigger(\"internalLinkSelected\", internalEvent, eventOptions);\n      if (event.prevent) {\n        return this;\n      }\n\n      documentModel.trigger(\"actionAttributeLink\", internalEvent, options);\n\n      return this;\n    }\n  });\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///91e09db81854b0efbcde\n");

/***/ }),

/***/ "95a79e27bcf315df846c":
/*!************************************************************************!*\
  !*** ./src/vendor/Anakeen/DOCUMENT/IHM/widgets/attributes/int/wInt.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*global define*/\n(function umdRequire(root, factory) {\n  \"use strict\";\n\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n      __webpack_require__(/*! jquery */ \"127c8cf59f228bb01a21\"),\n      __webpack_require__(/*! underscore */ \"8e08e542008e4aef1f58\"),\n      __webpack_require__(/*! mustache */ \"bcd31d01884fc294fd69\"),\n      __webpack_require__(/*! dcpDocument/widgets/attributes/text/wText */ \"f54cd12cb65078ca4c4a\"),\n      __webpack_require__(/*! kendo-culture-fr */ \"3d2e52a160dc74b891c1\")\n    ], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(window, function requireWint($, _, Mustache) {\n  \"use strict\";\n\n  $.widget(\"dcp.dcpInt\", $.dcp.dcpText, {\n    options: {\n      type: \"int\",\n\n      renderOptions: {\n        kendoNumericConfiguration: {},\n        max: null,\n        min: null,\n        numberFormat: \"n0\"\n      },\n      labels: {\n        decreaseLabel: \"Decrease value\",\n        increaseLabel: \"Increase value\"\n      }\n    },\n    /**\n     * The kendoNumericTextBox widget instance\n     */\n    kendoWidget: null,\n\n    _initDom: function wIntInitDom() {\n      this.element.addClass(\"dcpAttribute__content\");\n      this.element.attr(\"data-type\", this.getType());\n      this.element.attr(\"data-attrid\", this.options.id);\n      if (\n        this._stringToFloat(this.options.attributeValue.displayValue) ===\n        parseFloat(this.options.attributeValue.value)\n      ) {\n        this.options.attributeValue.displayValue = this.formatNumber(\n          this.options.attributeValue.value\n        );\n      }\n\n      if (this.getMode() === \"read\") {\n        if (this.options.renderOptions.format) {\n          this.options.attributeValue.formatValue = Mustache.render(\n            this.options.renderOptions.format || \"\",\n            this.options.attributeValue\n          );\n        }\n      }\n\n      //noinspection JSPotentiallyInvalidConstructorUsage,JSAccessibilityCheck\n      $.dcp.dcpAttribute.prototype._initDom.apply(this, []);\n\n      this.kendoWidget = this.element.find(\".dcpAttribute__value--edit\");\n      if (this.kendoWidget) {\n        if (this.options.hasAutocomplete) {\n          this.activateAutocomplete(this.kendoWidget);\n        } else {\n          this._activateNumber(this.kendoWidget);\n        }\n      }\n\n      if (\n        this.element.find(\".dcpAttribute__content__buttons button\").length === 0\n      ) {\n        this.element\n          .find(\".k-numeric-wrap\")\n          .addClass(\"dcpAttribute__content__nobutton\");\n      }\n    },\n\n    _initChangeEvent: function wIntInitChangeEvent() {\n      // set by widget if no autocomplete\n      if (this.options.hasAutocomplete) {\n        this._super();\n      }\n    },\n\n    _stringToFloat: function(text) {\n      if (typeof text === \"string\") {\n        return parseFloat(text.replace(\" \", \"\").replace(\",\", \".\"));\n      }\n      return parseFloat(text);\n    },\n\n    setValue: function wIntSetValue(value) {\n      // this._super.(value);\n      // Don't call dcpText::setValue()\n\n      value = _.clone(value);\n\n      if (_.has(value, \"value\") && !_.has(value, \"displayValue\")) {\n        value.displayValue = this.formatNumber(value.value);\n      } else {\n        if (\n          this._stringToFloat(value.displayValue) === parseFloat(value.value)\n        ) {\n          value.displayValue = this.formatNumber(value.value);\n        }\n      }\n\n      //noinspection JSPotentiallyInvalidConstructorUsage\n      $.dcp.dcpAttribute.prototype.setValue.apply(this, [value]);\n\n      if (this.getMode() === \"write\") {\n        var originalValue = this.kendoWidget\n          .data(\"kendoNumericTextBox\")\n          .value();\n        // : explicit lazy equal\n        //noinspection JSHint\n        if (originalValue != value.value) {\n          this.kendoWidget.data(\"kendoNumericTextBox\").value(value.value);\n          // Modify value only if different\n          this.flashElement();\n        }\n      } else {\n        if (this.getMode() === \"read\") {\n          this.getContentElements().text(value.displayValue);\n        } else {\n          throw new Error(\n            \"Attribute \" + this.options.id + \" unkown mode \" + this.getMode()\n          );\n        }\n      }\n    },\n\n    _activateNumber: function wIntActivateNumber(inputValue) {\n      var kendoWidget,\n        currentCSSClass = inputValue.attr(\"class\");\n      inputValue.removeClass(currentCSSClass);\n      //force display inline-block for work with kendo\n      inputValue.css(\"display\", \"inline-block\");\n      kendoWidget = inputValue.kendoNumericTextBox(\n        this.getKendoNumericOptions()\n      );\n      kendoWidget.closest(\".k-widget\").addClass(currentCSSClass);\n\n      if (\n        this.options.renderOptions.max !== undefined ||\n        this.options.renderOptions.min !== undefined\n      ) {\n        if (\n          this.options.attributeValue.value > this.options.renderOptions.max\n        ) {\n          this.element\n            .find(\".k-formatted-value.k-input\")\n            .val(this.formatNumber(this.options.attributeValue.value));\n        }\n        if (\n          this.options.attributeValue.value < this.options.renderOptions.min\n        ) {\n          this.element\n            .find(\".k-formatted-value.k-input\")\n            .val(this.formatNumber(this.options.attributeValue.value));\n        }\n      }\n      return kendoWidget;\n    },\n\n    formatNumber: function wIntFormatNumber(value) {\n      try {\n        value = kendo.toString(value, this.getKendoNumericOptions().format);\n      } catch (e) {\n        if (window.dcp.logger) {\n          window.dcp.logger(e);\n        } else {\n          console.error(e);\n        }\n        console.error(\"Unable to format the number \" + e);\n      }\n      return value;\n    },\n\n    /**\n     * Get kendo option from normal options and from renderOptions.kendoNumeric\n     * @returns {*}\n     */\n    getKendoNumericOptions: function wIntGetKendoNumericOptions() {\n      var scope = this,\n        kendoOptions = {},\n        defaultOptions = {\n          decimals: 0,\n          downArrowText: scope.options.labels.decreaseLabel,\n          upArrowText: scope.options.labels.increaseLabel,\n          format: scope.options.renderOptions.numberFormat,\n          max: scope.options.renderOptions.max,\n          min: scope.options.renderOptions.min,\n          change: function wIntGetKendoNumericOptions_onChange() {\n            // Need to set by widget to honor decimals option\n            scope.setValue({ value: this.value() });\n          }\n        };\n      if (_.isObject(scope.options.renderOptions.kendoNumericConfiguration)) {\n        kendoOptions = scope.options.renderOptions.kendoNumericConfiguration;\n      }\n\n      return _.extend(defaultOptions, kendoOptions);\n    },\n\n    getType: function wIntGetType() {\n      return \"int\";\n    },\n\n    testValue: function wIntTestValue(value) {\n      this._super(value);\n      if (!_.isNumber(value.value)) {\n        throw new Error(\n          \"The value must be a number for (attrid : \" + this.options.id + \")\"\n        );\n      }\n    },\n\n    _destroy: function _destroy() {\n      if (this.kendoWidget && this.kendoWidget.data(\"kendoNumericTextBox\")) {\n        this.kendoWidget.data(\"kendoNumericTextBox\").destroy();\n      }\n      this._super();\n    }\n  });\n\n  return $.fn.dcpInt;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTVhNzllMjdiY2YzMTVkZjg0NmMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdmVuZG9yL0FuYWtlZW4vRE9DVU1FTlQvSUhNL3dpZGdldHMvYXR0cmlidXRlcy9pbnQvd0ludC5qcz9lMmVkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qZ2xvYmFsIGRlZmluZSovXG4oZnVuY3Rpb24gdW1kUmVxdWlyZShyb290LCBmYWN0b3J5KSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShbXG4gICAgICBcImpxdWVyeVwiLFxuICAgICAgXCJ1bmRlcnNjb3JlXCIsXG4gICAgICBcIm11c3RhY2hlXCIsXG4gICAgICBcImRjcERvY3VtZW50L3dpZGdldHMvYXR0cmlidXRlcy90ZXh0L3dUZXh0XCIsXG4gICAgICBcImtlbmRvLWN1bHR1cmUtZnJcIlxuICAgIF0sIGZhY3RvcnkpO1xuICB9IGVsc2Uge1xuICAgIC8vbm9pbnNwZWN0aW9uIEpTVW5yZXNvbHZlZFZhcmlhYmxlXG4gICAgZmFjdG9yeSh3aW5kb3cualF1ZXJ5LCB3aW5kb3cuXywgd2luZG93Lk11c3RhY2hlKTtcbiAgfVxufSkod2luZG93LCBmdW5jdGlvbiByZXF1aXJlV2ludCgkLCBfLCBNdXN0YWNoZSkge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICAkLndpZGdldChcImRjcC5kY3BJbnRcIiwgJC5kY3AuZGNwVGV4dCwge1xuICAgIG9wdGlvbnM6IHtcbiAgICAgIHR5cGU6IFwiaW50XCIsXG5cbiAgICAgIHJlbmRlck9wdGlvbnM6IHtcbiAgICAgICAga2VuZG9OdW1lcmljQ29uZmlndXJhdGlvbjoge30sXG4gICAgICAgIG1heDogbnVsbCxcbiAgICAgICAgbWluOiBudWxsLFxuICAgICAgICBudW1iZXJGb3JtYXQ6IFwibjBcIlxuICAgICAgfSxcbiAgICAgIGxhYmVsczoge1xuICAgICAgICBkZWNyZWFzZUxhYmVsOiBcIkRlY3JlYXNlIHZhbHVlXCIsXG4gICAgICAgIGluY3JlYXNlTGFiZWw6IFwiSW5jcmVhc2UgdmFsdWVcIlxuICAgICAgfVxuICAgIH0sXG4gICAgLyoqXG4gICAgICogVGhlIGtlbmRvTnVtZXJpY1RleHRCb3ggd2lkZ2V0IGluc3RhbmNlXG4gICAgICovXG4gICAga2VuZG9XaWRnZXQ6IG51bGwsXG5cbiAgICBfaW5pdERvbTogZnVuY3Rpb24gd0ludEluaXREb20oKSB7XG4gICAgICB0aGlzLmVsZW1lbnQuYWRkQ2xhc3MoXCJkY3BBdHRyaWJ1dGVfX2NvbnRlbnRcIik7XG4gICAgICB0aGlzLmVsZW1lbnQuYXR0cihcImRhdGEtdHlwZVwiLCB0aGlzLmdldFR5cGUoKSk7XG4gICAgICB0aGlzLmVsZW1lbnQuYXR0cihcImRhdGEtYXR0cmlkXCIsIHRoaXMub3B0aW9ucy5pZCk7XG4gICAgICBpZiAoXG4gICAgICAgIHRoaXMuX3N0cmluZ1RvRmxvYXQodGhpcy5vcHRpb25zLmF0dHJpYnV0ZVZhbHVlLmRpc3BsYXlWYWx1ZSkgPT09XG4gICAgICAgIHBhcnNlRmxvYXQodGhpcy5vcHRpb25zLmF0dHJpYnV0ZVZhbHVlLnZhbHVlKVxuICAgICAgKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucy5hdHRyaWJ1dGVWYWx1ZS5kaXNwbGF5VmFsdWUgPSB0aGlzLmZvcm1hdE51bWJlcihcbiAgICAgICAgICB0aGlzLm9wdGlvbnMuYXR0cmlidXRlVmFsdWUudmFsdWVcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuZ2V0TW9kZSgpID09PSBcInJlYWRcIikge1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnJlbmRlck9wdGlvbnMuZm9ybWF0KSB7XG4gICAgICAgICAgdGhpcy5vcHRpb25zLmF0dHJpYnV0ZVZhbHVlLmZvcm1hdFZhbHVlID0gTXVzdGFjaGUucmVuZGVyKFxuICAgICAgICAgICAgdGhpcy5vcHRpb25zLnJlbmRlck9wdGlvbnMuZm9ybWF0IHx8IFwiXCIsXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMuYXR0cmlidXRlVmFsdWVcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vbm9pbnNwZWN0aW9uIEpTUG90ZW50aWFsbHlJbnZhbGlkQ29uc3RydWN0b3JVc2FnZSxKU0FjY2Vzc2liaWxpdHlDaGVja1xuICAgICAgJC5kY3AuZGNwQXR0cmlidXRlLnByb3RvdHlwZS5faW5pdERvbS5hcHBseSh0aGlzLCBbXSk7XG5cbiAgICAgIHRoaXMua2VuZG9XaWRnZXQgPSB0aGlzLmVsZW1lbnQuZmluZChcIi5kY3BBdHRyaWJ1dGVfX3ZhbHVlLS1lZGl0XCIpO1xuICAgICAgaWYgKHRoaXMua2VuZG9XaWRnZXQpIHtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5oYXNBdXRvY29tcGxldGUpIHtcbiAgICAgICAgICB0aGlzLmFjdGl2YXRlQXV0b2NvbXBsZXRlKHRoaXMua2VuZG9XaWRnZXQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuX2FjdGl2YXRlTnVtYmVyKHRoaXMua2VuZG9XaWRnZXQpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChcbiAgICAgICAgdGhpcy5lbGVtZW50LmZpbmQoXCIuZGNwQXR0cmlidXRlX19jb250ZW50X19idXR0b25zIGJ1dHRvblwiKS5sZW5ndGggPT09IDBcbiAgICAgICkge1xuICAgICAgICB0aGlzLmVsZW1lbnRcbiAgICAgICAgICAuZmluZChcIi5rLW51bWVyaWMtd3JhcFwiKVxuICAgICAgICAgIC5hZGRDbGFzcyhcImRjcEF0dHJpYnV0ZV9fY29udGVudF9fbm9idXR0b25cIik7XG4gICAgICB9XG4gICAgfSxcblxuICAgIF9pbml0Q2hhbmdlRXZlbnQ6IGZ1bmN0aW9uIHdJbnRJbml0Q2hhbmdlRXZlbnQoKSB7XG4gICAgICAvLyBzZXQgYnkgd2lkZ2V0IGlmIG5vIGF1dG9jb21wbGV0ZVxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5oYXNBdXRvY29tcGxldGUpIHtcbiAgICAgICAgdGhpcy5fc3VwZXIoKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgX3N0cmluZ1RvRmxvYXQ6IGZ1bmN0aW9uKHRleHQpIHtcbiAgICAgIGlmICh0eXBlb2YgdGV4dCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXR1cm4gcGFyc2VGbG9hdCh0ZXh0LnJlcGxhY2UoXCIgXCIsIFwiXCIpLnJlcGxhY2UoXCIsXCIsIFwiLlwiKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcGFyc2VGbG9hdCh0ZXh0KTtcbiAgICB9LFxuXG4gICAgc2V0VmFsdWU6IGZ1bmN0aW9uIHdJbnRTZXRWYWx1ZSh2YWx1ZSkge1xuICAgICAgLy8gdGhpcy5fc3VwZXIuKHZhbHVlKTtcbiAgICAgIC8vIERvbid0IGNhbGwgZGNwVGV4dDo6c2V0VmFsdWUoKVxuXG4gICAgICB2YWx1ZSA9IF8uY2xvbmUodmFsdWUpO1xuXG4gICAgICBpZiAoXy5oYXModmFsdWUsIFwidmFsdWVcIikgJiYgIV8uaGFzKHZhbHVlLCBcImRpc3BsYXlWYWx1ZVwiKSkge1xuICAgICAgICB2YWx1ZS5kaXNwbGF5VmFsdWUgPSB0aGlzLmZvcm1hdE51bWJlcih2YWx1ZS52YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgdGhpcy5fc3RyaW5nVG9GbG9hdCh2YWx1ZS5kaXNwbGF5VmFsdWUpID09PSBwYXJzZUZsb2F0KHZhbHVlLnZhbHVlKVxuICAgICAgICApIHtcbiAgICAgICAgICB2YWx1ZS5kaXNwbGF5VmFsdWUgPSB0aGlzLmZvcm1hdE51bWJlcih2YWx1ZS52YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy9ub2luc3BlY3Rpb24gSlNQb3RlbnRpYWxseUludmFsaWRDb25zdHJ1Y3RvclVzYWdlXG4gICAgICAkLmRjcC5kY3BBdHRyaWJ1dGUucHJvdG90eXBlLnNldFZhbHVlLmFwcGx5KHRoaXMsIFt2YWx1ZV0pO1xuXG4gICAgICBpZiAodGhpcy5nZXRNb2RlKCkgPT09IFwid3JpdGVcIikge1xuICAgICAgICB2YXIgb3JpZ2luYWxWYWx1ZSA9IHRoaXMua2VuZG9XaWRnZXRcbiAgICAgICAgICAuZGF0YShcImtlbmRvTnVtZXJpY1RleHRCb3hcIilcbiAgICAgICAgICAudmFsdWUoKTtcbiAgICAgICAgLy8gOiBleHBsaWNpdCBsYXp5IGVxdWFsXG4gICAgICAgIC8vbm9pbnNwZWN0aW9uIEpTSGludFxuICAgICAgICBpZiAob3JpZ2luYWxWYWx1ZSAhPSB2YWx1ZS52YWx1ZSkge1xuICAgICAgICAgIHRoaXMua2VuZG9XaWRnZXQuZGF0YShcImtlbmRvTnVtZXJpY1RleHRCb3hcIikudmFsdWUodmFsdWUudmFsdWUpO1xuICAgICAgICAgIC8vIE1vZGlmeSB2YWx1ZSBvbmx5IGlmIGRpZmZlcmVudFxuICAgICAgICAgIHRoaXMuZmxhc2hFbGVtZW50KCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0aGlzLmdldE1vZGUoKSA9PT0gXCJyZWFkXCIpIHtcbiAgICAgICAgICB0aGlzLmdldENvbnRlbnRFbGVtZW50cygpLnRleHQodmFsdWUuZGlzcGxheVZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICBcIkF0dHJpYnV0ZSBcIiArIHRoaXMub3B0aW9ucy5pZCArIFwiIHVua293biBtb2RlIFwiICsgdGhpcy5nZXRNb2RlKClcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIF9hY3RpdmF0ZU51bWJlcjogZnVuY3Rpb24gd0ludEFjdGl2YXRlTnVtYmVyKGlucHV0VmFsdWUpIHtcbiAgICAgIHZhciBrZW5kb1dpZGdldCxcbiAgICAgICAgY3VycmVudENTU0NsYXNzID0gaW5wdXRWYWx1ZS5hdHRyKFwiY2xhc3NcIik7XG4gICAgICBpbnB1dFZhbHVlLnJlbW92ZUNsYXNzKGN1cnJlbnRDU1NDbGFzcyk7XG4gICAgICAvL2ZvcmNlIGRpc3BsYXkgaW5saW5lLWJsb2NrIGZvciB3b3JrIHdpdGgga2VuZG9cbiAgICAgIGlucHV0VmFsdWUuY3NzKFwiZGlzcGxheVwiLCBcImlubGluZS1ibG9ja1wiKTtcbiAgICAgIGtlbmRvV2lkZ2V0ID0gaW5wdXRWYWx1ZS5rZW5kb051bWVyaWNUZXh0Qm94KFxuICAgICAgICB0aGlzLmdldEtlbmRvTnVtZXJpY09wdGlvbnMoKVxuICAgICAgKTtcbiAgICAgIGtlbmRvV2lkZ2V0LmNsb3Nlc3QoXCIuay13aWRnZXRcIikuYWRkQ2xhc3MoY3VycmVudENTU0NsYXNzKTtcblxuICAgICAgaWYgKFxuICAgICAgICB0aGlzLm9wdGlvbnMucmVuZGVyT3B0aW9ucy5tYXggIT09IHVuZGVmaW5lZCB8fFxuICAgICAgICB0aGlzLm9wdGlvbnMucmVuZGVyT3B0aW9ucy5taW4gIT09IHVuZGVmaW5lZFxuICAgICAgKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICB0aGlzLm9wdGlvbnMuYXR0cmlidXRlVmFsdWUudmFsdWUgPiB0aGlzLm9wdGlvbnMucmVuZGVyT3B0aW9ucy5tYXhcbiAgICAgICAgKSB7XG4gICAgICAgICAgdGhpcy5lbGVtZW50XG4gICAgICAgICAgICAuZmluZChcIi5rLWZvcm1hdHRlZC12YWx1ZS5rLWlucHV0XCIpXG4gICAgICAgICAgICAudmFsKHRoaXMuZm9ybWF0TnVtYmVyKHRoaXMub3B0aW9ucy5hdHRyaWJ1dGVWYWx1ZS52YWx1ZSkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChcbiAgICAgICAgICB0aGlzLm9wdGlvbnMuYXR0cmlidXRlVmFsdWUudmFsdWUgPCB0aGlzLm9wdGlvbnMucmVuZGVyT3B0aW9ucy5taW5cbiAgICAgICAgKSB7XG4gICAgICAgICAgdGhpcy5lbGVtZW50XG4gICAgICAgICAgICAuZmluZChcIi5rLWZvcm1hdHRlZC12YWx1ZS5rLWlucHV0XCIpXG4gICAgICAgICAgICAudmFsKHRoaXMuZm9ybWF0TnVtYmVyKHRoaXMub3B0aW9ucy5hdHRyaWJ1dGVWYWx1ZS52YWx1ZSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4ga2VuZG9XaWRnZXQ7XG4gICAgfSxcblxuICAgIGZvcm1hdE51bWJlcjogZnVuY3Rpb24gd0ludEZvcm1hdE51bWJlcih2YWx1ZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFsdWUgPSBrZW5kby50b1N0cmluZyh2YWx1ZSwgdGhpcy5nZXRLZW5kb051bWVyaWNPcHRpb25zKCkuZm9ybWF0KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKHdpbmRvdy5kY3AubG9nZ2VyKSB7XG4gICAgICAgICAgd2luZG93LmRjcC5sb2dnZXIoZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLmVycm9yKFwiVW5hYmxlIHRvIGZvcm1hdCB0aGUgbnVtYmVyIFwiICsgZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEdldCBrZW5kbyBvcHRpb24gZnJvbSBub3JtYWwgb3B0aW9ucyBhbmQgZnJvbSByZW5kZXJPcHRpb25zLmtlbmRvTnVtZXJpY1xuICAgICAqIEByZXR1cm5zIHsqfVxuICAgICAqL1xuICAgIGdldEtlbmRvTnVtZXJpY09wdGlvbnM6IGZ1bmN0aW9uIHdJbnRHZXRLZW5kb051bWVyaWNPcHRpb25zKCkge1xuICAgICAgdmFyIHNjb3BlID0gdGhpcyxcbiAgICAgICAga2VuZG9PcHRpb25zID0ge30sXG4gICAgICAgIGRlZmF1bHRPcHRpb25zID0ge1xuICAgICAgICAgIGRlY2ltYWxzOiAwLFxuICAgICAgICAgIGRvd25BcnJvd1RleHQ6IHNjb3BlLm9wdGlvbnMubGFiZWxzLmRlY3JlYXNlTGFiZWwsXG4gICAgICAgICAgdXBBcnJvd1RleHQ6IHNjb3BlLm9wdGlvbnMubGFiZWxzLmluY3JlYXNlTGFiZWwsXG4gICAgICAgICAgZm9ybWF0OiBzY29wZS5vcHRpb25zLnJlbmRlck9wdGlvbnMubnVtYmVyRm9ybWF0LFxuICAgICAgICAgIG1heDogc2NvcGUub3B0aW9ucy5yZW5kZXJPcHRpb25zLm1heCxcbiAgICAgICAgICBtaW46IHNjb3BlLm9wdGlvbnMucmVuZGVyT3B0aW9ucy5taW4sXG4gICAgICAgICAgY2hhbmdlOiBmdW5jdGlvbiB3SW50R2V0S2VuZG9OdW1lcmljT3B0aW9uc19vbkNoYW5nZSgpIHtcbiAgICAgICAgICAgIC8vIE5lZWQgdG8gc2V0IGJ5IHdpZGdldCB0byBob25vciBkZWNpbWFscyBvcHRpb25cbiAgICAgICAgICAgIHNjb3BlLnNldFZhbHVlKHsgdmFsdWU6IHRoaXMudmFsdWUoKSB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICBpZiAoXy5pc09iamVjdChzY29wZS5vcHRpb25zLnJlbmRlck9wdGlvbnMua2VuZG9OdW1lcmljQ29uZmlndXJhdGlvbikpIHtcbiAgICAgICAga2VuZG9PcHRpb25zID0gc2NvcGUub3B0aW9ucy5yZW5kZXJPcHRpb25zLmtlbmRvTnVtZXJpY0NvbmZpZ3VyYXRpb247XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfLmV4dGVuZChkZWZhdWx0T3B0aW9ucywga2VuZG9PcHRpb25zKTtcbiAgICB9LFxuXG4gICAgZ2V0VHlwZTogZnVuY3Rpb24gd0ludEdldFR5cGUoKSB7XG4gICAgICByZXR1cm4gXCJpbnRcIjtcbiAgICB9LFxuXG4gICAgdGVzdFZhbHVlOiBmdW5jdGlvbiB3SW50VGVzdFZhbHVlKHZhbHVlKSB7XG4gICAgICB0aGlzLl9zdXBlcih2YWx1ZSk7XG4gICAgICBpZiAoIV8uaXNOdW1iZXIodmFsdWUudmFsdWUpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICBcIlRoZSB2YWx1ZSBtdXN0IGJlIGEgbnVtYmVyIGZvciAoYXR0cmlkIDogXCIgKyB0aGlzLm9wdGlvbnMuaWQgKyBcIilcIlxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBfZGVzdHJveTogZnVuY3Rpb24gX2Rlc3Ryb3koKSB7XG4gICAgICBpZiAodGhpcy5rZW5kb1dpZGdldCAmJiB0aGlzLmtlbmRvV2lkZ2V0LmRhdGEoXCJrZW5kb051bWVyaWNUZXh0Qm94XCIpKSB7XG4gICAgICAgIHRoaXMua2VuZG9XaWRnZXQuZGF0YShcImtlbmRvTnVtZXJpY1RleHRCb3hcIikuZGVzdHJveSgpO1xuICAgICAgfVxuICAgICAgdGhpcy5fc3VwZXIoKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiAkLmZuLmRjcEludDtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQSxXQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///95a79e27bcf315df846c\n");

/***/ }),

/***/ "9d899764b00e608fd289":
/*!*************************************************************!*\
  !*** ./src/vendor/Anakeen/DOCUMENT/IHM/models/mDocument.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*global define, console, require*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n  __webpack_require__(/*! jquery */ \"127c8cf59f228bb01a21\"),\n  __webpack_require__(/*! underscore */ \"8e08e542008e4aef1f58\"),\n  __webpack_require__(/*! backbone */ \"1858b45bf48591489d06\"),\n  __webpack_require__(/*! little-loader */ \"bcb63a5837345ee29aa0\"),\n  __webpack_require__(/*! dcpDocument/models/mDocumentProperties */ \"6313c1253c848afae01c\"),\n  __webpack_require__(/*! dcpDocument/models/mDocumentLock */ \"0d65a9ae3080ca4d0345\"),\n  __webpack_require__(/*! dcpDocument/models/mFamilyStructure */ \"a41d3130711a0e18a937\"),\n  __webpack_require__(/*! dcpDocument/collections/attributes */ \"e7818e853c5e4b7cf56e\"),\n  __webpack_require__(/*! dcpDocument/collections/menus */ \"f2946d36ec572764f0f8\"),\n  __webpack_require__(/*! dcpDocument/i18n/documentCatalog */ \"c58409cf810742518d6e\")\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function mDocument(\n  $,\n  _,\n  Backbone,\n  load,\n  DocumentProperties,\n  DocumentLock,\n  FamilyStructure,\n  CollectionAttributes,\n  CollectionMenus,\n  i18n\n) {\n  \"use strict\";\n\n  var flattenAttributes = function mDocumentflattenAttributes(\n    currentAttributes,\n    attributes,\n    parent\n  ) {\n    if (!_.isArray(attributes)) {\n      attributes = _.values(attributes);\n    }\n    if (parent) {\n      _.each(attributes, function mDocumentEachflattenParentAttributes(value) {\n        value.parent = parent;\n      });\n    }\n    currentAttributes = _.union(currentAttributes, attributes);\n    _.each(attributes, function mDocumentEachflattenAttributes(currentAttr) {\n      if (currentAttr.content) {\n        currentAttributes = _.union(\n          currentAttributes,\n          flattenAttributes(\n            currentAttributes,\n            currentAttr.content,\n            currentAttr.id\n          )\n        );\n      }\n    });\n    return currentAttributes;\n  };\n\n  //noinspection JSValidateJSDoc\n  return Backbone.Model.extend({\n    typeModel: \"ddui:document\",\n    idAttribute: \"initid\",\n\n    defaults: {\n      revision: -1,\n      viewId: undefined,\n      renderMode: \"view\",\n      properties: undefined,\n      menus: undefined,\n      attributes: undefined\n    },\n    // Record custom data in model directly - not in model property because must not be reset by clear method\n    _customClientData: {},\n    _uploadingFile: 0,\n    /**\n     * Compute the REST URL for the current document\n     *\n     * Used internaly by backbone in fetch, save, destroy\n     *\n     * @returns {string}\n     */\n    url: function mDocumenturl() {\n      var urlData = \"api/v2/\",\n        viewId = this.get(\"viewId\");\n      var customClientData = this._customClientData;\n      var currentMethod = this.get(\"currentHttpMethod\");\n      var revision = this.get(\"revision\");\n\n      if (this.get(\"creationFamid\") && this.id === null) {\n        urlData +=\n          \"families/\" +\n          encodeURIComponent(this.get(\"creationFamid\")) +\n          \"/documentsViews/\";\n      } else {\n        urlData += \"documents/\" + encodeURIComponent(this.id);\n        //Don't add revision for the deletion of a alive document\n        if (revision !== null && currentMethod !== \"delete\") {\n          if (_.isObject(revision) && revision.state) {\n            urlData +=\n              \"/revisions/\" + encodeURIComponent(\"state:\" + revision.state);\n          } else if (revision >= 0) {\n            urlData += \"/revisions/\" + encodeURIComponent(revision);\n          }\n        }\n        if (viewId === undefined) {\n          if (this.get(\"renderMode\") === \"view\" || currentMethod === \"delete\") {\n            viewId = \"!defaultConsultation\";\n          } else if (this.get(\"renderMode\") === \"edit\") {\n            viewId = \"!defaultEdition\";\n          } else {\n            viewId = \"!defaultConsultation\";\n          }\n        }\n        if (currentMethod === \"delete\" && this.get(\"renderMode\") === \"edit\") {\n          viewId = \"!defaultConsultation\";\n        }\n        urlData += \"/views/\" + encodeURIComponent(viewId);\n      }\n\n      if (\n        !_.isEmpty(customClientData) &&\n        (currentMethod === \"read\" || currentMethod === \"delete\")\n      ) {\n        urlData +=\n          \"?customClientData=\" +\n          encodeURIComponent(JSON.stringify(customClientData));\n      }\n      return urlData;\n    },\n\n    /**\n     * override Backbone sync to record method\n     * @param method\n     * @param model\n     * @param options\n     * @returns {*}\n     */\n    sync: function mDocumentSync(method, model, options) {\n      this.set(\"currentHttpMethod\", method); // record for url method\n      options.attrs = this._customRequestData;\n      return Backbone.Model.prototype.sync.apply(this, arguments);\n    },\n    /**\n     * Initialize event handling\n     *\n     */\n    initialize: function mDocumentinitialize() {\n      var theModel = this;\n\n      this.listenTo(this, \"dduiDocumentFail\", this.propagateSynchroError);\n      this.listenTo(this, \"destroy\", this.destroySubcollection);\n      this.listenTo(this, \"destroy\", this.unbindLoadEvent);\n\n      $(window).on(\n        \"beforeunload.\" + this.cid,\n        function mDocumentBeforeUnload() {\n          var security = theModel.get(\"properties\")\n              ? theModel.get(\"properties\").get(\"security\")\n              : null,\n            event = { prevent: false };\n          if (theModel.hasAttributesChanged()) {\n            return i18n.___(\n              \"The form has been modified and is is not saved\",\n              \"ddui\"\n            );\n          }\n\n          theModel.trigger(\n            \"beforeClose\",\n            event,\n            theModel.getServerProperties(),\n            this._customClientData\n          );\n\n          if (event.prevent) {\n            return i18n.___(\"Unable to close the document\", \"ddui\");\n          }\n\n          if (\n            theModel.get(\"renderMode\") === \"edit\" &&\n            security &&\n            security.lock &&\n            security.lock.temporary\n          ) {\n            // No use model destroy : page is destroyed before request is some case\n            $.ajax({\n              url:\n                \"api/v2/documents/\" +\n                theModel.get(\"initid\") +\n                \"/locks/temporary\",\n              type: \"DELETE\",\n              async: false\n            });\n            theModel.set(\"unlocking\", true);\n          }\n        }\n      );\n\n      $(window).on(\"pagehide.\" + this.cid, function mDocumentPageHide(event) {\n        var security = theModel.get(\"properties\")\n          ? theModel.get(\"properties\").get(\"security\")\n          : null;\n        var unlocking = theModel.get(\"unlocking\");\n\n        theModel.trigger(\n          \"close\",\n          event,\n          theModel.getServerProperties(),\n          this._customClientData\n        );\n\n        if (\n          !unlocking &&\n          theModel.get(\"renderMode\") === \"edit\" &&\n          security &&\n          security.lock &&\n          security.lock.temporary\n        ) {\n          $.ajax({\n            url:\n              \"api/v2/documents/\" + theModel.get(\"initid\") + \"/locks/temporary\",\n            type: \"DELETE\",\n            async: false\n          });\n        }\n      });\n    },\n\n    /**\n     * Return a plain object of the current document for an usage in the view\n     *\n     * @returns {{document: {}}}\n     */\n    toData: function mDocumenttoData() {\n      var returnObject = {\n        document: {}\n      };\n      returnObject.document.properties = this.getServerProperties();\n      returnObject.menus = this.get(\"menus\").toJSON();\n      returnObject.templates = this.get(\"templates\");\n      return returnObject;\n    },\n\n    /**\n     * Return all the values of the current document\n     * @var onlyModified\n     * @returns {{}}\n     */\n    getValues: function mDocumentdocumentGetValues(onlyModified) {\n      var values = {};\n      if (!this.get(\"attributes\")) {\n        return values;\n      }\n      this.get(\"attributes\").each(function mDocumentGetValue(currentAttribute) {\n        var currentValue = currentAttribute.get(\"attributeValue\"),\n          i,\n          arrayValues = [];\n        if (\n          currentValue === null ||\n          !currentAttribute.get(\"isValueAttribute\")\n        ) {\n          return;\n        }\n        if (\n          onlyModified === true &&\n          currentAttribute.hasValueChanged() === false\n        ) {\n          return;\n        }\n        if (currentAttribute.get(\"multiple\")) {\n          currentValue = _.toArray(currentValue);\n          if (currentValue.length > 0) {\n            for (i = 0; i < currentValue.length; i += 1) {\n              arrayValues.push(currentValue[i] || { value: null });\n            }\n          } else {\n            arrayValues = []; //{value: null};\n          }\n          values[currentAttribute.id] = arrayValues;\n        } else {\n          values[currentAttribute.id] = currentValue;\n        }\n      });\n      return values;\n    },\n\n    /**\n     * reset all values with a new set of values\n     */\n    setValues: function mDocumentdocumentSetValues(values) {\n      this.get(\"attributes\").each(function mDocumentSetValue(currentAttribute) {\n        var newValue = values[currentAttribute.id];\n        if (!currentAttribute.get(\"isValueAttribute\")) {\n          return;\n        }\n        currentAttribute.set(\"attributeValue\", newValue);\n        // reset change also\n        currentAttribute.changed = {};\n      });\n    },\n\n    /**\n     * reset all properties with a new set of properties\n     */\n    setProperties: function mDocumentdocumentSetProperties(values) {\n      var model = this;\n      _.each(values, function mDocumentSetProperties(value, key) {\n        model.get(\"properties\").set(key, value);\n      });\n    },\n\n    lockDocument: function mDocumentLockDocument() {\n      var docModel = this;\n      var lockModel = new DocumentLock({\n        initid: this.get(\"initid\"),\n        type: \"permanent\"\n      });\n      var security = this.get(\"properties\").get(\"security\");\n      lockModel.save(\n        {},\n        {\n          success: function mDocumentLockDocumentSuccess(theModel, data) {\n            var menu = docModel.get(\"menus\");\n            security.lock = data.data.lock;\n            docModel.get(\"properties\").set(\"security,\", security);\n\n            menu.setMenu(\"lock\", \"visibility\", \"hidden\");\n            menu.setMenu(\"unlock\", \"visibility\", \"visible\");\n\n            docModel.get(\"properties\").trigger(\"change\");\n          },\n          error: function mDocumentLockDocumentError(theModel, HttpResponse) {\n            var response = JSON.parse(HttpResponse.responseText);\n\n            docModel.trigger(\"showError\", {\n              title: response.exceptionMessage\n            });\n          }\n        }\n      );\n    },\n\n    unlockDocument: function mDocumentUnLockDocument() {\n      var docModel = this;\n      //  type = empty means Delete all locks\n      var lockModel = new DocumentLock({\n        initid: this.get(\"initid\"),\n        type: \"\"\n      });\n      var security = this.get(\"properties\").get(\"security\");\n      lockModel.destroy({\n        success: function mDocumentUnLockDocumentSuccess() {\n          var menu = docModel.get(\"menus\");\n          security.lock = {\n            lockedBy: {\n              id: 0\n            }\n          };\n          docModel.get(\"properties\").set(\"security,\", security);\n\n          menu.setMenu(\"lock\", \"visibility\", \"visible\");\n          menu.setMenu(\"unlock\", \"visibility\", \"hidden\");\n          docModel.get(\"properties\").trigger(\"change\");\n        },\n        error: function mDocumentUnLockDocumentError(theModel, HttpResponse) {\n          var response = JSON.parse(HttpResponse.responseText);\n\n          docModel.trigger(\"showError\", {\n            title: response.exceptionMessage\n          });\n        }\n      });\n    },\n    /**\n     * Get a plain object with properties of the document\n     *\n     * @returns {*}\n     */\n    getModelProperties: function mDocumentdocumentGetProperties() {\n      var properties = {};\n      if (this.get(\"properties\")) {\n        properties = this.get(\"properties\").toJSON();\n      }\n      properties.initid = this.get(\"initid\");\n      properties.revision = this.get(\"revision\");\n      properties.viewId = this.get(\"viewId\");\n      properties.renderMode = this.get(\"renderMode\");\n\n      return properties;\n    },\n\n    /**\n     * Get the initial properties as transfered by the server\n     * @returns {*|{revision, viewId, renderMode, properties, menus, attributes}|{resizeMarginHeight, resizeMarginWidth, resizeDebounceTime, withoutResize, eventPrefix}|{content}|{title, isValueAttribute, parent, mode, errorMessage}|{documentId, documentModel, state, attributes}}\n     */\n    getServerProperties: function mDocument_getCurrentProperties() {\n      var properties;\n      properties = this.initialProperties;\n      if (properties) {\n        properties.hasUploadingFiles = this.hasUploadingFile();\n      }\n      return properties;\n    },\n\n    /**\n     * Indicate if one attribute of the document is modified\n     *\n     * @returns {*|boolean}\n     */\n    isModified: function mDocument_isModified() {\n      return this.hasAttributesChanged();\n    },\n\n    /**\n     * Get document properties, values and labels of attributes\n     */\n    getDocumentData: function mDocumentGetDocumentData() {\n      var documentData = {\n        properties: this.getModelProperties(),\n        attributeValues: this.getValues(false),\n        attributeLabels: {},\n        createAttributeView: function mDocumentGetDocumentDataCreate() {\n          return this.id;\n        }\n      };\n      this.get(\"attributes\").each(function mDocumentGetDocumentDataEach(\n        currentAttribute\n      ) {\n        documentData.attributeLabels[\n          currentAttribute.id\n        ] = currentAttribute.get(\"label\");\n      });\n      return documentData;\n    },\n    /**\n     * Return true if one the attribute of the document hasChanged\n     *\n     * @returns {boolean|*}\n     */\n    hasAttributesChanged: function mDocumenthasAttributesChanged() {\n      if (!this.get(\"attributes\")) {\n        return false;\n      }\n      return this.get(\"attributes\").some(\n        function mDocumenthasAttributesChangedSome(currentAttr) {\n          return currentAttr.hasValueChanged();\n        }\n      );\n    },\n\n    hasUploadingFile: function mdocumenthasUploadingFile() {\n      return this._uploadingFile > 0;\n    },\n\n    /**\n     * Analyze return in case of sync uncomplete and trigger event error\n     *\n     * @param model\n     * @param xhr\n     */\n    propagateSynchroError: function mDocumentpropagateSynchroError(model, xhr) {\n      var attrModel,\n        currentModel = this,\n        parsedReturn,\n        errorCode = null,\n        title = \"\",\n        properties;\n      //Analyze XHR\n      var messages = [];\n      var result;\n      try {\n        if (!xhr) {\n          if (model && model.message) {\n            messages.push({ type: \"error\", contentText: model.message });\n          }\n          xhr = { status: 500, statusText: \"Internal - No HTTP response\" };\n        } else {\n          result = JSON.parse(xhr.responseText);\n          if (result.message) {\n            messages.push(result);\n          } else if (result.messages) {\n            messages = result.messages;\n          }\n        }\n      } catch (e) {\n        //Unable to parse responseText (error is not in JSON)\n        this.cleanErrorMessages();\n        if (window.dcp.logger) {\n          window.dcp.logger(e);\n        } else {\n          console.error(e);\n        }\n        properties = currentModel.getServerProperties();\n        if (!properties || !properties.initid) {\n          //First loading, unable to load display reload iframe panel\n          currentModel.trigger(\"displayNetworkError\");\n          return;\n        }\n        //There is an initd, so there is a document\n        //We display a message and let the user try again\n        //Status 0 indicate offline browser\n        if (xhr && xhr.status === 0) {\n          currentModel.trigger(\"showError\", {\n            errorCode: \"offline\",\n            title: i18n.___(\"Your navigator seems offline, try later\", \"ddui\")\n          });\n        } else {\n          currentModel.trigger(\"showError\", {\n            errorCode: \"unableToParseJson\",\n            title: i18n.___(\"Server return unreadable\", \"ddui\")\n          });\n        }\n        currentModel.setProperties(properties);\n        this.trigger(\"dduiDocumentDisplayView\");\n        return;\n      }\n\n      parsedReturn = {\n        messages: messages || [],\n        responseText: \"Unexpected error: \" + xhr.status + \" \" + xhr.statusText\n      };\n\n      this.cleanErrorMessages();\n      if (parsedReturn.messages.length === 0) {\n        if (result && result.exceptionMessage) {\n          parsedReturn.responseText = result.exceptionMessage;\n        }\n\n        if (currentModel.get(\"properties\")) {\n          title = currentModel.get(\"properties\").get(\"title\");\n        }\n        currentModel.trigger(\"showError\", {\n          errorCode: errorCode,\n          title: i18n.___(\"Unexpected error \", \"ddui\") + \" : \" + title,\n          message: parsedReturn.responseText\n        });\n      }\n      _.each(\n        parsedReturn.messages,\n        function mDocumentpropagateSynchroErrorMessages(message) {\n          switch (message.code) {\n            case \"ROUTES0107\": // Syntax Error\n              if (message.data && message.data.id) {\n                attrModel = currentModel.get(\"attributes\").get(message.data.id);\n                if (attrModel) {\n                  attrModel.setErrorMessage(\n                    message.data.err,\n                    message.data.index\n                  );\n                  currentModel.trigger(\"showError\", {\n                    title: message.contentText,\n                    htmlMessage: message.contentHtml,\n                    message:\n                      attrModel.attributes.label + \" : \" + message.data.err,\n                    errorCode: message.code\n                  });\n                } else {\n                  currentModel.trigger(\"showError\", {\n                    title: message.contentText,\n                    htmlMessage: message.contentHtml,\n                    message: message.data.err,\n                    errorCode: message.code\n                  });\n                }\n              }\n              break;\n            case \"ROUTES0109\": // Constraint Error\n              if (message.data && message.data.constraint) {\n                _.each(\n                  message.data.constraint,\n                  function mDocumentpropagateSynchroError0212(constraint) {\n                    attrModel = currentModel\n                      .get(\"attributes\")\n                      .get(constraint.id);\n                    if (attrModel) {\n                      attrModel.setErrorMessage(\n                        constraint.err,\n                        constraint.index\n                      );\n                      currentModel.trigger(\"showError\", {\n                        title: message.contentText,\n                        htmlMessage: message.contentHtml,\n                        message:\n                          attrModel.attributes.label + \" : \" + constraint.err,\n                        errorCode: message.code\n                      });\n                    } else {\n                      currentModel.trigger(\"showError\", {\n                        title: message.contentText,\n                        htmlMessage: message.contentHtml,\n                        message: constraint.err,\n                        errorCode: message.code\n                      });\n                    }\n                  }\n                );\n              }\n              if (message.data && message.data.preStore) {\n                currentModel.trigger(\"showError\", {\n                  title: message.contentText,\n                  htmlMessage: message.contentHtml,\n                  message: message.data.preStore,\n                  errorCode: message.code\n                });\n              }\n              break;\n\n            default:\n              if (message.exceptionMessage) {\n                currentModel.trigger(\"showError\", {\n                  title:\n                    message.message + \" \" + (message.code ? message.code : \"\"),\n                  errorCode: message.code\n                });\n              } else {\n                if (message.type === \"error\" && message.contentText) {\n                  currentModel.trigger(\"showError\", {\n                    title:\n                      message.contentText +\n                      \" \" +\n                      (message.code ? message.code : \"\"),\n                    type: message.type,\n                    message: message.contentText,\n                    htmlMessage: message.contentHtml,\n                    errorCode: message.code\n                  });\n                } else {\n                  if (message.type && message.contentText) {\n                    currentModel.trigger(\"showMessage\", {\n                      title:\n                        message.contentText +\n                        \" \" +\n                        (message.code ? message.code : \"\"),\n                      type: message.type,\n                      message: message.contentText,\n                      htmlMessage: message.contentHtml,\n                      errorCode: message.code\n                    });\n                  } else {\n                    console.error(\"Error\", message);\n                  }\n                }\n              }\n          }\n        }\n      );\n      this.trigger(\"dduiDocumentDisplayView\");\n    },\n\n    /**\n     * Validate the content of the model before synchro\n     */\n    validate: function mDocumentvalidate(documentElements, options) {\n      var success = true,\n        currentDocument = this,\n        errorMessage = [],\n        event = { prevent: false },\n        templateMessage,\n        error;\n      try {\n        this.trigger(\"validate\", event);\n        if (event.prevent) {\n          return {\n            title: \"Unable to save\"\n          };\n        }\n\n        this.get(\"attributes\").each(function mDocumentvalidateClearErrorEach(\n          currentAttribute\n        ) {\n          currentAttribute.setErrorMessage(null);\n        });\n\n        this.get(\"attributes\").each(function mDocumentvalidateEach(\n          currentAttribute\n        ) {\n          var parentAttribute = currentDocument\n            .get(\"attributes\")\n            .get(currentAttribute.get(\"parent\"));\n\n          if (currentAttribute.get(\"needed\") === true) {\n            var currentValue = currentAttribute.get(\"attributeValue\"),\n              oneSuccess = true;\n\n            if (currentAttribute.get(\"multiple\")) {\n              if (parentAttribute.get(\"type\") === \"array\") {\n                // Verify each index\n                _.each(currentValue, function mDocumentvalidateArray(\n                  attributeValue,\n                  index\n                ) {\n                  //If the attribute is multiple we check if the array has a size superior to 0\n                  if (_.isArray(attributeValue) && attributeValue.length > 0) {\n                    return;\n                  }\n                  if (\n                    (!attributeValue || !attributeValue.value) &&\n                    attributeValue.value !== 0\n                  ) {\n                    currentAttribute.setErrorMessage(\n                      i18n.___(\"Empty value not allowed\", \"ddui\"),\n                      index\n                    );\n\n                    templateMessage = _.template(\n                      i18n.___(\n                        \"{{parentLabel}} / {{label}} (row # {{index}}) is needed\",\n                        \"ddui\"\n                      ),\n                      { escape: /\\{\\{(.+?)\\}\\}/g }\n                    );\n                    errorMessage.push(\n                      templateMessage({\n                        parentLabel: parentAttribute.get(\"label\"),\n                        label: currentAttribute.get(\"label\"),\n                        index: index + 1\n                      })\n                    );\n                    success = false;\n                  }\n                });\n              } else {\n                if (!currentValue || currentValue.length === 0) {\n                  oneSuccess = false;\n                }\n              }\n            } else {\n              if (\n                (!currentValue || !currentValue.value) &&\n                currentValue.value !== 0\n              ) {\n                oneSuccess = false;\n              }\n            }\n            if (!oneSuccess) {\n              templateMessage = _.template(\n                i18n.___(\"{{parentLabel}} / {{label}} is needed\", \"ddui\"),\n                { escape: /\\{\\{(.+?)\\}\\}/g }\n              );\n              errorMessage.push(\n                templateMessage({\n                  parentLabel: parentAttribute.get(\"label\"),\n                  label: currentAttribute.get(\"label\")\n                })\n              );\n              currentAttribute.setErrorMessage(\n                i18n.___(\"The field must not be empty\", \"ddui\")\n              );\n              success = false;\n            }\n          }\n\n          if (!currentAttribute.checkConstraint({ clearError: false })) {\n            success = false;\n            if (_.isArray(currentAttribute.get(\"errorMessage\"))) {\n              templateMessage = _.template(\n                \"<%= parentLabel %> / <%= label %> \" +\n                  \"<% for(var msg in errorMessage) { %>\" +\n                  \"\\n<%- rowText %> <%= errorMessage[msg].index + 1 %> : <%= errorMessage[msg].message %>\\n <% } %> \"\n              );\n            } else {\n              templateMessage = _.template(\n                \"<%= parentLabel %> / <%= label %> <%= errorMessage %>\"\n              );\n            }\n            errorMessage.push(\n              templateMessage({\n                parentLabel: parentAttribute.get(\"label\"),\n                label: currentAttribute.get(\"label\"),\n                rowText: i18n.___(\"Row #\", \"ddui\"),\n                errorMessage: currentAttribute.get(\"errorMessage\")\n              })\n            );\n          }\n        });\n        if (!success) {\n          error = {\n            title: i18n.___(\"Unable to save\", \"ddui\"),\n            message: errorMessage.join(\", \" + \"\\n\"),\n            errorCode: \"attributeNeeded\"\n          };\n          if (options && options.error) {\n            options.error(_.extend({ eventPrevented: true }, error));\n          }\n          return error;\n        }\n      } catch (e) {\n        console.error(\"Unable to validate\");\n        console.error(e);\n      }\n\n      return undefined;\n    },\n\n    /**\n     * Propagate to attributes a clear message for the error displayed\n     */\n    cleanErrorMessages: function mDocumentCleanErrorMessages() {\n      var attrModels = this.get(\"attributes\") || [];\n      _.each(attrModels.models, function mDocumentCleanErrorMessagesEach(\n        attrModel\n      ) {\n        attrModel.setErrorMessage(null);\n      });\n    },\n    /**\n     * Parse the return of the REST API\n     * @param response\n     * @returns {{properties: (*|properties|exports.defaults.properties|exports.parse.properties|.createObjectExpression.properties), menus: (app.views.shared.menu|*), locale: *, renderMode: string, attributes: Array, templates: *, renderOptions: *}}\n     */\n    parse: function mDocumentParse(response) {\n      var values,\n        renderMode = \"view\",\n        view = response.data.view;\n\n      if (response.success === false) {\n        throw new Error(\"Unable to get the data from documents\");\n      }\n      this.trigger(\"beforeParse\");\n      if (view.renderOptions.mode) {\n        if (view.renderOptions.mode === \"edit\") {\n          renderMode = \"edit\";\n        } else if (view.renderOptions.mode === \"view\") {\n          renderMode = \"view\";\n        } else {\n          throw new Error(\"Unkown render mode \" + view.renderOptions.mode);\n        }\n      }\n\n      this.initialProperties = _.defaults(\n        {\n          renderMode: renderMode || \"view\",\n          viewId: response.data.properties.requestIdentifier\n        },\n        view.documentData.document.properties\n      );\n\n      //Clean attributes\n      if (this.get(\"attributes\") instanceof CollectionAttributes) {\n        this.get(\"attributes\").destroy();\n      }\n\n      values = {\n        initid:\n          response.data.properties.creationView === true\n            ? null\n            : view.documentData.document.properties.initid,\n        properties: view.documentData.document.properties,\n        menus: view.menu,\n        viewId: response.data.properties.requestIdentifier,\n        revision: view.documentData.document.properties.revision,\n        locale: view.locale.culture,\n        renderMode: renderMode || \"view\",\n        attributes: undefined,\n        templates: view.templates,\n        renderOptions: view.renderOptions,\n        customCSS: view.style.css,\n        customJS: view.script.js,\n        customServerData: view.customServerData,\n        messages: response.messages,\n        originalValues: view.documentData.document.attributes\n      };\n      this._customClientData = {};\n      this._customRequestData = null;\n      if (response.data.properties.creationView === true) {\n        values.creationFamid =\n          view.documentData.document.properties.family.name;\n      } else {\n        values.creationFamid = false;\n      }\n      return values;\n    },\n\n    /**\n     * Generate the collection of the current model and bind events on the new collection\n     *\n     * @param keyOrValues string|object of properties or key of the current property\n     * @param value\n     * @returns {*}\n     */\n    set: function mDocumentsetValues(keyOrValues, value) {\n      var currentModel = this;\n      if (keyOrValues.properties !== undefined) {\n        if (currentModel.get(\"properties\") instanceof DocumentProperties) {\n          currentModel.get(\"properties\").trigger(\"destroy\");\n        }\n        keyOrValues.properties = new DocumentProperties(keyOrValues.properties);\n      }\n\n      if (keyOrValues.menus !== undefined) {\n        if (currentModel.get(\"menus\") instanceof CollectionMenus) {\n          currentModel.get(\"menus\").destroy();\n        }\n        keyOrValues.menus = new CollectionMenus(keyOrValues.menus);\n      }\n      if (keyOrValues === \"attributes\") {\n        value = new CollectionAttributes(value, {\n          documentModel: currentModel,\n          renderOptions: currentModel.get(\"renderOptions\"),\n          renderMode: currentModel.get(\"renderMode\")\n        });\n        //Set the internal content collection (for structure attributes)\n        value.each(function mDocumentsetValuesEachAttributes(\n          currentAttributeModel\n        ) {\n          if (currentAttributeModel.get(\"isValueAttribute\")) {\n            return;\n          }\n          var childAttributes = value.filter(\n            function mDocumentsetValuesEachAttributesFilter(\n              candidateChildModel\n            ) {\n              return (\n                candidateChildModel.get(\"parent\") === currentAttributeModel.id\n              );\n            }\n          );\n          if (childAttributes.length > 0) {\n            currentAttributeModel.setContentCollection(childAttributes);\n          }\n        });\n        //Propagate the change event to the model\n        currentModel.listenTo(\n          value,\n          \"change:attributeValue\",\n          function mDocumentsetValuesListenChange(model) {\n            _.defer(function mDocumentAttributeChangerTrigger() {\n              currentModel.trigger(\"changeValue\", {\n                attributeId: model.id\n              });\n            });\n          }\n        );\n        //Propagate the validate event to the model\n        currentModel.listenTo(\n          value,\n          \"constraint\",\n          function mDocumentsetValuesListenConstraint(options) {\n            currentModel.trigger(\n              \"constraint\",\n              options.model.id,\n              options.response\n            );\n          }\n        );\n        //Propagate the renderDone event of the attributes to the model\n        currentModel.listenTo(\n          value,\n          \"renderDone\",\n          function mDocumentsetValuesListenRenderDone(options) {\n            currentModel.trigger(\n              \"attributeRender\",\n              options.model.id,\n              options.$el,\n              options.index\n            );\n          }\n        );\n        //Propagate the beforeRender event of the attributes to the model\n        currentModel.listenTo(\n          value,\n          \"beforeRender\",\n          function mDocumentsetValuesListenBeforeRender(event, options) {\n            currentModel.trigger(\n              \"beforeAttributeRender\",\n              event,\n              options.model.id,\n              options.$el,\n              options.index\n            );\n          }\n        );\n        //Propagate the array event modified to the model\n        currentModel.listenTo(\n          value,\n          \"array\",\n          function mDocumentsetValuesListenArray(type, model, options) {\n            currentModel.trigger(\"arrayModified\", {\n              attributeId: model.id,\n              type: type,\n              options: options\n            });\n          }\n        );\n        //Propagate the event externalLinkSelected to the model\n        currentModel.listenTo(\n          value,\n          \"internalLinkSelected\",\n          function mDocumentsetValuesListenLinkSelected(event, options) {\n            currentModel.trigger(\"internalLinkSelected\", event, options);\n          }\n        );\n        //Propagate the event downloadFile to the model\n        currentModel.listenTo(\n          value,\n          \"downloadFile\",\n          function mDocumentsetValuesListenDownloadfile(\n            event,\n            attrid,\n            options\n          ) {\n            currentModel.trigger(\"downloadFile\", event, attrid, options);\n          }\n        );\n\n        //Propagate the event uploadFile to the model\n        currentModel.listenTo(\n          value,\n          \"uploadFile\",\n          function mDocumentListenUploadfileStart(event, attrid, options) {\n            var attr, attrValue;\n            currentModel.trigger(\"uploadFile\", event, attrid, options);\n\n            if (!event.prevent) {\n              attr = currentModel.get(\"attributes\").get(attrid);\n\n              currentModel._uploadingFile++;\n\n              if (attr) {\n                attrValue = attr.get(\"attributeValue\");\n                if (options.index >= 0) {\n                  attrValue = _.clone(attrValue);\n                  attrValue[options.index] = {\n                    value: \"-^-\",\n                    displayValue: \"Uploading\"\n                  };\n                } else {\n                  attrValue = { value: \"--\", displayValue: \"Uploading\" };\n                }\n                // Use Silent to not redraw widget - it will be redraw at the end of uploading\n                attr.set(\"attributeValue\", attrValue, { silent: true });\n                currentModel.trigger(\"changeValue\", {\n                  attributeId: attrid\n                });\n              }\n            }\n          }\n        );\n\n        //Propagate the event uploadFile to the model\n        currentModel.listenTo(\n          value,\n          \"uploadFileDone\",\n          function mDocumentListenuploadFileDone(event, attrid, options) {\n            currentModel._uploadingFile--;\n            currentModel.trigger(\"uploadFileDone\", event, attrid, options);\n\n            if (currentModel._uploadingFile <= 0) {\n              currentModel.trigger(\"uploadFileFinished\");\n            }\n          }\n        );\n\n        //Propagate the event helperSearch to the model\n        currentModel.listenTo(\n          value,\n          \"helperSearch\",\n          function mDocumentsetValuesListenHelperSearch(\n            event,\n            attrid,\n            options,\n            index\n          ) {\n            currentModel.trigger(\"helperSearch\", event, attrid, options, index);\n          }\n        );\n        //Propagate the event helperResponse to the model\n        currentModel.listenTo(\n          value,\n          \"helperResponse\",\n          function mDocumentsetValuesListenHelperResponse(\n            event,\n            attrid,\n            options,\n            index\n          ) {\n            currentModel.trigger(\n              \"helperResponse\",\n              event,\n              attrid,\n              options,\n              index\n            );\n          }\n        );\n        //Propagate the event helperResponse to the model\n        currentModel.listenTo(\n          value,\n          \"helperSelect\",\n          function mDocumentsetValuesListenHelperSelect(\n            event,\n            attrid,\n            options,\n            index\n          ) {\n            currentModel.trigger(\"helperSelect\", event, attrid, options, index);\n          }\n        );\n        //Propagate the click on an anchor to the model\n        currentModel.listenTo(\n          value,\n          \"anchorClick\",\n          function mDocumentsetValuesListenAnchorClicked(\n            event,\n            attrid,\n            options\n          ) {\n            currentModel.trigger(\"anchorClick\", event, attrid, options);\n          }\n        );\n        //Propagate attributeBeforeTabSelect\n        currentModel.listenTo(\n          value,\n          \"attributeBeforeTabSelect\",\n          function mDocumentattributeBeforeTabSelect(event, attrid) {\n            currentModel.trigger(\"attributeBeforeTabSelect\", event, attrid);\n          }\n        );\n        //Propagate attributeAfterTabSelect\n        currentModel.listenTo(\n          value,\n          \"attributeAfterTabSelect\",\n          function mDocumentattributeAfterTabSelect(event, attrid) {\n            currentModel.trigger(\"attributeAfterTabSelect\", event, attrid);\n          }\n        );\n        currentModel.listenTo(\n          value,\n          \"attributeTabChange\",\n          function mDocumentattributeTabChange(event, attrid, $el, data) {\n            currentModel.trigger(\n              \"attributeTabChange\",\n              event,\n              attrid,\n              $el,\n              data\n            );\n          }\n        );\n      }\n      return Backbone.Model.prototype.set.call(this, keyOrValues, value);\n    },\n\n    unbindLoadEvent: function mDocumentUnbindLoadEvent() {\n      $(window).off(\".\" + this.cid);\n    },\n\n    /**\n     * Destroy the collection associated to the document (used in the destroy part of the view)\n     *\n     */\n    destroySubcollection: function mDocumentdestroySubcollection() {\n      if (this.get(\"menus\") instanceof CollectionMenus) {\n        this.get(\"menus\").destroy();\n      }\n      if (this.get(\"properties\") instanceof DocumentProperties) {\n        this.get(\"properties\").trigger(\"destroy\");\n      }\n      if (this.get(\"attributes\") instanceof CollectionAttributes) {\n        this.get(\"attributes\").destroy();\n      }\n    },\n\n    /**\n     * Inject JS in the main page before render view\n     * To launch beforeRender and beforeRenderAttribute\n     */\n    injectCurrentDocJS: function mDocumentInjectCurrentDocJS() {\n      var allInjectPromises = [],\n        injectPromise = this._promiseCallback(),\n        customJS = _.pluck(this.get(\"customJS\"), \"path\");\n\n      _.each(customJS, function injectElement(currentPath) {\n        if ($('script[src=\"' + currentPath + '\"]').length === 0) {\n          allInjectPromises.push(\n            new Promise(function addJs(resolve, reject) {\n              load(currentPath, function addJsDone(err) {\n                if (err) {\n                  reject(err);\n                } else {\n                  resolve();\n                }\n              });\n            })\n          );\n        }\n      });\n\n      Promise.all(allInjectPromises)\n        .then(injectPromise.success)\n        .catch(injectPromise.error);\n\n      return injectPromise.promise;\n    },\n\n    /**\n     * Inject an array of js in the current page\n     *\n     * @param jsToInject Array of string to inject\n     * @return Promise\n     */\n    injectJS: function mDocumentInjectJs(jsToInject) {\n      var allInjectPromises = [];\n      if (!_.isArray(jsToInject)) {\n        throw new Error(\"The js to inject must be an array of string path\");\n      }\n      _.each(jsToInject, function injectElement(currentPath) {\n        if ($('script[src=\"' + currentPath + '\"]').length === 0) {\n          allInjectPromises.push(\n            new Promise(function addJs(resolve, reject) {\n              load(currentPath, function addJsDone(err) {\n                if (err) {\n                  reject(err);\n                } else {\n                  resolve();\n                }\n              });\n            })\n          );\n        }\n      });\n      return Promise.all(allInjectPromises);\n    },\n\n    /**\n     * Inject an array of css path in the current page\n     *\n     * @param customCss\n     */\n    injectCSS: function mDocumentInjectCSS(customCss) {\n      // add custom css style\n      var $head = $(\"head\"),\n        cssLinkTemplate = _.template(\n          '<link rel=\"stylesheet\" type=\"text/css\" ' +\n            'href=\"<%= path %>\" data-injected=\"true\">'\n        );\n\n      if (!_.isArray(customCss)) {\n        throw new Error(\"The css to inject must be an array of string path\");\n      }\n\n      // Inject new CSS\n      _.each(customCss, function vDocumentInjectNewCSS(cssItem) {\n        if (document.createStyleSheet) {\n          document.createStyleSheet(cssItem);\n        }\n        $head.append(cssLinkTemplate({ path: cssItem }));\n      });\n    },\n\n    /**\n     * Used by backbone for the save part\n     * @var getAllAttributes  ((false by default) : if true return also unmodified values\n     * @returns {{document: {attributes: *, properties : *}}}\n     */\n    toJSON: function mDocumenttoJSON(getAllAttributes) {\n      return {\n        document: {\n          properties: this.getModelProperties(),\n          attributes: this.getValues(getAllAttributes !== true)\n        },\n        customClientData: this._customClientData\n      };\n    },\n\n    /**\n     * Get render option for document widget\n     * @param optId\n     * @returns {*}\n     */\n    getOption: function mDocumentGetOption(optId) {\n      var renderOptions = this.get(\"renderOptions\");\n      if (renderOptions && renderOptions.document) {\n        return renderOptions.document[optId];\n      }\n      return undefined;\n    },\n\n    _promiseCallback: function mDocument_promiseCallback() {\n      var promise,\n        success,\n        error,\n        properties = this.getServerProperties();\n\n      promise = new Promise(function mDocument_promiseInternObject(\n        resolve,\n        reject\n      ) {\n        success = function onSuccess(values) {\n          var successArguments = values;\n          if (values && successArguments[\"promiseArguments\"]) {\n            successArguments = values[\"promiseArguments\"];\n          } else {\n            successArguments = arguments;\n          }\n          if (values && successArguments.documentProperties) {\n            properties = successArguments.documentProperties;\n          }\n          resolve({\n            documentProperties: properties,\n            promiseArguments: successArguments\n          });\n        };\n        error = function onError(values) {\n          var errorArguments = values;\n          if (values && errorArguments[\"promiseArguments\"]) {\n            errorArguments = values[\"promiseArguments\"];\n          } else {\n            errorArguments = arguments;\n          }\n          if (values && errorArguments.documentProperties) {\n            properties = errorArguments.documentProperties;\n          }\n          reject({\n            documentProperties: properties,\n            promiseArguments: errorArguments\n          });\n        };\n      });\n\n      //noinspection JSUnusedAssignment\n      return {\n        promise: promise,\n        success: success,\n        error: error\n      };\n    },\n\n    /**\n     * Complete the loading of the document\n     * Fetch the structure and external js deps\n     *\n     * @private\n     */\n    _loadDocument: function mDocumentLoadDocument(currentModel) {\n      var properties = this.getServerProperties();\n\n      return new Promise(function mDocument_promiseLoadDocument(\n        resolve,\n        reject\n      ) {\n        //Complete the structure after\n        currentModel._completeStructure().then(\n          function onGetStructureDone() {\n            currentModel.injectCurrentDocJS().then(\n              function mDocument_injectJSDone(/*values*/) {\n                resolve({\n                  documentProperties: properties,\n                  successpromiseArguments: arguments\n                });\n              },\n              function mDocument_injectJSFail(values) {\n                reject({\n                  documentProperties: properties,\n                  promiseArguments: arguments\n                });\n                currentModel.trigger.apply(\n                  currentModel,\n                  _.union([\"dduiDocumentFail\"], values.promiseArguments)\n                );\n              }\n            );\n          },\n          function mDocument_onGetStructureFail(values) {\n            reject({\n              documentProperties: properties,\n              promiseArguments: arguments\n            });\n            currentModel.trigger.apply(\n              currentModel,\n              _.union([\"dduiDocumentFail\"], values.promiseArguments)\n            );\n          }\n        );\n      });\n    },\n\n    fetchDocument: function mDocumentFetchDocument(values, options) {\n      var globalCallback = this._promiseCallback(),\n        documentCallback = this._promiseCallback(),\n        serverProperties = this.getServerProperties(),\n        currentModel = this,\n        needToUnlock = {},\n        beforeCloseReturn = { prevent: false },\n        lockModel = null,\n        nextView = false,\n        security,\n        previousMode,\n        lockCallback = this._promiseCallback();\n\n      options = options || {};\n      values = values || {};\n\n      if (_.isEmpty(this._customClientData)) {\n        this.trigger(\"getCustomClientData\");\n      }\n\n      //Register promise events\n      documentCallback.promise.then(\n        function onFetchDocumentDone(currentModelProperties) {\n          currentModel._loadDocument(currentModel).then(\n            function mDocument_loadDocumentDone(values) {\n              globalCallback.success.apply(currentModelProperties, values);\n            },\n            function mDocument_loadDocumentFail(values) {\n              globalCallback.error.apply(\n                currentModelProperties,\n                values && values.promiseArguments\n                  ? values.promiseArguments\n                  : values\n              );\n            }\n          );\n        },\n        function mDocument_onFetchDocumentFail(values) {\n          globalCallback.error.call(\n            serverProperties,\n            values && values.promiseArguments ? values.promiseArguments : values\n          );\n        }\n      );\n\n      globalCallback.promise.then(\n        function onPrepareDocumentDone(values) {\n          if (_.isFunction(options.success)) {\n            options.success(values);\n          }\n          currentModel.trigger(\"close\", serverProperties);\n          currentModel.trigger.apply(\n            currentModel,\n            _.union([\"dduiDocumentReady\"], values.promiseArguments)\n          );\n        },\n        function onPrepareDocumentFail(values) {\n          if (_.isFunction(options.error)) {\n            options.error(values);\n          }\n          if (\n            !(\n              values.promiseArguments &&\n              values.promiseArguments[0] &&\n              values.promiseArguments[0].eventPrevented\n            )\n          ) {\n            currentModel.trigger.apply(\n              currentModel,\n              _.union([\"dduiDocumentFail\"], values.promiseArguments[0])\n            );\n          }\n        }\n      );\n\n      //Init default values\n      _.defaults(values, {\n        revision: -1,\n        viewId: \"!defaultConsultation\",\n        initid: this.get(\"initid\")\n      });\n\n      //Trigger (synchronous) before close event\n      this.trigger(\n        \"beforeClose\",\n        beforeCloseReturn,\n        values,\n        this._customClientData\n      );\n\n      if (beforeCloseReturn.prevent === false) {\n        this.trigger(\"displayLoading\");\n\n        //***********Lock Part*********************************************************************************\n\n        // Verify if current document need to be unlocked before fetch another\n        security = this.get(\"properties\")\n          ? this.get(\"properties\").get(\"security\")\n          : null;\n        previousMode = this.get(\"renderMode\");\n\n        if (\n          previousMode === \"edit\" &&\n          security &&\n          security.lock &&\n          security.lock.temporary\n        ) {\n          needToUnlock = {\n            initid: serverProperties.initid\n          };\n        }\n        //Compute the next view\n        nextView = values.viewId;\n\n        if (!nextView) {\n          nextView =\n            this.get(\"renderMode\") === \"edit\"\n              ? \"!defaultEdition\"\n              : \"!defaultConsultation\";\n        }\n\n        if (\n          nextView !== \"!defaultConsultation\" &&\n          nextView !== \"!coreCreation\" &&\n          nextView !== \"!defaultCreation\" &&\n          this.get(\"renderMode\") !== \"create\"\n        ) {\n          //if the document is locked and the next view doesn't need the same lock delete it\n          if (needToUnlock.initid && needToUnlock.initid !== values.initid) {\n            lockModel = new DocumentLock({\n              initid: needToUnlock.initid,\n              type: \"temporary\"\n            });\n            lockModel.destroy();\n          }\n          // The next view needs a lock, ask for it and fetch the document after\n          lockModel = new DocumentLock({\n            initid: values.initid,\n            viewId: nextView,\n            type: \"temporary\"\n          });\n          lockModel.save({}, lockCallback);\n        } else {\n          if (needToUnlock) {\n            if (needToUnlock.initid === values.initid) {\n              // If same document \"get\" must be perform after unlock\n              lockModel = new DocumentLock({\n                initid: needToUnlock.initid,\n                type: \"temporary\"\n              });\n              lockModel.destroy({\n                success: function() {\n                  lockCallback.success();\n                },\n                error: function() {\n                  currentModel.trigger(\"showMessage\", {\n                    title: i18n.___(\n                      \"Document has been locked by someone else.\",\n                      \"ddui\"\n                    ),\n                    type: \"info\"\n                  });\n                  lockCallback.success();\n                }\n              });\n\n              lockCallback.success();\n            } else {\n              lockModel = new DocumentLock({\n                initid: needToUnlock.initid,\n                type: \"temporary\"\n              });\n              lockModel.destroy();\n              lockCallback.success();\n            }\n          } else {\n            lockCallback.success();\n          }\n        }\n\n        lockCallback.promise.then(\n          function mdocument_lockSucess() {\n            //save the new options in the currentDocument for the fetch\n            _.each(\n              _.pick(values, \"initid\", \"revision\", \"viewId\"),\n              function mDocument_SetNewOptions(value, key) {\n                currentModel.set(key, value);\n              }\n            );\n            currentModel.fetch(documentCallback);\n          },\n          function mDocument_lockFail() {\n            globalCallback.error.apply(currentModel, arguments);\n          }\n        );\n      } else {\n        //Reinit properties\n        currentModel.set(serverProperties);\n        //Indicate success to the promise object\n        globalCallback.error({ eventPrevented: true });\n      }\n\n      return globalCallback.promise;\n    },\n\n    saveDocument: function mDocumentSaveDocument(attributes, options) {\n      var globalCallback = this._promiseCallback(),\n        saveCallback = this._promiseCallback(),\n        beforeSaveEvent = { prevent: false },\n        currentModel = this,\n        serverProperties = this.getServerProperties();\n\n      options = options || {};\n\n      if (_.isEmpty(this._customClientData)) {\n        this.trigger(\"getCustomClientData\");\n      }\n      this.trigger(\"beforeSave\", beforeSaveEvent, this._customClientData);\n\n      if (beforeSaveEvent.prevent !== false) {\n        globalCallback.error({ eventPrevented: true });\n      } else {\n        saveCallback.promise.then(\n          function mDocument_saveDone() {\n            currentModel._loadDocument(currentModel).then(\n              function mDocument_loadDocumentDone() {\n                globalCallback.success();\n              },\n              function mDocument_loadDocumentFail() {\n                globalCallback.error.apply(currentModel, arguments);\n              }\n            );\n          },\n          function mDocument_saveFail() {\n            globalCallback.error.apply(currentModel, arguments);\n          }\n        );\n\n        if (currentModel.hasUploadingFile()) {\n          this.trigger(\"displayLoading\", {\n            isSaving: true,\n            text: i18n.___(\"Recording files in progress\", \"ddui\")\n          });\n          currentModel.trigger(\"showMessage\", {\n            title: i18n.___(\"Waiting uploads in progress\", \"ddui\"),\n            type: \"info\"\n          });\n          currentModel.once(\n            \"uploadFileFinished\",\n            function mDocumentsetValuesListenUploadUntilTheEnd(/*event*/) {\n              currentModel.trigger(\"displayLoading\", { isSaving: true });\n              currentModel.save(attributes, saveCallback);\n            }\n          );\n        } else {\n          this.trigger(\"displayLoading\", { isSaving: true });\n          currentModel.save(attributes, saveCallback);\n        }\n      }\n\n      globalCallback.promise.then(\n        function onSaveSuccess(values) {\n          currentModel.trigger(\"afterSave\", serverProperties);\n          currentModel.trigger(\"close\", serverProperties);\n          if (_.isFunction(options.success)) {\n            options.success();\n          }\n          currentModel.trigger.apply(\n            currentModel,\n            _.union([\"dduiDocumentReady\"], values.promiseArguments)\n          );\n        },\n        function onSaveFail(values) {\n          if (_.isFunction(options.error)) {\n            options.error();\n          }\n          if (\n            !(\n              values.promiseArguments &&\n              values.promiseArguments[0] &&\n              values.promiseArguments[0].eventPrevented\n            )\n          ) {\n            currentModel.trigger.apply(\n              currentModel,\n              _.union([\"dduiDocumentFail\"], values.promiseArguments)\n            );\n          }\n        }\n      );\n\n      return globalCallback.promise;\n    },\n\n    deleteDocument: function mDocumentDelete(options) {\n      var globalCallback = this._promiseCallback(),\n        deleteCallback = this._promiseCallback(),\n        beforeDeleteEvent = { prevent: false },\n        currentModel = this,\n        serverProperties = this.getServerProperties();\n\n      options = options || {};\n\n      if (_.isEmpty(this._customClientData)) {\n        this.trigger(\"getCustomClientData\");\n      }\n      this.trigger(\"beforeDelete\", beforeDeleteEvent, this._customClientData);\n\n      if (beforeDeleteEvent.prevent !== false) {\n        globalCallback.error({ eventPrevented: true });\n      } else {\n        this.trigger(\"displayLoading\");\n        deleteCallback.promise.then(\n          function mDocument_deleteDone() {\n            currentModel\n              .fetchDocument({ initid: currentModel.get(\"initid\") })\n              .then(\n                function mDocument_afterDeleteLoadDone() {\n                  globalCallback.success();\n                },\n                function mDocument_afterDeleteLoadFail() {\n                  globalCallback.error.apply(currentModel, arguments);\n                }\n              );\n          },\n          function mDocument_deleteFail() {\n            globalCallback.error.apply(currentModel, arguments);\n          }\n        );\n\n        this.sync(\"delete\", this, deleteCallback);\n      }\n\n      globalCallback.promise.then(\n        function onDeleteSuccess(values) {\n          currentModel.trigger(\"afterDelete\", serverProperties);\n          currentModel.trigger(\"close\", serverProperties);\n          if (_.isFunction(options.success)) {\n            options.success();\n          }\n          currentModel.trigger.apply(\n            currentModel,\n            _.union([\"dduiDocumentReady\"], values.promiseArguments)\n          );\n        },\n        function onDeleteFail(values) {\n          if (_.isFunction(options.error)) {\n            options.error();\n          }\n          if (\n            !(\n              values.promiseArguments &&\n              values.promiseArguments[0] &&\n              values.promiseArguments[0].eventPrevented\n            )\n          ) {\n            currentModel.trigger.apply(\n              currentModel,\n              _.union(\n                [\"dduiDocumentFail\", currentModel],\n                values.promiseArguments\n              )\n            );\n          }\n        }\n      );\n\n      return globalCallback.promise;\n    },\n\n    restoreDocument: function mDocumentRestoreDocument(options) {\n      var globalCallback = this._promiseCallback(),\n        restoreCallback = this._promiseCallback(),\n        beforeRestoreEvent = { prevent: false },\n        currentModel = this,\n        serverProperties = this.getServerProperties();\n\n      options = options || {};\n\n      if (\"deleted\" === this.get(\"properties\").get(\"status\")) {\n        if (_.isEmpty(this._customClientData)) {\n          this.trigger(\"getCustomClientData\");\n        }\n        this.trigger(\n          \"beforeRestore\",\n          beforeRestoreEvent,\n          this._customClientData\n        );\n\n        if (beforeRestoreEvent.prevent !== false) {\n          globalCallback.error({ eventPrevented: true });\n        } else {\n          this.trigger(\"displayLoading\", { isSaving: true });\n\n          restoreCallback.promise.then(\n            function mDocument_restoreDocument_Success() {\n              currentModel._loadDocument(currentModel).then(\n                function mDocument_restoreDocument_loadSuccess() {\n                  globalCallback.success();\n                },\n                function mDocument_restoreDocument_loadFail() {\n                  globalCallback.error.apply(currentModel, arguments);\n                }\n              );\n            },\n            function mDocument_restoreDocument_Fail() {\n              globalCallback.error.apply(currentModel, arguments);\n            }\n          );\n\n          this.get(\"properties\").set(\"status\", \"alive\");\n          currentModel.save({}, restoreCallback);\n        }\n      } else {\n        globalCallback.error({\n          systemError: true,\n          errorMessage: \"Unable to restore alive doc\"\n        });\n      }\n\n      globalCallback.promise.then(\n        function mDocument_restoreDocument_onSuccess(values) {\n          currentModel.trigger(\"afterRestore\", serverProperties);\n          currentModel.trigger(\"close\", serverProperties);\n          if (_.isFunction(options.success)) {\n            options.success();\n          }\n          currentModel.trigger.apply(\n            currentModel,\n            _.union([\"dduiDocumentReady\"], values.promiseArguments)\n          );\n        },\n        function mDocument_restoreDocument_onFail(values) {\n          if (_.isFunction(options.error)) {\n            options.error();\n          }\n          if (\n            !(\n              values.promiseArguments &&\n              values.promiseArguments[0] &&\n              (values.promiseArguments[0].eventPrevented ||\n                values.promiseArguments[0].systemError)\n            )\n          ) {\n            currentModel.trigger.apply(\n              currentModel,\n              _.union([\"dduiDocumentFail\"], values.promiseArguments)\n            );\n          }\n        }\n      );\n\n      return globalCallback.promise;\n    },\n\n    /**\n     * Get complementary data : family structure\n     */\n    _completeStructure: function mDocumentCompleteStructure() {\n      var mStructure,\n        documentModel = this,\n        structurePromise = this._promiseCallback();\n\n      var neededAttributes = this.get(\"renderOptions\").needed;\n      var visibilityAttributes = this.get(\"renderOptions\").visibilities;\n      var valueAttributes = this.get(\"originalValues\");\n\n      if (this.get(\"properties\").get(\"type\") === \"family\") {\n        // Family has no attributes\n        this.set(\"attributes\", []);\n        structurePromise.success();\n        return structurePromise.promise;\n      }\n\n      if (!_.isUndefined(this.get(\"attributes\"))) {\n        this.set(\"attributes\", this.get(\"attributes\")); // to convert attributes to models\n        structurePromise.success();\n        return structurePromise.promise;\n      }\n\n      mStructure = new FamilyStructure({\n        familyId: this.get(\"properties\").get(\"family\").name,\n        referencedocument: {\n          initid: this.get(\"initid\"),\n          viewId: this.get(\"viewId\"),\n          revision: this.get(\"revision\")\n        }\n      });\n\n      mStructure.fetch({\n        success: function mDocumentCompleteStructureSuccess(\n          structureModel,\n          response\n        ) {\n          if (\n            _.isEqual(structureModel.get(\"referencedocument\"), {\n              initid: documentModel.get(\"initid\"),\n              viewId: documentModel.get(\"viewId\"),\n              revision: documentModel.get(\"revision\")\n            })\n          ) {\n            var attributes = flattenAttributes(\n              attributes,\n              response.data.family.structure\n            );\n            _.each(attributes, function mDocumentCompleteStructureSuccessEach(\n              currentAttributeStructure\n            ) {\n              if (\n                currentAttributeStructure.id &&\n                valueAttributes[currentAttributeStructure.id]\n              ) {\n                currentAttributeStructure.attributeValue =\n                  valueAttributes[currentAttributeStructure.id];\n                currentAttributeStructure.needed =\n                  neededAttributes[currentAttributeStructure.id] === true;\n              }\n              if (\n                currentAttributeStructure.id &&\n                visibilityAttributes[currentAttributeStructure.id]\n              ) {\n                currentAttributeStructure.visibility =\n                  visibilityAttributes[currentAttributeStructure.id];\n              }\n            });\n            documentModel.set(\"attributes\", attributes);\n            structurePromise.success();\n          }\n        },\n\n        error: structurePromise.error\n      });\n      return structurePromise.promise;\n    }\n  });\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9d899764b00e608fd289\n");

/***/ }),

/***/ "9f0da78a753dd7f04a96":
/*!********************************************************************************!*\
  !*** ./src/vendor/Anakeen/DOCUMENT/IHM/controllerObjects/constraintHandler.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*global define*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! underscore */ \"8e08e542008e4aef1f58\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function require_constraintHandler(_) {\n  \"use strict\";\n\n  return function ConstraintHandler() {\n    var _messages = [];\n    this.addConstraintMessage = function addConstraintMessage(message, index) {\n      index = _.isNumber(index) ? index : -1;\n      _messages.push({ message: message, index: index });\n    };\n    this.getConstraintMessages = function getConstraintMessages() {\n      return _messages.slice(0);\n    };\n    this.hasConstraintMessages = function hasConstraintMessages() {\n      return _messages.length > 0;\n    };\n    this.deleteConstaintMessages = function deleteConstaintMessages() {\n      _messages = [];\n    };\n  };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOWYwZGE3OGE3NTNkZDdmMDRhOTYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdmVuZG9yL0FuYWtlZW4vRE9DVU1FTlQvSUhNL2NvbnRyb2xsZXJPYmplY3RzL2NvbnN0cmFpbnRIYW5kbGVyLmpzP2QxMjYiXSwic291cmNlc0NvbnRlbnQiOlsiLypnbG9iYWwgZGVmaW5lKi9cbmRlZmluZShbXCJ1bmRlcnNjb3JlXCJdLCBmdW5jdGlvbiByZXF1aXJlX2NvbnN0cmFpbnRIYW5kbGVyKF8pIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIENvbnN0cmFpbnRIYW5kbGVyKCkge1xuICAgIHZhciBfbWVzc2FnZXMgPSBbXTtcbiAgICB0aGlzLmFkZENvbnN0cmFpbnRNZXNzYWdlID0gZnVuY3Rpb24gYWRkQ29uc3RyYWludE1lc3NhZ2UobWVzc2FnZSwgaW5kZXgpIHtcbiAgICAgIGluZGV4ID0gXy5pc051bWJlcihpbmRleCkgPyBpbmRleCA6IC0xO1xuICAgICAgX21lc3NhZ2VzLnB1c2goeyBtZXNzYWdlOiBtZXNzYWdlLCBpbmRleDogaW5kZXggfSk7XG4gICAgfTtcbiAgICB0aGlzLmdldENvbnN0cmFpbnRNZXNzYWdlcyA9IGZ1bmN0aW9uIGdldENvbnN0cmFpbnRNZXNzYWdlcygpIHtcbiAgICAgIHJldHVybiBfbWVzc2FnZXMuc2xpY2UoMCk7XG4gICAgfTtcbiAgICB0aGlzLmhhc0NvbnN0cmFpbnRNZXNzYWdlcyA9IGZ1bmN0aW9uIGhhc0NvbnN0cmFpbnRNZXNzYWdlcygpIHtcbiAgICAgIHJldHVybiBfbWVzc2FnZXMubGVuZ3RoID4gMDtcbiAgICB9O1xuICAgIHRoaXMuZGVsZXRlQ29uc3RhaW50TWVzc2FnZXMgPSBmdW5jdGlvbiBkZWxldGVDb25zdGFpbnRNZXNzYWdlcygpIHtcbiAgICAgIF9tZXNzYWdlcyA9IFtdO1xuICAgIH07XG4gIH07XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///9f0da78a753dd7f04a96\n");

/***/ }),

/***/ "9f7df8dbce40557c2277":
/*!****************************************************************************!*\
  !*** ./src/vendor/Anakeen/DOCUMENT/IHM/widgets/attributes/money/wMoney.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function umdRequire(root, factory) {\n  \"use strict\";\n\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n      __webpack_require__(/*! jquery */ \"127c8cf59f228bb01a21\"),\n      __webpack_require__(/*! dcpDocument/widgets/attributes/double/wDouble */ \"7c75186b9433869ef678\")\n    ], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(window, function require_money($) {\n  \"use strict\";\n\n  $.widget(\"dcp.dcpMoney\", $.dcp.dcpDouble, {\n    options: {\n      type: \"money\",\n      renderOptions: {\n        currency: \"€\",\n        numberFormat: \"#,#.00\"\n      }\n    },\n\n    /**\n     * Get kendo option from normal options and from renderOptions.kendoNumeric\n     * @returns {*}\n     */\n    getKendoNumericOptions: function wMoneyGetKendoNumericOptions() {\n      var options = this._super(); // get from wDouble\n      if (this.options.renderOptions.currency) {\n        // view decimal precision\n        switch (this.options.locale.substr(0, 2)) {\n          case \"en\":\n          case \"ga\": // Ireland Irish\n            // currency before\n            options.format =\n              this.options.renderOptions.currency.replace(\"$\", \"\\\\$\") +\n              options.format;\n            break;\n          default:\n            options.format +=\n              \" \" + this.options.renderOptions.currency.replace(\"$\", \"\\\\$\");\n        }\n      }\n\n      return options;\n    },\n\n    getType: function wMoneyGetType() {\n      return \"money\";\n    }\n  });\n\n  return $.fn.dcpMoney;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOWY3ZGY4ZGJjZTQwNTU3YzIyNzcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdmVuZG9yL0FuYWtlZW4vRE9DVU1FTlQvSUhNL3dpZGdldHMvYXR0cmlidXRlcy9tb25leS93TW9uZXkuanM/YTI2NSJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gdW1kUmVxdWlyZShyb290LCBmYWN0b3J5KSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShbXG4gICAgICBcImpxdWVyeVwiLFxuICAgICAgXCJkY3BEb2N1bWVudC93aWRnZXRzL2F0dHJpYnV0ZXMvZG91YmxlL3dEb3VibGVcIlxuICAgIF0sIGZhY3RvcnkpO1xuICB9IGVsc2Uge1xuICAgIC8vbm9pbnNwZWN0aW9uIEpTVW5yZXNvbHZlZFZhcmlhYmxlXG4gICAgZmFjdG9yeSh3aW5kb3cualF1ZXJ5KTtcbiAgfVxufSkod2luZG93LCBmdW5jdGlvbiByZXF1aXJlX21vbmV5KCQpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgJC53aWRnZXQoXCJkY3AuZGNwTW9uZXlcIiwgJC5kY3AuZGNwRG91YmxlLCB7XG4gICAgb3B0aW9uczoge1xuICAgICAgdHlwZTogXCJtb25leVwiLFxuICAgICAgcmVuZGVyT3B0aW9uczoge1xuICAgICAgICBjdXJyZW5jeTogXCLigqxcIixcbiAgICAgICAgbnVtYmVyRm9ybWF0OiBcIiMsIy4wMFwiXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEdldCBrZW5kbyBvcHRpb24gZnJvbSBub3JtYWwgb3B0aW9ucyBhbmQgZnJvbSByZW5kZXJPcHRpb25zLmtlbmRvTnVtZXJpY1xuICAgICAqIEByZXR1cm5zIHsqfVxuICAgICAqL1xuICAgIGdldEtlbmRvTnVtZXJpY09wdGlvbnM6IGZ1bmN0aW9uIHdNb25leUdldEtlbmRvTnVtZXJpY09wdGlvbnMoKSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IHRoaXMuX3N1cGVyKCk7IC8vIGdldCBmcm9tIHdEb3VibGVcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMucmVuZGVyT3B0aW9ucy5jdXJyZW5jeSkge1xuICAgICAgICAvLyB2aWV3IGRlY2ltYWwgcHJlY2lzaW9uXG4gICAgICAgIHN3aXRjaCAodGhpcy5vcHRpb25zLmxvY2FsZS5zdWJzdHIoMCwgMikpIHtcbiAgICAgICAgICBjYXNlIFwiZW5cIjpcbiAgICAgICAgICBjYXNlIFwiZ2FcIjogLy8gSXJlbGFuZCBJcmlzaFxuICAgICAgICAgICAgLy8gY3VycmVuY3kgYmVmb3JlXG4gICAgICAgICAgICBvcHRpb25zLmZvcm1hdCA9XG4gICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5yZW5kZXJPcHRpb25zLmN1cnJlbmN5LnJlcGxhY2UoXCIkXCIsIFwiXFxcXCRcIikgK1xuICAgICAgICAgICAgICBvcHRpb25zLmZvcm1hdDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBvcHRpb25zLmZvcm1hdCArPVxuICAgICAgICAgICAgICBcIiBcIiArIHRoaXMub3B0aW9ucy5yZW5kZXJPcHRpb25zLmN1cnJlbmN5LnJlcGxhY2UoXCIkXCIsIFwiXFxcXCRcIik7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG9wdGlvbnM7XG4gICAgfSxcblxuICAgIGdldFR5cGU6IGZ1bmN0aW9uIHdNb25leUdldFR5cGUoKSB7XG4gICAgICByZXR1cm4gXCJtb25leVwiO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuICQuZm4uZGNwTW9uZXk7XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBLFdBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///9f7df8dbce40557c2277\n");

/***/ }),

/***/ "9fad28b160b8ea467ae3":
/*!**************************************************************************!*\
  !*** ./src/vendor/Anakeen/DOCUMENT/IHM/views/attributes/frame/vFrame.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*global define, console*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n  __webpack_require__(/*! jquery */ \"127c8cf59f228bb01a21\"),\n  __webpack_require__(/*! underscore */ \"8e08e542008e4aef1f58\"),\n  __webpack_require__(/*! backbone */ \"1858b45bf48591489d06\"),\n  __webpack_require__(/*! mustache */ \"bcd31d01884fc294fd69\"),\n  __webpack_require__(/*! dcpDocument/views/attributes/vAttribute */ \"37002e519de305be82e6\"),\n  __webpack_require__(/*! dcpDocument/views/attributes/array/vArray */ \"e6be0392327aaf29201b\"),\n  __webpack_require__(/*! dcpDocument/views/document/attributeTemplate */ \"7873a0bfc996b28836c2\")\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function require_vFrame(\n  $,\n  _,\n  Backbone,\n  Mustache,\n  ViewAttribute,\n  ViewAttributeArray,\n  attributeTemplate\n) {\n  \"use strict\";\n\n  return Backbone.View.extend({\n    className: \"card card-default dcpFrame\",\n    customView: false,\n    displayLabel: true,\n\n    events: {\n      \"click .dcpFrame--collapsable\": \"toggle\",\n      'click a[href^=\"#action/\"], a[data-action], button[data-action]':\n        \"externalLinkSelected\"\n    },\n\n    initialize: function vFrame_initialize(options) {\n      if (\n        options.displayLabel === false ||\n        this.model.getOption(\"labelPosition\") === \"none\"\n      ) {\n        this.displayLabel = false;\n      }\n      this.listenTo(this.model, \"change:label\", this.updateLabel);\n      this.listenTo(this.model.get(\"content\"), \"add\", this.render);\n      this.listenTo(this.model.get(\"content\"), \"remove\", this.render);\n      this.listenTo(this.model.get(\"content\"), \"reset\", this.render);\n      this.listenTo(this.model, \"errorMessage\", this.setError);\n      this.listenTo(this.model, \"change:errorMessage\", this.setError);\n      this.listenTo(this.model, \"destroy\", this.remove);\n      this.listenTo(this.model, \"resize\", this.setResponsiveClasse);\n      this.listenTo(this.model, \"cleanView\", this.remove);\n      this.listenTo(this.model, \"hide\", this.hide);\n      this.listenTo(this.model, \"show\", this.show);\n      this.listenTo(this.model, \"haveView\", this._identifyView);\n\n      this.options = options;\n    },\n\n    render: function vFrame_render() {\n      var currentView = this;\n      return new Promise(\n        _.bind(function vFrame_renderPromise(resolve, reject) {\n          var customRender,\n            $content,\n            labelElement,\n            contentElement = \"\",\n            customView = null,\n            event = { prevent: false },\n            contentData,\n            promiseAttributes = [];\n\n          currentView.model.trigger(\"beforeRender\", event, {\n            model: currentView.model,\n            $el: currentView.$el\n          });\n          if (event.prevent) {\n            resolve(currentView);\n            return currentView;\n          }\n\n          if (currentView.options.originalView !== true) {\n            if (currentView.model.getOption(\"template\")) {\n              customRender = attributeTemplate.renderCustomView(\n                currentView.model\n              );\n              currentView.customView = customRender.$el;\n              promiseAttributes.push(customRender.promise);\n            }\n          }\n\n          contentData = currentView.model.toData(null, true);\n          if (currentView.model.getOption(\"attributeLabel\")) {\n            contentData.label = currentView.model.getOption(\"attributeLabel\");\n          }\n          contentData.collapsable =\n            contentData.renderOptions.collapse !== \"none\";\n\n          currentView.templateLabel = currentView.model.getTemplates().attribute.frame.label;\n          labelElement = $(\n            Mustache.render(currentView.templateLabel || \"\", contentData)\n          );\n\n          if (currentView.customView) {\n            contentElement = currentView.customView;\n            contentElement.addClass(\n              \"dcpFrame__content dcpFrame__content--open\"\n            );\n          } else {\n            currentView.templateContent = currentView.model.getTemplates().attribute.frame.content;\n            contentElement = $(\n              Mustache.render(currentView.templateContent || \"\", contentData)\n            );\n          }\n          currentView.$el.empty();\n          if (currentView.displayLabel === true) {\n            currentView.$el.append(labelElement);\n          }\n          currentView.$el.append(contentElement);\n          currentView.$el.attr(\"data-attrid\", currentView.model.id);\n\n          $content = currentView.$el.find(\".dcpFrame__content\");\n          var hasOneContent = currentView.model\n            .get(\"content\")\n            .some(function vFrame_getDisplayable(value) {\n              return value.isDisplayable();\n            });\n\n          if (!currentView.customView) {\n            if (!hasOneContent) {\n              $content.append(currentView.model.getOption(\"showEmptyContent\"));\n            } else {\n              currentView.model\n                .get(\"content\")\n                .each(function vFrame_AnalyzeContent(currentAttr) {\n                  var attributeView;\n                  if (!currentAttr.isDisplayable()) {\n                    return;\n                  }\n                  try {\n                    customView = null;\n                    if (currentAttr.get(\"isValueAttribute\")) {\n                      attributeView = new ViewAttribute({\n                        model: currentAttr,\n                        customView: customView\n                      });\n                      promiseAttributes.push(attributeView.render());\n                      $content.append(attributeView.$el);\n                      return;\n                    }\n                    if (currentAttr.get(\"type\") === \"array\") {\n                      attributeView = new ViewAttributeArray({\n                        model: currentAttr\n                      });\n                      promiseAttributes.push(attributeView.render());\n                      $content.append(attributeView.$el);\n                    }\n                  } catch (e) {\n                    $content.append(\n                      '<h1 class=\"bg-danger\"><span class=\"glyphicon glyphicon-warning-sign\" aria-hidden=\"true\"></span>Unable to render ' +\n                        currentAttr.id +\n                        \"</h1>\"\n                    );\n                    if (window.dcp.logger) {\n                      window.dcp.logger(e);\n                    } else {\n                      console.error(e);\n                    }\n                  }\n                });\n            }\n\n            attributeTemplate.insertDescription(currentView);\n          }\n\n          if (currentView.model.getOption(\"collapse\") === \"collapse\") {\n            currentView.toggle(null, true);\n          }\n          Promise.all(promiseAttributes)\n            .then(function allRenderDone() {\n              currentView.model.trigger(\"renderDone\", {\n                model: currentView.model,\n                $el: currentView.$el\n              });\n              if (currentView.model.getOption(\"responsiveColumns\")) {\n                currentView.responsiveColumns();\n              }\n              resolve(currentView);\n            })\n            .catch(reject);\n        }),\n        this\n      );\n    },\n\n    setResponsiveClasse: function vFrame_setResponsiveClasse() {\n      var _this = this;\n      var fWidth = 0;\n      var matchesResponsive = 0;\n      var responseColumnsDefs = this.model.getOption(\"responsiveColumns\") || [];\n      var isTopBottom = false;\n      var isGrow = false;\n\n      if (responseColumnsDefs.length > 0) {\n        fWidth = $(this.$el).width();\n\n        if (fWidth <= 0) {\n          return;\n        }\n        var $vattrs = this.$el.find(\"> .dcpFrame__content > .row\");\n\n        _.each(responseColumnsDefs, function vFrame_setResponsiveClasses(\n          responseColumnsInfo\n        ) {\n          if (\n            fWidth >= responseColumnsInfo.minAbsWidth &&\n            fWidth < responseColumnsInfo.maxAbsWidth\n          ) {\n            matchesResponsive = responseColumnsInfo.number;\n            if (responseColumnsInfo.grow === true) {\n              _this.$el.addClass(\"dcp-column--grow\");\n              isGrow = true;\n            } else {\n              _this.$el.removeClass(\"dcp-column--grow\");\n              isGrow = false;\n            }\n            isTopBottom = responseColumnsInfo.direction === \"topBottom\";\n\n            if (isGrow) {\n              if ($vattrs.length < matchesResponsive) {\n                matchesResponsive = $vattrs.length;\n              } else if (isTopBottom) {\n                var rowNumber = Math.ceil($vattrs.length / matchesResponsive);\n                for (var i = matchesResponsive; i--; i > 1) {\n                  if (Math.ceil($vattrs.length / i) === rowNumber) {\n                    // Decrease column number if not enough data to avoid empty columns\n                    matchesResponsive = i;\n                  }\n                }\n              }\n            }\n\n            if (matchesResponsive > 1) {\n              _this.$el.addClass(\"dcp-column--\" + matchesResponsive);\n            }\n          } else {\n            _this.$el.removeClass(\"dcp-column--\" + responseColumnsInfo.number);\n          }\n        });\n\n        if (matchesResponsive > 1) {\n          _this.$el.addClass(\"dcp-column\");\n          if (matchesResponsive !== this.frameColumnNumber) {\n            this.frameColumnNumber = matchesResponsive;\n\n            if (isTopBottom) {\n              this.$el.addClass(\"dcp-column--topbottom\");\n              this.$el.removeClass(\"dcp-column--leftright\");\n            } else {\n              this.$el.removeClass(\"dcp-column--topbottom\");\n              this.$el.addClass(\"dcp-column--leftright\");\n            }\n          }\n        } else {\n          this.frameColumnNumber = matchesResponsive;\n          this.$el.removeClass(\"dcp-column\");\n          this.$el.removeClass(\"dcp-column--topbottom\");\n          this.$el.removeClass(\"dcp-column--leftright\");\n          this.$el.removeClass(\"dcp-column--grow\");\n        }\n      }\n    },\n\n    responsiveColumns: function vFrame_responsiveColumns() {\n      var responseColumnsDefs = this.model.getOption(\"responsiveColumns\") || [];\n      var $fake = $(\"<div/>\").css({\n        position: \"absolute\",\n        top: 0,\n        overflow: \"hidden\"\n      });\n      var $fakeWidth = $(\"<div/>\");\n\n      $(\"body\").append($fake.append($fakeWidth));\n\n      // Compute absolute width\n      _.each(responseColumnsDefs, function vFrame_computeResponsiveWidth(\n        responseColumnsInfo\n      ) {\n        if (!responseColumnsInfo.minWidth) {\n          responseColumnsInfo.minAbsWidth = 0;\n        } else {\n          $fakeWidth.width(responseColumnsInfo.minWidth);\n          responseColumnsInfo.minAbsWidth = $fakeWidth.width();\n        }\n\n        if (!responseColumnsInfo.maxWidth) {\n          responseColumnsInfo.maxAbsWidth = Infinity;\n        } else {\n          $fakeWidth.width(responseColumnsInfo.maxWidth);\n          responseColumnsInfo.maxAbsWidth = $fakeWidth.width();\n        }\n      });\n\n      $fake.remove();\n      $(window).on(\n        \"resize.v\" + this.model.cid,\n        _.bind(this.setResponsiveClasse, this)\n      );\n      _.defer(_.bind(this.setResponsiveClasse, this));\n    },\n\n    getAttributeModel: function vFrame_getAttributeModel(attributeId) {\n      var docModel = this.model.getDocumentModel();\n      return docModel.get(\"attributes\").get(attributeId);\n    },\n\n    setError: function vFrame_setError(event, data) {\n      if (data) {\n        this.$el.find(\".dcpFrame__label\").addClass(\"has-error\");\n      } else {\n        this.$el.find(\".dcpFrame__label\").removeClass(\"has-error\");\n      }\n    },\n\n    updateLabel: function vFrame_updateLabel() {\n      this.$el.find(\".dcpFrame__label\").text(this.model.get(\"label\"));\n    },\n\n    toggle: function vFrame_toggle(event, hideNow) {\n      var $contentElement = this.$(\".dcpFrame__content\");\n      this.$(\".dcp__frame__caret\").toggleClass(\"fa-caret-right fa-caret-down\");\n      $contentElement.toggleClass(\n        \"dcpFrame__content--open dcpFrame__content--close\"\n      );\n      if (hideNow) {\n        $contentElement.hide();\n      } else {\n        $contentElement.slideToggle(200);\n        if ($contentElement.hasClass(\"dcpFrame__content--open\")) {\n          this.model.getDocumentModel().trigger(\"redrawErrorMessages\");\n        }\n      }\n    },\n\n    hide: function vFrame_hide() {\n      this.$el.hide();\n    },\n\n    show: function vFrame_show() {\n      this.$el.show();\n    },\n\n    externalLinkSelected: function vAttributeExternalLinkSelected(event) {\n      var $target = $(event.currentTarget),\n        action,\n        options,\n        eventOptions,\n        documentModel,\n        internalEvent = {\n          prevent: false\n        };\n\n      event.preventDefault();\n      if (event.stopPropagation) {\n        event.stopPropagation();\n      }\n\n      action = $target.data(\"action\") || $target.attr(\"href\");\n      options = action.substring(8).split(\":\");\n      eventOptions = {\n        target: event.target,\n        index: -1,\n        eventId: options.shift(),\n        options: options\n      };\n      documentModel = this.model.getDocumentModel();\n\n      this.model.trigger(\"internalLinkSelected\", internalEvent, eventOptions);\n      if (event.prevent) {\n        return this;\n      }\n\n      documentModel.trigger(\"actionAttributeLink\", internalEvent, eventOptions);\n\n      return this;\n    },\n\n    _identifyView: function vFrame_identifyView(event) {\n      event.haveView = true;\n      //Add the pointer to the current jquery element to a list passed by the event\n      event.elements = event.elements.add(this.$el);\n    },\n\n    /**\n     * Destroy the associated widget and suppress event listener before remov the dom\n     *\n     * @returns {*}\n     */\n    remove: function vFrame_Remove() {\n      $(window).off(\".v\" + this.model.cid);\n\n      return Backbone.View.prototype.remove.call(this);\n    }\n  });\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9fad28b160b8ea467ae3\n");

/***/ }),

/***/ "a33e69cdc9c4b0ac110b":
/*!****************************************************************************!*\
  !*** ./src/vendor/Anakeen/DOCUMENT/IHM/widgets/attributes/image/wImage.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function umdRequire(root, factory) {\n  \"use strict\";\n\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ \"127c8cf59f228bb01a21\"), __webpack_require__(/*! dcpDocument/widgets/attributes/file/wFile */ \"d756e10b1ea30dea6265\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(window, function wImageWidget($) {\n  \"use strict\";\n\n  $.widget(\"dcp.dcpImage\", $.dcp.dcpFile, {\n    options: {\n      type: \"image\",\n      labels: {\n        dropFileHere: \"Drop image here\",\n        placeHolder: \"Click to upload an image\",\n        tooltipLabel: \"Choose image\",\n        downloadLabel: \"Download the image\"\n      },\n      renderOptions: {\n        thumbnailSize: \"100x100\"\n      }\n    },\n\n    _initDom: function wImageInitDom() {\n      if (this.getMode() === \"read\") {\n        if (this.options.attributeValue.url) {\n          if (!this.options.renderOptions.htmlLink.url) {\n            if (this.options.renderOptions.thumbnailSize) {\n              var reSize = /sizes\\/([^/]+)/;\n              this.options.attributeValue.thumbnail =\n                this.options.attributeValue.thumbnail.replace(\n                  reSize,\n                  \"sizes/\" + this.options.renderOptions.thumbnailSize\n                ) + \".png\";\n            } else if (!this.options.renderOptions.thumbnailSize) {\n              this.options.attributeValue.thumbnail = this.options.attributeValue.url;\n            }\n          }\n        }\n      }\n      if (this.options.attributeValue.thumbnail) {\n        this.options.attributeValue.hash = this.options.attributeValue.creationDate.replace(\n          /[ :-]/g,\n          \"\"\n        );\n        this.options.attributeValue.thumbnail +=\n          \"?c=\" + this.options.attributeValue.hash;\n      }\n      this._super();\n    },\n\n    _initEvent: function wFileInitEvent() {\n      this._super();\n      if (this.getMode() === \"read\") {\n        this._initDisplayEvent();\n      }\n    },\n\n    _initDisplayEvent: function wImageinitDisplayEvent() {\n      var scope = this;\n      var htmlLink = this.getLink();\n      this.element.off(\"click\");\n      this.element.on(\n        \"click\" + this.eventNamespace,\n        \".dcpAttribute__content__link\",\n        function wImageClick(event) {\n          if (htmlLink.target === \"_dialog\") {\n            event.preventDefault();\n            var bdw = $(\n              '<div class=\"dcpImage-window\"><img class=\"img-responsive\" src=\"' +\n                $(this).attr(\"href\") +\n                '\"/></div>'\n            );\n            $(\"body\").append(bdw);\n            // $(this).attr(\"href\"),\n            var dw = bdw.kendoWindow({\n              title: scope.options.attributeValue.displayValue,\n              width: htmlLink.windowWidth,\n              height: htmlLink.windowHeight,\n              iframe: false,\n              actions: [\"Maximize\", \"Close\"]\n            });\n\n            dw.data(\"kendoWindow\")\n              .center()\n              .open();\n          }\n        }\n      );\n    },\n\n    /**\n     * Condition before upload file\n     * @returns {boolean}\n     */\n    uploadCondition: function wImageUploadCondition(file) {\n      if (file.type.substr(0, 5) !== \"image\") {\n        this.setError(\"Invalid image file\");\n        return false;\n      }\n      this.setError(null);\n      return true;\n    },\n\n    getType: function wImageGetType() {\n      return \"image\";\n    }\n  });\n\n  return $.fn.dcpImage;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYTMzZTY5Y2RjOWM0YjBhYzExMGIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdmVuZG9yL0FuYWtlZW4vRE9DVU1FTlQvSUhNL3dpZGdldHMvYXR0cmlidXRlcy9pbWFnZS93SW1hZ2UuanM/NDJkZiJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gdW1kUmVxdWlyZShyb290LCBmYWN0b3J5KSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShbXCJqcXVlcnlcIiwgXCJkY3BEb2N1bWVudC93aWRnZXRzL2F0dHJpYnV0ZXMvZmlsZS93RmlsZVwiXSwgZmFjdG9yeSk7XG4gIH0gZWxzZSB7XG4gICAgLy9ub2luc3BlY3Rpb24gSlNVbnJlc29sdmVkVmFyaWFibGVcbiAgICBmYWN0b3J5KHdpbmRvdy5qUXVlcnksIHdpbmRvdy5NdXN0YWNoZSk7XG4gIH1cbn0pKHdpbmRvdywgZnVuY3Rpb24gd0ltYWdlV2lkZ2V0KCQpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgJC53aWRnZXQoXCJkY3AuZGNwSW1hZ2VcIiwgJC5kY3AuZGNwRmlsZSwge1xuICAgIG9wdGlvbnM6IHtcbiAgICAgIHR5cGU6IFwiaW1hZ2VcIixcbiAgICAgIGxhYmVsczoge1xuICAgICAgICBkcm9wRmlsZUhlcmU6IFwiRHJvcCBpbWFnZSBoZXJlXCIsXG4gICAgICAgIHBsYWNlSG9sZGVyOiBcIkNsaWNrIHRvIHVwbG9hZCBhbiBpbWFnZVwiLFxuICAgICAgICB0b29sdGlwTGFiZWw6IFwiQ2hvb3NlIGltYWdlXCIsXG4gICAgICAgIGRvd25sb2FkTGFiZWw6IFwiRG93bmxvYWQgdGhlIGltYWdlXCJcbiAgICAgIH0sXG4gICAgICByZW5kZXJPcHRpb25zOiB7XG4gICAgICAgIHRodW1ibmFpbFNpemU6IFwiMTAweDEwMFwiXG4gICAgICB9XG4gICAgfSxcblxuICAgIF9pbml0RG9tOiBmdW5jdGlvbiB3SW1hZ2VJbml0RG9tKCkge1xuICAgICAgaWYgKHRoaXMuZ2V0TW9kZSgpID09PSBcInJlYWRcIikge1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmF0dHJpYnV0ZVZhbHVlLnVybCkge1xuICAgICAgICAgIGlmICghdGhpcy5vcHRpb25zLnJlbmRlck9wdGlvbnMuaHRtbExpbmsudXJsKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnJlbmRlck9wdGlvbnMudGh1bWJuYWlsU2l6ZSkge1xuICAgICAgICAgICAgICB2YXIgcmVTaXplID0gL3NpemVzXFwvKFteL10rKS87XG4gICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5hdHRyaWJ1dGVWYWx1ZS50aHVtYm5haWwgPVxuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5hdHRyaWJ1dGVWYWx1ZS50aHVtYm5haWwucmVwbGFjZShcbiAgICAgICAgICAgICAgICAgIHJlU2l6ZSxcbiAgICAgICAgICAgICAgICAgIFwic2l6ZXMvXCIgKyB0aGlzLm9wdGlvbnMucmVuZGVyT3B0aW9ucy50aHVtYm5haWxTaXplXG4gICAgICAgICAgICAgICAgKSArIFwiLnBuZ1wiO1xuICAgICAgICAgICAgfSBlbHNlIGlmICghdGhpcy5vcHRpb25zLnJlbmRlck9wdGlvbnMudGh1bWJuYWlsU2l6ZSkge1xuICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMuYXR0cmlidXRlVmFsdWUudGh1bWJuYWlsID0gdGhpcy5vcHRpb25zLmF0dHJpYnV0ZVZhbHVlLnVybDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuYXR0cmlidXRlVmFsdWUudGh1bWJuYWlsKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucy5hdHRyaWJ1dGVWYWx1ZS5oYXNoID0gdGhpcy5vcHRpb25zLmF0dHJpYnV0ZVZhbHVlLmNyZWF0aW9uRGF0ZS5yZXBsYWNlKFxuICAgICAgICAgIC9bIDotXS9nLFxuICAgICAgICAgIFwiXCJcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5vcHRpb25zLmF0dHJpYnV0ZVZhbHVlLnRodW1ibmFpbCArPVxuICAgICAgICAgIFwiP2M9XCIgKyB0aGlzLm9wdGlvbnMuYXR0cmlidXRlVmFsdWUuaGFzaDtcbiAgICAgIH1cbiAgICAgIHRoaXMuX3N1cGVyKCk7XG4gICAgfSxcblxuICAgIF9pbml0RXZlbnQ6IGZ1bmN0aW9uIHdGaWxlSW5pdEV2ZW50KCkge1xuICAgICAgdGhpcy5fc3VwZXIoKTtcbiAgICAgIGlmICh0aGlzLmdldE1vZGUoKSA9PT0gXCJyZWFkXCIpIHtcbiAgICAgICAgdGhpcy5faW5pdERpc3BsYXlFdmVudCgpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBfaW5pdERpc3BsYXlFdmVudDogZnVuY3Rpb24gd0ltYWdlaW5pdERpc3BsYXlFdmVudCgpIHtcbiAgICAgIHZhciBzY29wZSA9IHRoaXM7XG4gICAgICB2YXIgaHRtbExpbmsgPSB0aGlzLmdldExpbmsoKTtcbiAgICAgIHRoaXMuZWxlbWVudC5vZmYoXCJjbGlja1wiKTtcbiAgICAgIHRoaXMuZWxlbWVudC5vbihcbiAgICAgICAgXCJjbGlja1wiICsgdGhpcy5ldmVudE5hbWVzcGFjZSxcbiAgICAgICAgXCIuZGNwQXR0cmlidXRlX19jb250ZW50X19saW5rXCIsXG4gICAgICAgIGZ1bmN0aW9uIHdJbWFnZUNsaWNrKGV2ZW50KSB7XG4gICAgICAgICAgaWYgKGh0bWxMaW5rLnRhcmdldCA9PT0gXCJfZGlhbG9nXCIpIHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB2YXIgYmR3ID0gJChcbiAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJkY3BJbWFnZS13aW5kb3dcIj48aW1nIGNsYXNzPVwiaW1nLXJlc3BvbnNpdmVcIiBzcmM9XCInICtcbiAgICAgICAgICAgICAgICAkKHRoaXMpLmF0dHIoXCJocmVmXCIpICtcbiAgICAgICAgICAgICAgICAnXCIvPjwvZGl2PidcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICAkKFwiYm9keVwiKS5hcHBlbmQoYmR3KTtcbiAgICAgICAgICAgIC8vICQodGhpcykuYXR0cihcImhyZWZcIiksXG4gICAgICAgICAgICB2YXIgZHcgPSBiZHcua2VuZG9XaW5kb3coe1xuICAgICAgICAgICAgICB0aXRsZTogc2NvcGUub3B0aW9ucy5hdHRyaWJ1dGVWYWx1ZS5kaXNwbGF5VmFsdWUsXG4gICAgICAgICAgICAgIHdpZHRoOiBodG1sTGluay53aW5kb3dXaWR0aCxcbiAgICAgICAgICAgICAgaGVpZ2h0OiBodG1sTGluay53aW5kb3dIZWlnaHQsXG4gICAgICAgICAgICAgIGlmcmFtZTogZmFsc2UsXG4gICAgICAgICAgICAgIGFjdGlvbnM6IFtcIk1heGltaXplXCIsIFwiQ2xvc2VcIl1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBkdy5kYXRhKFwia2VuZG9XaW5kb3dcIilcbiAgICAgICAgICAgICAgLmNlbnRlcigpXG4gICAgICAgICAgICAgIC5vcGVuKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICApO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDb25kaXRpb24gYmVmb3JlIHVwbG9hZCBmaWxlXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICovXG4gICAgdXBsb2FkQ29uZGl0aW9uOiBmdW5jdGlvbiB3SW1hZ2VVcGxvYWRDb25kaXRpb24oZmlsZSkge1xuICAgICAgaWYgKGZpbGUudHlwZS5zdWJzdHIoMCwgNSkgIT09IFwiaW1hZ2VcIikge1xuICAgICAgICB0aGlzLnNldEVycm9yKFwiSW52YWxpZCBpbWFnZSBmaWxlXCIpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB0aGlzLnNldEVycm9yKG51bGwpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSxcblxuICAgIGdldFR5cGU6IGZ1bmN0aW9uIHdJbWFnZUdldFR5cGUoKSB7XG4gICAgICByZXR1cm4gXCJpbWFnZVwiO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuICQuZm4uZGNwSW1hZ2U7XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBLFdBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///a33e69cdc9c4b0ac110b\n");

/***/ }),

/***/ "a41d3130711a0e18a937":
/*!********************************************************************!*\
  !*** ./src/vendor/Anakeen/DOCUMENT/IHM/models/mFamilyStructure.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! underscore */ \"8e08e542008e4aef1f58\"), __webpack_require__(/*! backbone */ \"1858b45bf48591489d06\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function require_structure(_, Backbone) {\n  \"use strict\";\n\n  return Backbone.Model.extend({\n    typeModel: \"ddui:familyStructure\",\n    idAttribute: \"familyId\",\n\n    url: function mFamilyStructure_url() {\n      var urlStructure = _.template(\n        \"api/v2/families/<%- familyId %>/views/structure\"\n      );\n\n      return urlStructure({\n        familyId: this.get(\"familyId\")\n      });\n    }\n  });\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYTQxZDMxMzA3MTFhMGUxOGE5MzcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdmVuZG9yL0FuYWtlZW4vRE9DVU1FTlQvSUhNL21vZGVscy9tRmFtaWx5U3RydWN0dXJlLmpzPzU1NjAiXSwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKFtcInVuZGVyc2NvcmVcIiwgXCJiYWNrYm9uZVwiXSwgZnVuY3Rpb24gcmVxdWlyZV9zdHJ1Y3R1cmUoXywgQmFja2JvbmUpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgcmV0dXJuIEJhY2tib25lLk1vZGVsLmV4dGVuZCh7XG4gICAgdHlwZU1vZGVsOiBcImRkdWk6ZmFtaWx5U3RydWN0dXJlXCIsXG4gICAgaWRBdHRyaWJ1dGU6IFwiZmFtaWx5SWRcIixcblxuICAgIHVybDogZnVuY3Rpb24gbUZhbWlseVN0cnVjdHVyZV91cmwoKSB7XG4gICAgICB2YXIgdXJsU3RydWN0dXJlID0gXy50ZW1wbGF0ZShcbiAgICAgICAgXCJhcGkvdjIvZmFtaWxpZXMvPCUtIGZhbWlseUlkICU+L3ZpZXdzL3N0cnVjdHVyZVwiXG4gICAgICApO1xuXG4gICAgICByZXR1cm4gdXJsU3RydWN0dXJlKHtcbiAgICAgICAgZmFtaWx5SWQ6IHRoaXMuZ2V0KFwiZmFtaWx5SWRcIilcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///a41d3130711a0e18a937\n");

/***/ }),

/***/ "a7edb748586a59efe72f":
/*!*********************************************************************!*\
  !*** ./src/vendor/Anakeen/DOCUMENT/IHM/widgets/history/wHistory.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n  __webpack_require__(/*! jquery */ \"127c8cf59f228bb01a21\"),\n  __webpack_require__(/*! underscore */ \"8e08e542008e4aef1f58\"),\n  __webpack_require__(/*! mustache */ \"bcd31d01884fc294fd69\"),\n  __webpack_require__(/*! dcpDocument/widgets/widget */ \"a903b12ace80b5b4ecce\"),\n  __webpack_require__(/*! dcpDocument/widgets/history/wRevisionDiff */ \"072cb77c211dd8456f5d\"),\n  __webpack_require__(/*! dcpDocument/widgets/window/wDialog */ \"3120d707f7fb455e9bc0\")\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function require_whistory($, _, Mustache) {\n  \"use strict\";\n\n  $.widget(\"dcp.dcpDocumentHistory\", $.dcp.dcpDialog, {\n    options: {\n      documentId: 0,\n      window: {\n        modal: true,\n        title: \"Document history\"\n      },\n      labels: {\n        version: \"Version\",\n        revision: \"Rev\",\n        state: \"State\",\n        activity: \"Activity\",\n        owner: \"Owner\",\n        code: \"Code\",\n        date: \"Date\",\n        diff: \"Diff\",\n        level: \"Level\",\n        message: \"Message\",\n        pastRevision: \"\",\n        showDetail: \"Show details\",\n        hideDetail: \"Hide details\",\n        showNotice: \"Show notices\",\n        hideNotice: \"Hide notices\",\n        noOneNotice: \"No one notices\",\n        filterMessages: \"Filter messages\",\n        linkRevision: \"See revision number #\",\n        historyTitle: \"History for {{title}}\",\n        loading: \"Loading ...\",\n        revisionDiffLabels: {}\n      }\n    },\n    htmlCaneva: function dcpDocumentHistoryhtmlCaneva() {\n      return (\n        '<table class=\"history-main\"><thead>' +\n        '<tr class=\"history-header\">' +\n        '<th class=\"history-header--date\"/>' +\n        '<th class=\"history-header--message\"/>' +\n        '<th class=\"history-header--owner\"/>' +\n        '<th class=\"history-header--version\"/>' +\n        '<th class=\"history-header--revision\"/>' +\n        '<th class=\"history-header--code\"/>' +\n        '<th class=\"history-header--level\"/>' +\n        '<th class=\"history-header--diff\"/>' +\n        \"</tr>\" +\n        \"</thead></table>\"\n      );\n    },\n\n    element: null,\n    _create: function dcpDocumentHistory_create() {\n      var widget = this,\n        $widget = $(this);\n\n      this.element.html(this.htmlCaneva());\n      __webpack_require__.e(/*! require.ensure | ensureDatatables */ \"vendors~ensureDatatables\").then((function dcpDocumentWHistory_initTable() {\n          __webpack_require__(/*! datatables.net-bs4/css/dataTables.bootstrap4.css */ \"ac0cf2e8e04136065d45\");\n          __webpack_require__(/*! datatables */ \"7006cf2c262b498f6c83\");\n          widget._initDatatable();\n        }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);\n\n      this.element.data(\"dcpDocumentHistory\", this);\n\n      this._super();\n\n      this.element.on(\n        \"click\" + this.eventNamespace,\n        \".history-button-showdetail\",\n        function whistoryShowDetail() {\n          var noticeButton = widget.element.find(\".history-button-shownotice\");\n          var noticeShowed = noticeButton.data(\"showNotice\");\n          if ($widget.data(\"showDetail\")) {\n            $widget.data(\"showDetail\", false);\n            $widget.data(\"showNotice\", false);\n            $(this)\n              .text(widget.options.labels.showDetail)\n              .removeClass(\"btn-primary\");\n            widget.element.find(\".history-comment\").hide();\n\n            noticeButton\n              .attr(\"disabled\", \"disabled\")\n              .removeClass(\"btn-primary\")\n              .text(widget.options.labels.showNotice);\n          } else {\n            $widget.data(\"showDetail\", true);\n            widget.element.find(\".history-comment\").show();\n            if (!noticeShowed) {\n              widget.element.find(\".history-level--notice\").hide();\n            }\n            $(this)\n              .text(widget.options.labels.hideDetail)\n              .addClass(\"btn-primary\");\n            noticeButton.removeAttr(\"disabled\");\n          }\n        }\n      );\n      this.element.on(\n        \"click\" + this.eventNamespace,\n        \".history-button-shownotice\",\n        function whistoryShowNotice() {\n          var $notices = widget.element.find(\".history-level--notice\");\n          if ($widget.data(\"showNotice\")) {\n            $widget.data(\"showNotice\", false);\n            $(this)\n              .text(widget.options.labels.showNotice)\n              .removeClass(\"btn-primary\");\n            widget.element.find(\".history-level--notice\").hide();\n          } else {\n            $widget.data(\"showNotice\", true);\n            if ($notices.length > 0) {\n              $notices.show();\n              $(this)\n                .text(widget.options.labels.hideNotice)\n                .addClass(\"btn-primary\");\n            } else {\n              $(this).text(widget.options.labels.noOneNotice);\n            }\n          }\n        }\n      );\n      this.element.on(\n        \"click\" + this.eventNamespace,\n        \".history-diff-input\",\n        function whistoryShowDiff() {\n          var selectedDiff = widget.element.find(\".history-diff-input:checked\");\n\n          if (selectedDiff.length === 2) {\n            widget.element\n              .find(\".history-diff-input:not(:checked)\")\n              .attr(\"disabled\", \"disabled\");\n            var $diffTarget = $('<div class=\"revision-diff\"/>');\n            var diffWidget = $diffTarget\n              .dcpRevisionDiff({\n                documentId: widget.options.documentId,\n                firstRevision: $(selectedDiff.get(1)).data(\"revision\"),\n                secondRevision: $(selectedDiff.get(0)).data(\"revision\"),\n                window: {\n                  width: \"70%\",\n                  height: \"70%\",\n                  title: widget.options.labels.revisionDiffLabels.title\n                },\n                labels: widget.options.labels.revisionDiffLabels\n              })\n              .data(\"dcpRevisionDiff\");\n\n            diffWidget.open();\n          } else if (selectedDiff.length < 2) {\n            widget.element\n              .find(\".history-diff-input\")\n              .removeAttr(\"disabled\", \"disabled\");\n          }\n        }\n      );\n\n      this.element.on(\n        \"click\" + this.eventNamespace,\n        \"a[data-document-id]\",\n        function whistoryShowDocument(event) {\n          var docid = $widget.data(\"document-id\");\n          if (docid) {\n            event.preventDefault();\n            widget.element.trigger(\"viewRevision\", {\n              initid: docid,\n              revision: parseInt($widget.data(\"revision\"))\n            });\n          }\n        }\n      );\n    },\n\n    _fillDataTable: function dcpDocumentHistory_fillDataTable(data) {\n      var myData = [];\n\n      this.dialogWindow.setOptions({\n        title: Mustache.render(\n          this.options.labels.historyTitle,\n          data.data.history[0].properties\n        )\n      });\n\n      _.each(data.data.history, function whistoryFillRevision(revisionInfo) {\n        myData.push({\n          version: revisionInfo.properties.version,\n          revision: revisionInfo.properties.revision,\n          code: \"\",\n          level: \"revision\",\n          message: revisionInfo.properties,\n          owner: revisionInfo.properties.owner.title,\n          date: revisionInfo.properties.revisionDate,\n          diff: 1,\n          color: revisionInfo.properties.state.color,\n          DT_RowClass: \"history-level--revision\"\n        });\n        _.each(revisionInfo.messages, function whistoryFillMessage(message) {\n          myData.push({\n            version: \"\",\n            revision: \"\",\n            code: message.code,\n            level: message.level,\n            message: message.comment,\n            owner: message.uname,\n            date: message.date,\n            diff: 0,\n            DT_RowClass:\n              \"history-comment history-level--\" +\n              message.level +\n              (revisionInfo.properties.status === \"fixed\"\n                ? \" history-comment--fixed\"\n                : \"\")\n          });\n        });\n      });\n\n      return myData;\n    },\n\n    _initDatatable: function dcpDocumentHistory_initDatatable() {\n      var historyWidget = this;\n      this.element\n        .find(\".history-main\")\n        .dataTable({\n          autoWidth: false,\n          ordering: false,\n          dom: \"<'history-head'<'history-buttons'>f>rtip\",\n          paging: false,\n          // \"scrollY\": \"200px\",\n          scrollCollapse: false,\n          info: false,\n          language: {\n            search: \" \",\n            loadingRecords: this.options.labels.loading\n          },\n          columns: [\n            {\n              data: \"date\",\n              name: \"date\",\n              title: historyWidget.options.labels.date,\n              className: \"history-date\",\n              render: function whistoryRenderDate(data) {\n                var theDate = new Date(data.substr(0, 10));\n                // The time is not manage by date because each navigator defer with timezone\n                return kendo.toString(theDate, \"D\") + \" \" + data.substr(11, 8);\n              }\n            },\n            {\n              data: \"message\",\n              name: \"message\",\n              title: historyWidget.options.labels.message,\n              className: \"history-message\",\n              render: function whistoryRenderMessage(data) {\n                if (_.isObject(data)) {\n                  if (data.state.reference) {\n                    return (\n                      '<div class=\"history-state\"><span class=\"history-state-color\" style=\"background-color:' +\n                      data.state.color +\n                      '\" >&nbsp;</span>' +\n                      '<span class=\"history-state-label\">' +\n                      (data.status === \"fixed\"\n                        ? data.state.stateLabel\n                        : data.state.activity) +\n                      \"</span></div>\"\n                    );\n                  }\n                  return $(\"<div/>\")\n                    .text(data.title)\n                    .html();\n                } else {\n                  return $(\"<div/>\")\n                    .text(data)\n                    .html();\n                }\n              }\n            },\n            {\n              data: \"owner\",\n              name: \"owner\",\n              title: historyWidget.options.labels.owner,\n              className: \"history-owner\",\n              render: function whistoryEncodeMessage(data) {\n                return $(\"<div/>\")\n                  .text(data)\n                  .html();\n              }\n            },\n            {\n              data: \"version\",\n              name: \"version\",\n              title: historyWidget.options.labels.version,\n              className: \"history-version\",\n              visible: false,\n              render: function whistoryEncodeMessage(data) {\n                return $(\"<div/>\")\n                  .text(data)\n                  .html();\n              }\n            },\n            {\n              data: \"revision\",\n              name: \"revision\",\n              title: historyWidget.options.labels.revision,\n              className: \"history-revision\",\n              render: function whistoryRenderRevision(data) {\n                if (data !== \"\") {\n                  return (\n                    '<a class=\"history-revision-link btn btn-default\" href=\"api/v2/documents/' +\n                    historyWidget.options.documentId +\n                    \"/revisions/\" +\n                    data +\n                    '.html\"' +\n                    'data-document-id=\"' +\n                    historyWidget.options.documentId +\n                    '\" ' +\n                    'data-revision=\"' +\n                    data +\n                    '\"' +\n                    \">\" +\n                    historyWidget.options.labels.linkRevision.replace(\n                      \"#\",\n                      data\n                    ) +\n                    \"</a>\"\n                  );\n                } else {\n                  return data;\n                }\n              }\n            },\n            {\n              data: \"code\",\n              name: \"code\",\n              title: historyWidget.options.labels.code,\n              className: \"history-code\",\n              visible: false,\n              render: function whistoryEncodeMessage(data) {\n                return $(\"<div/>\")\n                  .text(data)\n                  .html();\n              }\n            },\n            {\n              data: \"level\",\n              name: \"level\",\n              title: historyWidget.options.labels.level,\n              className: \"history-level\",\n              visible: false,\n              render: function whistoryEncodeMessage(data) {\n                return $(\"<div/>\")\n                  .text(data)\n                  .html();\n              }\n            },\n            {\n              data: \"diff\",\n              name: \"diff\",\n              title: historyWidget.options.labels.diff,\n              className: \"history-diff\",\n              render: function whistoryRenderDiff(data, renderType, allData) {\n                if (data === 1) {\n                  return (\n                    '<input class=\"history-diff-input\" data-revision=\"' +\n                    allData.revision +\n                    '\" type=\"checkbox\"/>'\n                  );\n                } else {\n                  return \"\";\n                }\n              }\n            }\n          ],\n\n          drawCallback: function whistorydrawCallback() {\n            var noticeShowed = historyWidget.element\n              .find(\".history-button-shownotice\")\n              .data(\"showNotice\");\n            var detailShowed = historyWidget.element\n              .find(\".history-button-showdetail\")\n              .data(\"showDetail\");\n\n            if (detailShowed) {\n              historyWidget.element.find(\".history-comment\").show();\n              if (!noticeShowed) {\n                historyWidget.element.find(\".history-level--notice\").hide();\n              }\n            } else {\n              historyWidget.element.find(\".history-comment\").hide();\n            }\n          },\n\n          initComplete: function whistoryinitComplete() {\n            var api = this.api();\n            var data = api.rows({ page: \"current\" }).data();\n            // Output the data for the visible rows to the browser's console\n\n            // show version if not null in one row\n            var showVersion = false;\n            var showState = false;\n            var onlyOneRevision = true;\n            for (var i = 0; i < data.length; i++) {\n              if (data[i].version) {\n                showVersion = true;\n              }\n              if (data[i].revision > 0) {\n                onlyOneRevision = false;\n              }\n              if (\n                data[i].message &&\n                data[i].message.state &&\n                data[i].message.state.reference\n              ) {\n                showState = true;\n              }\n            }\n            if (onlyOneRevision) {\n              //api.column(\"revision:name\").visible(!onlyOneRevision);\n              historyWidget.element\n                .find(\".history-diff-input\")\n                .attr(\"disabled\", \"disabled\");\n            }\n\n            if (showVersion) {\n              api.column(\"version:name\").visible(true);\n            }\n            if (showState) {\n              // Change Label\n              historyWidget.element\n                .find(\".history-header--message\")\n                .html(historyWidget.options.labels.activity);\n            }\n            var fixedRevisionRow = historyWidget.element\n              .find(\".history-level--revision\")\n              .get(1);\n            if (fixedRevisionRow) {\n              var trHead = historyWidget.element\n                .find(\".history-header\")\n                .clone();\n              $(\n                '<tr class=\"history-separator\"><td class=\"history-separator-cell\" colspan=\"' +\n                  $(trHead).find(\"th\").length +\n                  '\"><span>' +\n                  historyWidget.options.labels.pastRevision +\n                  \"</span>\" +\n                  \"</td></tr>\"\n              ).insertBefore(fixedRevisionRow);\n              $(trHead).insertBefore(fixedRevisionRow);\n              if (showState) {\n                $($(\".history-header--message\").get(1)).html(\n                  historyWidget.options.labels.state\n                );\n              }\n            }\n            historyWidget.element.find(\".history-comment\").hide();\n            historyWidget.element.find(\".odd\").removeClass(\"odd\");\n            historyWidget.element.find(\".even\").removeClass(\"even\");\n            historyWidget.element\n              .find(\".dataTables_filter input\")\n              .addClass(\"form-control form-control-sm\");\n\n            if (\n              historyWidget.element.find(\".history-button-shownotice\")\n                .length === 0\n            ) {\n              var $buttons = historyWidget.element.find(\".history-buttons\");\n\n              $buttons.append(\n                $(\n                  '<button class=\"history-button-showdetail btn btn-secondary btn-sm\" >' +\n                    historyWidget.options.labels.showDetail +\n                    \"</button>\"\n                )\n              );\n              $buttons.append(\n                $(\n                  '<button disabled=\"disabled\" class=\"history-button-shownotice btn btn-outline-secondary btn-sm\" >' +\n                    historyWidget.options.labels.showNotice +\n                    \"</button>\"\n                )\n              );\n\n              historyWidget.element\n                .find(\".dataTables_filter input\")\n                .attr(\n                  \"placeholder\",\n                  historyWidget.options.labels.filterMessages\n                );\n            }\n          },\n\n          ajax: function whistory_getData(data, callback) {\n            $.getJSON(\n              \"api/v2/documents/\" +\n                historyWidget.options.documentId +\n                \"/history/\"\n            )\n              .done(function whistory_getDataDone(response) {\n                var tableData = historyWidget._fillDataTable(response);\n                callback({ data: tableData });\n              })\n              .fail(function whistory_getDataFail(response) {\n                var result = JSON.parse(response.responseText);\n                _.each(result.messages, function whistory_getDataParseMessage(\n                  error\n                ) {\n                  if (error.type === \"error\") {\n                    $(\"body\").trigger(\"notification\", {\n                      type: error.type,\n                      message: error.contentText\n                    });\n                  }\n                });\n                console.error(\"fail\", response);\n              });\n          }\n        })\n        .addClass(\"table table-condensed table-bordered table-hover\");\n    },\n\n    _destroy: function dcpDocumentHistory_destroy() {\n      var $history = this.element.find(\".history-main\");\n\n      if ($history.DataTable) {\n        $history.DataTable().destroy();\n      }\n      this._super();\n    }\n  });\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///a7edb748586a59efe72f\n");

/***/ }),

/***/ "a903b12ace80b5b4ecce":
/*!***********************************************************!*\
  !*** ./src/vendor/Anakeen/DOCUMENT/IHM/widgets/widget.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*global define*/\n\n(function umdRequire(root, factory) {\n  \"use strict\";\n\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ \"127c8cf59f228bb01a21\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(window, function documentCatalog(jQuery) {\n  \"use strict\";\n\n  var ErrorNoSuchMethod = function widget_ErrorNoSuchMethod(message) {\n    this.name = \"noSuchMethodError\";\n    this.message = message || \"No such method for current widget instance\";\n  };\n\n  ErrorNoSuchMethod.prototype = Object.create(Error.prototype);\n  ErrorNoSuchMethod.prototype.constructor = ErrorNoSuchMethod;\n\n  (function widget_init($, undefined) {\n    var widgetUuid = 0,\n      slice = Array.prototype.slice,\n      _cleanData = $.cleanData;\n    $.cleanData = function widget_cleanData(elems) {\n      var events,\n        elem = null,\n        i;\n      for (i = 0, elem; (elem = elems[i]) != null; i++) {\n        // jshint ignore:line\n        try {\n          // Only trigger remove when necessary to save time\n          events = $._data(elem, \"events\");\n          if (events && events.remove) {\n            $(elem).triggerHandler(\"remove\");\n          }\n        } catch (e) {\n          //no test here\n        }\n      }\n      _cleanData(elems);\n    };\n\n    $.widget = function widget_initWidget(name, Base, prototype) {\n      var fullName,\n        existingConstructor,\n        Constructor,\n        basePrototype,\n        // proxiedPrototype allows the provided prototype to remain unmodified\n        // so that it can be used as a mixin for multiple widgets (#8876)\n        proxiedPrototype = {},\n        namespace = name.split(\".\")[0];\n\n      name = name.split(\".\")[1];\n      fullName = namespace + \"-\" + name;\n\n      if (!prototype) {\n        prototype = Base;\n        Base = $.Widget;\n      }\n\n      if ($.isArray(prototype)) {\n        prototype = $.extend.apply(null, [{}].concat(prototype));\n      }\n\n      // create selector for plugin\n      // $.expr[ \":\" ] is deprecated with jQuery 3.0.0+ in favor of $.expr.pseudos\n      // $.expr[ \":\" ][ fullName.toLowerCase() ] = function widget_createSelector(elem) {\n      //     return Boolean($(elem).data(fullName));\n      // };\n      $.expr.pseudos[fullName.toLowerCase()] = function widget_createSelector(\n        elem\n      ) {\n        return Boolean($(elem).data(fullName));\n      };\n\n      $[namespace] = $[namespace] || {};\n      existingConstructor = $[namespace][name];\n      Constructor = $[namespace][name] = function widget_Constructor(\n        options,\n        element\n      ) {\n        // allow instantiation without \"new\" keyword\n        if (!this._createWidget) {\n          return new Constructor(options, element);\n        }\n\n        // allow instantiation without initializing for simple inheritance\n        // must use \"new\" keyword (the code above always passes args)\n        if (arguments.length) {\n          this._createWidget(options, element);\n        }\n      };\n      // extend with the existing constructor to carry over any static properties\n      $.extend(Constructor, existingConstructor, {\n        version: prototype.version,\n        // copy the object used to create the prototype in case we need to\n        // redefine the widget later\n        _proto: $.extend({}, prototype),\n        // track widgets that inherit from this widget in case this widget is\n        // redefined after a widget inherits from it\n        _childConstructors: []\n      });\n\n      basePrototype = new Base();\n      // we need to make the options hash a property directly on the new instance\n      // otherwise we'll modify the options hash on the prototype that we're\n      // inheriting from\n      basePrototype.options = $.widget.extend({}, basePrototype.options);\n      $.each(prototype, function widget_proxiedElements(prop, value) {\n        if (!$.isFunction(value)) {\n          proxiedPrototype[prop] = value;\n          return;\n        }\n        proxiedPrototype[prop] = (function widget_proxiedProperties() {\n          var _super = function widget_super() {\n              return Base.prototype[prop].apply(this, arguments);\n            },\n            _superApply = function widget_superApply(args) {\n              return Base.prototype[prop].apply(this, args);\n            };\n          return function widget_proxied() {\n            var __super = this._super,\n              __superApply = this._superApply,\n              returnValue;\n\n            this._super = _super;\n            this._superApply = _superApply;\n\n            returnValue = value.apply(this, arguments);\n\n            this._super = __super;\n            this._superApply = __superApply;\n\n            return returnValue;\n          };\n        })();\n      });\n      Constructor.prototype = $.widget.extend(\n        basePrototype,\n        {},\n        proxiedPrototype,\n        {\n          constructor: Constructor,\n          namespace: namespace,\n          widgetName: name,\n          widgetFullName: fullName\n        }\n      );\n\n      // If this widget is being redefined then we need to find all widgets that\n      // are inheriting from it and redefine all of them so that they inherit from\n      // the new version of this widget. We're essentially trying to replace one\n      // level in the prototype chain.\n      if (existingConstructor) {\n        $.each(\n          existingConstructor._childConstructors,\n          function widget_existingConstructor(i, child) {\n            var childPrototype = child.prototype;\n\n            // redefine the child widget using the same prototype that was\n            // originally used, but inherit from the new version of the base\n            $.widget(\n              childPrototype.namespace + \".\" + childPrototype.widgetName,\n              Constructor,\n              child._proto\n            );\n          }\n        );\n        // remove the list of existing child constructors from the old constructor\n        // so the old child constructors can be garbage collected\n        delete existingConstructor._childConstructors;\n      } else {\n        Base._childConstructors.push(Constructor);\n      }\n\n      $.widget.bridge(name, Constructor);\n\n      return Constructor;\n    };\n\n    $.widget.extend = function widget_extend(target) {\n      var input = slice.call(arguments, 1),\n        inputIndex = 0,\n        inputLength = input.length,\n        key,\n        value;\n      for (; inputIndex < inputLength; inputIndex++) {\n        for (key in input[inputIndex]) {\n          // jshint ignore:line\n          //noinspection JSUnfilteredForInLoop\n          value = input[inputIndex][key];\n          if (input[inputIndex].hasOwnProperty(key) && value !== undefined) {\n            // Clone objects\n            if ($.isPlainObject(value)) {\n              target[key] = $.isPlainObject(target[key])\n                ? $.widget.extend({}, target[key], value)\n                : // Don't extend strings, arrays, etc. with objects\n                  $.widget.extend({}, value);\n              // Copy everything else by reference\n            } else {\n              target[key] = value;\n            }\n          }\n        }\n      }\n      return target;\n    };\n\n    $.widget.bridge = function widget_bridge(name, Object) {\n      var fullName = Object.prototype.widgetFullName || name;\n      $.fn[name] = function widget_callElement(options) {\n        var isMethodCall = typeof options === \"string\",\n          args = slice.call(arguments, 1),\n          returnValue = this;\n\n        // allow multiple hashes to be passed on init\n        options =\n          !isMethodCall && args.length\n            ? $.widget.extend.apply(null, [options].concat(args))\n            : options;\n\n        if (isMethodCall) {\n          this.each(function widget_eachMethodCall() {\n            var methodValue,\n              instance = $(this).data(fullName);\n            if (options === \"instance\") {\n              returnValue = instance;\n              return false;\n            }\n            if (!instance) {\n              return $.error(\n                \"cannot call methods on \" +\n                  name +\n                  \" prior to initialization; \" +\n                  \"attempted to call method '\" +\n                  options +\n                  \"'\"\n              );\n            }\n            if (!$.isFunction(instance[options]) || options.charAt(0) === \"_\") {\n              throw new ErrorNoSuchMethod(\n                \"no such method '\" +\n                  options +\n                  \"' for \" +\n                  name +\n                  \" widget instance\"\n              );\n            }\n            methodValue = instance[options].apply(instance, args);\n            if (methodValue !== instance && methodValue !== undefined) {\n              returnValue =\n                methodValue && methodValue.jquery\n                  ? returnValue.pushStack(methodValue.get())\n                  : methodValue;\n              return false;\n            }\n          });\n        } else {\n          // Allow multiple hashes to be passed on init\n          if (args.length) {\n            options = $.widget.extend.apply(null, [options].concat(args));\n          }\n\n          this.each(function widget_eachDataCall() {\n            var instance = $(this).data(fullName);\n            if (instance) {\n              instance.option(options || {})._init();\n            } else {\n              $(this).data(fullName, new Object(options, this));\n            }\n          });\n        }\n\n        return returnValue;\n      };\n    };\n\n    $.Widget = function widget_Widget(/* options, element */) {};\n    $.Widget._childConstructors = [];\n\n    $.Widget.prototype = {\n      widgetName: \"widget\",\n      defaultElement: \"<div>\",\n      options: {\n        classes: {},\n        disabled: false,\n        eventPrefix: null,\n        // callbacks\n        create: null\n      },\n      _createWidget: function widget_createWidget(options, element) {\n        element = $(element || this.defaultElement || this)[0];\n        this.element = $(element);\n        this.uuid = widgetUuid++;\n        this.eventNamespace = \".\" + this.widgetName + this.uuid;\n        this.options = $.widget.extend(\n          {},\n          this.options,\n          this._getCreateOptions(),\n          options\n        );\n\n        this.bindings = $();\n        this.classesElementLookup = {};\n        if (this.options.eventPrefix === null) {\n          this.options.eventPrefix = this.widgetName;\n        }\n\n        if (element !== this) {\n          $(element).data(this.widgetFullName, this);\n          this._on(true, this.element, {\n            remove: function widget_remove(event) {\n              if (event.target === element) {\n                this.destroy();\n              }\n            }\n          });\n          this.document = $(\n            element.style\n              ? // element within the document\n                element.ownerDocument\n              : // element is window or document\n                element.document || element\n          );\n          this.window = $(\n            this.document[0].defaultView || this.document[0].parentWindow\n          );\n        }\n        this.options = $.widget.extend(\n          {},\n          this.options,\n          this._getCreateOptions(),\n          options\n        );\n\n        this._create();\n\n        if (this.options.disabled) {\n          this._setOptionDisabled(this.options.disabled);\n        }\n\n        this._trigger(\"create\", null, this._getCreateEventData());\n        this._init();\n      },\n      _getCreateOptions: function widget_getCreateOptions() {\n        return {};\n      },\n      _getCreateEventData: $.noop,\n      _create: $.noop,\n      _init: $.noop,\n\n      destroy: function widget_destroy() {\n        var that = this;\n\n        this._destroy();\n        $.each(this.classesElementLookup, function widget_destroyClass(\n          key,\n          value\n        ) {\n          that._removeClass(value, key);\n        });\n\n        // We can probably remove the unbind calls in 2.0\n        // all event bindings should go through this._on()\n        this.element.off(this.eventNamespace).removeData(this.widgetFullName);\n        this.widget()\n          .off(this.eventNamespace)\n          .removeAttr(\"aria-disabled\");\n\n        // Clean up events and states\n        this.bindings.off(this.eventNamespace);\n      },\n      _destroy: $.noop,\n\n      widget: function widget_widget() {\n        return this.element;\n      },\n\n      option: function widget_option(key, value) {\n        var options = key,\n          parts,\n          curOption,\n          i;\n\n        if (arguments.length === 0) {\n          // don't return a reference to the internal hash\n          return $.widget.extend({}, this.options);\n        }\n\n        if (typeof key === \"string\") {\n          // handle nested keys, e.g., \"foo.bar\" => { foo: { bar: ___ } }\n          options = {};\n          parts = key.split(\".\");\n          key = parts.shift();\n          if (parts.length) {\n            curOption = options[key] = $.widget.extend({}, this.options[key]);\n            for (i = 0; i < parts.length - 1; i++) {\n              curOption[parts[i]] = curOption[parts[i]] || {};\n              curOption = curOption[parts[i]];\n            }\n            key = parts.pop();\n            if (arguments.length === 1) {\n              return curOption[key] === undefined ? null : curOption[key];\n            }\n            curOption[key] = value;\n          } else {\n            if (arguments.length === 1) {\n              return this.options[key] === undefined ? null : this.options[key];\n            }\n            options[key] = value;\n          }\n        }\n\n        this._setOptions(options);\n\n        return this;\n      },\n      _setOptions: function widget__setOptions(options) {\n        var key;\n\n        for (key in options) {\n          // jshint ignore:line\n          //noinspection JSUnfilteredForInLoop\n          this._setOption(key, options[key]);\n        }\n\n        return this;\n      },\n      _setOption: function widget__setOption(key, value) {\n        this.options[key] = value;\n\n        return this;\n      },\n\n      _setOptionClasses: function widget__setOptionClasses(value) {\n        var classKey, elements, currentElements;\n\n        for (classKey in value) {\n          // jshint ignore:line\n          //noinspection JSUnfilteredForInLoop\n          currentElements = this.classesElementLookup[classKey];\n          //noinspection JSUnfilteredForInLoop\n          if (\n            value[classKey] === this.options.classes[classKey] ||\n            !currentElements ||\n            !currentElements.length\n          ) {\n            continue;\n          }\n\n          // We are doing this to create a new jQuery object because the _removeClass() call\n          // on the next line is going to destroy the reference to the current elements being\n          // tracked. We need to save a copy of this collection so that we can add the new classes\n          // below.\n          elements = $(currentElements.get());\n          //noinspection JSUnfilteredForInLoop\n          this._removeClass(currentElements, classKey);\n\n          // We don't use _addClass() here, because that uses this.options.classes\n          // for generating the string of classes. We want to use the value passed in from\n          // _setOption(), this is the new value of the classes option which was passed to\n          // _setOption(). We pass this value directly to _classes().\n          //noinspection JSUnfilteredForInLoop\n          elements.addClass(\n            this._classes({\n              element: elements,\n              keys: classKey,\n              classes: value,\n              add: true\n            })\n          );\n        }\n      },\n\n      _classes: function widget__classes(options) {\n        var full = [];\n        var that = this,\n          processClassString;\n\n        options = $.extend(\n          {\n            element: this.element,\n            classes: this.options.classes || {}\n          },\n          options\n        );\n\n        processClassString = function widget_processClassString(\n          classes,\n          checkOption\n        ) {\n          var current, i;\n          for (i = 0; i < classes.length; i++) {\n            current = that.classesElementLookup[classes[i]] || $();\n            if (options.add) {\n              // unique is deprecated in jQuery 3.0.0+ renamed to uniqueSort\n              var jqueryVersion = +$().jquery.split(\".\")[0];\n              if (jqueryVersion >= 3) {\n                current = $(\n                  $.uniqueSort(current.get().concat(options.element.get()))\n                );\n              } else {\n                current = $(\n                  $.unique(current.get().concat(options.element.get()))\n                );\n              }\n            } else {\n              current = $(current.not(options.element).get());\n            }\n            that.classesElementLookup[classes[i]] = current;\n            full.push(classes[i]);\n            if (checkOption && options.classes[classes[i]]) {\n              full.push(options.classes[classes[i]]);\n            }\n          }\n        };\n\n        if (options.keys) {\n          processClassString(options.keys.match(/\\S+/g) || [], true);\n        }\n        if (options.extra) {\n          processClassString(options.extra.match(/\\S+/g) || []);\n        }\n\n        return full.join(\" \");\n      },\n\n      _removeClass: function widget__removeClass(element, keys, extra) {\n        return this._toggleClass(element, keys, extra, false);\n      },\n\n      _addClass: function widget__addClass(element, keys, extra) {\n        return this._toggleClass(element, keys, extra, true);\n      },\n\n      _toggleClass: function widget__toggleClass(element, keys, extra, add) {\n        add = typeof add === \"boolean\" ? add : extra;\n        var shift = typeof element === \"string\" || element === null,\n          options = {\n            extra: shift ? keys : extra,\n            keys: shift ? element : keys,\n            element: shift ? this.element : element,\n            add: add\n          };\n        options.element.toggleClass(this._classes(options), add);\n        return this;\n      },\n\n      _on: function widget__on(suppressDisabledCheck, element, handlers) {\n        var delegateElement,\n          instance = this;\n\n        // no suppressDisabledCheck flag, shuffle arguments\n        if (typeof suppressDisabledCheck !== \"boolean\") {\n          handlers = element;\n          element = suppressDisabledCheck;\n          //suppressDisabledCheck = false;\n        }\n\n        // no element argument, shuffle and use this.element\n        if (!handlers) {\n          handlers = element;\n          element = this.element;\n          delegateElement = this.widget();\n        } else {\n          // accept selectors, DOM elements\n          element = delegateElement = $(element);\n          this.bindings = this.bindings.add(element);\n        }\n\n        $.each(handlers, function widget_iterateHandler(event, handler) {\n          var handlerProxy = function handlerProxy() {\n            // allow widgets to customize the disabled handling\n            // - disabled as an array instead of boolean\n            // - disabled class as method for disabling individual parts\n            return (typeof handler === \"string\"\n              ? instance[handler]\n              : handler\n            ).apply(instance, arguments);\n          };\n\n          // copy the guid so direct unbinding works\n          if (typeof handler !== \"string\") {\n            handlerProxy.guid = handler.guid =\n              handler.guid || handlerProxy.guid || $.guid++;\n          }\n\n          var match = event.match(/^(\\w+)\\s*(.*)$/),\n            eventName = match[1] + instance.eventNamespace,\n            selector = match[2];\n          // delegate is deprecated in jQuery 3.0.0+ in favor of on method\n          var jqueryVersion = +$().jquery.split(\".\")[0];\n          if (selector) {\n            if (jqueryVersion >= 3) {\n              delegateElement.on(eventName, selector, handlerProxy);\n            } else {\n              delegateElement.delegate(selector, eventName, handlerProxy);\n            }\n          } else {\n            // bind is deprecated in jQuery 3.0.0+ in favor of on method\n            if (jqueryVersion >= 3) {\n              element.on(eventName, handlerProxy);\n            } else {\n              element.bind(eventName, handlerProxy);\n            }\n          }\n        });\n      },\n\n      _off: function widget__off(element, eventName) {\n        eventName =\n          (eventName || \"\").split(\" \").join(this.eventNamespace + \" \") +\n          this.eventNamespace;\n        element.unbind(eventName).undelegate(eventName);\n      },\n\n      _delay: function widget__delay(handler, delay) {\n        var handlerProxy = function handlerProxy() {\n          return (typeof handler === \"string\"\n            ? instance[handler]\n            : handler\n          ).apply(instance, arguments);\n        };\n\n        var instance = this;\n        return setTimeout(handlerProxy, delay || 0);\n      },\n\n      _trigger: function widget__trigger(type, event, data) {\n        var prop,\n          orig,\n          callback = this.options[type];\n\n        data = data || {};\n        event = $.Event(event);\n        event.type = this.options.eventPrefix\n          ? this.options.eventPrefix + type\n          : type;\n        event.type = event.type.toLocaleLowerCase();\n        // the original event may come from any element\n        // so we need to reset the target on the new event\n        event.target = this.element[0];\n\n        // copy original event properties over to the new event\n        orig = event.originalEvent;\n        if (orig) {\n          for (prop in orig) {\n            // jshint ignore:line\n            if (!(prop in event)) {\n              //noinspection JSUnfilteredForInLoop\n              event[prop] = orig[prop];\n            }\n          }\n        }\n\n        this.element.trigger(event, data);\n        return !(\n          ($.isFunction(callback) &&\n            callback.apply(this.element[0], [event].concat(data)) === false) ||\n          event.isDefaultPrevented()\n        );\n      }\n    };\n  })(jQuery);\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///a903b12ace80b5b4ecce\n");

/***/ }),

/***/ "b25f06ae111b578af6b0":
/*!***********************************************!*\
  !*** ./node_modules/bootstrap/js/src/util.js ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ \"127c8cf59f228bb01a21\");\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);\n\n\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v4.1.3): util.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nconst Util = (($) => {\n  /**\n   * ------------------------------------------------------------------------\n   * Private TransitionEnd Helpers\n   * ------------------------------------------------------------------------\n   */\n\n  const TRANSITION_END = 'transitionend'\n  const MAX_UID = 1000000\n  const MILLISECONDS_MULTIPLIER = 1000\n\n  // Shoutout AngusCroll (https://goo.gl/pxwQGp)\n  function toType(obj) {\n    return {}.toString.call(obj).match(/\\s([a-z]+)/i)[1].toLowerCase()\n  }\n\n  function getSpecialTransitionEndEvent() {\n    return {\n      bindType: TRANSITION_END,\n      delegateType: TRANSITION_END,\n      handle(event) {\n        if ($(event.target).is(this)) {\n          return event.handleObj.handler.apply(this, arguments) // eslint-disable-line prefer-rest-params\n        }\n        return undefined // eslint-disable-line no-undefined\n      }\n    }\n  }\n\n  function transitionEndEmulator(duration) {\n    let called = false\n\n    $(this).one(Util.TRANSITION_END, () => {\n      called = true\n    })\n\n    setTimeout(() => {\n      if (!called) {\n        Util.triggerTransitionEnd(this)\n      }\n    }, duration)\n\n    return this\n  }\n\n  function setTransitionEndSupport() {\n    $.fn.emulateTransitionEnd = transitionEndEmulator\n    $.event.special[Util.TRANSITION_END] = getSpecialTransitionEndEvent()\n  }\n\n  /**\n   * --------------------------------------------------------------------------\n   * Public Util Api\n   * --------------------------------------------------------------------------\n   */\n\n  const Util = {\n\n    TRANSITION_END: 'bsTransitionEnd',\n\n    getUID(prefix) {\n      do {\n        // eslint-disable-next-line no-bitwise\n        prefix += ~~(Math.random() * MAX_UID) // \"~~\" acts like a faster Math.floor() here\n      } while (document.getElementById(prefix))\n      return prefix\n    },\n\n    getSelectorFromElement(element) {\n      let selector = element.getAttribute('data-target')\n      if (!selector || selector === '#') {\n        selector = element.getAttribute('href') || ''\n      }\n\n      try {\n        return document.querySelector(selector) ? selector : null\n      } catch (err) {\n        return null\n      }\n    },\n\n    getTransitionDurationFromElement(element) {\n      if (!element) {\n        return 0\n      }\n\n      // Get transition-duration of the element\n      let transitionDuration = $(element).css('transition-duration')\n      const floatTransitionDuration = parseFloat(transitionDuration)\n\n      // Return 0 if element or transition duration is not found\n      if (!floatTransitionDuration) {\n        return 0\n      }\n\n      // If multiple durations are defined, take the first\n      transitionDuration = transitionDuration.split(',')[0]\n\n      return parseFloat(transitionDuration) * MILLISECONDS_MULTIPLIER\n    },\n\n    reflow(element) {\n      return element.offsetHeight\n    },\n\n    triggerTransitionEnd(element) {\n      $(element).trigger(TRANSITION_END)\n    },\n\n    // TODO: Remove in v5\n    supportsTransitionEnd() {\n      return Boolean(TRANSITION_END)\n    },\n\n    isElement(obj) {\n      return (obj[0] || obj).nodeType\n    },\n\n    typeCheckConfig(componentName, config, configTypes) {\n      for (const property in configTypes) {\n        if (Object.prototype.hasOwnProperty.call(configTypes, property)) {\n          const expectedTypes = configTypes[property]\n          const value         = config[property]\n          const valueType     = value && Util.isElement(value)\n            ? 'element' : toType(value)\n\n          if (!new RegExp(expectedTypes).test(valueType)) {\n            throw new Error(\n              `${componentName.toUpperCase()}: ` +\n              `Option \"${property}\" provided type \"${valueType}\" ` +\n              `but expected type \"${expectedTypes}\".`)\n          }\n        }\n      }\n    }\n  }\n\n  setTransitionEndSupport()\n\n  return Util\n})(jquery__WEBPACK_IMPORTED_MODULE_0___default.a)\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Util);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjI1ZjA2YWUxMTFiNTc4YWY2YjAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYm9vdHN0cmFwL2pzL3NyYy91dGlsLmpzPzNlYzUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICQgZnJvbSAnanF1ZXJ5J1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY0LjEuMyk6IHV0aWwuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmNvbnN0IFV0aWwgPSAoKCQpID0+IHtcbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBQcml2YXRlIFRyYW5zaXRpb25FbmQgSGVscGVyc1xuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgY29uc3QgVFJBTlNJVElPTl9FTkQgPSAndHJhbnNpdGlvbmVuZCdcbiAgY29uc3QgTUFYX1VJRCA9IDEwMDAwMDBcbiAgY29uc3QgTUlMTElTRUNPTkRTX01VTFRJUExJRVIgPSAxMDAwXG5cbiAgLy8gU2hvdXRvdXQgQW5ndXNDcm9sbCAoaHR0cHM6Ly9nb28uZ2wvcHh3UUdwKVxuICBmdW5jdGlvbiB0b1R5cGUob2JqKSB7XG4gICAgcmV0dXJuIHt9LnRvU3RyaW5nLmNhbGwob2JqKS5tYXRjaCgvXFxzKFthLXpdKykvaSlbMV0udG9Mb3dlckNhc2UoKVxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0U3BlY2lhbFRyYW5zaXRpb25FbmRFdmVudCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgYmluZFR5cGU6IFRSQU5TSVRJT05fRU5ELFxuICAgICAgZGVsZWdhdGVUeXBlOiBUUkFOU0lUSU9OX0VORCxcbiAgICAgIGhhbmRsZShldmVudCkge1xuICAgICAgICBpZiAoJChldmVudC50YXJnZXQpLmlzKHRoaXMpKSB7XG4gICAgICAgICAgcmV0dXJuIGV2ZW50LmhhbmRsZU9iai5oYW5kbGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgLy8gZXNsaW50LWRpc2FibGUtbGluZSBwcmVmZXItcmVzdC1wYXJhbXNcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZpbmVkXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdHJhbnNpdGlvbkVuZEVtdWxhdG9yKGR1cmF0aW9uKSB7XG4gICAgbGV0IGNhbGxlZCA9IGZhbHNlXG5cbiAgICAkKHRoaXMpLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCAoKSA9PiB7XG4gICAgICBjYWxsZWQgPSB0cnVlXG4gICAgfSlcblxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgaWYgKCFjYWxsZWQpIHtcbiAgICAgICAgVXRpbC50cmlnZ2VyVHJhbnNpdGlvbkVuZCh0aGlzKVxuICAgICAgfVxuICAgIH0sIGR1cmF0aW9uKVxuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldFRyYW5zaXRpb25FbmRTdXBwb3J0KCkge1xuICAgICQuZm4uZW11bGF0ZVRyYW5zaXRpb25FbmQgPSB0cmFuc2l0aW9uRW5kRW11bGF0b3JcbiAgICAkLmV2ZW50LnNwZWNpYWxbVXRpbC5UUkFOU0lUSU9OX0VORF0gPSBnZXRTcGVjaWFsVHJhbnNpdGlvbkVuZEV2ZW50KClcbiAgfVxuXG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBQdWJsaWMgVXRpbCBBcGlcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgY29uc3QgVXRpbCA9IHtcblxuICAgIFRSQU5TSVRJT05fRU5EOiAnYnNUcmFuc2l0aW9uRW5kJyxcblxuICAgIGdldFVJRChwcmVmaXgpIHtcbiAgICAgIGRvIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWJpdHdpc2VcbiAgICAgICAgcHJlZml4ICs9IH5+KE1hdGgucmFuZG9tKCkgKiBNQVhfVUlEKSAvLyBcIn5+XCIgYWN0cyBsaWtlIGEgZmFzdGVyIE1hdGguZmxvb3IoKSBoZXJlXG4gICAgICB9IHdoaWxlIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChwcmVmaXgpKVxuICAgICAgcmV0dXJuIHByZWZpeFxuICAgIH0sXG5cbiAgICBnZXRTZWxlY3RvckZyb21FbGVtZW50KGVsZW1lbnQpIHtcbiAgICAgIGxldCBzZWxlY3RvciA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLXRhcmdldCcpXG4gICAgICBpZiAoIXNlbGVjdG9yIHx8IHNlbGVjdG9yID09PSAnIycpIHtcbiAgICAgICAgc2VsZWN0b3IgPSBlbGVtZW50LmdldEF0dHJpYnV0ZSgnaHJlZicpIHx8ICcnXG4gICAgICB9XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKSA/IHNlbGVjdG9yIDogbnVsbFxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHJldHVybiBudWxsXG4gICAgICB9XG4gICAgfSxcblxuICAgIGdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50KGVsZW1lbnQpIHtcbiAgICAgIGlmICghZWxlbWVudCkge1xuICAgICAgICByZXR1cm4gMFxuICAgICAgfVxuXG4gICAgICAvLyBHZXQgdHJhbnNpdGlvbi1kdXJhdGlvbiBvZiB0aGUgZWxlbWVudFxuICAgICAgbGV0IHRyYW5zaXRpb25EdXJhdGlvbiA9ICQoZWxlbWVudCkuY3NzKCd0cmFuc2l0aW9uLWR1cmF0aW9uJylcbiAgICAgIGNvbnN0IGZsb2F0VHJhbnNpdGlvbkR1cmF0aW9uID0gcGFyc2VGbG9hdCh0cmFuc2l0aW9uRHVyYXRpb24pXG5cbiAgICAgIC8vIFJldHVybiAwIGlmIGVsZW1lbnQgb3IgdHJhbnNpdGlvbiBkdXJhdGlvbiBpcyBub3QgZm91bmRcbiAgICAgIGlmICghZmxvYXRUcmFuc2l0aW9uRHVyYXRpb24pIHtcbiAgICAgICAgcmV0dXJuIDBcbiAgICAgIH1cblxuICAgICAgLy8gSWYgbXVsdGlwbGUgZHVyYXRpb25zIGFyZSBkZWZpbmVkLCB0YWtlIHRoZSBmaXJzdFxuICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uID0gdHJhbnNpdGlvbkR1cmF0aW9uLnNwbGl0KCcsJylbMF1cblxuICAgICAgcmV0dXJuIHBhcnNlRmxvYXQodHJhbnNpdGlvbkR1cmF0aW9uKSAqIE1JTExJU0VDT05EU19NVUxUSVBMSUVSXG4gICAgfSxcblxuICAgIHJlZmxvdyhlbGVtZW50KSB7XG4gICAgICByZXR1cm4gZWxlbWVudC5vZmZzZXRIZWlnaHRcbiAgICB9LFxuXG4gICAgdHJpZ2dlclRyYW5zaXRpb25FbmQoZWxlbWVudCkge1xuICAgICAgJChlbGVtZW50KS50cmlnZ2VyKFRSQU5TSVRJT05fRU5EKVxuICAgIH0sXG5cbiAgICAvLyBUT0RPOiBSZW1vdmUgaW4gdjVcbiAgICBzdXBwb3J0c1RyYW5zaXRpb25FbmQoKSB7XG4gICAgICByZXR1cm4gQm9vbGVhbihUUkFOU0lUSU9OX0VORClcbiAgICB9LFxuXG4gICAgaXNFbGVtZW50KG9iaikge1xuICAgICAgcmV0dXJuIChvYmpbMF0gfHwgb2JqKS5ub2RlVHlwZVxuICAgIH0sXG5cbiAgICB0eXBlQ2hlY2tDb25maWcoY29tcG9uZW50TmFtZSwgY29uZmlnLCBjb25maWdUeXBlcykge1xuICAgICAgZm9yIChjb25zdCBwcm9wZXJ0eSBpbiBjb25maWdUeXBlcykge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGNvbmZpZ1R5cGVzLCBwcm9wZXJ0eSkpIHtcbiAgICAgICAgICBjb25zdCBleHBlY3RlZFR5cGVzID0gY29uZmlnVHlwZXNbcHJvcGVydHldXG4gICAgICAgICAgY29uc3QgdmFsdWUgICAgICAgICA9IGNvbmZpZ1twcm9wZXJ0eV1cbiAgICAgICAgICBjb25zdCB2YWx1ZVR5cGUgICAgID0gdmFsdWUgJiYgVXRpbC5pc0VsZW1lbnQodmFsdWUpXG4gICAgICAgICAgICA/ICdlbGVtZW50JyA6IHRvVHlwZSh2YWx1ZSlcblxuICAgICAgICAgIGlmICghbmV3IFJlZ0V4cChleHBlY3RlZFR5cGVzKS50ZXN0KHZhbHVlVHlwZSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgYCR7Y29tcG9uZW50TmFtZS50b1VwcGVyQ2FzZSgpfTogYCArXG4gICAgICAgICAgICAgIGBPcHRpb24gXCIke3Byb3BlcnR5fVwiIHByb3ZpZGVkIHR5cGUgXCIke3ZhbHVlVHlwZX1cIiBgICtcbiAgICAgICAgICAgICAgYGJ1dCBleHBlY3RlZCB0eXBlIFwiJHtleHBlY3RlZFR5cGVzfVwiLmApXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgc2V0VHJhbnNpdGlvbkVuZFN1cHBvcnQoKVxuXG4gIHJldHVybiBVdGlsXG59KSgkKVxuXG5leHBvcnQgZGVmYXVsdCBVdGlsXG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///b25f06ae111b578af6b0\n");

/***/ }),

/***/ "b54b8e1b0f3a789539f4":
/*!***************************************************************!*\
  !*** ./src/vendor/Anakeen/DOCUMENT/IHM/models/mTransition.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*global define*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n  __webpack_require__(/*! underscore */ \"8e08e542008e4aef1f58\"),\n  __webpack_require__(/*! backbone */ \"1858b45bf48591489d06\"),\n  __webpack_require__(/*! dcpDocument/models/mDocument */ \"9d899764b00e608fd289\")\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function requireModelTransition(_, Backbone, mDocument) {\n  \"use strict\";\n\n  return mDocument.extend({\n    typeModel: \"ddui:transition\",\n    defaults: {\n      documentId: undefined,\n      documentModel: undefined,\n      state: undefined,\n      attributes: []\n    },\n\n    /**\n     * Compute the REST URL for the current document\n     *\n     * Used internally by backbone in fetch, save, destroy\n     *\n     * @returns {string}\n     */\n    url: function mTransition_url() {\n      var urlData =\n        \"api/v2/documents/<%= documentId %>/views/states/<%= state %>\";\n\n      urlData = urlData.replace(\n        \"<%= documentId %>\",\n        encodeURIComponent(this.get(\"documentId\"))\n      );\n      urlData = urlData.replace(\n        \"<%= state %>\",\n        encodeURIComponent(this.get(\"state\"))\n      );\n\n      return urlData;\n    },\n    /**\n     * Parse the return of the REST API\n     * @param response\n     * @returns {{properties: (*|properties|exports.defaults.properties|exports.parse.properties|.createObjectExpression.properties), menus: (app.views.shared.menu|*), locale: *, renderMode: string, attributes: Array, templates: *, renderOptions: *}}\n     */\n    parse: function mTransition_Parse(response) {\n      var values, attributes, templates, renderOptions;\n      var documentModel = this.get(\"documentModel\");\n      if (response.success === false) {\n        throw new Error(\"Unable to get the data from change state\");\n      }\n      attributes = [];\n\n      renderOptions = response.data.renderOptions;\n\n      if (!renderOptions) {\n        renderOptions = documentModel.get(\"renderOptions\");\n      }\n      if (\n        response.data.transition &&\n        response.data.transition.askAttributes.length > 0\n      ) {\n        _.each(\n          response.data.transition.askAttributes,\n          function mTransition_parseAsk(ask) {\n            attributes.push(ask);\n          }\n        );\n      }\n      templates = documentModel.get(\"templates\");\n\n      if (response.data.templates) {\n        templates.body = response.data.templates.body;\n        _.each(\n          response.data.templates.sections,\n          function mTransition_parseTemplate(templateContent, templateIndex) {\n            templates.sections[templateIndex] = templateContent;\n          }\n        );\n      }\n\n      this.initialProperties = {\n        renderMode: \"edit\",\n        viewId: \"!Transition\"\n      };\n\n      values = {\n        initid: null, //response.data.workflow.properties.initid, // set to null to send a POST (create) when save\n        properties: response.data.workflow.properties,\n        menus: [],\n        viewId: \"!Transition\",\n        locale: documentModel.get(\"locale\").culture,\n        renderMode: \"edit\",\n        attributes: attributes,\n        templates: documentModel.get(\"templates\"),\n        renderOptions: renderOptions,\n        customCSS: response.data.css,\n        customJS: response.data.js,\n        messages: response.messages,\n        workflow: {\n          transition: response.data.transition,\n          state: response.data.state,\n          labels: response.data.labels\n        }\n      };\n      return values;\n    },\n\n    /**\n     * Used by backbone for the save part\n     * @returns {{document: {attributes: *, properties : *}}}\n     */\n    toJSON: function mTransition_toJSON() {\n      var values = this.getValues(),\n        returnValues = { parameters: {} };\n\n      _.each(values, function mTransition_analyzeContent(value, aid) {\n        if (aid === \"_workflow_comment_\") {\n          returnValues.comment = _.isObject(value) ? value.value : \"\";\n        } else {\n          if (_.isArray(value)) {\n            if (value.length > 0 && _.isArray(value[0])) {\n              // double multiple\n              returnValues.parameters[aid] = _.map(\n                value,\n                function mTransition_getParameter(aValue) {\n                  return _.pluck(aValue, \"value\");\n                }\n              );\n            } else {\n              returnValues.parameters[aid] = _.pluck(value, \"value\");\n            }\n          } else if (_.isObject(value)) {\n            returnValues.parameters[aid] = value.value;\n          } else {\n            returnValues.parameters[aid] = value;\n          }\n        }\n      });\n      return returnValues;\n    }\n  });\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjU0YjhlMWIwZjNhNzg5NTM5ZjQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdmVuZG9yL0FuYWtlZW4vRE9DVU1FTlQvSUhNL21vZGVscy9tVHJhbnNpdGlvbi5qcz80M2FjIl0sInNvdXJjZXNDb250ZW50IjpbIi8qZ2xvYmFsIGRlZmluZSovXG5kZWZpbmUoW1xuICBcInVuZGVyc2NvcmVcIixcbiAgXCJiYWNrYm9uZVwiLFxuICBcImRjcERvY3VtZW50L21vZGVscy9tRG9jdW1lbnRcIlxuXSwgZnVuY3Rpb24gcmVxdWlyZU1vZGVsVHJhbnNpdGlvbihfLCBCYWNrYm9uZSwgbURvY3VtZW50KSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHJldHVybiBtRG9jdW1lbnQuZXh0ZW5kKHtcbiAgICB0eXBlTW9kZWw6IFwiZGR1aTp0cmFuc2l0aW9uXCIsXG4gICAgZGVmYXVsdHM6IHtcbiAgICAgIGRvY3VtZW50SWQ6IHVuZGVmaW5lZCxcbiAgICAgIGRvY3VtZW50TW9kZWw6IHVuZGVmaW5lZCxcbiAgICAgIHN0YXRlOiB1bmRlZmluZWQsXG4gICAgICBhdHRyaWJ1dGVzOiBbXVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlIHRoZSBSRVNUIFVSTCBmb3IgdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAgICAgKlxuICAgICAqIFVzZWQgaW50ZXJuYWxseSBieSBiYWNrYm9uZSBpbiBmZXRjaCwgc2F2ZSwgZGVzdHJveVxuICAgICAqXG4gICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgKi9cbiAgICB1cmw6IGZ1bmN0aW9uIG1UcmFuc2l0aW9uX3VybCgpIHtcbiAgICAgIHZhciB1cmxEYXRhID1cbiAgICAgICAgXCJhcGkvdjIvZG9jdW1lbnRzLzwlPSBkb2N1bWVudElkICU+L3ZpZXdzL3N0YXRlcy88JT0gc3RhdGUgJT5cIjtcblxuICAgICAgdXJsRGF0YSA9IHVybERhdGEucmVwbGFjZShcbiAgICAgICAgXCI8JT0gZG9jdW1lbnRJZCAlPlwiLFxuICAgICAgICBlbmNvZGVVUklDb21wb25lbnQodGhpcy5nZXQoXCJkb2N1bWVudElkXCIpKVxuICAgICAgKTtcbiAgICAgIHVybERhdGEgPSB1cmxEYXRhLnJlcGxhY2UoXG4gICAgICAgIFwiPCU9IHN0YXRlICU+XCIsXG4gICAgICAgIGVuY29kZVVSSUNvbXBvbmVudCh0aGlzLmdldChcInN0YXRlXCIpKVxuICAgICAgKTtcblxuICAgICAgcmV0dXJuIHVybERhdGE7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBQYXJzZSB0aGUgcmV0dXJuIG9mIHRoZSBSRVNUIEFQSVxuICAgICAqIEBwYXJhbSByZXNwb25zZVxuICAgICAqIEByZXR1cm5zIHt7cHJvcGVydGllczogKCp8cHJvcGVydGllc3xleHBvcnRzLmRlZmF1bHRzLnByb3BlcnRpZXN8ZXhwb3J0cy5wYXJzZS5wcm9wZXJ0aWVzfC5jcmVhdGVPYmplY3RFeHByZXNzaW9uLnByb3BlcnRpZXMpLCBtZW51czogKGFwcC52aWV3cy5zaGFyZWQubWVudXwqKSwgbG9jYWxlOiAqLCByZW5kZXJNb2RlOiBzdHJpbmcsIGF0dHJpYnV0ZXM6IEFycmF5LCB0ZW1wbGF0ZXM6ICosIHJlbmRlck9wdGlvbnM6ICp9fVxuICAgICAqL1xuICAgIHBhcnNlOiBmdW5jdGlvbiBtVHJhbnNpdGlvbl9QYXJzZShyZXNwb25zZSkge1xuICAgICAgdmFyIHZhbHVlcywgYXR0cmlidXRlcywgdGVtcGxhdGVzLCByZW5kZXJPcHRpb25zO1xuICAgICAgdmFyIGRvY3VtZW50TW9kZWwgPSB0aGlzLmdldChcImRvY3VtZW50TW9kZWxcIik7XG4gICAgICBpZiAocmVzcG9uc2Uuc3VjY2VzcyA9PT0gZmFsc2UpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5hYmxlIHRvIGdldCB0aGUgZGF0YSBmcm9tIGNoYW5nZSBzdGF0ZVwiKTtcbiAgICAgIH1cbiAgICAgIGF0dHJpYnV0ZXMgPSBbXTtcblxuICAgICAgcmVuZGVyT3B0aW9ucyA9IHJlc3BvbnNlLmRhdGEucmVuZGVyT3B0aW9ucztcblxuICAgICAgaWYgKCFyZW5kZXJPcHRpb25zKSB7XG4gICAgICAgIHJlbmRlck9wdGlvbnMgPSBkb2N1bWVudE1vZGVsLmdldChcInJlbmRlck9wdGlvbnNcIik7XG4gICAgICB9XG4gICAgICBpZiAoXG4gICAgICAgIHJlc3BvbnNlLmRhdGEudHJhbnNpdGlvbiAmJlxuICAgICAgICByZXNwb25zZS5kYXRhLnRyYW5zaXRpb24uYXNrQXR0cmlidXRlcy5sZW5ndGggPiAwXG4gICAgICApIHtcbiAgICAgICAgXy5lYWNoKFxuICAgICAgICAgIHJlc3BvbnNlLmRhdGEudHJhbnNpdGlvbi5hc2tBdHRyaWJ1dGVzLFxuICAgICAgICAgIGZ1bmN0aW9uIG1UcmFuc2l0aW9uX3BhcnNlQXNrKGFzaykge1xuICAgICAgICAgICAgYXR0cmlidXRlcy5wdXNoKGFzayk7XG4gICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgdGVtcGxhdGVzID0gZG9jdW1lbnRNb2RlbC5nZXQoXCJ0ZW1wbGF0ZXNcIik7XG5cbiAgICAgIGlmIChyZXNwb25zZS5kYXRhLnRlbXBsYXRlcykge1xuICAgICAgICB0ZW1wbGF0ZXMuYm9keSA9IHJlc3BvbnNlLmRhdGEudGVtcGxhdGVzLmJvZHk7XG4gICAgICAgIF8uZWFjaChcbiAgICAgICAgICByZXNwb25zZS5kYXRhLnRlbXBsYXRlcy5zZWN0aW9ucyxcbiAgICAgICAgICBmdW5jdGlvbiBtVHJhbnNpdGlvbl9wYXJzZVRlbXBsYXRlKHRlbXBsYXRlQ29udGVudCwgdGVtcGxhdGVJbmRleCkge1xuICAgICAgICAgICAgdGVtcGxhdGVzLnNlY3Rpb25zW3RlbXBsYXRlSW5kZXhdID0gdGVtcGxhdGVDb250ZW50O1xuICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5pbml0aWFsUHJvcGVydGllcyA9IHtcbiAgICAgICAgcmVuZGVyTW9kZTogXCJlZGl0XCIsXG4gICAgICAgIHZpZXdJZDogXCIhVHJhbnNpdGlvblwiXG4gICAgICB9O1xuXG4gICAgICB2YWx1ZXMgPSB7XG4gICAgICAgIGluaXRpZDogbnVsbCwgLy9yZXNwb25zZS5kYXRhLndvcmtmbG93LnByb3BlcnRpZXMuaW5pdGlkLCAvLyBzZXQgdG8gbnVsbCB0byBzZW5kIGEgUE9TVCAoY3JlYXRlKSB3aGVuIHNhdmVcbiAgICAgICAgcHJvcGVydGllczogcmVzcG9uc2UuZGF0YS53b3JrZmxvdy5wcm9wZXJ0aWVzLFxuICAgICAgICBtZW51czogW10sXG4gICAgICAgIHZpZXdJZDogXCIhVHJhbnNpdGlvblwiLFxuICAgICAgICBsb2NhbGU6IGRvY3VtZW50TW9kZWwuZ2V0KFwibG9jYWxlXCIpLmN1bHR1cmUsXG4gICAgICAgIHJlbmRlck1vZGU6IFwiZWRpdFwiLFxuICAgICAgICBhdHRyaWJ1dGVzOiBhdHRyaWJ1dGVzLFxuICAgICAgICB0ZW1wbGF0ZXM6IGRvY3VtZW50TW9kZWwuZ2V0KFwidGVtcGxhdGVzXCIpLFxuICAgICAgICByZW5kZXJPcHRpb25zOiByZW5kZXJPcHRpb25zLFxuICAgICAgICBjdXN0b21DU1M6IHJlc3BvbnNlLmRhdGEuY3NzLFxuICAgICAgICBjdXN0b21KUzogcmVzcG9uc2UuZGF0YS5qcyxcbiAgICAgICAgbWVzc2FnZXM6IHJlc3BvbnNlLm1lc3NhZ2VzLFxuICAgICAgICB3b3JrZmxvdzoge1xuICAgICAgICAgIHRyYW5zaXRpb246IHJlc3BvbnNlLmRhdGEudHJhbnNpdGlvbixcbiAgICAgICAgICBzdGF0ZTogcmVzcG9uc2UuZGF0YS5zdGF0ZSxcbiAgICAgICAgICBsYWJlbHM6IHJlc3BvbnNlLmRhdGEubGFiZWxzXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICByZXR1cm4gdmFsdWVzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBVc2VkIGJ5IGJhY2tib25lIGZvciB0aGUgc2F2ZSBwYXJ0XG4gICAgICogQHJldHVybnMge3tkb2N1bWVudDoge2F0dHJpYnV0ZXM6ICosIHByb3BlcnRpZXMgOiAqfX19XG4gICAgICovXG4gICAgdG9KU09OOiBmdW5jdGlvbiBtVHJhbnNpdGlvbl90b0pTT04oKSB7XG4gICAgICB2YXIgdmFsdWVzID0gdGhpcy5nZXRWYWx1ZXMoKSxcbiAgICAgICAgcmV0dXJuVmFsdWVzID0geyBwYXJhbWV0ZXJzOiB7fSB9O1xuXG4gICAgICBfLmVhY2godmFsdWVzLCBmdW5jdGlvbiBtVHJhbnNpdGlvbl9hbmFseXplQ29udGVudCh2YWx1ZSwgYWlkKSB7XG4gICAgICAgIGlmIChhaWQgPT09IFwiX3dvcmtmbG93X2NvbW1lbnRfXCIpIHtcbiAgICAgICAgICByZXR1cm5WYWx1ZXMuY29tbWVudCA9IF8uaXNPYmplY3QodmFsdWUpID8gdmFsdWUudmFsdWUgOiBcIlwiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChfLmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICBpZiAodmFsdWUubGVuZ3RoID4gMCAmJiBfLmlzQXJyYXkodmFsdWVbMF0pKSB7XG4gICAgICAgICAgICAgIC8vIGRvdWJsZSBtdWx0aXBsZVxuICAgICAgICAgICAgICByZXR1cm5WYWx1ZXMucGFyYW1ldGVyc1thaWRdID0gXy5tYXAoXG4gICAgICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gbVRyYW5zaXRpb25fZ2V0UGFyYW1ldGVyKGFWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIF8ucGx1Y2soYVZhbHVlLCBcInZhbHVlXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJldHVyblZhbHVlcy5wYXJhbWV0ZXJzW2FpZF0gPSBfLnBsdWNrKHZhbHVlLCBcInZhbHVlXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoXy5pc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVyblZhbHVlcy5wYXJhbWV0ZXJzW2FpZF0gPSB2YWx1ZS52YWx1ZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuVmFsdWVzLnBhcmFtZXRlcnNbYWlkXSA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmV0dXJuVmFsdWVzO1xuICAgIH1cbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///b54b8e1b0f3a789539f4\n");

/***/ }),

/***/ "b5ff5c3b4cb330732221":
/*!**************************************************************************!*\
  !*** ./src/vendor/Anakeen/DOCUMENT/IHM/views/document/header/vHeader.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*global define*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n  __webpack_require__(/*! jquery */ \"127c8cf59f228bb01a21\"),\n  __webpack_require__(/*! underscore */ \"8e08e542008e4aef1f58\"),\n  __webpack_require__(/*! backbone */ \"1858b45bf48591489d06\"),\n  __webpack_require__(/*! mustache */ \"bcd31d01884fc294fd69\")\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function require_vheader($, _, Backbone, Mustache) {\n  \"use strict\";\n\n  return Backbone.View.extend({\n    className: \"dcpDocument\",\n\n    /**\n     * The current model is the document model\n     * The header template comes from template \"sections/header\"\n     */\n    headerTemplate: null,\n\n    initialize: function vHeaderInitialize() {\n      this.listenTo(this.model.get(\"properties\"), \"change\", this.updateHeader);\n      this.listenTo(this.model, \"destroy\", this.remove);\n      this.listenTo(this.model, \"cleanView\", this.remove);\n      this.listenTo(this.model, \"changeValue\", this.documentHasChanged);\n      this.headerTemplate = this.getTemplates(\"sections\").header;\n    },\n\n    /**\n     * apply mustache template to inner content\n     * @returns {*}\n     */\n    render: function vheaderRender() {\n      var currentView = this;\n      return new Promise(\n        _.bind(function vheaderRenderPromise(resolve, reject) {\n          try {\n            var data = currentView.model.toData(),\n              properties = currentView.model.getModelProperties(),\n              security = properties.security || false;\n\n            data.document.properties = properties;\n\n            data.document.properties.security = security || {\n              lock: { lockedBy: null }\n            };\n            data.document.properties.security.lock.isLocked =\n              data.document.properties.security.lock.lockedBy &&\n              data.document.properties.security.lock.lockedBy.id > 0;\n\n            var headerRender = $(\n              Mustache.render(currentView.headerTemplate || \"\", data)\n            );\n            var $header = currentView.$el;\n            $header.empty();\n            _.each(headerRender.children(), function eachChildren(elt) {\n              $header.append(elt);\n            });\n\n            $header\n              .find(\n                \".dcpDocument__header__lock, .dcpDocument__header__readonly, .dcpDocument__header__modified\"\n              )\n              .tooltip({\n                placement: \"bottom\",\n                html: true\n              });\n\n            return resolve(currentView);\n          } catch (e) {\n            reject(e);\n          }\n        }, this)\n      );\n    },\n\n    /**\n     * reset mustache template\n     * update window title also\n     * @returns {*}\n     */\n    updateHeader: function vheaderUpdateHeader() {\n      var doctitle = this.model.get(\"properties\").get(\"title\");\n      if (doctitle) {\n        window.document.title = doctitle;\n      }\n      return this.render();\n    },\n\n    getTemplates: function vheadergetTemplates(key) {\n      var templates = {};\n      if (this.model && this.model.get(\"templates\")) {\n        templates = this.model.get(\"templates\");\n      }\n      if (templates[key]) {\n        return templates[key];\n      }\n      if (window.dcp && window.dcp.templates && window.dcp.templates[key]) {\n        return window.dcp.templates[key];\n      }\n      throw new Error(\"Unknown template  \" + key);\n    },\n    documentHasChanged: function vheaderdocumentHasChanged() {\n      var wTitle = window.document.title.replace(/^\\*+/g, \"\");\n\n      if (this.model.hasAttributesChanged()) {\n        this.$el.find(\".dcpDocument__header__modified\").show();\n        window.document.title = \"*\" + wTitle;\n      } else {\n        this.$el.find(\".dcpDocument__header__modified\").hide();\n        window.document.title = wTitle;\n      }\n      if (this.model.hasUploadingFile()) {\n        this.$el.find(\".dcpDocument__header__modified\").addClass(\"fa-spin\");\n      } else {\n        this.$el.find(\".dcpDocument__header__modified\").removeClass(\"fa-spin\");\n      }\n    }\n  });\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjVmZjVjM2I0Y2IzMzA3MzIyMjEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdmVuZG9yL0FuYWtlZW4vRE9DVU1FTlQvSUhNL3ZpZXdzL2RvY3VtZW50L2hlYWRlci92SGVhZGVyLmpzPzdiODciXSwic291cmNlc0NvbnRlbnQiOlsiLypnbG9iYWwgZGVmaW5lKi9cbmRlZmluZShbXG4gIFwianF1ZXJ5XCIsXG4gIFwidW5kZXJzY29yZVwiLFxuICBcImJhY2tib25lXCIsXG4gIFwibXVzdGFjaGVcIlxuXSwgZnVuY3Rpb24gcmVxdWlyZV92aGVhZGVyKCQsIF8sIEJhY2tib25lLCBNdXN0YWNoZSkge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICByZXR1cm4gQmFja2JvbmUuVmlldy5leHRlbmQoe1xuICAgIGNsYXNzTmFtZTogXCJkY3BEb2N1bWVudFwiLFxuXG4gICAgLyoqXG4gICAgICogVGhlIGN1cnJlbnQgbW9kZWwgaXMgdGhlIGRvY3VtZW50IG1vZGVsXG4gICAgICogVGhlIGhlYWRlciB0ZW1wbGF0ZSBjb21lcyBmcm9tIHRlbXBsYXRlIFwic2VjdGlvbnMvaGVhZGVyXCJcbiAgICAgKi9cbiAgICBoZWFkZXJUZW1wbGF0ZTogbnVsbCxcblxuICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uIHZIZWFkZXJJbml0aWFsaXplKCkge1xuICAgICAgdGhpcy5saXN0ZW5Ubyh0aGlzLm1vZGVsLmdldChcInByb3BlcnRpZXNcIiksIFwiY2hhbmdlXCIsIHRoaXMudXBkYXRlSGVhZGVyKTtcbiAgICAgIHRoaXMubGlzdGVuVG8odGhpcy5tb2RlbCwgXCJkZXN0cm95XCIsIHRoaXMucmVtb3ZlKTtcbiAgICAgIHRoaXMubGlzdGVuVG8odGhpcy5tb2RlbCwgXCJjbGVhblZpZXdcIiwgdGhpcy5yZW1vdmUpO1xuICAgICAgdGhpcy5saXN0ZW5Ubyh0aGlzLm1vZGVsLCBcImNoYW5nZVZhbHVlXCIsIHRoaXMuZG9jdW1lbnRIYXNDaGFuZ2VkKTtcbiAgICAgIHRoaXMuaGVhZGVyVGVtcGxhdGUgPSB0aGlzLmdldFRlbXBsYXRlcyhcInNlY3Rpb25zXCIpLmhlYWRlcjtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogYXBwbHkgbXVzdGFjaGUgdGVtcGxhdGUgdG8gaW5uZXIgY29udGVudFxuICAgICAqIEByZXR1cm5zIHsqfVxuICAgICAqL1xuICAgIHJlbmRlcjogZnVuY3Rpb24gdmhlYWRlclJlbmRlcigpIHtcbiAgICAgIHZhciBjdXJyZW50VmlldyA9IHRoaXM7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoXG4gICAgICAgIF8uYmluZChmdW5jdGlvbiB2aGVhZGVyUmVuZGVyUHJvbWlzZShyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIGRhdGEgPSBjdXJyZW50Vmlldy5tb2RlbC50b0RhdGEoKSxcbiAgICAgICAgICAgICAgcHJvcGVydGllcyA9IGN1cnJlbnRWaWV3Lm1vZGVsLmdldE1vZGVsUHJvcGVydGllcygpLFxuICAgICAgICAgICAgICBzZWN1cml0eSA9IHByb3BlcnRpZXMuc2VjdXJpdHkgfHwgZmFsc2U7XG5cbiAgICAgICAgICAgIGRhdGEuZG9jdW1lbnQucHJvcGVydGllcyA9IHByb3BlcnRpZXM7XG5cbiAgICAgICAgICAgIGRhdGEuZG9jdW1lbnQucHJvcGVydGllcy5zZWN1cml0eSA9IHNlY3VyaXR5IHx8IHtcbiAgICAgICAgICAgICAgbG9jazogeyBsb2NrZWRCeTogbnVsbCB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZGF0YS5kb2N1bWVudC5wcm9wZXJ0aWVzLnNlY3VyaXR5LmxvY2suaXNMb2NrZWQgPVxuICAgICAgICAgICAgICBkYXRhLmRvY3VtZW50LnByb3BlcnRpZXMuc2VjdXJpdHkubG9jay5sb2NrZWRCeSAmJlxuICAgICAgICAgICAgICBkYXRhLmRvY3VtZW50LnByb3BlcnRpZXMuc2VjdXJpdHkubG9jay5sb2NrZWRCeS5pZCA+IDA7XG5cbiAgICAgICAgICAgIHZhciBoZWFkZXJSZW5kZXIgPSAkKFxuICAgICAgICAgICAgICBNdXN0YWNoZS5yZW5kZXIoY3VycmVudFZpZXcuaGVhZGVyVGVtcGxhdGUgfHwgXCJcIiwgZGF0YSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB2YXIgJGhlYWRlciA9IGN1cnJlbnRWaWV3LiRlbDtcbiAgICAgICAgICAgICRoZWFkZXIuZW1wdHkoKTtcbiAgICAgICAgICAgIF8uZWFjaChoZWFkZXJSZW5kZXIuY2hpbGRyZW4oKSwgZnVuY3Rpb24gZWFjaENoaWxkcmVuKGVsdCkge1xuICAgICAgICAgICAgICAkaGVhZGVyLmFwcGVuZChlbHQpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICRoZWFkZXJcbiAgICAgICAgICAgICAgLmZpbmQoXG4gICAgICAgICAgICAgICAgXCIuZGNwRG9jdW1lbnRfX2hlYWRlcl9fbG9jaywgLmRjcERvY3VtZW50X19oZWFkZXJfX3JlYWRvbmx5LCAuZGNwRG9jdW1lbnRfX2hlYWRlcl9fbW9kaWZpZWRcIlxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgIC50b29sdGlwKHtcbiAgICAgICAgICAgICAgICBwbGFjZW1lbnQ6IFwiYm90dG9tXCIsXG4gICAgICAgICAgICAgICAgaHRtbDogdHJ1ZVxuICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoY3VycmVudFZpZXcpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIHRoaXMpXG4gICAgICApO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiByZXNldCBtdXN0YWNoZSB0ZW1wbGF0ZVxuICAgICAqIHVwZGF0ZSB3aW5kb3cgdGl0bGUgYWxzb1xuICAgICAqIEByZXR1cm5zIHsqfVxuICAgICAqL1xuICAgIHVwZGF0ZUhlYWRlcjogZnVuY3Rpb24gdmhlYWRlclVwZGF0ZUhlYWRlcigpIHtcbiAgICAgIHZhciBkb2N0aXRsZSA9IHRoaXMubW9kZWwuZ2V0KFwicHJvcGVydGllc1wiKS5nZXQoXCJ0aXRsZVwiKTtcbiAgICAgIGlmIChkb2N0aXRsZSkge1xuICAgICAgICB3aW5kb3cuZG9jdW1lbnQudGl0bGUgPSBkb2N0aXRsZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLnJlbmRlcigpO1xuICAgIH0sXG5cbiAgICBnZXRUZW1wbGF0ZXM6IGZ1bmN0aW9uIHZoZWFkZXJnZXRUZW1wbGF0ZXMoa2V5KSB7XG4gICAgICB2YXIgdGVtcGxhdGVzID0ge307XG4gICAgICBpZiAodGhpcy5tb2RlbCAmJiB0aGlzLm1vZGVsLmdldChcInRlbXBsYXRlc1wiKSkge1xuICAgICAgICB0ZW1wbGF0ZXMgPSB0aGlzLm1vZGVsLmdldChcInRlbXBsYXRlc1wiKTtcbiAgICAgIH1cbiAgICAgIGlmICh0ZW1wbGF0ZXNba2V5XSkge1xuICAgICAgICByZXR1cm4gdGVtcGxhdGVzW2tleV07XG4gICAgICB9XG4gICAgICBpZiAod2luZG93LmRjcCAmJiB3aW5kb3cuZGNwLnRlbXBsYXRlcyAmJiB3aW5kb3cuZGNwLnRlbXBsYXRlc1trZXldKSB7XG4gICAgICAgIHJldHVybiB3aW5kb3cuZGNwLnRlbXBsYXRlc1trZXldO1xuICAgICAgfVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biB0ZW1wbGF0ZSAgXCIgKyBrZXkpO1xuICAgIH0sXG4gICAgZG9jdW1lbnRIYXNDaGFuZ2VkOiBmdW5jdGlvbiB2aGVhZGVyZG9jdW1lbnRIYXNDaGFuZ2VkKCkge1xuICAgICAgdmFyIHdUaXRsZSA9IHdpbmRvdy5kb2N1bWVudC50aXRsZS5yZXBsYWNlKC9eXFwqKy9nLCBcIlwiKTtcblxuICAgICAgaWYgKHRoaXMubW9kZWwuaGFzQXR0cmlidXRlc0NoYW5nZWQoKSkge1xuICAgICAgICB0aGlzLiRlbC5maW5kKFwiLmRjcERvY3VtZW50X19oZWFkZXJfX21vZGlmaWVkXCIpLnNob3coKTtcbiAgICAgICAgd2luZG93LmRvY3VtZW50LnRpdGxlID0gXCIqXCIgKyB3VGl0bGU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLiRlbC5maW5kKFwiLmRjcERvY3VtZW50X19oZWFkZXJfX21vZGlmaWVkXCIpLmhpZGUoKTtcbiAgICAgICAgd2luZG93LmRvY3VtZW50LnRpdGxlID0gd1RpdGxlO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMubW9kZWwuaGFzVXBsb2FkaW5nRmlsZSgpKSB7XG4gICAgICAgIHRoaXMuJGVsLmZpbmQoXCIuZGNwRG9jdW1lbnRfX2hlYWRlcl9fbW9kaWZpZWRcIikuYWRkQ2xhc3MoXCJmYS1zcGluXCIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy4kZWwuZmluZChcIi5kY3BEb2N1bWVudF9faGVhZGVyX19tb2RpZmllZFwiKS5yZW1vdmVDbGFzcyhcImZhLXNwaW5cIik7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///b5ff5c3b4cb330732221\n");

/***/ }),

/***/ "b625c3d07db8baf045ff":
/*!**************************************************!*\
  !*** ./node_modules/bootstrap/js/src/tooltip.js ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ \"127c8cf59f228bb01a21\");\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var popper_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! popper.js */ \"05951c2f2bda4691bed3\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util */ \"b25f06ae111b578af6b0\");\n\n\n\n\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v4.1.3): tooltip.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nconst Tooltip = (($) => {\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n\n  const NAME               = 'tooltip'\n  const VERSION            = '4.1.3'\n  const DATA_KEY           = 'bs.tooltip'\n  const EVENT_KEY          = `.${DATA_KEY}`\n  const JQUERY_NO_CONFLICT = $.fn[NAME]\n  const CLASS_PREFIX       = 'bs-tooltip'\n  const BSCLS_PREFIX_REGEX = new RegExp(`(^|\\\\s)${CLASS_PREFIX}\\\\S+`, 'g')\n\n  const DefaultType = {\n    animation           : 'boolean',\n    template            : 'string',\n    title               : '(string|element|function)',\n    trigger             : 'string',\n    delay               : '(number|object)',\n    html                : 'boolean',\n    selector            : '(string|boolean)',\n    placement           : '(string|function)',\n    offset              : '(number|string)',\n    container           : '(string|element|boolean)',\n    fallbackPlacement   : '(string|array)',\n    boundary            : '(string|element)'\n  }\n\n  const AttachmentMap = {\n    AUTO   : 'auto',\n    TOP    : 'top',\n    RIGHT  : 'right',\n    BOTTOM : 'bottom',\n    LEFT   : 'left'\n  }\n\n  const Default = {\n    animation           : true,\n    template            : '<div class=\"tooltip\" role=\"tooltip\">' +\n                        '<div class=\"arrow\"></div>' +\n                        '<div class=\"tooltip-inner\"></div></div>',\n    trigger             : 'hover focus',\n    title               : '',\n    delay               : 0,\n    html                : false,\n    selector            : false,\n    placement           : 'top',\n    offset              : 0,\n    container           : false,\n    fallbackPlacement   : 'flip',\n    boundary            : 'scrollParent'\n  }\n\n  const HoverState = {\n    SHOW : 'show',\n    OUT  : 'out'\n  }\n\n  const Event = {\n    HIDE       : `hide${EVENT_KEY}`,\n    HIDDEN     : `hidden${EVENT_KEY}`,\n    SHOW       : `show${EVENT_KEY}`,\n    SHOWN      : `shown${EVENT_KEY}`,\n    INSERTED   : `inserted${EVENT_KEY}`,\n    CLICK      : `click${EVENT_KEY}`,\n    FOCUSIN    : `focusin${EVENT_KEY}`,\n    FOCUSOUT   : `focusout${EVENT_KEY}`,\n    MOUSEENTER : `mouseenter${EVENT_KEY}`,\n    MOUSELEAVE : `mouseleave${EVENT_KEY}`\n  }\n\n  const ClassName = {\n    FADE : 'fade',\n    SHOW : 'show'\n  }\n\n  const Selector = {\n    TOOLTIP       : '.tooltip',\n    TOOLTIP_INNER : '.tooltip-inner',\n    ARROW         : '.arrow'\n  }\n\n  const Trigger = {\n    HOVER  : 'hover',\n    FOCUS  : 'focus',\n    CLICK  : 'click',\n    MANUAL : 'manual'\n  }\n\n\n  /**\n   * ------------------------------------------------------------------------\n   * Class Definition\n   * ------------------------------------------------------------------------\n   */\n\n  class Tooltip {\n    constructor(element, config) {\n      /**\n       * Check for Popper dependency\n       * Popper - https://popper.js.org\n       */\n      if (typeof popper_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"] === 'undefined') {\n        throw new TypeError('Bootstrap tooltips require Popper.js (https://popper.js.org)')\n      }\n\n      // private\n      this._isEnabled     = true\n      this._timeout       = 0\n      this._hoverState    = ''\n      this._activeTrigger = {}\n      this._popper        = null\n\n      // Protected\n      this.element = element\n      this.config  = this._getConfig(config)\n      this.tip     = null\n\n      this._setListeners()\n    }\n\n    // Getters\n\n    static get VERSION() {\n      return VERSION\n    }\n\n    static get Default() {\n      return Default\n    }\n\n    static get NAME() {\n      return NAME\n    }\n\n    static get DATA_KEY() {\n      return DATA_KEY\n    }\n\n    static get Event() {\n      return Event\n    }\n\n    static get EVENT_KEY() {\n      return EVENT_KEY\n    }\n\n    static get DefaultType() {\n      return DefaultType\n    }\n\n    // Public\n\n    enable() {\n      this._isEnabled = true\n    }\n\n    disable() {\n      this._isEnabled = false\n    }\n\n    toggleEnabled() {\n      this._isEnabled = !this._isEnabled\n    }\n\n    toggle(event) {\n      if (!this._isEnabled) {\n        return\n      }\n\n      if (event) {\n        const dataKey = this.constructor.DATA_KEY\n        let context = $(event.currentTarget).data(dataKey)\n\n        if (!context) {\n          context = new this.constructor(\n            event.currentTarget,\n            this._getDelegateConfig()\n          )\n          $(event.currentTarget).data(dataKey, context)\n        }\n\n        context._activeTrigger.click = !context._activeTrigger.click\n\n        if (context._isWithActiveTrigger()) {\n          context._enter(null, context)\n        } else {\n          context._leave(null, context)\n        }\n      } else {\n        if ($(this.getTipElement()).hasClass(ClassName.SHOW)) {\n          this._leave(null, this)\n          return\n        }\n\n        this._enter(null, this)\n      }\n    }\n\n    dispose() {\n      clearTimeout(this._timeout)\n\n      $.removeData(this.element, this.constructor.DATA_KEY)\n\n      $(this.element).off(this.constructor.EVENT_KEY)\n      $(this.element).closest('.modal').off('hide.bs.modal')\n\n      if (this.tip) {\n        $(this.tip).remove()\n      }\n\n      this._isEnabled     = null\n      this._timeout       = null\n      this._hoverState    = null\n      this._activeTrigger = null\n      if (this._popper !== null) {\n        this._popper.destroy()\n      }\n\n      this._popper = null\n      this.element = null\n      this.config  = null\n      this.tip     = null\n    }\n\n    show() {\n      if ($(this.element).css('display') === 'none') {\n        throw new Error('Please use show on visible elements')\n      }\n\n      const showEvent = $.Event(this.constructor.Event.SHOW)\n      if (this.isWithContent() && this._isEnabled) {\n        $(this.element).trigger(showEvent)\n\n        const isInTheDom = $.contains(\n          this.element.ownerDocument.documentElement,\n          this.element\n        )\n\n        if (showEvent.isDefaultPrevented() || !isInTheDom) {\n          return\n        }\n\n        const tip   = this.getTipElement()\n        const tipId = _util__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getUID(this.constructor.NAME)\n\n        tip.setAttribute('id', tipId)\n        this.element.setAttribute('aria-describedby', tipId)\n\n        this.setContent()\n\n        if (this.config.animation) {\n          $(tip).addClass(ClassName.FADE)\n        }\n\n        const placement  = typeof this.config.placement === 'function'\n          ? this.config.placement.call(this, tip, this.element)\n          : this.config.placement\n\n        const attachment = this._getAttachment(placement)\n        this.addAttachmentClass(attachment)\n\n        const container = this.config.container === false ? document.body : $(document).find(this.config.container)\n\n        $(tip).data(this.constructor.DATA_KEY, this)\n\n        if (!$.contains(this.element.ownerDocument.documentElement, this.tip)) {\n          $(tip).appendTo(container)\n        }\n\n        $(this.element).trigger(this.constructor.Event.INSERTED)\n\n        this._popper = new popper_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this.element, tip, {\n          placement: attachment,\n          modifiers: {\n            offset: {\n              offset: this.config.offset\n            },\n            flip: {\n              behavior: this.config.fallbackPlacement\n            },\n            arrow: {\n              element: Selector.ARROW\n            },\n            preventOverflow: {\n              boundariesElement: this.config.boundary\n            }\n          },\n          onCreate: (data) => {\n            if (data.originalPlacement !== data.placement) {\n              this._handlePopperPlacementChange(data)\n            }\n          },\n          onUpdate: (data) => {\n            this._handlePopperPlacementChange(data)\n          }\n        })\n\n        $(tip).addClass(ClassName.SHOW)\n\n        // If this is a touch-enabled device we add extra\n        // empty mouseover listeners to the body's immediate children;\n        // only needed because of broken event delegation on iOS\n        // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html\n        if ('ontouchstart' in document.documentElement) {\n          $(document.body).children().on('mouseover', null, $.noop)\n        }\n\n        const complete = () => {\n          if (this.config.animation) {\n            this._fixTransition()\n          }\n          const prevHoverState = this._hoverState\n          this._hoverState     = null\n\n          $(this.element).trigger(this.constructor.Event.SHOWN)\n\n          if (prevHoverState === HoverState.OUT) {\n            this._leave(null, this)\n          }\n        }\n\n        if ($(this.tip).hasClass(ClassName.FADE)) {\n          const transitionDuration = _util__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getTransitionDurationFromElement(this.tip)\n\n          $(this.tip)\n            .one(_util__WEBPACK_IMPORTED_MODULE_2__[\"default\"].TRANSITION_END, complete)\n            .emulateTransitionEnd(transitionDuration)\n        } else {\n          complete()\n        }\n      }\n    }\n\n    hide(callback) {\n      const tip       = this.getTipElement()\n      const hideEvent = $.Event(this.constructor.Event.HIDE)\n      const complete = () => {\n        if (this._hoverState !== HoverState.SHOW && tip.parentNode) {\n          tip.parentNode.removeChild(tip)\n        }\n\n        this._cleanTipClass()\n        this.element.removeAttribute('aria-describedby')\n        $(this.element).trigger(this.constructor.Event.HIDDEN)\n        if (this._popper !== null) {\n          this._popper.destroy()\n        }\n\n        if (callback) {\n          callback()\n        }\n      }\n\n      $(this.element).trigger(hideEvent)\n\n      if (hideEvent.isDefaultPrevented()) {\n        return\n      }\n\n      $(tip).removeClass(ClassName.SHOW)\n\n      // If this is a touch-enabled device we remove the extra\n      // empty mouseover listeners we added for iOS support\n      if ('ontouchstart' in document.documentElement) {\n        $(document.body).children().off('mouseover', null, $.noop)\n      }\n\n      this._activeTrigger[Trigger.CLICK] = false\n      this._activeTrigger[Trigger.FOCUS] = false\n      this._activeTrigger[Trigger.HOVER] = false\n\n      if ($(this.tip).hasClass(ClassName.FADE)) {\n        const transitionDuration = _util__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getTransitionDurationFromElement(tip)\n\n        $(tip)\n          .one(_util__WEBPACK_IMPORTED_MODULE_2__[\"default\"].TRANSITION_END, complete)\n          .emulateTransitionEnd(transitionDuration)\n      } else {\n        complete()\n      }\n\n      this._hoverState = ''\n    }\n\n    update() {\n      if (this._popper !== null) {\n        this._popper.scheduleUpdate()\n      }\n    }\n\n    // Protected\n\n    isWithContent() {\n      return Boolean(this.getTitle())\n    }\n\n    addAttachmentClass(attachment) {\n      $(this.getTipElement()).addClass(`${CLASS_PREFIX}-${attachment}`)\n    }\n\n    getTipElement() {\n      this.tip = this.tip || $(this.config.template)[0]\n      return this.tip\n    }\n\n    setContent() {\n      const tip = this.getTipElement()\n      this.setElementContent($(tip.querySelectorAll(Selector.TOOLTIP_INNER)), this.getTitle())\n      $(tip).removeClass(`${ClassName.FADE} ${ClassName.SHOW}`)\n    }\n\n    setElementContent($element, content) {\n      const html = this.config.html\n      if (typeof content === 'object' && (content.nodeType || content.jquery)) {\n        // Content is a DOM node or a jQuery\n        if (html) {\n          if (!$(content).parent().is($element)) {\n            $element.empty().append(content)\n          }\n        } else {\n          $element.text($(content).text())\n        }\n      } else {\n        $element[html ? 'html' : 'text'](content)\n      }\n    }\n\n    getTitle() {\n      let title = this.element.getAttribute('data-original-title')\n\n      if (!title) {\n        title = typeof this.config.title === 'function'\n          ? this.config.title.call(this.element)\n          : this.config.title\n      }\n\n      return title\n    }\n\n    // Private\n\n    _getAttachment(placement) {\n      return AttachmentMap[placement.toUpperCase()]\n    }\n\n    _setListeners() {\n      const triggers = this.config.trigger.split(' ')\n\n      triggers.forEach((trigger) => {\n        if (trigger === 'click') {\n          $(this.element).on(\n            this.constructor.Event.CLICK,\n            this.config.selector,\n            (event) => this.toggle(event)\n          )\n        } else if (trigger !== Trigger.MANUAL) {\n          const eventIn = trigger === Trigger.HOVER\n            ? this.constructor.Event.MOUSEENTER\n            : this.constructor.Event.FOCUSIN\n          const eventOut = trigger === Trigger.HOVER\n            ? this.constructor.Event.MOUSELEAVE\n            : this.constructor.Event.FOCUSOUT\n\n          $(this.element)\n            .on(\n              eventIn,\n              this.config.selector,\n              (event) => this._enter(event)\n            )\n            .on(\n              eventOut,\n              this.config.selector,\n              (event) => this._leave(event)\n            )\n        }\n\n        $(this.element).closest('.modal').on(\n          'hide.bs.modal',\n          () => this.hide()\n        )\n      })\n\n      if (this.config.selector) {\n        this.config = {\n          ...this.config,\n          trigger: 'manual',\n          selector: ''\n        }\n      } else {\n        this._fixTitle()\n      }\n    }\n\n    _fixTitle() {\n      const titleType = typeof this.element.getAttribute('data-original-title')\n      if (this.element.getAttribute('title') ||\n         titleType !== 'string') {\n        this.element.setAttribute(\n          'data-original-title',\n          this.element.getAttribute('title') || ''\n        )\n        this.element.setAttribute('title', '')\n      }\n    }\n\n    _enter(event, context) {\n      const dataKey = this.constructor.DATA_KEY\n\n      context = context || $(event.currentTarget).data(dataKey)\n\n      if (!context) {\n        context = new this.constructor(\n          event.currentTarget,\n          this._getDelegateConfig()\n        )\n        $(event.currentTarget).data(dataKey, context)\n      }\n\n      if (event) {\n        context._activeTrigger[\n          event.type === 'focusin' ? Trigger.FOCUS : Trigger.HOVER\n        ] = true\n      }\n\n      if ($(context.getTipElement()).hasClass(ClassName.SHOW) ||\n         context._hoverState === HoverState.SHOW) {\n        context._hoverState = HoverState.SHOW\n        return\n      }\n\n      clearTimeout(context._timeout)\n\n      context._hoverState = HoverState.SHOW\n\n      if (!context.config.delay || !context.config.delay.show) {\n        context.show()\n        return\n      }\n\n      context._timeout = setTimeout(() => {\n        if (context._hoverState === HoverState.SHOW) {\n          context.show()\n        }\n      }, context.config.delay.show)\n    }\n\n    _leave(event, context) {\n      const dataKey = this.constructor.DATA_KEY\n\n      context = context || $(event.currentTarget).data(dataKey)\n\n      if (!context) {\n        context = new this.constructor(\n          event.currentTarget,\n          this._getDelegateConfig()\n        )\n        $(event.currentTarget).data(dataKey, context)\n      }\n\n      if (event) {\n        context._activeTrigger[\n          event.type === 'focusout' ? Trigger.FOCUS : Trigger.HOVER\n        ] = false\n      }\n\n      if (context._isWithActiveTrigger()) {\n        return\n      }\n\n      clearTimeout(context._timeout)\n\n      context._hoverState = HoverState.OUT\n\n      if (!context.config.delay || !context.config.delay.hide) {\n        context.hide()\n        return\n      }\n\n      context._timeout = setTimeout(() => {\n        if (context._hoverState === HoverState.OUT) {\n          context.hide()\n        }\n      }, context.config.delay.hide)\n    }\n\n    _isWithActiveTrigger() {\n      for (const trigger in this._activeTrigger) {\n        if (this._activeTrigger[trigger]) {\n          return true\n        }\n      }\n\n      return false\n    }\n\n    _getConfig(config) {\n      config = {\n        ...this.constructor.Default,\n        ...$(this.element).data(),\n        ...typeof config === 'object' && config ? config : {}\n      }\n\n      if (typeof config.delay === 'number') {\n        config.delay = {\n          show: config.delay,\n          hide: config.delay\n        }\n      }\n\n      if (typeof config.title === 'number') {\n        config.title = config.title.toString()\n      }\n\n      if (typeof config.content === 'number') {\n        config.content = config.content.toString()\n      }\n\n      _util__WEBPACK_IMPORTED_MODULE_2__[\"default\"].typeCheckConfig(\n        NAME,\n        config,\n        this.constructor.DefaultType\n      )\n\n      return config\n    }\n\n    _getDelegateConfig() {\n      const config = {}\n\n      if (this.config) {\n        for (const key in this.config) {\n          if (this.constructor.Default[key] !== this.config[key]) {\n            config[key] = this.config[key]\n          }\n        }\n      }\n\n      return config\n    }\n\n    _cleanTipClass() {\n      const $tip = $(this.getTipElement())\n      const tabClass = $tip.attr('class').match(BSCLS_PREFIX_REGEX)\n      if (tabClass !== null && tabClass.length) {\n        $tip.removeClass(tabClass.join(''))\n      }\n    }\n\n    _handlePopperPlacementChange(popperData) {\n      const popperInstance = popperData.instance\n      this.tip = popperInstance.popper\n      this._cleanTipClass()\n      this.addAttachmentClass(this._getAttachment(popperData.placement))\n    }\n\n    _fixTransition() {\n      const tip = this.getTipElement()\n      const initConfigAnimation = this.config.animation\n      if (tip.getAttribute('x-placement') !== null) {\n        return\n      }\n      $(tip).removeClass(ClassName.FADE)\n      this.config.animation = false\n      this.hide()\n      this.show()\n      this.config.animation = initConfigAnimation\n    }\n\n    // Static\n\n    static _jQueryInterface(config) {\n      return this.each(function () {\n        let data = $(this).data(DATA_KEY)\n        const _config = typeof config === 'object' && config\n\n        if (!data && /dispose|hide/.test(config)) {\n          return\n        }\n\n        if (!data) {\n          data = new Tooltip(this, _config)\n          $(this).data(DATA_KEY, data)\n        }\n\n        if (typeof config === 'string') {\n          if (typeof data[config] === 'undefined') {\n            throw new TypeError(`No method named \"${config}\"`)\n          }\n          data[config]()\n        }\n      })\n    }\n  }\n\n  /**\n   * ------------------------------------------------------------------------\n   * jQuery\n   * ------------------------------------------------------------------------\n   */\n\n  $.fn[NAME] = Tooltip._jQueryInterface\n  $.fn[NAME].Constructor = Tooltip\n  $.fn[NAME].noConflict = function () {\n    $.fn[NAME] = JQUERY_NO_CONFLICT\n    return Tooltip._jQueryInterface\n  }\n\n  return Tooltip\n})(jquery__WEBPACK_IMPORTED_MODULE_0___default.a, popper_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Tooltip);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///b625c3d07db8baf045ff\n");

/***/ }),

/***/ "b9330987a639d11ea48d":
/*!**********************************************************************!*\
  !*** ./src/vendor/Anakeen/DOCUMENT/IHM/views/document/menu/vMenu.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*global define*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! underscore */ \"8e08e542008e4aef1f58\"), __webpack_require__(/*! backbone */ \"1858b45bf48591489d06\"), __webpack_require__(/*! dcpDocument/widgets/menu/wMenu */ \"4dfa9ecb0933d2ac74e4\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function(\n  _,\n  Backbone\n) {\n  \"use strict\";\n\n  return Backbone.View.extend({\n    className: \"dcpDocument\",\n\n    events: {\n      dcpmenuexternallinkselected: \"externalLinkSelected\",\n      dcpmenushowmessage: \"showMessage\",\n      dcpmenureload: \"reloadDocument\"\n    },\n\n    /**\n     * The current model is the document model\n     * So menuModel reference the menu model\n     */\n    menuModel: null,\n\n    initialize: function vMenuInitialize() {\n      this.listenTo(this.model.get(\"properties\"), \"change\", this.updateWidget);\n      this.listenTo(this.model.get(\"menus\"), \"change\", this.updateWidget);\n      this.listenTo(this.model.get(\"menus\"), \"reload\", this.updateWidget);\n      this.listenTo(\n        this.model.get(\"attributes\"),\n        \"changeMenuVisibility\",\n        this.changeVisibility\n      );\n      this.listenTo(this.model, \"destroy\", this.remove);\n      this.listenTo(this.model, \"cleanView\", this.remove);\n      this.menuModel = this.model.get(\"menus\");\n    },\n\n    render: function vMenuRender() {\n      var currentView = this;\n      return new Promise(\n        _.bind(function vMenuRenderPromise(resolve, reject) {\n          try {\n            currentView.$el.dcpMenu(currentView.model.toData());\n            currentView.refresh();\n            return resolve(currentView);\n          } catch (e) {\n            reject(e);\n          }\n        }, this)\n      );\n    },\n\n    externalLinkSelected: function vMenuExternalLinkSelected(event, options) {\n      var internalEvent = {\n        prevent: false\n      };\n\n      options.attrid = this.model.id;\n      this.model.trigger(\"internalLinkSelected\", internalEvent, options);\n      if (event.prevent) {\n        return this;\n      }\n      this.model.trigger(\"actionAttributeLink\", internalEvent, options);\n      return this;\n    },\n\n    showMessage: function vMenushowMessage(event, options) {\n      options.attrid = this.model.id;\n      this.model.trigger(\"showMessage\", options);\n\n      return this;\n    },\n    reloadDocument: function vMenureloadDocument(event, options) {\n      this.model.trigger(\"reload\", options);\n\n      return this;\n    },\n    changeVisibility: function vMenuchangeVisibility(event, data) {\n      var menuItem = this.menuModel.get(data.id);\n      var onlyIfVisible = !!data.onlyIfVisible;\n      var visibility;\n      if (menuItem) {\n        visibility = menuItem.get(\"visibility\");\n        if (!onlyIfVisible || visibility !== \"hidden\") {\n          menuItem.set(\"visibility\", data.visibility);\n        }\n      }\n    },\n\n    updateWidget: function vMenuUpdateWidget() {\n      if (this.$el.dcpMenu && this._findWidgetName(this.$el)) {\n        this.$el.dcpMenu(\"destroy\");\n      }\n      return this.render();\n    },\n\n    remove: function vMenuRemove() {\n      if (this.$el.dcpMenu && this._findWidgetName(this.$el)) {\n        this.$el.dcpMenu(\"destroy\");\n      }\n      return Backbone.View.prototype.remove.call(this);\n    },\n\n    _findWidgetName: function vMenu_findWidgetName($element) {\n      return _.find(_.keys($element.data()), function(currentKey) {\n        return currentKey.indexOf(\"dcpDcp\") !== -1;\n      });\n    },\n\n    /**\n     * Recompute responsive in case of scrollbar can appear\n     */\n    refresh: function vMenu_refresh() {\n      if (this.$el.dcpMenu && this._findWidgetName(this.$el)) {\n        this.$el.dcpMenu(\"updateResponsiveMenu\");\n      }\n    }\n  });\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjkzMzA5ODdhNjM5ZDExZWE0OGQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdmVuZG9yL0FuYWtlZW4vRE9DVU1FTlQvSUhNL3ZpZXdzL2RvY3VtZW50L21lbnUvdk1lbnUuanM/MGFjZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKmdsb2JhbCBkZWZpbmUqL1xuZGVmaW5lKFtcInVuZGVyc2NvcmVcIiwgXCJiYWNrYm9uZVwiLCBcImRjcERvY3VtZW50L3dpZGdldHMvbWVudS93TWVudVwiXSwgZnVuY3Rpb24oXG4gIF8sXG4gIEJhY2tib25lXG4pIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgcmV0dXJuIEJhY2tib25lLlZpZXcuZXh0ZW5kKHtcbiAgICBjbGFzc05hbWU6IFwiZGNwRG9jdW1lbnRcIixcblxuICAgIGV2ZW50czoge1xuICAgICAgZGNwbWVudWV4dGVybmFsbGlua3NlbGVjdGVkOiBcImV4dGVybmFsTGlua1NlbGVjdGVkXCIsXG4gICAgICBkY3BtZW51c2hvd21lc3NhZ2U6IFwic2hvd01lc3NhZ2VcIixcbiAgICAgIGRjcG1lbnVyZWxvYWQ6IFwicmVsb2FkRG9jdW1lbnRcIlxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBUaGUgY3VycmVudCBtb2RlbCBpcyB0aGUgZG9jdW1lbnQgbW9kZWxcbiAgICAgKiBTbyBtZW51TW9kZWwgcmVmZXJlbmNlIHRoZSBtZW51IG1vZGVsXG4gICAgICovXG4gICAgbWVudU1vZGVsOiBudWxsLFxuXG4gICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24gdk1lbnVJbml0aWFsaXplKCkge1xuICAgICAgdGhpcy5saXN0ZW5Ubyh0aGlzLm1vZGVsLmdldChcInByb3BlcnRpZXNcIiksIFwiY2hhbmdlXCIsIHRoaXMudXBkYXRlV2lkZ2V0KTtcbiAgICAgIHRoaXMubGlzdGVuVG8odGhpcy5tb2RlbC5nZXQoXCJtZW51c1wiKSwgXCJjaGFuZ2VcIiwgdGhpcy51cGRhdGVXaWRnZXQpO1xuICAgICAgdGhpcy5saXN0ZW5Ubyh0aGlzLm1vZGVsLmdldChcIm1lbnVzXCIpLCBcInJlbG9hZFwiLCB0aGlzLnVwZGF0ZVdpZGdldCk7XG4gICAgICB0aGlzLmxpc3RlblRvKFxuICAgICAgICB0aGlzLm1vZGVsLmdldChcImF0dHJpYnV0ZXNcIiksXG4gICAgICAgIFwiY2hhbmdlTWVudVZpc2liaWxpdHlcIixcbiAgICAgICAgdGhpcy5jaGFuZ2VWaXNpYmlsaXR5XG4gICAgICApO1xuICAgICAgdGhpcy5saXN0ZW5Ubyh0aGlzLm1vZGVsLCBcImRlc3Ryb3lcIiwgdGhpcy5yZW1vdmUpO1xuICAgICAgdGhpcy5saXN0ZW5Ubyh0aGlzLm1vZGVsLCBcImNsZWFuVmlld1wiLCB0aGlzLnJlbW92ZSk7XG4gICAgICB0aGlzLm1lbnVNb2RlbCA9IHRoaXMubW9kZWwuZ2V0KFwibWVudXNcIik7XG4gICAgfSxcblxuICAgIHJlbmRlcjogZnVuY3Rpb24gdk1lbnVSZW5kZXIoKSB7XG4gICAgICB2YXIgY3VycmVudFZpZXcgPSB0aGlzO1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKFxuICAgICAgICBfLmJpbmQoZnVuY3Rpb24gdk1lbnVSZW5kZXJQcm9taXNlKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjdXJyZW50Vmlldy4kZWwuZGNwTWVudShjdXJyZW50Vmlldy5tb2RlbC50b0RhdGEoKSk7XG4gICAgICAgICAgICBjdXJyZW50Vmlldy5yZWZyZXNoKCk7XG4gICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShjdXJyZW50Vmlldyk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgdGhpcylcbiAgICAgICk7XG4gICAgfSxcblxuICAgIGV4dGVybmFsTGlua1NlbGVjdGVkOiBmdW5jdGlvbiB2TWVudUV4dGVybmFsTGlua1NlbGVjdGVkKGV2ZW50LCBvcHRpb25zKSB7XG4gICAgICB2YXIgaW50ZXJuYWxFdmVudCA9IHtcbiAgICAgICAgcHJldmVudDogZmFsc2VcbiAgICAgIH07XG5cbiAgICAgIG9wdGlvbnMuYXR0cmlkID0gdGhpcy5tb2RlbC5pZDtcbiAgICAgIHRoaXMubW9kZWwudHJpZ2dlcihcImludGVybmFsTGlua1NlbGVjdGVkXCIsIGludGVybmFsRXZlbnQsIG9wdGlvbnMpO1xuICAgICAgaWYgKGV2ZW50LnByZXZlbnQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICB0aGlzLm1vZGVsLnRyaWdnZXIoXCJhY3Rpb25BdHRyaWJ1dGVMaW5rXCIsIGludGVybmFsRXZlbnQsIG9wdGlvbnMpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIHNob3dNZXNzYWdlOiBmdW5jdGlvbiB2TWVudXNob3dNZXNzYWdlKGV2ZW50LCBvcHRpb25zKSB7XG4gICAgICBvcHRpb25zLmF0dHJpZCA9IHRoaXMubW9kZWwuaWQ7XG4gICAgICB0aGlzLm1vZGVsLnRyaWdnZXIoXCJzaG93TWVzc2FnZVwiLCBvcHRpb25zKTtcblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICByZWxvYWREb2N1bWVudDogZnVuY3Rpb24gdk1lbnVyZWxvYWREb2N1bWVudChldmVudCwgb3B0aW9ucykge1xuICAgICAgdGhpcy5tb2RlbC50cmlnZ2VyKFwicmVsb2FkXCIsIG9wdGlvbnMpO1xuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGNoYW5nZVZpc2liaWxpdHk6IGZ1bmN0aW9uIHZNZW51Y2hhbmdlVmlzaWJpbGl0eShldmVudCwgZGF0YSkge1xuICAgICAgdmFyIG1lbnVJdGVtID0gdGhpcy5tZW51TW9kZWwuZ2V0KGRhdGEuaWQpO1xuICAgICAgdmFyIG9ubHlJZlZpc2libGUgPSAhIWRhdGEub25seUlmVmlzaWJsZTtcbiAgICAgIHZhciB2aXNpYmlsaXR5O1xuICAgICAgaWYgKG1lbnVJdGVtKSB7XG4gICAgICAgIHZpc2liaWxpdHkgPSBtZW51SXRlbS5nZXQoXCJ2aXNpYmlsaXR5XCIpO1xuICAgICAgICBpZiAoIW9ubHlJZlZpc2libGUgfHwgdmlzaWJpbGl0eSAhPT0gXCJoaWRkZW5cIikge1xuICAgICAgICAgIG1lbnVJdGVtLnNldChcInZpc2liaWxpdHlcIiwgZGF0YS52aXNpYmlsaXR5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICB1cGRhdGVXaWRnZXQ6IGZ1bmN0aW9uIHZNZW51VXBkYXRlV2lkZ2V0KCkge1xuICAgICAgaWYgKHRoaXMuJGVsLmRjcE1lbnUgJiYgdGhpcy5fZmluZFdpZGdldE5hbWUodGhpcy4kZWwpKSB7XG4gICAgICAgIHRoaXMuJGVsLmRjcE1lbnUoXCJkZXN0cm95XCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyKCk7XG4gICAgfSxcblxuICAgIHJlbW92ZTogZnVuY3Rpb24gdk1lbnVSZW1vdmUoKSB7XG4gICAgICBpZiAodGhpcy4kZWwuZGNwTWVudSAmJiB0aGlzLl9maW5kV2lkZ2V0TmFtZSh0aGlzLiRlbCkpIHtcbiAgICAgICAgdGhpcy4kZWwuZGNwTWVudShcImRlc3Ryb3lcIik7XG4gICAgICB9XG4gICAgICByZXR1cm4gQmFja2JvbmUuVmlldy5wcm90b3R5cGUucmVtb3ZlLmNhbGwodGhpcyk7XG4gICAgfSxcblxuICAgIF9maW5kV2lkZ2V0TmFtZTogZnVuY3Rpb24gdk1lbnVfZmluZFdpZGdldE5hbWUoJGVsZW1lbnQpIHtcbiAgICAgIHJldHVybiBfLmZpbmQoXy5rZXlzKCRlbGVtZW50LmRhdGEoKSksIGZ1bmN0aW9uKGN1cnJlbnRLZXkpIHtcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRLZXkuaW5kZXhPZihcImRjcERjcFwiKSAhPT0gLTE7XG4gICAgICB9KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmVjb21wdXRlIHJlc3BvbnNpdmUgaW4gY2FzZSBvZiBzY3JvbGxiYXIgY2FuIGFwcGVhclxuICAgICAqL1xuICAgIHJlZnJlc2g6IGZ1bmN0aW9uIHZNZW51X3JlZnJlc2goKSB7XG4gICAgICBpZiAodGhpcy4kZWwuZGNwTWVudSAmJiB0aGlzLl9maW5kV2lkZ2V0TmFtZSh0aGlzLiRlbCkpIHtcbiAgICAgICAgdGhpcy4kZWwuZGNwTWVudShcInVwZGF0ZVJlc3BvbnNpdmVNZW51XCIpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///b9330987a639d11ea48d\n");

/***/ }),

/***/ "bcb63a5837345ee29aa0":
/*!*********************************************************!*\
  !*** ./node_modules/little-loader/lib/little-loader.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/**\n * Script loading is difficult thanks to IE. We need callbacks to fire\n * immediately following the script's execution, with no other scripts\n * running in between. If other scripts on the page are able to run\n * between our script and its callback, bad things can happen, such as\n * `jQuery.noConflict` not being called in time, resulting in plugins\n * latching onto our version of jQuery, etc.\n *\n * For IE<10 we use a relatively well-documented \"preloading\" strategy,\n * which ensures that the script is ready to execute *before* appending\n * it to the DOM. That way when it is finally appended, it is\n * executed immediately.\n *\n * References:\n * - http://www.html5rocks.com/en/tutorials/speed/script-loading/\n * - http://blog.getify.com/ie11-please-bring-real-script-preloading-back/\n * - https://github.com/jrburke/requirejs/issues/526\n * - https://connect.microsoft.com/IE/feedback/details/729164/\n *           ie10-dynamic-script-element-fires-loaded-readystate-prematurely\n */\n(function () {\n\n  // Global state.\n  var pendingScripts = {};\n  var scriptCounter = 0;\n\n  /**\n   * Insert script into the DOM\n   *\n   * @param {Object} script Script DOM object\n   * @returns {void}\n   */\n  var _addScript = function (script) {\n    // Get the first script element, we're just going to use it\n    // as a reference for where to insert ours. Do NOT try to do\n    // this just once at the top and then re-use the same script\n    // as a reference later. Some weird loaders *remove* script\n    // elements after the browser has executed their contents,\n    // so the same reference might not have a parentNode later.\n    var firstScript = document.getElementsByTagName(\"script\")[0];\n\n    // Append the script to the DOM, triggering execution.\n    firstScript.parentNode.insertBefore(script, firstScript);\n  };\n\n  /**\n   * Load Script.\n   *\n   * @param {String}            src       URI of script\n   * @param {Function|Object}   callback  (Optional) Called on script load completion,\n   *                                      or options object\n   * @param {Object}            context   (Optional) Callback context (`this`)\n   * @returns {void}\n   */\n  var _lload = function (src, callback, context) {\n    /*eslint max-statements: [2, 32]*/\n    var setup;\n\n    if (callback && typeof callback !== \"function\") {\n      context = callback.context || context;\n      setup = callback.setup;\n      callback = callback.callback;\n    }\n\n    var script = document.createElement(\"script\");\n    var done = false;\n    var err;\n    var _cleanup; // _must_ be set below.\n\n    /**\n     * Final handler for error or completion.\n     *\n     * **Note**: Will only be called _once_.\n     *\n     * @returns {void}\n     */\n    var _finish = function () {\n      // Only call once.\n      if (done) { return; }\n      done = true;\n\n      // Internal cleanup.\n      _cleanup();\n\n      // Callback.\n      if (callback) {\n        callback.call(context, err);\n      }\n    };\n\n    /**\n     * Error handler\n     *\n     * @returns {void}\n     */\n    var _error = function () {\n      err = new Error(src || \"EMPTY\");\n      _finish();\n    };\n\n    if (script.readyState && !(\"async\" in script)) {\n      /*eslint-disable consistent-return*/\n\n      // This section is only for IE<10. Some other old browsers may\n      // satisfy the above condition and enter this branch, but we don't\n      // support those browsers anyway.\n\n      var id = scriptCounter++;\n      var isReady = { loaded: true, complete: true };\n      var inserted = false;\n\n      // Clear out listeners, state.\n      _cleanup = function () {\n        script.onreadystatechange = script.onerror = null;\n        pendingScripts[id] = void 0;\n      };\n\n      // Attach the handler before setting src, otherwise we might\n      // miss events (consider that IE could fire them synchronously\n      // upon setting src, for example).\n      script.onreadystatechange = function () {\n        var firstState = script.readyState;\n\n        // Protect against any errors from state change randomness.\n        if (err) { return; }\n\n        if (!inserted && isReady[firstState]) {\n          inserted = true;\n\n          // Append to DOM.\n          _addScript(script);\n        }\n\n        // --------------------------------------------------------------------\n        //                       GLORIOUS IE8 HACKAGE!!!\n        // --------------------------------------------------------------------\n        //\n        // Oh IE8, how you disappoint. IE8 won't call `script.onerror`, so\n        // we have to resort to drastic measures.\n        // See, e.g. http://www.quirksmode.org/dom/events/error.html#t02\n        //\n        // As with all things development, there's a Stack Overflow comment that\n        // asserts the following combinations of state changes in IE8 indicate a\n        // script load error. And crazily, it seems to work!\n        //\n        // http://stackoverflow.com/a/18840568/741892\n        //\n        // The `script.readyState` transitions we're interested are:\n        //\n        // * If state starts as `loaded`\n        // * Call `script.children`, which _should_ change state to `complete`\n        // * If state is now `loading`, then **we have a load error**\n        //\n        // For the reader's amusement, here is HeadJS's catalog of various\n        // `readyState` transitions in normal operation for IE:\n        // https://github.com/headjs/headjs/blob/master/src/2.0.0/load.js#L379-L419\n        if (firstState === \"loaded\") {\n          // The act of accessing the property should change the script's\n          // `readyState`.\n          //\n          // And, oh yeah, this hack is so hacky-ish we need the following\n          // eslint disable...\n          /*eslint-disable no-unused-expressions*/\n          script.children;\n          /*eslint-enable no-unused-expressions*/\n\n          if (script.readyState === \"loading\") {\n            // State transitions indicate we've hit the load error.\n            //\n            // **Note**: We are not intending to _return_ a value, just have\n            // a shorter short-circuit code path here.\n            return _error();\n          }\n        }\n\n        // It's possible for readyState to be \"complete\" immediately\n        // after we insert (and execute) the script in the branch\n        // above. So check readyState again here and react without\n        // waiting for another onreadystatechange.\n        if (script.readyState === \"complete\") {\n          _finish();\n        }\n      };\n\n      // Onerror handler _may_ work here.\n      script.onerror = _error;\n\n      // Since we're not appending the script to the DOM yet, the\n      // reference to our script element might get garbage collected\n      // when this function ends, without onreadystatechange ever being\n      // fired. This has been witnessed to happen. Adding it to\n      // `pendingScripts` ensures this can't happen.\n      pendingScripts[id] = script;\n\n      // call the setup callback to mutate the script tag\n      if (setup) {\n        setup.call(context, script);\n      }\n\n      // This triggers a request for the script, but its contents won't\n      // be executed until we append it to the DOM.\n      script.src = src;\n\n      // In some cases, the readyState is already \"loaded\" immediately\n      // after setting src. It's a lie! Don't append to the DOM until\n      // the onreadystatechange event says so.\n\n    } else {\n      // This section is for modern browsers, including IE10+.\n\n      // Clear out listeners.\n      _cleanup = function () {\n        script.onload = script.onerror = null;\n      };\n\n      script.onerror = _error;\n      script.onload = _finish;\n      script.async = true;\n      script.charset = \"utf-8\";\n\n      // call the setup callback to mutate the script tag\n      if (setup) {\n        setup.call(context, script);\n      }\n\n      script.src = src;\n\n      // Append to DOM.\n      _addScript(script);\n    }\n  };\n\n  // UMD wrapper.\n  /*global define:false*/\n  if (true) {\n    // CommonJS\n    module.exports = _lload;\n\n  } else {}\n}());\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///bcb63a5837345ee29aa0\n");

/***/ }),

/***/ "bcd31d01884fc294fd69":
/*!*******************************************!*\
  !*** ./node_modules/mustache/mustache.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n * mustache.js - Logic-less {{mustache}} templates with JavaScript\n * http://github.com/janl/mustache.js\n */\n\n/*global define: false Mustache: true*/\n\n(function defineMustache (global, factory) {\n  if ( true && exports && typeof exports.nodeName !== 'string') {\n    factory(exports); // CommonJS\n  } else if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD\n  } else {}\n}(this, function mustacheFactory (mustache) {\n\n  var objectToString = Object.prototype.toString;\n  var isArray = Array.isArray || function isArrayPolyfill (object) {\n    return objectToString.call(object) === '[object Array]';\n  };\n\n  function isFunction (object) {\n    return typeof object === 'function';\n  }\n\n  /**\n   * More correct typeof string handling array\n   * which normally returns typeof 'object'\n   */\n  function typeStr (obj) {\n    return isArray(obj) ? 'array' : typeof obj;\n  }\n\n  function escapeRegExp (string) {\n    return string.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, '\\\\$&');\n  }\n\n  /**\n   * Null safe way of checking whether or not an object,\n   * including its prototype, has a given property\n   */\n  function hasProperty (obj, propName) {\n    return obj != null && typeof obj === 'object' && (propName in obj);\n  }\n\n  /**\n   * Safe way of detecting whether or not the given thing is a primitive and\n   * whether it has the given property\n   */\n  function primitiveHasOwnProperty (primitive, propName) {  \n    return (\n      primitive != null\n      && typeof primitive !== 'object'\n      && primitive.hasOwnProperty\n      && primitive.hasOwnProperty(propName)\n    );\n  }\n\n  // Workaround for https://issues.apache.org/jira/browse/COUCHDB-577\n  // See https://github.com/janl/mustache.js/issues/189\n  var regExpTest = RegExp.prototype.test;\n  function testRegExp (re, string) {\n    return regExpTest.call(re, string);\n  }\n\n  var nonSpaceRe = /\\S/;\n  function isWhitespace (string) {\n    return !testRegExp(nonSpaceRe, string);\n  }\n\n  var entityMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '/': '&#x2F;',\n    '`': '&#x60;',\n    '=': '&#x3D;'\n  };\n\n  function escapeHtml (string) {\n    return String(string).replace(/[&<>\"'`=\\/]/g, function fromEntityMap (s) {\n      return entityMap[s];\n    });\n  }\n\n  var whiteRe = /\\s*/;\n  var spaceRe = /\\s+/;\n  var equalsRe = /\\s*=/;\n  var curlyRe = /\\s*\\}/;\n  var tagRe = /#|\\^|\\/|>|\\{|&|=|!/;\n\n  /**\n   * Breaks up the given `template` string into a tree of tokens. If the `tags`\n   * argument is given here it must be an array with two string values: the\n   * opening and closing tags used in the template (e.g. [ \"<%\", \"%>\" ]). Of\n   * course, the default is to use mustaches (i.e. mustache.tags).\n   *\n   * A token is an array with at least 4 elements. The first element is the\n   * mustache symbol that was used inside the tag, e.g. \"#\" or \"&\". If the tag\n   * did not contain a symbol (i.e. {{myValue}}) this element is \"name\". For\n   * all text that appears outside a symbol this element is \"text\".\n   *\n   * The second element of a token is its \"value\". For mustache tags this is\n   * whatever else was inside the tag besides the opening symbol. For text tokens\n   * this is the text itself.\n   *\n   * The third and fourth elements of the token are the start and end indices,\n   * respectively, of the token in the original template.\n   *\n   * Tokens that are the root node of a subtree contain two more elements: 1) an\n   * array of tokens in the subtree and 2) the index in the original template at\n   * which the closing tag for that section begins.\n   */\n  function parseTemplate (template, tags) {\n    if (!template)\n      return [];\n\n    var sections = [];     // Stack to hold section tokens\n    var tokens = [];       // Buffer to hold the tokens\n    var spaces = [];       // Indices of whitespace tokens on the current line\n    var hasTag = false;    // Is there a {{tag}} on the current line?\n    var nonSpace = false;  // Is there a non-space char on the current line?\n\n    // Strips all whitespace tokens array for the current line\n    // if there was a {{#tag}} on it and otherwise only space.\n    function stripSpace () {\n      if (hasTag && !nonSpace) {\n        while (spaces.length)\n          delete tokens[spaces.pop()];\n      } else {\n        spaces = [];\n      }\n\n      hasTag = false;\n      nonSpace = false;\n    }\n\n    var openingTagRe, closingTagRe, closingCurlyRe;\n    function compileTags (tagsToCompile) {\n      if (typeof tagsToCompile === 'string')\n        tagsToCompile = tagsToCompile.split(spaceRe, 2);\n\n      if (!isArray(tagsToCompile) || tagsToCompile.length !== 2)\n        throw new Error('Invalid tags: ' + tagsToCompile);\n\n      openingTagRe = new RegExp(escapeRegExp(tagsToCompile[0]) + '\\\\s*');\n      closingTagRe = new RegExp('\\\\s*' + escapeRegExp(tagsToCompile[1]));\n      closingCurlyRe = new RegExp('\\\\s*' + escapeRegExp('}' + tagsToCompile[1]));\n    }\n\n    compileTags(tags || mustache.tags);\n\n    var scanner = new Scanner(template);\n\n    var start, type, value, chr, token, openSection;\n    while (!scanner.eos()) {\n      start = scanner.pos;\n\n      // Match any text between tags.\n      value = scanner.scanUntil(openingTagRe);\n\n      if (value) {\n        for (var i = 0, valueLength = value.length; i < valueLength; ++i) {\n          chr = value.charAt(i);\n\n          if (isWhitespace(chr)) {\n            spaces.push(tokens.length);\n          } else {\n            nonSpace = true;\n          }\n\n          tokens.push([ 'text', chr, start, start + 1 ]);\n          start += 1;\n\n          // Check for whitespace on the current line.\n          if (chr === '\\n')\n            stripSpace();\n        }\n      }\n\n      // Match the opening tag.\n      if (!scanner.scan(openingTagRe))\n        break;\n\n      hasTag = true;\n\n      // Get the tag type.\n      type = scanner.scan(tagRe) || 'name';\n      scanner.scan(whiteRe);\n\n      // Get the tag value.\n      if (type === '=') {\n        value = scanner.scanUntil(equalsRe);\n        scanner.scan(equalsRe);\n        scanner.scanUntil(closingTagRe);\n      } else if (type === '{') {\n        value = scanner.scanUntil(closingCurlyRe);\n        scanner.scan(curlyRe);\n        scanner.scanUntil(closingTagRe);\n        type = '&';\n      } else {\n        value = scanner.scanUntil(closingTagRe);\n      }\n\n      // Match the closing tag.\n      if (!scanner.scan(closingTagRe))\n        throw new Error('Unclosed tag at ' + scanner.pos);\n\n      token = [ type, value, start, scanner.pos ];\n      tokens.push(token);\n\n      if (type === '#' || type === '^') {\n        sections.push(token);\n      } else if (type === '/') {\n        // Check section nesting.\n        openSection = sections.pop();\n\n        if (!openSection)\n          throw new Error('Unopened section \"' + value + '\" at ' + start);\n\n        if (openSection[1] !== value)\n          throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + start);\n      } else if (type === 'name' || type === '{' || type === '&') {\n        nonSpace = true;\n      } else if (type === '=') {\n        // Set the tags for the next time around.\n        compileTags(value);\n      }\n    }\n\n    // Make sure there are no open sections when we're done.\n    openSection = sections.pop();\n\n    if (openSection)\n      throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + scanner.pos);\n\n    return nestTokens(squashTokens(tokens));\n  }\n\n  /**\n   * Combines the values of consecutive text tokens in the given `tokens` array\n   * to a single token.\n   */\n  function squashTokens (tokens) {\n    var squashedTokens = [];\n\n    var token, lastToken;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      token = tokens[i];\n\n      if (token) {\n        if (token[0] === 'text' && lastToken && lastToken[0] === 'text') {\n          lastToken[1] += token[1];\n          lastToken[3] = token[3];\n        } else {\n          squashedTokens.push(token);\n          lastToken = token;\n        }\n      }\n    }\n\n    return squashedTokens;\n  }\n\n  /**\n   * Forms the given array of `tokens` into a nested tree structure where\n   * tokens that represent a section have two additional items: 1) an array of\n   * all tokens that appear in that section and 2) the index in the original\n   * template that represents the end of that section.\n   */\n  function nestTokens (tokens) {\n    var nestedTokens = [];\n    var collector = nestedTokens;\n    var sections = [];\n\n    var token, section;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      token = tokens[i];\n\n      switch (token[0]) {\n        case '#':\n        case '^':\n          collector.push(token);\n          sections.push(token);\n          collector = token[4] = [];\n          break;\n        case '/':\n          section = sections.pop();\n          section[5] = token[2];\n          collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;\n          break;\n        default:\n          collector.push(token);\n      }\n    }\n\n    return nestedTokens;\n  }\n\n  /**\n   * A simple string scanner that is used by the template parser to find\n   * tokens in template strings.\n   */\n  function Scanner (string) {\n    this.string = string;\n    this.tail = string;\n    this.pos = 0;\n  }\n\n  /**\n   * Returns `true` if the tail is empty (end of string).\n   */\n  Scanner.prototype.eos = function eos () {\n    return this.tail === '';\n  };\n\n  /**\n   * Tries to match the given regular expression at the current position.\n   * Returns the matched text if it can match, the empty string otherwise.\n   */\n  Scanner.prototype.scan = function scan (re) {\n    var match = this.tail.match(re);\n\n    if (!match || match.index !== 0)\n      return '';\n\n    var string = match[0];\n\n    this.tail = this.tail.substring(string.length);\n    this.pos += string.length;\n\n    return string;\n  };\n\n  /**\n   * Skips all text until the given regular expression can be matched. Returns\n   * the skipped string, which is the entire tail if no match can be made.\n   */\n  Scanner.prototype.scanUntil = function scanUntil (re) {\n    var index = this.tail.search(re), match;\n\n    switch (index) {\n      case -1:\n        match = this.tail;\n        this.tail = '';\n        break;\n      case 0:\n        match = '';\n        break;\n      default:\n        match = this.tail.substring(0, index);\n        this.tail = this.tail.substring(index);\n    }\n\n    this.pos += match.length;\n\n    return match;\n  };\n\n  /**\n   * Represents a rendering context by wrapping a view object and\n   * maintaining a reference to the parent context.\n   */\n  function Context (view, parentContext) {\n    this.view = view;\n    this.cache = { '.': this.view };\n    this.parent = parentContext;\n  }\n\n  /**\n   * Creates a new context using the given view with this context\n   * as the parent.\n   */\n  Context.prototype.push = function push (view) {\n    return new Context(view, this);\n  };\n\n  /**\n   * Returns the value of the given name in this context, traversing\n   * up the context hierarchy if the value is absent in this context's view.\n   */\n  Context.prototype.lookup = function lookup (name) {\n    var cache = this.cache;\n\n    var value;\n    if (cache.hasOwnProperty(name)) {\n      value = cache[name];\n    } else {\n      var context = this, intermediateValue, names, index, lookupHit = false;\n\n      while (context) {\n        if (name.indexOf('.') > 0) {\n          intermediateValue = context.view;\n          names = name.split('.');\n          index = 0;\n\n          /**\n           * Using the dot notion path in `name`, we descend through the\n           * nested objects.\n           *\n           * To be certain that the lookup has been successful, we have to\n           * check if the last object in the path actually has the property\n           * we are looking for. We store the result in `lookupHit`.\n           *\n           * This is specially necessary for when the value has been set to\n           * `undefined` and we want to avoid looking up parent contexts.\n           *\n           * In the case where dot notation is used, we consider the lookup\n           * to be successful even if the last \"object\" in the path is\n           * not actually an object but a primitive (e.g., a string, or an\n           * integer), because it is sometimes useful to access a property\n           * of an autoboxed primitive, such as the length of a string.\n           **/\n          while (intermediateValue != null && index < names.length) {\n            if (index === names.length - 1)\n              lookupHit = (\n                hasProperty(intermediateValue, names[index]) \n                || primitiveHasOwnProperty(intermediateValue, names[index])\n              );\n\n            intermediateValue = intermediateValue[names[index++]];\n          }\n        } else {\n          intermediateValue = context.view[name];\n\n          /**\n           * Only checking against `hasProperty`, which always returns `false` if\n           * `context.view` is not an object. Deliberately omitting the check\n           * against `primitiveHasOwnProperty` if dot notation is not used.\n           *\n           * Consider this example:\n           * ```\n           * Mustache.render(\"The length of a football field is {{#length}}{{length}}{{/length}}.\", {length: \"100 yards\"})\n           * ```\n           *\n           * If we were to check also against `primitiveHasOwnProperty`, as we do\n           * in the dot notation case, then render call would return:\n           *\n           * \"The length of a football field is 9.\"\n           *\n           * rather than the expected:\n           *\n           * \"The length of a football field is 100 yards.\"\n           **/\n          lookupHit = hasProperty(context.view, name);\n        }\n\n        if (lookupHit) {\n          value = intermediateValue;\n          break;\n        }\n\n        context = context.parent;\n      }\n\n      cache[name] = value;\n    }\n\n    if (isFunction(value))\n      value = value.call(this.view);\n\n    return value;\n  };\n\n  /**\n   * A Writer knows how to take a stream of tokens and render them to a\n   * string, given a context. It also maintains a cache of templates to\n   * avoid the need to parse the same template twice.\n   */\n  function Writer () {\n    this.cache = {};\n  }\n\n  /**\n   * Clears all cached templates in this writer.\n   */\n  Writer.prototype.clearCache = function clearCache () {\n    this.cache = {};\n  };\n\n  /**\n   * Parses and caches the given `template` according to the given `tags` or\n   * `mustache.tags` if `tags` is omitted,  and returns the array of tokens\n   * that is generated from the parse.\n   */\n  Writer.prototype.parse = function parse (template, tags) {\n    var cache = this.cache;\n    var cacheKey = template + ':' + (tags || mustache.tags).join(':');\n    var tokens = cache[cacheKey];\n\n    if (tokens == null)\n      tokens = cache[cacheKey] = parseTemplate(template, tags);\n\n    return tokens;\n  };\n\n  /**\n   * High-level method that is used to render the given `template` with\n   * the given `view`.\n   *\n   * The optional `partials` argument may be an object that contains the\n   * names and templates of partials that are used in the template. It may\n   * also be a function that is used to load partial templates on the fly\n   * that takes a single argument: the name of the partial.\n   *\n   * If the optional `tags` argument is given here it must be an array with two\n   * string values: the opening and closing tags used in the template (e.g.\n   * [ \"<%\", \"%>\" ]). The default is to mustache.tags.\n   */\n  Writer.prototype.render = function render (template, view, partials, tags) {\n    var tokens = this.parse(template, tags);\n    var context = (view instanceof Context) ? view : new Context(view);\n    return this.renderTokens(tokens, context, partials, template, tags);\n  };\n\n  /**\n   * Low-level method that renders the given array of `tokens` using\n   * the given `context` and `partials`.\n   *\n   * Note: The `originalTemplate` is only ever used to extract the portion\n   * of the original template that was contained in a higher-order section.\n   * If the template doesn't use higher-order sections, this argument may\n   * be omitted.\n   */\n  Writer.prototype.renderTokens = function renderTokens (tokens, context, partials, originalTemplate, tags) {\n    var buffer = '';\n\n    var token, symbol, value;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      value = undefined;\n      token = tokens[i];\n      symbol = token[0];\n\n      if (symbol === '#') value = this.renderSection(token, context, partials, originalTemplate);\n      else if (symbol === '^') value = this.renderInverted(token, context, partials, originalTemplate);\n      else if (symbol === '>') value = this.renderPartial(token, context, partials, tags);\n      else if (symbol === '&') value = this.unescapedValue(token, context);\n      else if (symbol === 'name') value = this.escapedValue(token, context);\n      else if (symbol === 'text') value = this.rawValue(token);\n\n      if (value !== undefined)\n        buffer += value;\n    }\n\n    return buffer;\n  };\n\n  Writer.prototype.renderSection = function renderSection (token, context, partials, originalTemplate) {\n    var self = this;\n    var buffer = '';\n    var value = context.lookup(token[1]);\n\n    // This function is used to render an arbitrary template\n    // in the current context by higher-order sections.\n    function subRender (template) {\n      return self.render(template, context, partials);\n    }\n\n    if (!value) return;\n\n    if (isArray(value)) {\n      for (var j = 0, valueLength = value.length; j < valueLength; ++j) {\n        buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate);\n      }\n    } else if (typeof value === 'object' || typeof value === 'string' || typeof value === 'number') {\n      buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate);\n    } else if (isFunction(value)) {\n      if (typeof originalTemplate !== 'string')\n        throw new Error('Cannot use higher-order sections without the original template');\n\n      // Extract the portion of the original template that the section contains.\n      value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender);\n\n      if (value != null)\n        buffer += value;\n    } else {\n      buffer += this.renderTokens(token[4], context, partials, originalTemplate);\n    }\n    return buffer;\n  };\n\n  Writer.prototype.renderInverted = function renderInverted (token, context, partials, originalTemplate) {\n    var value = context.lookup(token[1]);\n\n    // Use JavaScript's definition of falsy. Include empty arrays.\n    // See https://github.com/janl/mustache.js/issues/186\n    if (!value || (isArray(value) && value.length === 0))\n      return this.renderTokens(token[4], context, partials, originalTemplate);\n  };\n\n  Writer.prototype.renderPartial = function renderPartial (token, context, partials, tags) {\n    if (!partials) return;\n\n    var value = isFunction(partials) ? partials(token[1]) : partials[token[1]];\n    if (value != null)\n      return this.renderTokens(this.parse(value, tags), context, partials, value);\n  };\n\n  Writer.prototype.unescapedValue = function unescapedValue (token, context) {\n    var value = context.lookup(token[1]);\n    if (value != null)\n      return value;\n  };\n\n  Writer.prototype.escapedValue = function escapedValue (token, context) {\n    var value = context.lookup(token[1]);\n    if (value != null)\n      return mustache.escape(value);\n  };\n\n  Writer.prototype.rawValue = function rawValue (token) {\n    return token[1];\n  };\n\n  mustache.name = 'mustache.js';\n  mustache.version = '3.0.1';\n  mustache.tags = [ '{{', '}}' ];\n\n  // All high-level mustache.* functions use this writer.\n  var defaultWriter = new Writer();\n\n  /**\n   * Clears all cached templates in the default writer.\n   */\n  mustache.clearCache = function clearCache () {\n    return defaultWriter.clearCache();\n  };\n\n  /**\n   * Parses and caches the given template in the default writer and returns the\n   * array of tokens it contains. Doing this ahead of time avoids the need to\n   * parse templates on the fly as they are rendered.\n   */\n  mustache.parse = function parse (template, tags) {\n    return defaultWriter.parse(template, tags);\n  };\n\n  /**\n   * Renders the `template` with the given `view` and `partials` using the\n   * default writer. If the optional `tags` argument is given here it must be an\n   * array with two string values: the opening and closing tags used in the\n   * template (e.g. [ \"<%\", \"%>\" ]). The default is to mustache.tags.\n   */\n  mustache.render = function render (template, view, partials, tags) {\n    if (typeof template !== 'string') {\n      throw new TypeError('Invalid template! Template should be a \"string\" ' +\n                          'but \"' + typeStr(template) + '\" was given as the first ' +\n                          'argument for mustache#render(template, view, partials)');\n    }\n\n    return defaultWriter.render(template, view, partials, tags);\n  };\n\n  // This is here for backwards compatibility with 0.4.x.,\n  /*eslint-disable */ // eslint wants camel cased function name\n  mustache.to_html = function to_html (template, view, partials, send) {\n    /*eslint-enable*/\n\n    var result = mustache.render(template, view, partials);\n\n    if (isFunction(send)) {\n      send(result);\n    } else {\n      return result;\n    }\n  };\n\n  // Export the escaping function so that the user may override it.\n  // See https://github.com/janl/mustache.js/issues/244\n  mustache.escape = escapeHtml;\n\n  // Export these mainly for testing, but also for advanced usage.\n  mustache.Scanner = Scanner;\n  mustache.Context = Context;\n  mustache.Writer = Writer;\n\n  return mustache;\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///bcd31d01884fc294fd69\n");

/***/ }),

/***/ "bd2b448fa3670797b988":
/*!**************************************************************************!*\
  !*** ./src/vendor/Anakeen/DOCUMENT/IHM/widgets/attributes/wAttribute.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*global define*/\n\n(function umdRequire(root, factory) {\n  \"use strict\";\n\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n      __webpack_require__(/*! jquery */ \"127c8cf59f228bb01a21\"),\n      __webpack_require__(/*! underscore */ \"8e08e542008e4aef1f58\"),\n      __webpack_require__(/*! mustache */ \"bcd31d01884fc294fd69\"),\n      __webpack_require__(/*! dcpDocument/widgets/widget */ \"a903b12ace80b5b4ecce\"),\n      __webpack_require__(/*! tooltip */ \"b625c3d07db8baf045ff\")\n    ], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(window, function wAttributeWidget($, _, Mustache) {\n  \"use strict\";\n\n  $.widget(\"dcp.dcpAttribute\", {\n    options: {\n      eventPrefix: \"dcpAttribute\",\n      id: null,\n      type: \"abstract\",\n      mode: \"read\",\n      index: -1,\n      labels: {\n        deleteAttributeNames: \"\",\n        deleteLabel: \"\",\n        closeErrorMessage: \"Close message\"\n      },\n      template: null,\n      deleteButton: false,\n      renderOptions: {\n        displayDeleteButton: true\n      },\n      locale: \"fr_FR\"\n    },\n\n    /**\n     * Redraw element with updated values\n     */\n    redraw: function wAttributeRedraw() {\n      this.element.find(\"[aria-describedby*='tooltip']\").tooltip(\"hide\");\n      this.element.empty();\n      this._initDom();\n      this.element.off(this.eventNamespace);\n      this._initEvent();\n      return this;\n    },\n\n    /**\n     * Verify if a common link option is set\n     *\n     * @returns boolean\n     */\n    hasLink: function hasLink() {\n      return Boolean(\n        this.options.renderOptions &&\n          this.options.renderOptions.htmlLink &&\n          this.options.renderOptions.htmlLink.url\n      );\n    },\n    /**\n     * Return the url of link\n     * @returns string\n     */\n    getLink: function wAttributeGetLink() {\n      if (this.options.renderOptions && this.options.renderOptions.htmlLink) {\n        return this.options.renderOptions.htmlLink;\n      }\n      return null;\n    },\n\n    /**\n     * Flash the element to attract user attention\n     *\n     * @param currentElement\n     */\n    flashElement: function wAttributeFlashElement(currentElement) {\n      if (!currentElement) {\n        currentElement = this.element;\n      }\n      currentElement.addClass(\"dcpAttribute__value--flash\");\n      _.delay(function wAttributeFlashDelay() {\n        currentElement\n          .removeClass(\"dcpAttribute__value--flash\")\n          .addClass(\"dcpAttribute__value--endflash\");\n        _.delay(function wAttributeFlashSecondDelay() {\n          currentElement.removeClass(\"dcpAttribute__value--endflash\");\n        }, 600);\n      }, 10);\n    },\n\n    /**\n     * Display tooltip an error message\n     *\n     * @param message string or array of [{message:, index:}, ...]\n     */\n    setError: function wAttributeSetError(message) {\n      var kt;\n      var scope = this;\n      if (message) {\n        var messages;\n        if (!_.isArray(message)) {\n          messages = [{ message: message, index: -1 }];\n        } else {\n          messages = _.toArray(message);\n        }\n        _.each(messages, function wAttributeSetErrorMsg(indexMessage) {\n          if (\n            indexMessage.index === -1 ||\n            scope.element.closest(\"tr\").data(\"line\") === indexMessage.index\n          ) {\n            scope.element.addClass(\"has-error\");\n            // need to use sub element because tooltip add a div after element\n            scope.element\n              .find(\".input-group\")\n              .tooltip({\n                placement: \"bottom\",\n                html: true,\n                animation: false,\n                container: scope.element.parent().get(0), //\".dcpDocument\",// no use scope.element because when item is in the bottom of the page a scrollbar can appear\n                title: function wAttributeSetErrorTitle() {\n                  var rawMessage = $(\"<div/>\")\n                    .text(indexMessage.message)\n                    .html();\n                  return (\n                    \"<div>\" +\n                    '<span title=\"' +\n                    scope.options.labels.closeErrorMessage +\n                    '\" class=\"btn fa fa-times button-close-error\">&nbsp;</span>' +\n                    rawMessage +\n                    \"</div>\"\n                  );\n                },\n                trigger: \"manual\"\n              })\n              .one(\"shown.bs.tooltip\", function wErrorTooltip() {\n                var tipElement = $(this).data(\"bs.tooltip\").tip;\n                if (tipElement) {\n                  $(tipElement).addClass(\"has-error\");\n                }\n              });\n            scope.element.data(\"hasErrorTooltip\", true);\n            scope.element.find(\".input-group\").tooltip(\"show\");\n          }\n        });\n      } else {\n        this.element.removeClass(\"has-error\");\n        if (this.element.data(\"hasErrorTooltip\")) {\n          // No use destroy because the destruction is deferred\n          kt = this.element.find(\".input-group\");\n          kt.tooltip(\"hide\").data(\"bs.tooltip\", null);\n          this.element.data(\"hasErrorTooltip\", false);\n        }\n      }\n    },\n\n    /**\n     * Get the type of the widget\n     *\n     * @returns {string}\n     */\n    getType: function getType() {\n      return this.options.type;\n    },\n\n    /**\n     * Get the mode of the widget\n     *\n     * @returns {string} Read|Write\n     */\n    getMode: function getMode() {\n      if (\n        this.options.mode !== \"read\" &&\n        this.options.mode !== \"write\" &&\n        this.options.mode !== \"hidden\"\n      ) {\n        throw new Error(\n          \"Attribute \" +\n            this.option.id +\n            \" have unknown mode \" +\n            this.options.mode\n        );\n      }\n      return this.options.mode;\n    },\n\n    /**\n     * Return the value stored in the wiget\n     *\n     * @returns {*|number|.options.attributeValue}\n     */\n    getValue: function wAttributegetValue() {\n      return this.options.attributeValue;\n    },\n\n    /**\n     * Identify the input where is the raw value\n     * @returns {*}\n     */\n    getContentElements: function wAttributeGetContentElements() {\n      if (this.getMode() === \"read\") {\n        return this.element.find(\n          '.dcpAttribute__value[data-attrid=\"' +\n            this.options.id +\n            '\"] .dcpAttribute__content__value'\n        );\n      } else {\n        return this.element.find(\n          '.dcpAttribute__value[name=\"' + this.options.id + '\"]'\n        );\n      }\n    },\n\n    /**\n     * Return the value of something\n     *\n     *\n     * @returns {*}\n     */\n    getWidgetValue: function getWidgetValue() {\n      return this.getContentElements().val();\n    },\n    /**\n     * Set options.attributeValue element and trigger the view\n     *\n     * @param value\n     * @param event\n     */\n    setValue: function wAttributeSetValue(value, event) {\n      this._checkValue(value);\n\n      var isEqual = false;\n\n      if (this._isMultiple()) {\n        isEqual =\n          _.toArray(this.options.attributeValue).length === value.length;\n        if (isEqual) {\n          isEqual = _.isEqual(this.options.attributeValue, value);\n        }\n      } else {\n        isEqual = _.isEqual(this.options.attributeValue.value, value.value);\n      }\n      if (!isEqual) {\n        this.options.attributeValue = value;\n\n        this._trigger(\"change\", event, {\n          id: this.options.id,\n          value: this.getValue(),\n          index: this._getIndex()\n        });\n      }\n    },\n\n    /**\n     * Show the input tooltip\n     * @param  ktTarget DOMElement\n     *\n     * @return dcp.dcpAttribute\n     */\n    hideInputTooltip: function wAttributeHideInputTooltip(ktTarget) {\n      var $ktTarger = $(ktTarget).closest(\".input-group\");\n      if ($ktTarger.data(\"hasTooltip\")) {\n        $ktTarger.tooltip(\"hide\");\n      }\n      return this;\n    },\n\n    /**\n     * Show the input tooltip\n     * @param  ktTarget DOMElement\n     *\n     * @return dcp.dcpAttribute\n     */\n    showInputTooltip: function showInputTooltip(ktTarget) {\n      var scope = this;\n\n      if (scope.options.renderOptions.inputHtmlTooltip) {\n        var $ktTarger = $(ktTarget).closest(\".input-group\");\n        var kt = $ktTarger.data(\"hasTooltip\");\n\n        if (!kt) {\n          $ktTarger\n            .tooltip({\n              trigger: \"manual\",\n              html: true,\n              title: scope.options.renderOptions.inputHtmlTooltip,\n              placement: \"bottom\"\n            })\n            .on(\"shown.bs.tooltip\", function wErrorTooltip() {\n              var tipElement = $(this).data(\"bs.tooltip\").tip;\n              if (tipElement) {\n                $(tipElement).addClass(\"dcpAttribute__editlabel\");\n              }\n            });\n          $ktTarger.data(\"hasTooltip\", true);\n        }\n        $ktTarger.tooltip(\"show\");\n      }\n      return this;\n    },\n\n    /**\n     * Close the attribute if open\n     *\n     * @returns {dcp.dcpAttribute}\n     */\n    close: function wAttribute_close() {\n      return this;\n    },\n\n    /**\n     * Create the widget\n     * @private\n     */\n    _create: function _create() {\n      var scope = this;\n      //If no id is provided one id generated\n      if (this.options.id === null) {\n        this.options.id = _.uniqueId(\"widget_\" + this.getType());\n      }\n\n      if (\n        _.isUndefined(this.options.attributeValue) ||\n        this.options.attributeValue === null\n      ) {\n        if (this._isMultiple()) {\n          this.options.attributeValue = [];\n        } else {\n          this.options.attributeValue = {\n            value: null,\n            displayValue: \"\"\n          };\n        }\n      }\n      if (this.options.helpOutputs) {\n        this.options.hasAutocomplete = true;\n      }\n\n      if (this.options.renderOptions && this.options.renderOptions.buttons) {\n        // Add index for template to identify buttons\n        this.options.renderOptions.buttons = _.map(\n          this.options.renderOptions.buttons,\n          function wAttributeOptionMap(val, index) {\n            val.renderHtmlContent = Mustache.render(\n              val.htmlContent || \"\",\n              scope.options.attributeValue\n            );\n            val.index = index;\n            return val;\n          }\n        );\n      }\n      this.options.emptyValue = _.bind(this._getEmptyValue, this);\n      this.options.hadButtons = this._hasButtons();\n      if (this.options.renderOptions && this.options.renderOptions.labels) {\n        this.options.labels = _.extend(\n          this.options.labels,\n          this.options.renderOptions.labels\n        );\n      }\n\n      if (\n        this.options.renderOptions &&\n        this.options.renderOptions.displayDeleteButton === false\n      ) {\n        this.options.deleteButton = false;\n      }\n      if (this.getMode() !== \"hidden\") {\n        this._initDom();\n        this._initEvent();\n      }\n\n      this._triggerReady();\n    },\n\n    /**\n     * Destroy the widget\n     *\n     * Suppress widget defined events and delete added dom\n     *\n     * @private\n     */\n    _destroy: function _destroy() {\n      this.element.removeClass(\"dcpAttribute__content\");\n      this.element.removeAttr(\"data-type\");\n      this.element.removeAttr(\"data-attrid\");\n      this.element.empty();\n      this._trigger(\"destroy\");\n      this._super();\n    },\n\n    /**\n     * Init the DOM of the template\n     *\n     * @protected\n     */\n    _initDom: function wAttributeInitDom() {\n      var htmlLink = this.getLink();\n      var scopeWidget = this;\n      this._initMainElementClass();\n      if (htmlLink) {\n        // Add render Url and title on links\n        var originalEscape = Mustache.escape;\n\n        if (this._isMultiple()) {\n          this.options.attributeValues = _.map(\n            this.options.attributeValue,\n            function wAttributeLinkMultiple(val, index) {\n              var urlIndex = index;\n              Mustache.escape = encodeURIComponent;\n              scopeWidget._completeRevisionData(val);\n              if (scopeWidget.options.index >= 0) {\n                // Use index of row prior to index of multiple value\n                urlIndex = scopeWidget.options.index;\n              }\n\n              if (htmlLink.urls && htmlLink.urls[urlIndex]) {\n                val.renderUrl = Mustache.render(htmlLink.urls[urlIndex], val);\n              } else {\n                val.renderUrl = Mustache.render(htmlLink.url || \"\", val);\n              }\n              Mustache.escape = originalEscape;\n              val.renderTitle = Mustache.render(htmlLink.title || \"\", val);\n              val.index = index;\n              return val;\n            }\n          );\n        } else {\n          Mustache.escape = encodeURIComponent;\n          this._completeRevisionData(this.options.attributeValue);\n          if (htmlLink.urls && htmlLink.urls[this.options.index]) {\n            this.options.renderOptions.htmlLink.renderUrl = Mustache.render(\n              htmlLink.urls[this.options.index],\n              this.options.attributeValue\n            );\n          } else {\n            this.options.renderOptions.htmlLink.renderUrl = Mustache.render(\n              htmlLink.url || \"\",\n              this.options.attributeValue\n            );\n          }\n          Mustache.escape = originalEscape;\n          this.options.renderOptions.htmlLink.renderTitle = Mustache.render(\n            htmlLink.title || \"\",\n            this.options.attributeValue\n          );\n        }\n      }\n      this.element.append(\n        Mustache.render(\n          this._getTemplate(this.options.mode) || \"\",\n          this.options\n        )\n      );\n\n      if (\n        this.element.find(\".dcpAttribute__content__buttons button\").length === 0\n      ) {\n        this.element.find(\".dcpAttribute__content__buttons\").hide();\n        this.element\n          .find(\".dcpAttribute__value\")\n          .addClass(\"dcpAttribute__content__nobutton\");\n      }\n    },\n\n    /**\n     * Add revision extra data to render link\n     * @param data\n     * @private\n     */\n    _completeRevisionData: function wAttribute_completeRevisionData(data) {\n      var isRevision =\n        data.revision !== -1 &&\n        data.revision !== null &&\n        !_.isUndefined(data.revision);\n\n      if (isRevision) {\n        data.isRevision = isRevision;\n        if (data.revision.state) {\n          data.revisionTarget = \"state:\" + data.revision.state;\n        } else {\n          data.revisionTarget = data.revision;\n        }\n      }\n    },\n\n    /**\n     * Init the DOM of the template\n     *\n     * @public\n     */\n    _initMainElementClass: function wAttributeInitMainElementClass() {\n      this.element.addClass(\"dcpAttribute__content\");\n      this.element.attr(\"data-type\", this.getType());\n      this.element.attr(\"data-attrid\", this.options.id);\n    },\n    /**\n     * Init the events\n     *\n     * @protected\n     */\n    _initEvent: function _initEvent() {\n      if (this.getMode() === \"write\") {\n        this._initDeleteEvent();\n        this._initButtonsEvent();\n        this._initFocusEvent();\n        this._initMoveEvent();\n      }\n      if (this.getMode() === \"read\") {\n        this._initButtonsEvent();\n        this._initActionClickEvent();\n        this._initLinkEvent();\n      }\n      this._initErrorEvent();\n      return this;\n    },\n\n    /**\n     * Init the focus event for tooltips (only for write attr)\n     *\n     * @protected\n     */\n    _initFocusEvent: function wAttributeInitFocusEvent() {\n      if (\n        this.options.renderOptions &&\n        this.options.renderOptions.inputHtmlTooltip\n      ) {\n        var scope = this;\n\n        var inputTargetFilter = \".dcpAttribute__value\";\n        this._getFocusInput().on(\n          \"focus\" + this.eventNamespace,\n          function wAttributeFocus(event) {\n            var ktTarget = $(event.currentTarget).closest(inputTargetFilter);\n            scope.showInputTooltip(ktTarget);\n          }\n        );\n        this._getFocusInput().on(\n          \"blur.\" + this.eventNamespace,\n          function wAttributeBlur(event) {\n            var ktTarget = $(event.currentTarget).closest(inputTargetFilter);\n            scope.hideInputTooltip(ktTarget);\n          }\n        );\n      }\n      this._getFocusInput().on(\n        \"focus\" + this.eventNamespace,\n        function wAttributeFocus(event) {\n          var $content = $(event.currentTarget).closest(\n            \".dcpAttribute__content\"\n          );\n          $content.addClass(\"dcpAttribute--focus\");\n        }\n      );\n      this._getFocusInput().on(\n        \"blur\" + this.eventNamespace,\n        function wAttributeFocus(event) {\n          var $content = $(event.currentTarget).closest(\n            \".dcpAttribute__content\"\n          );\n          $content.removeClass(\"dcpAttribute--focus\");\n        }\n      );\n\n      return this;\n    },\n    /**\n     * Reindex widget when a move is performed in an array\n     *\n     * @protected\n     */\n    _initMoveEvent: function wAttributeInitFocusEvent() {\n      var scope = this;\n      if (this.options.index !== -1) {\n        this.element.on(\n          \"postMoved\" + this.eventNamespace,\n          function wAttributeinitMoveEvent() {\n            var domLine = scope.element.closest(\"tr\").data(\"line\");\n            if (!_.isUndefined(domLine)) {\n              scope.options.index = domLine;\n            }\n          }\n        );\n      }\n      return this;\n    },\n    /**\n     * Init the events associated to buttons (only for write attributes)\n     *\n     * @protected\n     */\n    _initButtonsEvent: function _initButtonsEvent() {\n      var currentWidget = this;\n      this.element.on(\n        \"click\" + this.eventNamespace,\n        \".dcpAttribute__content__button--extra\",\n        function wAttributeButtonClick(event) {\n          var buttonsConfig = currentWidget.options.renderOptions.buttons;\n          var $button = $(this);\n          var buttonIndex = $button.data(\"index\");\n          var buttonConfig = buttonsConfig[buttonIndex];\n          var wFeature = \"\";\n\n          if (buttonConfig && buttonConfig.url) {\n            var originalEscape = Mustache.escape;\n            Mustache.escape = encodeURIComponent;\n            var url = Mustache.render(\n              buttonConfig.url || \"\",\n              currentWidget.options.attributeValue\n            );\n            Mustache.escape = originalEscape;\n\n            if (buttonConfig.target !== \"_dialog\") {\n              var $base = $(\"base\");\n              var isAbsUrl = new RegExp(\"^(?:[a-z]+:)?//\", \"i\");\n\n              if (\n                buttonConfig &&\n                (buttonConfig.windowWidth || buttonConfig.windowHeight)\n              ) {\n                if (buttonConfig.windowWidth) {\n                  wFeature +=\n                    \"width=\" + parseInt(buttonConfig.windowWidth, 10) + \",\";\n                }\n                if (buttonConfig.windowHeight) {\n                  wFeature +=\n                    \"height=\" + parseInt(buttonConfig.windowHeight, 10) + \",\";\n                }\n                wFeature += \"resizable=yes,scrollbars=yes\";\n              }\n              if (!isAbsUrl.test(url)) {\n                // For IE : Not honor base href in this case\n                url = $base.attr(\"href\") + url;\n              }\n              window.open(url, buttonConfig.target, wFeature);\n            } else {\n              var $bdw = $(\"<div/>\");\n              $(\"body\").append($bdw);\n              var renderTitle = Mustache.render(\n                buttonConfig.windowTitle || \"\",\n                currentWidget.options.attributeValue\n              );\n              var dw = $bdw\n                .dcpWindow({\n                  title: renderTitle,\n                  width: buttonConfig.windowWidth,\n                  height: buttonConfig.windowHeight,\n                  content: url,\n                  iframe: true\n                })\n                .data(\"dcpWindow\");\n              dw.kendoWindow().center();\n              dw.open();\n            }\n          }\n\n          currentWidget._trigger(\"click\", event, {\n            id: currentWidget.option.id,\n            value: currentWidget.options.attributeValue,\n            index: currentWidget._getIndex()\n          });\n        }\n      );\n      this.element.tooltip({\n        selector: \".dcpAttribute__content__buttons button\",\n        placement: \"top\",\n        trigger: \"hover\",\n        html: true,\n        title: function wAttributeGetButtonTitle() {\n          var title = $(this).data(\"title\");\n          var attrValue = currentWidget.getValue();\n          return Mustache.render(title || \"\", attrValue);\n        },\n        container: this.element.closest(\".row\").get(0) || this.element\n      });\n\n      return this;\n    },\n\n    /**\n     * Init events for delete button on error tooltip\n     *\n     * @protected\n     */\n    _initErrorEvent: function wAttributeInitErrotEvent() {\n      var scope = this;\n      // tooltip is created in same parent\n      this.element\n        .parent()\n        .on(\n          \"click\" + this.eventNamespace,\n          \".button-close-error\",\n          function closeError(/*event*/) {\n            if (scope.element.data(\"hasErrorTooltip\")) {\n              scope.element.find(\".input-group\").tooltip(\"hide\");\n              scope.element.data(\"hasErrorTooltip\", false);\n            }\n          }\n        );\n    },\n    /**\n     * Init events for delete button (only for write attributes)\n     *\n     * @protected\n     */\n    _initDeleteEvent: function wAttributeInitDeleteEvent() {\n      var currentWidget = this;\n\n      // Compose delete button title\n      var $deleteButton = this.element.find(\n        \".dcpAttribute__content__button--delete\"\n      );\n      var titleDelete;\n      if (this.options.labels.deleteLabel) {\n        titleDelete = this.options.labels.deleteLabel;\n      } else {\n        titleDelete = $deleteButton.attr(\"title\");\n        titleDelete += this.options.labels.deleteAttributeNames;\n      }\n      $deleteButton.attr(\"title\", titleDelete);\n\n      this.element.on(\n        \"click\" + this.eventNamespace,\n        \".dcpAttribute__content__button--delete\",\n        function destroyTable(event) {\n          currentWidget._trigger(\"delete\", event, {\n            index: currentWidget._getIndex(),\n            id: currentWidget.options.id\n          });\n          // main input is focuses after deletion\n          _.defer(function wAttributeDeferDelete() {\n            currentWidget.element.find(\"input\").focus();\n          });\n        }\n      );\n      return this;\n    },\n    /**\n     * Init event for #action/ links\n     *\n     * @protected\n     */\n    _initActionClickEvent: function wAttributeInitActionClickEvent() {\n      var scopeWidget = this;\n\n      this.element.on(\n        \"click.\" + this.eventNamespace,\n        'a[href^=\"#action/\"], a[data-action], button[data-action]',\n        function wAttributeActionClick(event) {\n          var $this = $(this),\n            action,\n            options,\n            eventOptions;\n\n          event.preventDefault();\n          if (event.stopPropagation) {\n            event.stopPropagation();\n          }\n\n          action = $this.data(\"action\") || $this.attr(\"href\");\n          options = action.substring(8).split(\":\");\n          eventOptions = {\n            target: event.target,\n            index: scopeWidget._getIndex(),\n            eventId: options.shift(),\n            options: options\n          };\n\n          scopeWidget._trigger(\"externalLinkSelected\", event, eventOptions);\n          return this;\n        }\n      );\n    },\n    /**\n     * Init event when a hyperlink is associated to the attribute\n     *\n     * @protected\n     */\n    _initLinkEvent: function wAttributeInitLinkEvent() {\n      var htmlLink = this.getLink();\n      var scopeWidget = this;\n\n      if (htmlLink) {\n        this.element.on(\n          \"click.\" + this.eventNamespace,\n          \".dcpAttribute__content__link\",\n          function wAttributeAttributeClick(event) {\n            var $this = $(this),\n              renderTitle,\n              index,\n              $dialogDiv,\n              dpcWindow,\n              href = $this.attr(\"href\");\n\n            if (href.substring(0, 8) !== \"#action/\" && !$this.data(\"action\")) {\n              if (htmlLink.target === \"_dialog\") {\n                event.preventDefault();\n\n                index = $(this).data(\"index\");\n                if (typeof index !== \"undefined\" && index !== null) {\n                  renderTitle = Mustache.render(\n                    htmlLink.windowTitle || \"\",\n                    scopeWidget.options.attributeValue[index]\n                  );\n                } else {\n                  renderTitle = Mustache.render(\n                    htmlLink.windowTitle || \"\",\n                    scopeWidget.options.attributeValue\n                  );\n                }\n\n                $dialogDiv = $(\"<div/>\");\n                $(\"body\").append($dialogDiv);\n\n                dpcWindow = $dialogDiv.dcpWindow({\n                  title: renderTitle,\n                  width: htmlLink.windowWidth,\n                  height: htmlLink.windowHeight,\n                  content: href,\n                  iframe: true\n                });\n\n                dpcWindow\n                  .data(\"dcpWindow\")\n                  .kendoWindow()\n                  .center();\n                dpcWindow.data(\"dcpWindow\").open();\n              }\n            }\n          }\n        );\n\n        this.element\n          .find(\".dcpAttribute__content__link[title]\")\n          .tooltip({\n            placement: \"top\",\n            container: \".dcpDocument\",\n            html: true,\n            trigger: \"hover\"\n          })\n          .each(function wAttributeInitLinkTooltip() {\n            if ($(this).data(\"bs.tooltip\").tip) {\n              $(this)\n                .data(\"bs.tooltip\")\n                .tip()\n                .addClass(\"dcpAttribute__linkvalue\");\n            }\n          });\n      }\n      return this;\n    },\n\n    /**\n     * Get input that can handle focus class\n     *\n     * For the display of the focus class (in helpers)\n     *\n     * @return jquery elements\n     *\n     * @protected\n     */\n    _getFocusInput: function wAttributeFocusInput() {\n      return this.element.find('input[name=\"' + this.options.id + '\"]');\n    },\n\n    /**\n     * Return the index of the attributes (for attribute in a widget array)\n     *\n     * @returns int\n     * @protected\n     */\n    _getIndex: function _getIndex() {\n      if (this.options.index !== -1) {\n        this.options.index = this.element\n          .closest(\".dcpArray__content__line\")\n          .data(\"line\");\n      }\n      return this.options.index;\n    },\n\n    /**\n     * Return the empty value (default value if the attribute is empty)\n     *\n     * @returns {*}\n     * @private\n     */\n    _getEmptyValue: function _getEmptyValue() {\n      if (\n        _.isEmpty(this.options.attributeValue) ||\n        this.options.attributeValue.value === null\n      ) {\n        if (\n          this.options.renderOptions &&\n          this.options.renderOptions.showEmptyContent\n        ) {\n          return this.options.renderOptions.showEmptyContent === true\n            ? \" \"\n            : this.options.renderOptions.showEmptyContent;\n        }\n        return \"\";\n      }\n      return \"\";\n    },\n\n    /**\n     * Get the template of the current attribute\n     *\n     * The template can be in the options or in a global var of dcp namespace (initiated by require for widget)\n     *\n     * @param key\n     * @returns string\n     * @private\n     */\n    _getTemplate: function _getTemplate(key) {\n      if (this.options.templates && this.options.templates[key]) {\n        return this.options.templates[key];\n      }\n      if (\n        window.dcp &&\n        window.dcp.templates &&\n        window.dcp.templates[this.getType()] &&\n        window.dcp.templates[this.getType()][key]\n      ) {\n        return window.dcp.templates[this.getType()][key];\n      }\n      if (\n        window.dcp &&\n        window.dcp.templates &&\n        window.dcp.templates[\"default\"] &&\n        window.dcp.templates[\"default\"][key]\n      ) {\n        return window.dcp.templates[\"default\"][key];\n      }\n      throw new Error(\n        \"Unknown template  \" +\n          key +\n          \"/\" +\n          this.options.type +\n          \" for \" +\n          this.options.id\n      );\n    },\n\n    /**\n     * Test if the value of the setValue is correct\n     *\n     * @param value\n     * @returns {boolean}\n     */\n    _checkValue: function wAttributeTestValue(value) {\n      //noinspection JSHint\n      if (this._isMultiple()) {\n        // jshint ignore:line\n        // TODO : Verify each array entry\n        // jscs:disable disallowEmptyBlocks\n      } else {\n        // jscs:enable disallowEmptyBlocks\n        if (\n          !_.isObject(value) ||\n          !_.has(value, \"value\") ||\n          !_.has(value, \"displayValue\")\n        ) {\n          throw new Error(\n            \"The value must be an object with value and displayValue properties (attrid id :\" +\n              this.options.id +\n              \")\"\n          );\n        }\n      }\n      return true;\n    },\n    /**\n     * Check if the attribute is multiple\n     *\n     * @returns boolean\n     * @public\n     */\n    _isMultiple: function _isMultiple() {\n      return this.options.options && this.options.options.multiple === \"yes\";\n    },\n\n    /**\n     * Check if the widget has buttons\n     *\n     * Used by template for rendering options\n     *\n     * @returns boolean\n     */\n    _hasButtons: function wAttributeHasButtons() {\n      if (this.getMode() === \"write\") {\n        return (\n          this.options.hasAutocomplete ||\n          this.options.deleteButton ||\n          (this.options.renderOptions &&\n            this.options.renderOptions.buttons &&\n            true)\n        );\n      } else {\n        return (\n          this.options.renderOptions &&\n          this.options.renderOptions.buttons &&\n          true\n        );\n      }\n    },\n    /**\n     * Trigger a ready event when widget is render\n     */\n    _triggerReady: function wAttributeReady() {\n      this._trigger(\"widgetReady\");\n    },\n\n    /**\n     * Trigger an event that should disable save menu on document\n     *\n     * @param visibility\n     * @private\n     */\n    _setVisibilitySavingMenu: function wAttribute_DisableSavingMenu(\n      visibility\n    ) {\n      var event = { prevent: false };\n      this._trigger(\"changeattrmenuvisibility\", event, {\n        id: \"save\",\n        onlyIfVisible: true,\n        visibility: visibility\n      });\n      this._trigger(\"changeattrmenuvisibility\", event, {\n        id: \"saveAndClose\",\n        onlyIfVisible: true,\n        visibility: visibility\n      });\n      this._trigger(\"changeattrmenuvisibility\", event, {\n        id: \"createAndClose\",\n        onlyIfVisible: true,\n        visibility: visibility\n      });\n      this._trigger(\"changeattrmenuvisibility\", event, {\n        id: \"create\",\n        onlyIfVisible: true,\n        visibility: visibility\n      });\n    }\n  });\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///bd2b448fa3670797b988\n");

/***/ }),

/***/ "be67089a05337e5c3178":
/*!**********************************************************************************!*\
  !*** ./src/vendor/Anakeen/DOCUMENT/IHM/controllerObjects/transitionInterface.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*global define*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function require_transitionInterface() {\n  \"use strict\";\n\n  var TransitionInterfacePrototype = function TransitionInterfacePrototype() {};\n\n  TransitionInterfacePrototype.prototype.getValues = function TransitionInterfacePrototype_getValues() {\n    if (!this._TransitionModel) {\n      return null;\n    }\n    return this._TransitionModel.toJSON();\n  };\n\n  TransitionInterfacePrototype.prototype.hide = function TransitionInterfacePrototype_hide() {\n    if (!this._TransitionModel) {\n      return null;\n    }\n    return this._TransitionModel.trigger(\"hide\");\n  };\n\n  TransitionInterfacePrototype.prototype.show = function TransitionInterfacePrototype_show() {\n    if (!this._TransitionModel) {\n      return null;\n    }\n    return this._TransitionModel.trigger(\"show\");\n  };\n\n  TransitionInterfacePrototype.prototype.close = function TransitionInterfacePrototype_close() {\n    if (!this._TransitionModel) {\n      return null;\n    }\n    return this._TransitionModel.trigger(\"close\");\n  };\n\n  var TransitionInterface = function TransitionInterface(\n    transitionModel,\n    $el,\n    nextState,\n    transition\n  ) {\n    this._TransitionModel = transitionModel;\n    this.$el = $el;\n    this.nextState = nextState;\n    this.transition = transition;\n    TransitionInterfacePrototype.call(this);\n  };\n\n  TransitionInterface.prototype = Object.create(\n    TransitionInterfacePrototype.prototype\n  );\n  TransitionInterface.prototype.constructor = TransitionInterfacePrototype;\n\n  return TransitionInterface;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmU2NzA4OWEwNTMzN2U1YzMxNzguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdmVuZG9yL0FuYWtlZW4vRE9DVU1FTlQvSUhNL2NvbnRyb2xsZXJPYmplY3RzL3RyYW5zaXRpb25JbnRlcmZhY2UuanM/MGU1ZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKmdsb2JhbCBkZWZpbmUqL1xuZGVmaW5lKFtdLCBmdW5jdGlvbiByZXF1aXJlX3RyYW5zaXRpb25JbnRlcmZhY2UoKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBUcmFuc2l0aW9uSW50ZXJmYWNlUHJvdG90eXBlID0gZnVuY3Rpb24gVHJhbnNpdGlvbkludGVyZmFjZVByb3RvdHlwZSgpIHt9O1xuXG4gIFRyYW5zaXRpb25JbnRlcmZhY2VQcm90b3R5cGUucHJvdG90eXBlLmdldFZhbHVlcyA9IGZ1bmN0aW9uIFRyYW5zaXRpb25JbnRlcmZhY2VQcm90b3R5cGVfZ2V0VmFsdWVzKCkge1xuICAgIGlmICghdGhpcy5fVHJhbnNpdGlvbk1vZGVsKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX1RyYW5zaXRpb25Nb2RlbC50b0pTT04oKTtcbiAgfTtcblxuICBUcmFuc2l0aW9uSW50ZXJmYWNlUHJvdG90eXBlLnByb3RvdHlwZS5oaWRlID0gZnVuY3Rpb24gVHJhbnNpdGlvbkludGVyZmFjZVByb3RvdHlwZV9oaWRlKCkge1xuICAgIGlmICghdGhpcy5fVHJhbnNpdGlvbk1vZGVsKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX1RyYW5zaXRpb25Nb2RlbC50cmlnZ2VyKFwiaGlkZVwiKTtcbiAgfTtcblxuICBUcmFuc2l0aW9uSW50ZXJmYWNlUHJvdG90eXBlLnByb3RvdHlwZS5zaG93ID0gZnVuY3Rpb24gVHJhbnNpdGlvbkludGVyZmFjZVByb3RvdHlwZV9zaG93KCkge1xuICAgIGlmICghdGhpcy5fVHJhbnNpdGlvbk1vZGVsKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX1RyYW5zaXRpb25Nb2RlbC50cmlnZ2VyKFwic2hvd1wiKTtcbiAgfTtcblxuICBUcmFuc2l0aW9uSW50ZXJmYWNlUHJvdG90eXBlLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uIFRyYW5zaXRpb25JbnRlcmZhY2VQcm90b3R5cGVfY2xvc2UoKSB7XG4gICAgaWYgKCF0aGlzLl9UcmFuc2l0aW9uTW9kZWwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fVHJhbnNpdGlvbk1vZGVsLnRyaWdnZXIoXCJjbG9zZVwiKTtcbiAgfTtcblxuICB2YXIgVHJhbnNpdGlvbkludGVyZmFjZSA9IGZ1bmN0aW9uIFRyYW5zaXRpb25JbnRlcmZhY2UoXG4gICAgdHJhbnNpdGlvbk1vZGVsLFxuICAgICRlbCxcbiAgICBuZXh0U3RhdGUsXG4gICAgdHJhbnNpdGlvblxuICApIHtcbiAgICB0aGlzLl9UcmFuc2l0aW9uTW9kZWwgPSB0cmFuc2l0aW9uTW9kZWw7XG4gICAgdGhpcy4kZWwgPSAkZWw7XG4gICAgdGhpcy5uZXh0U3RhdGUgPSBuZXh0U3RhdGU7XG4gICAgdGhpcy50cmFuc2l0aW9uID0gdHJhbnNpdGlvbjtcbiAgICBUcmFuc2l0aW9uSW50ZXJmYWNlUHJvdG90eXBlLmNhbGwodGhpcyk7XG4gIH07XG5cbiAgVHJhbnNpdGlvbkludGVyZmFjZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFxuICAgIFRyYW5zaXRpb25JbnRlcmZhY2VQcm90b3R5cGUucHJvdG90eXBlXG4gICk7XG4gIFRyYW5zaXRpb25JbnRlcmZhY2UucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVHJhbnNpdGlvbkludGVyZmFjZVByb3RvdHlwZTtcblxuICByZXR1cm4gVHJhbnNpdGlvbkludGVyZmFjZTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///be67089a05337e5c3178\n");

/***/ }),

/***/ "c58409cf810742518d6e":
/*!*****************************************************************!*\
  !*** ./src/vendor/Anakeen/DOCUMENT/IHM/i18n/documentCatalog.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;window.dcp = window.dcp || {};\n\n(function umdRequire(root, factory) {\n  \"use strict\";\n\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! dcpDocument/i18n/translatorFactory */ \"e3999333438b4df733cd\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(window, function documentCatalog(translatorFactory) {\n  \"use strict\";\n  //Register document translation in the global window.dcp.documentCatalog\n  window.dcp.documentCatalog = translatorFactory(window.dcp.i18n);\n  return window.dcp.documentCatalog;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYzU4NDA5Y2Y4MTA3NDI1MThkNmUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdmVuZG9yL0FuYWtlZW4vRE9DVU1FTlQvSUhNL2kxOG4vZG9jdW1lbnRDYXRhbG9nLmpzPzFlM2IiXSwic291cmNlc0NvbnRlbnQiOlsid2luZG93LmRjcCA9IHdpbmRvdy5kY3AgfHwge307XG5cbihmdW5jdGlvbiB1bWRSZXF1aXJlKHJvb3QsIGZhY3RvcnkpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKFtcImRjcERvY3VtZW50L2kxOG4vdHJhbnNsYXRvckZhY3RvcnlcIl0sIGZhY3RvcnkpO1xuICB9IGVsc2Uge1xuICAgIC8vTG9hZCB0cmFuc2xhdGlvbiBhbmQgbG9hZCBpMThuIGhhbmRsZXIgZm9yIG5vbiByZXF1aXJlIHByb2plY3RcbiAgICAkLmdldChcImFwaS92Mi9pMThuL0RPQ1VNRU5UXCIpLmRvbmUoZnVuY3Rpb24gdHJhbnNsYXRpb25Mb2FkZWQoY2F0YWxvZykge1xuICAgICAgd2luZG93LmRjcC5pMThuID0gY2F0YWxvZztcbiAgICAgIGZhY3Rvcnkod2luZG93LmRjcC50cmFuc2xhdG9yRmFjdG9yeSk7XG4gICAgICAvL1RyaWdnZXIgYW4gZXZlbnQgd2hlbiB0cmFuc2xhdGlvbiBsb2FkZWRcbiAgICAgICQod2luZG93KS50cmlnZ2VyKFwiZG9jdW1lbnRDYXRhbG9nTG9hZGVkXCIpO1xuICAgIH0pO1xuICB9XG59KSh3aW5kb3csIGZ1bmN0aW9uIGRvY3VtZW50Q2F0YWxvZyh0cmFuc2xhdG9yRmFjdG9yeSkge1xuICBcInVzZSBzdHJpY3RcIjtcbiAgLy9SZWdpc3RlciBkb2N1bWVudCB0cmFuc2xhdGlvbiBpbiB0aGUgZ2xvYmFsIHdpbmRvdy5kY3AuZG9jdW1lbnRDYXRhbG9nXG4gIHdpbmRvdy5kY3AuZG9jdW1lbnRDYXRhbG9nID0gdHJhbnNsYXRvckZhY3Rvcnkod2luZG93LmRjcC5pMThuKTtcbiAgcmV0dXJuIHdpbmRvdy5kY3AuZG9jdW1lbnRDYXRhbG9nO1xufSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0EsV0FRQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///c58409cf810742518d6e\n");

/***/ }),

/***/ "cd42c09cb5294e18cda8":
/*!******************************************************************************************!*\
  !*** ./src/vendor/Anakeen/DOCUMENT/IHM/widgets/documentController/documentController.js ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* global define, console */\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n  __webpack_require__(/*! jquery */ \"127c8cf59f228bb01a21\"),\n  __webpack_require__(/*! underscore */ \"8e08e542008e4aef1f58\"),\n  __webpack_require__(/*! backbone */ \"1858b45bf48591489d06\"),\n  __webpack_require__(/*! dcpDocument/routers/router */ \"07709ec177f6ae2611d8\"),\n  __webpack_require__(/*! dcpDocument/models/mDocument */ \"9d899764b00e608fd289\"),\n  __webpack_require__(/*! dcpDocument/controllerObjects/attributeInterface */ \"f1fbc4361c0154bb70ac\"),\n  __webpack_require__(/*! dcpDocument/controllerObjects/menuInterface */ \"0709a97ea65239419862\"),\n  __webpack_require__(/*! dcpDocument/controllerObjects/transitionInterface */ \"be67089a05337e5c3178\"),\n  __webpack_require__(/*! dcpDocument/views/document/vDocument */ \"064e2f13daa5551c556c\"),\n  __webpack_require__(/*! dcpDocument/models/mTransition */ \"b54b8e1b0f3a789539f4\"),\n  __webpack_require__(/*! dcpDocument/views/workflow/vTransition */ \"4f34b8885c56ba40799e\"),\n  __webpack_require__(/*! dcpDocument/models/mMenu */ \"265a1acc550f361c7884\"),\n  __webpack_require__(/*! dcpDocument/i18n/documentCatalog */ \"c58409cf810742518d6e\"),\n  __webpack_require__(/*! dcpDocument/widgets/widget */ \"a903b12ace80b5b4ecce\"),\n  __webpack_require__(/*! dcpDocument/widgets/window/wConfirm */ \"1ccad812e69cff87bf13\"),\n  __webpack_require__(/*! dcpDocument/widgets/window/wLoading */ \"5363faafcae9085e6863\"),\n  __webpack_require__(/*! dcpDocument/widgets/window/wNotification */ \"30266a3d67b2368ca3df\")\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function documentController(\n  $,\n  _,\n  Backbone,\n  Router,\n  DocumentModel,\n  AttributeInterface,\n  MenuInterface,\n  TransitionInterface,\n  DocumentView,\n  TransitionModel,\n  TransitionView,\n  MenuModel,\n  i18n\n) {\n  \"use strict\";\n\n  var ErrorModelNonInitialized = function ErrorModelNonInitialized(message) {\n    this.name = \"ErrorModelNonInitialized\";\n    this.message =\n      message ||\n      \"The widget model is not initialized, use fetchDocument to initialise it.\";\n    this.stack = new Error().stack;\n  };\n  ErrorModelNonInitialized.prototype = Object.create(Error.prototype);\n  ErrorModelNonInitialized.prototype.constructor = ErrorModelNonInitialized;\n\n  var eventList = [\n    \"beforeRender\",\n    \"ready\",\n    \"change\",\n    \"displayMessage\",\n    \"displayError\",\n    \"validate\",\n    \"attributeBeforeRender\",\n    \"attributeReady\",\n    \"attributeHelperSearch\",\n    \"attributeHelperResponse\",\n    \"attributeHelperSelect\",\n    \"attributeArrayChange\",\n    \"actionClick\",\n    \"attributeAnchorClick\",\n    \"beforeClose\",\n    \"close\",\n    \"beforeSave\",\n    \"afterSave\",\n    \"attributeDownloadFile\",\n    \"attributeUploadFile\",\n    \"attributeUploadFileDone\",\n    \"beforeDelete\",\n    \"afterDelete\",\n    \"beforeRestore\",\n    \"afterRestore\",\n    \"failTransition\",\n    \"successTransition\",\n    \"attributeBeforeTabSelect\",\n    \"attributeAfterTabSelect\",\n    \"attributeTabChange\",\n    \"beforeDisplayTransition\",\n    \"afterDisplayTransition\",\n    \"beforeTransition\",\n    \"beforeTransitionClose\",\n    \"destroy\",\n    \"attributeCreateDialogDocumentBeforeSetFormValues\",\n    \"attributeCreateDialogDocumentBeforeSetTargetValue\",\n    \"attributeCreateDialogDocumentReady\",\n    \"attributeCreateDialogDocumentBeforeClose\",\n    \"attributeCreateDialogDocumentBeforeDestroy\"\n  ];\n\n  $.widget(\"dcp.documentController\", {\n    options: {\n      eventPrefix: \"document\",\n      initid: null,\n      viewId: undefined,\n      revision: undefined,\n      constraintList: [],\n      eventListener: [],\n      _model: null,\n      activatedConstraint: {},\n      activatedEventListener: {},\n      _initializedModel: false,\n      _initializedView: false\n    },\n\n    /**\n     * Create widget\n     * @private\n     */\n    _create: function documentController_create() {\n      this.options.constraintList = {};\n      this.options.eventListener = {};\n      this.activatedConstraint = {};\n      this.activatedEventListener = {};\n      this._initializedModel = false;\n      this._initializedView = false;\n      this._customClientData = {};\n      if (!this.options.initid) {\n        return;\n      }\n      this._initializeWidget({}, this.options.customClientData);\n      this._super();\n    },\n\n    /**\n     * Delete the widget\n     * @private\n     */\n    _destroy: function documentController_destroy() {\n      this._triggerControllerEvent(\"destroy\", null, this.getProperties());\n      this.options.constraintList = {};\n      this.options.eventListener = {};\n      this.activatedConstraint = {};\n      this.activatedEventListener = {};\n      this._initializedModel = false;\n      this._initializedView = false;\n      this.element.removeData(\"document\");\n      if (this._model) {\n        this._model.trigger(\"destroy\");\n      }\n      this._trigger(\"destroy\");\n      this._super();\n    },\n\n    /**\n     * Initialize the widget\n     *\n     * Create Model, initView\n     *\n     * @param options object {\"success\": fct, \"error\", fct}\n     * @param customClientData object\n     *\n     * @private\n     */\n    _initializeWidget: function documentController_initializeWidget(\n      options,\n      customClientData\n    ) {\n      var promise,\n        currentWidget = this,\n        initializeSuccess = function documentController_initializeSuccess() {\n          currentWidget._initializedModel = true;\n        };\n      options = options || {};\n      this._initExternalElements();\n      this._initModel(this._getModelValue());\n      this._initView();\n      if (options.success) {\n        options.success = _.wrap(\n          options.success,\n          function documentController_fetchSuccess(success) {\n            initializeSuccess.apply(this, _.rest(arguments));\n            return success.apply(this, _.rest(arguments));\n          }\n        );\n      }\n      if (customClientData) {\n        this._model._customClientData = customClientData;\n      }\n      promise = this._model.fetchDocument(this._getModelValue(), options);\n      if (!options.success) {\n        promise.then(initializeSuccess);\n      }\n\n      this._initRouter({ useHistory: !this.options.noRouter });\n\n      return promise;\n    },\n\n    /**\n     * Return essential element of the current document\n     *\n     * @returns {Object}\n     * @private\n     */\n    _getModelValue: function documentController_getModelValue() {\n      return _.pick(this.options, \"initid\", \"viewId\", \"revision\");\n    },\n\n    /**\n     * Generate the dom where the view is inserted\n     * @private\n     */\n    _initDom: function documentController_initDom() {\n      var $document = this.element.find(\".dcpDocument\");\n      if (!this.$document || $document.length === 0) {\n        this.element.append('<div class=\"dcpDocument\"></div>');\n        this.$document = this.element.find(\".dcpDocument\");\n      }\n    },\n\n    /**\n     * Init the model and bind the events\n     *\n     * @param initialValue\n     * @returns DocumentModel\n     * @private\n     */\n    _initModel: function documentController_initModel(initialValue) {\n      var model;\n\n      //Don't reinit the model\n      if (!this._model) {\n        model = new DocumentModel(initialValue);\n        this._model = model;\n        this._initModelEvents();\n      } else {\n        this._reinitModel();\n      }\n      return model;\n    },\n\n    /**\n     * Init the view and bind the events\n     *\n     * @returns DocumentView\n     * @private\n     */\n    _initView: function documentController_initView() {\n      var documentView;\n      ///Don't reinit view\n      if (!this.view) {\n        this._initDom();\n        documentView = new DocumentView({\n          model: this._model,\n          el: this.$document[0]\n        });\n        this.view = documentView;\n        this._initViewEvents();\n      }\n      return this.view;\n    },\n\n    /**\n     * Clear and reinit the model with current widget values\n     *\n     * @private\n     */\n    _reinitModel: function documentController_reinitModel() {\n      this._model.set(this._getModelValue());\n    },\n\n    /**\n     * Init the external elements (loading bar and notification widget)\n     * @private\n     */\n    _initExternalElements: function documentController_initExternalElements() {\n      this.$loading = $(\".dcpLoading\").dcpLoading();\n      this.$notification = $(\"body\").dcpNotification(window.dcp.notifications); // active notification\n    },\n\n    /**\n     * Bind the model event\n     *\n     * Re-trigger the event\n     *\n     * @private\n     */\n    _initModelEvents: function documentController_initEvents() {\n      var currentWidget = this;\n      this._model.listenTo(\n        this._model,\n        \"invalid\",\n        function documentController_triggerShowInvalid(model, error) {\n          var result = currentWidget._triggerControllerEvent(\n            \"displayError\",\n            null,\n            currentWidget.getProperties(),\n            error\n          );\n          if (result) {\n            currentWidget.$notification.dcpNotification(\"showError\", error);\n          }\n        }\n      );\n      this._model.listenTo(\n        this._model,\n        \"showError\",\n        function documentController_triggerShowError(error) {\n          var result = currentWidget._triggerControllerEvent(\n            \"displayError\",\n            null,\n            currentWidget.getProperties(),\n            error\n          );\n          if (result) {\n            currentWidget.$notification.dcpNotification(\"showError\", error);\n          }\n        }\n      );\n      this._model.listenTo(\n        this._model,\n        \"showMessage\",\n        function documentController_triggerShowMessage(msg) {\n          var result = currentWidget._triggerControllerEvent(\n            \"displayMessage\",\n            null,\n            currentWidget.getProperties(),\n            msg\n          );\n          if (result) {\n            currentWidget.$notification.dcpNotification(\"show\", msg.type, msg);\n          }\n        }\n      );\n      this._model.listenTo(\n        this._model,\n        \"reload\",\n        function documentController_triggerReinit() {\n          // currentWidget._initModel(currentWidget._getModelValue());\n          // currentWidget._initView();\n          currentWidget._model.fetchDocument();\n        }\n      );\n      this._model.listenTo(\n        this._model,\n        \"sync\",\n        function documentController_triggerSync() {\n          currentWidget._initializedModel = true;\n          currentWidget.options.initid = currentWidget._model.id;\n          currentWidget.options.viewId = currentWidget._model.get(\"viewId\");\n          currentWidget.options.revision = currentWidget._model.get(\"revision\");\n          currentWidget.element.data(\n            \"document\",\n            currentWidget._getModelValue()\n          );\n          currentWidget._initActivatedConstraint();\n          currentWidget._initActivatedEventListeners({ launchReady: false });\n        }\n      );\n      this._model.listenTo(\n        this._model,\n        \"beforeRender\",\n        function documentController_triggerBeforeRender(event) {\n          event.prevent = !currentWidget._triggerControllerEvent(\n            \"beforeRender\",\n            event,\n            currentWidget.getProperties(),\n            currentWidget._model.getModelProperties()\n          );\n        }\n      );\n      this._model.listenTo(\n        this._model,\n        \"beforeClose\",\n        function documentController_triggerBeforeClose(\n          event,\n          nextDocument,\n          customClientData\n        ) {\n          if (currentWidget._initializedView !== false) {\n            event.prevent = !currentWidget._triggerControllerEvent(\n              \"beforeClose\",\n              event,\n              currentWidget.getProperties(),\n              nextDocument,\n              customClientData\n            );\n          }\n        }\n      );\n      this._model.listenTo(\n        this._model,\n        \"close\",\n        function documentController_triggerClose(oldProperties) {\n          if (currentWidget._initializedView !== false) {\n            currentWidget._triggerControllerEvent(\n              \"close\",\n              null,\n              currentWidget.getProperties(),\n              oldProperties\n            );\n          }\n          currentWidget._initializedView = false;\n        }\n      );\n      this._model.listenTo(\n        this._model,\n        \"getCustomClientData\",\n        function documentController_triggerAddCustomData() {\n          try {\n            currentWidget._model._customClientData = currentWidget.getCustomClientData(\n              false\n            );\n          } catch (e) {\n            //no test here\n          }\n        }\n      );\n      this._model.listenTo(\n        this._model,\n        \"beforeSave\",\n        function documentController_triggerBeforeSave(event, customClientData) {\n          var _model = this;\n          var requestOptions = {\n            getRequestData: function getRequestData() {\n              return _model.toJSON();\n            },\n            setRequestData: function documentControllerSetRequestData(data) {\n              _model._customRequestData = data;\n            }\n          };\n          event.prevent = !currentWidget._triggerControllerEvent(\n            \"beforeSave\",\n            event,\n            currentWidget.getProperties(),\n            requestOptions,\n            customClientData\n          );\n        }\n      );\n      this._model.listenTo(\n        this._model,\n        \"afterSave\",\n        function documentController_triggerAfterSave(oldProperties) {\n          currentWidget._triggerControllerEvent(\n            \"afterSave\",\n            null,\n            currentWidget.getProperties(),\n            oldProperties\n          );\n        }\n      );\n      this._model.listenTo(\n        this._model,\n        \"beforeRestore\",\n        function documentController_triggerBeforeRestore(event) {\n          event.prevent = !currentWidget._triggerControllerEvent(\n            \"beforeRestore\",\n            event,\n            currentWidget.getProperties()\n          );\n        }\n      );\n      this._model.listenTo(\n        this._model,\n        \"afterRestore\",\n        function documentController_triggerAfterRestore(oldProperties) {\n          currentWidget._triggerControllerEvent(\n            \"afterRestore\",\n            null,\n            currentWidget.getProperties(),\n            oldProperties\n          );\n        }\n      );\n      this._model.listenTo(\n        this._model,\n        \"beforeDelete\",\n        function documentController_triggerBeforeDelete(\n          event,\n          customClientData\n        ) {\n          event.prevent = !currentWidget._triggerControllerEvent(\n            \"beforeDelete\",\n            event,\n            currentWidget.getProperties(),\n            currentWidget._model.getModelProperties(),\n            customClientData\n          );\n        }\n      );\n      this._model.listenTo(\n        this._model,\n        \"afterDelete\",\n        function documentController_triggerAfterDelete(oldProperties) {\n          currentWidget._triggerControllerEvent(\n            \"afterDelete\",\n            null,\n            currentWidget.getProperties(),\n            oldProperties\n          );\n        }\n      );\n      this._model.listenTo(\n        this._model,\n        \"validate\",\n        function documentController_triggerValidate(event) {\n          event.prevent = !currentWidget._triggerControllerEvent(\n            \"validate\",\n            event,\n            currentWidget.getProperties()\n          );\n        }\n      );\n      this._model.listenTo(\n        this._model,\n        \"changeValue\",\n        function documentController_triggerChangeValue(options) {\n          try {\n            var currentAttribute = currentWidget.getAttribute(\n                options.attributeId\n              ),\n              index = 0,\n              values = currentAttribute.getValue(\"all\"),\n              mAttribute = currentWidget._getAttributeModel(\n                options.attributeId\n              );\n            if (mAttribute.getParent().get(\"type\") !== \"array\") {\n              index = -1;\n            } else {\n              var changesIndex = [];\n              _.each(\n                values.current,\n                function documentController_valueIsModified(currentValue) {\n                  var previous = values.previous[index];\n                  if (!previous) {\n                    changesIndex.push(index);\n                  } else {\n                    if (_.isArray(currentValue)) {\n                      currentValue = currentValue.join(\",\");\n                    }\n                    currentValue = _.has(currentValue, \"value\")\n                      ? currentValue.value\n                      : currentValue;\n                    if (_.isArray(previous)) {\n                      previous = previous.join(\",\");\n                    }\n                    previous = _.has(previous, \"value\")\n                      ? previous.value\n                      : previous;\n                    if (previous !== currentValue) {\n                      changesIndex.push(index);\n                    }\n                  }\n                  index++;\n                }\n              );\n              index = changesIndex.length === 1 ? changesIndex[0] : -1;\n            }\n            currentWidget._triggerAttributeControllerEvent(\n              \"change\",\n              null,\n              currentAttribute,\n              currentWidget.getProperties(),\n              currentAttribute,\n              currentAttribute.getValue(\"all\"),\n              index\n            );\n          } catch (error) {\n            if (!(error instanceof ErrorModelNonInitialized)) {\n              console.error(error);\n            }\n          }\n        }\n      );\n      this._model.listenTo(\n        this._model,\n        \"beforeAttributeRender\",\n        function documentController_triggerAttributeRender(\n          event,\n          attributeId,\n          $el,\n          index\n        ) {\n          try {\n            var currentAttribute = currentWidget.getAttribute(attributeId);\n            event.prevent = !currentWidget._triggerAttributeControllerEvent(\n              \"attributeBeforeRender\",\n              event,\n              currentAttribute,\n              currentWidget.getProperties(),\n              currentAttribute,\n              $el,\n              index\n            );\n          } catch (error) {\n            if (!(error instanceof ErrorModelNonInitialized)) {\n              console.error(error);\n            }\n          }\n        }\n      );\n      this._model.listenTo(\n        this._model,\n        \"attributeRender\",\n        function documentController_triggerAttributeRender(\n          attributeId,\n          $el,\n          index\n        ) {\n          try {\n            var currentAttribute = currentWidget.getAttribute(attributeId);\n            currentWidget._triggerAttributeControllerEvent(\n              \"attributeReady\",\n              null,\n              currentAttribute,\n              currentWidget.getProperties(),\n              currentAttribute,\n              $el,\n              index\n            );\n          } catch (error) {\n            if (!(error instanceof ErrorModelNonInitialized)) {\n              console.error(error);\n            }\n          }\n        }\n      );\n      this._model.listenTo(\n        this._model,\n        \"arrayModified\",\n        function documentController_triggerArrayModified(options) {\n          try {\n            var currentAttribute = currentWidget.getAttribute(\n              options.attributeId\n            );\n            currentWidget._triggerAttributeControllerEvent(\n              \"attributeArrayChange\",\n              null,\n              currentAttribute,\n              currentWidget.getProperties(),\n              currentAttribute,\n              options.type,\n              options.options\n            );\n          } catch (error) {\n            if (!(error instanceof ErrorModelNonInitialized)) {\n              console.error(error);\n            }\n          }\n        }\n      );\n      this._model.listenTo(\n        this._model,\n        \"internalLinkSelected\",\n        function documentController_triggerInternalLinkSelected(\n          event,\n          options\n        ) {\n          event.prevent = !currentWidget._triggerControllerEvent(\n            \"actionClick\",\n            event,\n            currentWidget.getProperties(),\n            options\n          );\n        }\n      );\n      this._model.listenTo(\n        this._model,\n        \"downloadFile\",\n        function documentController_triggerDownloadFile(\n          event,\n          attrid,\n          options\n        ) {\n          try {\n            var currentAttribute = currentWidget.getAttribute(attrid);\n            event.prevent = !currentWidget._triggerAttributeControllerEvent(\n              \"attributeDownloadFile\",\n              event,\n              currentAttribute,\n              currentWidget.getProperties(),\n              currentAttribute,\n              options.$el,\n              options.index\n            );\n          } catch (error) {\n            if (!(error instanceof ErrorModelNonInitialized)) {\n              console.error(error);\n            }\n          }\n        }\n      );\n      this._model.listenTo(\n        this._model,\n        \"uploadFile\",\n        function documentController_triggerUploadFile(event, attrid, options) {\n          try {\n            var currentAttribute = currentWidget.getAttribute(attrid);\n            event.prevent = !currentWidget._triggerAttributeControllerEvent(\n              \"attributeUploadFile\",\n              event,\n              currentAttribute,\n              currentWidget.getProperties(),\n              currentAttribute,\n              options.$el,\n              options.index,\n              {\n                file: options.file,\n                hasUploadingFiles: currentWidget._model.hasUploadingFile()\n              }\n            );\n          } catch (error) {\n            if (!(error instanceof ErrorModelNonInitialized)) {\n              console.error(error);\n            }\n          }\n        }\n      );\n      this._model.listenTo(\n        this._model,\n        \"uploadFileDone\",\n        function documentController_triggerUploadFile(event, attrid, options) {\n          try {\n            var currentAttribute = currentWidget.getAttribute(attrid);\n            event.prevent = !currentWidget._triggerAttributeControllerEvent(\n              \"attributeUploadFileDone\",\n              event,\n              currentAttribute,\n              currentWidget.getProperties(),\n              currentAttribute,\n              options.$el,\n              options.index,\n              {\n                file: options.file,\n                hasUploadingFiles: currentWidget._model.hasUploadingFile()\n              }\n            );\n          } catch (error) {\n            if (!(error instanceof ErrorModelNonInitialized)) {\n              console.error(error);\n            }\n          }\n        }\n      );\n\n      this._model.listenTo(\n        this._model,\n        \"attributeBeforeTabSelect\",\n        function documentController_triggerBeforeSelectTab(event, attrid) {\n          var currentAttribute = currentWidget.getAttribute(attrid);\n          var prevent;\n\n          prevent = !currentWidget._triggerAttributeControllerEvent(\n            \"attributeBeforeTabSelect\",\n            event,\n            currentAttribute,\n            currentWidget.getProperties(),\n            currentAttribute,\n            $(event.item)\n          );\n          if (prevent) {\n            event.preventDefault();\n          }\n        }\n      );\n      this._model.listenTo(\n        this._model,\n        \"attributeTabChange\",\n        function documentController_triggerAfterSelectTab(\n          event,\n          attrid,\n          $el,\n          data\n        ) {\n          var currentAttribute = currentWidget.getAttribute(attrid);\n\n          currentWidget._triggerAttributeControllerEvent(\n            \"attributeTabChange\",\n            event,\n            currentAttribute,\n            currentWidget.getProperties(),\n            currentAttribute,\n            $el,\n            data\n          );\n        }\n      );\n      this._model.listenTo(\n        this._model,\n        \"attributeAfterTabSelect\",\n        function documentController_triggerAfterSelectTab(event, attrid) {\n          var currentAttribute = currentWidget.getAttribute(attrid);\n\n          currentWidget._triggerAttributeControllerEvent(\n            \"attributeAfterTabSelect\",\n            event,\n            currentAttribute,\n            currentWidget.getProperties(),\n            currentAttribute,\n            $(event.item)\n          );\n        }\n      );\n      this._model.listenTo(\n        this._model,\n        \"helperSearch\",\n        function documentController_triggerHelperSearch(\n          event,\n          attrid,\n          options\n        ) {\n          try {\n            var currentAttribute = currentWidget.getAttribute(attrid);\n            event.prevent = !currentWidget._triggerAttributeControllerEvent(\n              \"attributeHelperSearch\",\n              event,\n              currentAttribute,\n              currentWidget.getProperties(),\n              currentAttribute,\n              options\n            );\n          } catch (error) {\n            if (!(error instanceof ErrorModelNonInitialized)) {\n              console.error(error);\n            }\n          }\n        }\n      );\n      this._model.listenTo(\n        this._model,\n        \"helperResponse\",\n        function documentController_triggerHelperResponse(\n          event,\n          attrid,\n          options\n        ) {\n          try {\n            var currentAttribute = currentWidget.getAttribute(attrid);\n            event.prevent = !currentWidget._triggerAttributeControllerEvent(\n              \"attributeHelperResponse\",\n              event,\n              currentAttribute,\n              currentWidget.getProperties(),\n              currentAttribute,\n              options\n            );\n          } catch (error) {\n            if (!(error instanceof ErrorModelNonInitialized)) {\n              console.error(error);\n            }\n          }\n        }\n      );\n      this._model.listenTo(\n        this._model,\n        \"helperSelect\",\n        function documentController_triggerHelperSelect(\n          event,\n          attrid,\n          options\n        ) {\n          try {\n            var currentAttribute = currentWidget.getAttribute(attrid);\n            event.prevent = !currentWidget._triggerAttributeControllerEvent(\n              \"attributeHelperSelect\",\n              event,\n              currentAttribute,\n              currentWidget.getProperties(),\n              currentAttribute,\n              options\n            );\n          } catch (error) {\n            if (!(error instanceof ErrorModelNonInitialized)) {\n              console.error(error);\n            }\n          }\n        }\n      );\n\n      // listener to prevent default actions when anchorClick is triggered\n      this._model.listenTo(\n        this._model,\n        \"anchorClick\",\n        function documentController_triggerHelperSelect(\n          event,\n          attrid,\n          options\n        ) {\n          try {\n            var currentAttribute = currentWidget.getAttribute(attrid);\n            event.prevent = !currentWidget._triggerAttributeControllerEvent(\n              \"attributeAnchorClick\",\n              event,\n              currentAttribute,\n              currentWidget.getProperties(),\n              currentAttribute,\n              options.$el,\n              options.index,\n              options.options\n            );\n          } catch (error) {\n            if (!(error instanceof ErrorModelNonInitialized)) {\n              console.error(error);\n            }\n          }\n        }\n      );\n\n      // Generic listener for addCreateDocumentButton docid render option\n      this._model.listenTo(\n        this._model,\n        \"createDialogListener\",\n        function documentController_triggercreateDialogDocumentOpen(\n          event,\n          attrid,\n          options\n        ) {\n          try {\n            var currentAttribute = currentWidget.getAttribute(attrid);\n            var triggername = \"attributeCreateDialogDocument\";\n            // Uppercase first letter\n            triggername +=\n              options.triggerId.charAt(0).toUpperCase() +\n              options.triggerId.slice(1);\n\n            event.prevent = !currentWidget._triggerAttributeControllerEvent(\n              triggername,\n              event,\n              currentAttribute,\n              currentWidget.getProperties(),\n              currentAttribute,\n              options\n            );\n          } catch (error) {\n            if (!(error instanceof ErrorModelNonInitialized)) {\n              console.error(error);\n            }\n          }\n        }\n      );\n      this._model.listenTo(\n        this._model,\n        \"constraint\",\n        function documentController_triggerConstraint(\n          attribute,\n          constraintController\n        ) {\n          try {\n            var currentAttribute = currentWidget.getAttribute(attribute),\n              currentModel = currentWidget.getProperties(),\n              $element = $(currentWidget.element),\n              addConstraint = function documentController_addConstraint(\n                currentConstraint\n              ) {\n                if (_.isString(currentConstraint)) {\n                  constraintController.addConstraintMessage(currentConstraint);\n                }\n                if (\n                  _.isObject(currentConstraint) &&\n                  currentConstraint.message &&\n                  _.isNumber(currentConstraint.index)\n                ) {\n                  constraintController.addConstraintMessage(\n                    currentConstraint.message,\n                    currentConstraint.index\n                  );\n                }\n              };\n            _.each(\n              currentWidget.activatedConstraint,\n              function triggerCurrentConstraint(currentConstraint) {\n                try {\n                  if (\n                    currentConstraint.attributeCheck.apply($element, [\n                      currentAttribute,\n                      currentModel\n                    ])\n                  ) {\n                    var response = currentConstraint.constraintCheck.call(\n                      $element,\n                      currentModel,\n                      currentAttribute,\n                      currentAttribute.getValue(\"all\")\n                    );\n                    if (_.isArray(response)) {\n                      _.each(response, addConstraint);\n                    } else {\n                      addConstraint(response);\n                    }\n                  }\n                } catch (e) {\n                  console.error(e);\n                }\n              }\n            );\n          } catch (error) {\n            if (!(error instanceof ErrorModelNonInitialized)) {\n              console.error(error);\n            }\n          }\n        }\n      );\n      this._model.listenTo(\n        this._model,\n        \"showTransition\",\n        _.bind(currentWidget._initAndDisplayTransition, this)\n      );\n      this._model.listenTo(\n        this._model,\n        \"beforeParse\",\n        _.bind(function deleteCustomClient() {\n          //Suppress customClientData after a sucessful transaction\n          try {\n            currentWidget.getCustomClientData(true);\n          } catch (e) {\n            //no test here\n          }\n        }, this)\n      );\n    },\n\n    /**\n     * Bind the view\n     * Re-trigger the events\n     *\n     * @private\n     */\n    _initViewEvents: function documentController_initViewEvents() {\n      var currentWidget = this;\n      this.view.on(\n        \"cleanNotification\",\n        function documentController_triggerCleanNotification() {\n          currentWidget.$notification.dcpNotification(\"clear\");\n        }\n      );\n      this.view.on(\"loading\", function documentController_triggerLoading(\n        data,\n        nbItem\n      ) {\n        currentWidget.$loading.dcpLoading(\"setPercent\", data);\n        if (nbItem) {\n          currentWidget.$loading.dcpLoading(\"setNbItem\", nbItem);\n        }\n      });\n      this.view.on(\"loaderShow\", function documentController_triggerLoaderShow(\n        text,\n        pc\n      ) {\n        console.time(\"xhr+render document view\");\n        currentWidget.$loading.dcpLoading(\"show\", text, pc);\n      });\n      this.view.on(\"loaderHide\", function documentController_triggerHide() {\n        currentWidget.$loading.dcpLoading(\"hide\");\n      });\n      this.view.on(\n        \"partRender\",\n        function documentController_triggerPartRender() {\n          currentWidget.$loading.dcpLoading(\"addItem\");\n        }\n      );\n      this.view.on(\n        \"renderDone\",\n        function documentController_triggerRenderDone() {\n          console.timeEnd(\"xhr+render document view\");\n          currentWidget.$loading.dcpLoading(\"setPercent\", 100);\n          currentWidget.$loading.dcpLoading(\"setLabel\", null);\n          currentWidget._initializedView = true;\n          currentWidget._triggerControllerEvent(\n            \"ready\",\n            null,\n            currentWidget.getProperties()\n          );\n          _.delay(function documentController_endRender() {\n            currentWidget.$loading.dcpLoading(\"hide\", true);\n            console.timeEnd(\"main\");\n          });\n        }\n      );\n      this.view.on(\n        \"showMessage\",\n        function documentController_triggerShowMessage(message) {\n          var result = currentWidget._triggerControllerEvent(\n            \"displayMessage\",\n            null,\n            currentWidget.getProperties(),\n            message\n          );\n          if (result) {\n            currentWidget.$notification.dcpNotification(\n              \"show\",\n              message.type,\n              message\n            );\n          }\n        }\n      );\n      this.view.on(\n        \"showSuccess\",\n        function documentController_triggerShowSuccess(message) {\n          var result = currentWidget._triggerControllerEvent(\n            \"displayMessage\",\n            null,\n            currentWidget.getProperties(),\n            message\n          );\n          if (result) {\n            currentWidget.$notification.dcpNotification(\"showSuccess\", message);\n          }\n        }\n      );\n      this.view.on(\"reinit\", function documentController_triggerReinit() {\n        currentWidget._initModel(currentWidget._getModelValue());\n        currentWidget._initView();\n        currentWidget._model.fetchDocument();\n      });\n    },\n\n    /**\n     * Init the pushstate router\n     *\n     * @private\n     */\n    _initRouter: function documentController_initRouter(config) {\n      if (this.router) {\n        return this.router;\n      }\n      try {\n        if (window.history && history.pushState) {\n          Backbone.history.start({ pushState: true });\n        } else {\n          //For browser without API history\n          Backbone.history.start();\n        }\n      } catch (e) {\n        console.error(e);\n      }\n      this.router = new Router({\n        document: this._model,\n        useHistory: !config || config.useHistory\n      });\n    },\n\n    /**\n     * Init and display the change state pop-up\n     *\n     * @param nextState\n     * @param transition\n     * @param values\n     * @param withoutInterface\n     * @param reinitOptions\n     */\n    _initAndDisplayTransition: function documentController_initAndDisplayTransition(\n      nextState,\n      transition,\n      values,\n      withoutInterface,\n      reinitOptions\n    ) {\n      var $target = $('<div class=\"dcpTransition\"/>'),\n        transitionElements = {},\n        currentWidget = this,\n        result,\n        transitionInterface,\n        documentServerProperties = this.getProperties();\n\n      return new Promise(function documentController_changeStatePromise(\n        resolve,\n        reject\n      ) {\n        result = !currentWidget._triggerControllerEvent(\n          \"beforeDisplayChangeState\",\n          null,\n          currentWidget.getProperties(),\n          new TransitionInterface(null, $target, nextState, transition)\n        );\n        if (result) {\n          reject();\n          return this;\n        }\n\n        //Init transition model\n        transitionElements.model = new TransitionModel({\n          documentId: currentWidget._model.id,\n          documentModel: currentWidget._model,\n          state: nextState,\n          transition: transition\n        });\n\n        //Init transition view\n        if (withoutInterface !== true) {\n          transitionElements.view = new TransitionView({\n            model: transitionElements.model,\n            el: $target\n          });\n        }\n\n        transitionInterface = new TransitionInterface(\n          transitionElements.model,\n          $target,\n          nextState,\n          transition\n        );\n\n        if (transitionElements.view) {\n          //Propagate afterDisplayChange on renderDone\n          transitionElements.view.once(\n            \"renderTransitionWindowDone\",\n            function documentController_propagateAfter() {\n              currentWidget._triggerControllerEvent(\n                \"afterDisplayTransition\",\n                null,\n                currentWidget.getProperties(),\n                transitionInterface\n              );\n            }\n          );\n        }\n\n        //Propagate the beforeTransition\n        transitionElements.model.listenTo(\n          transitionElements.model,\n          \"beforeChangeState\",\n          function documentController_propagateBeforeTransition(event) {\n            event.prevent = !currentWidget._triggerControllerEvent(\n              \"beforeTransition\",\n              null,\n              currentWidget.getProperties(),\n              transitionInterface\n            );\n          }\n        );\n\n        //Propagate the beforeTransitionClose\n        transitionElements.model.listenTo(\n          transitionElements.model,\n          \"beforeChangeStateClose\",\n          function documentController_propagateTransitionClose(event) {\n            event.prevent = !currentWidget._triggerControllerEvent(\n              \"beforeTransitionClose\",\n              null,\n              currentWidget.getProperties(),\n              transitionInterface\n            );\n          }\n        );\n\n        transitionElements.model.listenTo(\n          transitionElements.model,\n          \"showError\",\n          function documentController_propagateTransitionError(error) {\n            event.prevent = !currentWidget._triggerControllerEvent(\n              \"failTransition\",\n              null,\n              currentWidget.getProperties(),\n              transitionInterface,\n              error\n            );\n            reject({ documentProperties: documentServerProperties });\n          }\n        );\n\n        transitionElements.model.listenTo(\n          transitionElements.model,\n          \"success\",\n          function documentController_TransitionSuccess(messages) {\n            if (transitionElements.view) {\n              transitionElements.view.$el.hide();\n              currentWidget.view.once(\n                \"renderDone\",\n                function documentController_transitionRender() {\n                  transitionElements.view.remove();\n                  _.each(messages, function documentController_parseMessage(\n                    message\n                  ) {\n                    currentWidget.view.trigger(\"showMessage\", message);\n                  });\n                }\n              );\n            }\n\n            //delete the pop up when the render of the pop up is done\n            currentWidget._triggerControllerEvent(\n              \"successTransition\",\n              null,\n              currentWidget.getProperties(),\n              transitionInterface\n            );\n\n            reinitOptions = reinitOptions || { revision: -1 };\n            if (!_.has(reinitOptions, \"revision\")) {\n              reinitOptions.revision = -1;\n            }\n\n            //Reinit the main model with last revision\n            currentWidget.reinitDocument(reinitOptions).then(\n              function documentController_reinitDone() {\n                resolve({ documentProperties: documentServerProperties });\n              },\n              function documentController_reinitFail() {\n                reject({ documentProperties: documentServerProperties });\n              }\n            );\n          }\n        );\n\n        transitionElements.model.listenTo(\n          currentWidget._model,\n          \"sync\",\n          function documentController_TransitionClose() {\n            this.trigger(\"close\");\n          }\n        );\n\n        transitionElements.model.fetch({\n          success: function transitionModel_setDefaultValues() {\n            if (values) {\n              transitionElements.model.setValues(values);\n            }\n            if (withoutInterface === true) {\n              transitionElements.model\n                ._loadDocument(transitionElements.model)\n                .then(function documentController_TransitionSave() {\n                  transitionElements.model.save(\n                    {},\n                    {\n                      success: function transitionModel_afterSave() {\n                        transitionElements.model.trigger(\"success\");\n                        resolve({\n                          documentProperties: documentServerProperties\n                        });\n                      },\n                      error: function transitionModel_error() {\n                        reject({\n                          documentProperties: documentServerProperties\n                        });\n                      }\n                    }\n                  );\n                })\n                .catch(function transitionModel_error() {\n                  reject({ documentProperties: documentServerProperties });\n                });\n            } else {\n              transitionElements.model\n                ._loadDocument(transitionElements.model)\n                .then(function documentController_TransitionDisplay() {\n                  transitionElements.model.trigger(\"dduiDocumentReady\");\n                })\n                .catch(function transitionModel_error() {\n                  reject({ documentProperties: documentServerProperties });\n                });\n            }\n          },\n          error: function transitionModel_error(theModel, response, options) {\n            var errorTxt = { title: \"Transition Error\" };\n            if (options && options.errorThrown) {\n              errorTxt.message = options.errorThrown;\n            }\n            currentWidget.$notification.dcpNotification(\"showError\", errorTxt);\n            transitionElements.model.trigger(\"showError\", errorTxt);\n          }\n        });\n      });\n    },\n\n    /**\n     * Get a backbone model of an attribute\n     *\n     * @param attributeId\n     * @returns {*}\n     */\n    _getAttributeModel: function documentController_getAttributeModel(\n      attributeId\n    ) {\n      var attributes = this._model.get(\"attributes\");\n      var attribute;\n      if (!attributes) {\n        throw new Error(\n          'Attribute models not initialized yet : The attribute \"' +\n            attributeId +\n            '\" cannot be found.'\n        );\n      }\n      attribute = this._model.get(\"attributes\").get(attributeId);\n      if (!attribute) {\n        return undefined;\n      }\n      return attribute;\n    },\n\n    _getMenuModel: function documentController_getMenuModel(menuId) {\n      var menus = this._model.get(\"menus\");\n\n      var menu = menus.get(menuId);\n      if (!menu && menus) {\n        menus.each(function documentControllerGetMenuIterate(itemMenu) {\n          if (itemMenu.get(\"content\")) {\n            _.each(\n              itemMenu.get(\"content\"),\n              function documentControllerGetSubMenuIterate(subMenu) {\n                if (subMenu.id === menuId) {\n                  menu = new MenuModel(subMenu);\n                }\n              }\n            );\n          }\n        });\n      }\n      return menu;\n    },\n\n    /**\n     * Get all rendered attributes with their root dom node\n     *\n     * @returns {*}\n     */\n    _getRenderedAttributes: function documentController_getRenderedAttributes() {\n      return this._model\n        .get(\"attributes\")\n        .chain()\n        .map(function documentController_getRenderedAttribute(\n          currentAttribute\n        ) {\n          return {\n            view: currentAttribute.haveView(),\n            id: currentAttribute.id\n          };\n        })\n        .filter(function documentController_suppressNoView(currentAttribut) {\n          return currentAttribut.view.haveView;\n        })\n        .value();\n    },\n\n    /**\n     * Get max index of an array\n     *\n     * @param attributeArray\n     * @returns {*}\n     */\n    _getMaxIndex: function documentController_getMaxIndex(attributeArray) {\n      return _.size(\n        attributeArray\n          .get(\"content\")\n          .max(function documentController_getMax(currentAttr) {\n            return _.size(currentAttr.get(\"attributeValue\"));\n          })\n          .get(\"attributeValue\")\n      );\n    },\n\n    /**\n     * Activate constraint on the current document\n     * Used on the fetch of a new document\n     *\n     */\n    _initActivatedConstraint: function documentController_initActivatedConstraint() {\n      var currentDocumentProperties = this.getProperties(),\n        currentWidget = this;\n      this.activatedConstraint = {};\n      _.each(\n        this.options.constraintList,\n        function documentController_getActivatedConstraint(currentConstraint) {\n          if (\n            currentConstraint.documentCheck.call(\n              $(currentWidget.element),\n              currentDocumentProperties\n            )\n          ) {\n            currentWidget.activatedConstraint[\n              currentConstraint.name\n            ] = currentConstraint;\n          }\n        }\n      );\n    },\n\n    /**\n     * Activate events on the current document\n     * Used on the fetch of a new document\n     */\n    _initActivatedEventListeners: function documentController_initActivatedEvents(\n      options\n    ) {\n      var currentDocumentProperties = this.getProperties(),\n        currentWidget = this;\n      options = options || {};\n      this.activatedEventListener = {};\n      _.each(\n        this.options.eventListener,\n        function documentController_getActivatedEvent(currentEvent) {\n          if (!_.isFunction(currentEvent.documentCheck)) {\n            currentWidget.activatedEventListener[\n              currentEvent.name\n            ] = currentEvent;\n            return;\n          }\n          if (\n            currentEvent.documentCheck.call(\n              $(currentWidget.element),\n              currentDocumentProperties\n            )\n          ) {\n            currentWidget.activatedEventListener[\n              currentEvent.name\n            ] = currentEvent;\n          }\n        }\n      );\n      //Trigger new added ready event\n      if (this._initializedView !== false && options.launchReady !== false) {\n        this._triggerControllerEvent(\"ready\", null, currentDocumentProperties);\n        _.each(\n          this._getRenderedAttributes(),\n          function documentController_triggerRenderedAttributes(\n            currentAttribute\n          ) {\n            var objectAttribute = currentWidget.getAttribute(\n              currentAttribute.id\n            );\n            currentWidget._triggerAttributeControllerEvent(\n              \"attributeReady\",\n              null,\n              currentAttribute,\n              currentDocumentProperties,\n              objectAttribute,\n              currentAttribute.view.elements\n            );\n          }\n        );\n      }\n    },\n\n    /**\n     * Add new event and autotrigger already done event for ready\n     *\n     * @param newEvent\n     */\n    _addAndInitNewEvents: function documentController_addAndInitNewEvents(\n      newEvent\n    ) {\n      var currentDocumentProperties,\n        currentWidget = this,\n        event,\n        uniqueName,\n        $element = $(currentWidget.element);\n      uniqueName =\n        (newEvent.externalEvent ? \"external_\" : \"internal_\") + newEvent.name;\n      this.options.eventListener[uniqueName] = newEvent;\n\n      if (!this._initializedModel) {\n        //early event model is not ready (no trigger, or current register possible)\n        return this;\n      }\n      currentDocumentProperties = this.getProperties();\n      // Check if the event is for the current document\n      if (\n        !_.isFunction(newEvent.documentCheck) ||\n        newEvent.documentCheck.call($element, currentDocumentProperties)\n      ) {\n        this.activatedEventListener[newEvent.name] = newEvent;\n        // Check if we need to manually trigger this callback (late registered : only for ready events)\n        if (this._initializedView !== false) {\n          if (newEvent.eventType === \"ready\") {\n            event = $.Event(newEvent.eventType);\n            event.target = currentWidget.element;\n            try {\n              // add element as function context\n              newEvent.eventCallback.call(\n                $element,\n                event,\n                currentDocumentProperties\n              );\n            } catch (e) {\n              console.error(e);\n            }\n          }\n          if (newEvent.eventType === \"attributeReady\") {\n            event = $.Event(newEvent.eventType);\n            event.target = currentWidget.element;\n            _.each(\n              this._getRenderedAttributes(),\n              function documentController_triggerRenderedAttributes(\n                currentAttribute\n              ) {\n                var objectAttribute = currentWidget.getAttribute(\n                  currentAttribute.id\n                );\n                if (\n                  !_.isFunction(newEvent.attributeCheck) ||\n                  newEvent.attributeCheck.apply($element, [objectAttribute])\n                ) {\n                  try {\n                    // add element as function context\n                    newEvent.eventCallback.call(\n                      $element,\n                      event,\n                      currentDocumentProperties,\n                      objectAttribute,\n                      currentAttribute.view.elements\n                    );\n                  } catch (e) {\n                    console.error(e);\n                  }\n                }\n              }\n            );\n          }\n        }\n      }\n    },\n\n    /**\n     * Trigger attribute event\n     *\n     * Similar at trigger document event with a constraint on attribute\n     *\n     * @param eventName\n     * @param originalEvent\n     * @param attributeInternalElement\n     * @returns {boolean}\n     */\n    _triggerAttributeControllerEvent: function documentController_triggerAttributeControllerEvent(\n      eventName,\n      originalEvent,\n      attributeInternalElement\n    ) {\n      var currentWidget = this,\n        args = Array.prototype.slice.call(arguments, 3),\n        event = $.Event(eventName),\n        externalEventArgument,\n        $element = $(currentWidget.element);\n      event.target = currentWidget.element;\n      // internal event trigger\n      if (originalEvent && originalEvent.preventDefault) {\n        event.originalEvent = originalEvent;\n      }\n      args.unshift(event);\n      _.chain(this.activatedEventListener)\n        .filter(function documentController__filterUsableEvents(currentEvent) {\n          // Check by eventType (only call callback with good eventType)\n          if (currentEvent.eventType === eventName) {\n            //Check with attributeCheck if the function exist\n            if (!_.isFunction(currentEvent.attributeCheck)) {\n              return true;\n            }\n            return currentEvent.attributeCheck.apply($element, [\n              attributeInternalElement,\n              currentWidget.getProperties()\n            ]);\n          }\n          return false;\n        })\n        .each(function documentController_applyCallBack(currentEvent) {\n          try {\n            currentEvent.eventCallback.apply($element, args);\n          } catch (e) {\n            if (window.dcp && window.dcp.logger) {\n              window.dcp.logger(e);\n            } else {\n              console.error(e);\n            }\n          }\n        });\n      externalEventArgument = Array.prototype.slice.call(arguments, 0);\n      externalEventArgument.splice(1, 1);\n      currentWidget._triggerExternalEvent.apply(\n        currentWidget,\n        externalEventArgument\n      );\n      return !event.isDefaultPrevented();\n    },\n\n    /**\n     * Trigger a controller event\n     * That kind of event are only for this widget\n     *\n     * @param eventName\n     * @param originalEvent\n     * @returns {boolean}\n     */\n    _triggerControllerEvent: function documentController_triggerControllerEvent(\n      eventName,\n      originalEvent\n    ) {\n      var currentWidget = this,\n        args = Array.prototype.slice.call(arguments, 2),\n        event = $.Event(eventName);\n      event.target = currentWidget.element;\n      if (originalEvent && originalEvent.preventDefault) {\n        event.originalEvent = originalEvent;\n      }\n      // internal event trigger\n      args.unshift(event);\n      _.chain(this.activatedEventListener)\n        .filter(function documentController_getEventName(currentEvent) {\n          return currentEvent.eventType === eventName;\n        })\n        .each(function documentController_triggerAnEvent(currentEvent) {\n          try {\n            currentEvent.eventCallback.apply($(currentWidget.element), args);\n          } catch (e) {\n            if (window.dcp.logger) {\n              window.dcp.logger(e);\n            } else {\n              console.error(e);\n            }\n          }\n        });\n      currentWidget._triggerExternalEvent.apply(currentWidget, arguments);\n      return !event.isDefaultPrevented();\n    },\n\n    /**\n     * Trigger event as jQuery standard events (all events are prefixed by document)\n     *\n     * @param type\n     */\n    _triggerExternalEvent: function documentController_triggerExternalEvent(\n      type\n    ) {\n      var currentWidget = this,\n        args = Array.prototype.slice.call(arguments, 1),\n        event = $.Event(type);\n      //prepare argument for widget event trigger (we want type, event, data)\n      // add the eventObject\n      args.unshift(event);\n      // add the type\n      args.unshift(type);\n      // concatenate other argument in one element (to respect widget pattern)\n      args[2] = args.slice(2);\n      // suppress other arguments (since they have been concatened)\n      args = args.slice(0, 3);\n      //trigger external event\n      currentWidget._trigger.apply(currentWidget, args);\n    },\n\n    /**\n     * Check if event name is valid\n     *\n     * @param eventName string\n     * @private\n     */\n    _checkEventName: function documentController_checkEventName(eventName) {\n      if (\n        _.isString(eventName) &&\n        (eventName.indexOf(\"custom:\") === 0 ||\n          _.find(eventList, function documentController_CheckEventType(\n            currentEventType\n          ) {\n            return currentEventType === eventName;\n          }))\n      ) {\n        return true;\n      }\n      throw new Error(\n        \"The event type \" +\n          eventName +\n          \" is not known. It must be one of \" +\n          eventList.sort().join(\" ,\")\n      );\n    },\n\n    /**\n     * Check if the view is initialized\n     *\n     * @private\n     */\n    _checkInitialisedView: function documentController_checkInitialised() {\n      if (!this._initializedView) {\n        throw new ErrorModelNonInitialized(\n          \"The widget view is not initialized, use fetchDocument to initialise it.\"\n        );\n      }\n    },\n\n    /**\n     * Check if the model is initialized\n     *\n     * @private\n     */\n    _checkInitialisedModel: function documentController_checkInitialisedModel() {\n      if (!this._initializedModel) {\n        throw new ErrorModelNonInitialized();\n      }\n    },\n\n    _registerOutputPromise: function documentController_registerOutputPromise(\n      documentPromise,\n      options\n    ) {\n      var currentWidget = this;\n      return new Promise(function documentController_reinitPromise(\n        resolve,\n        reject\n      ) {\n        documentPromise.then(\n          function documentController_reinitDone(values) {\n            if (options && _.isFunction(options.success)) {\n              try {\n                if (window.console.warn) {\n                  window.console.warn(\n                    'Callback \"success\" is deprecated use promise instead'\n                  );\n                }\n                options.success.call(\n                  $(currentWidget.element),\n                  values.documentProperties || {},\n                  currentWidget.getProperties()\n                );\n              } catch (exception) {\n                if (window.dcp.logger) {\n                  window.dcp.logger(exception);\n                } else {\n                  console.error(exception);\n                }\n              }\n            }\n            resolve({\n              element: $(currentWidget.element),\n              previousDocument: values.documentProperties || {},\n              nextDocument: currentWidget.getProperties()\n            });\n          },\n          function documentController_reinitFail(values) {\n            var errorArguments = values.arguments;\n            var errorMessage = { contentText: \"Undefined error\" };\n\n            if (values.arguments) {\n              try {\n                if (\n                  errorArguments &&\n                  errorArguments[1] &&\n                  errorArguments[1].responseJSON\n                ) {\n                  errorMessage = errorArguments[1].responseJSON.messages[0];\n                }\n              } catch (e) {\n                //no error here\n              }\n              if (\n                errorArguments &&\n                errorArguments[0] &&\n                errorArguments[0].eventPrevented\n              ) {\n                errorMessage = { contentText: \"Event prevented\" };\n              }\n              if (\n                errorArguments &&\n                errorArguments[0] &&\n                errorArguments[0].errorMessage\n              ) {\n                errorMessage = errorArguments[0].errorMessage;\n              }\n            }\n            if (options && _.isFunction(options.error)) {\n              try {\n                if (window.console.warn) {\n                  window.console.warn(\n                    'Callback \"error\" is deprecated use promise instead'\n                  );\n                }\n                options.error.call(\n                  $(currentWidget.element),\n                  values.documentProperties || {},\n                  null,\n                  errorMessage\n                );\n              } catch (exception) {\n                window.dcp.logger(exception);\n              }\n            }\n            reject({\n              element: $(currentWidget.element),\n              previousDocument: values.documentProperties || {},\n              nextDocument: null,\n              errorMessage: errorMessage\n            });\n          }\n        );\n      });\n    },\n\n    /***************************************************************************************************************\n     * External function\n     **************************************************************************************************************/\n    /**\n     * Reinit the current document (close it and re-open it) : keep the same view, revision, etc...\n     *\n     * @param values object {\"initid\" : int, \"revision\" : int, \"viewId\" : string, \"customClientData\" : mixed}\n     * @param options object {\"success\": fct, \"error\", fct}\n     */\n    reinitDocument: function documentControllerReinitDocument(values, options) {\n      var properties = this.getProperties();\n      this._checkInitialisedModel();\n      values = values || {};\n\n      //Reinit model with server values\n      _.defaults(values, {\n        revision: properties.revision,\n        viewId: properties.viewId,\n        initid: properties.initid\n      });\n\n      return this.fetchDocument(values, options);\n    },\n\n    /**\n     * Fetch a new document\n     * @param values object {\"initid\" : int, \"revision\" : int, \"viewId\" : string, \"customClientData\" : mixed}\n     * @param options object {\"success\": fct, \"error\", fct}\n     */\n    fetchDocument: function documentControllerFetchDocument(values, options) {\n      var documentPromise, callBackPromise;\n      var currentWidget = this;\n      values = _.isUndefined(values) ? {} : values;\n      options = options || {};\n\n      if (!_.isObject(values)) {\n        throw new Error(\n          'Fetch argument must be an object {\"initid\":, \"revision\": , \"viewId\": }'\n        );\n      }\n\n      if (!values.initid) {\n        throw new Error(\"initid argument is mandatory\");\n      }\n\n      if (!isNaN(values.initid)) {\n        // Convert to numeric initid is possible\n        values.initid = parseInt(values.initid);\n      }\n\n      // Use default values when fetch another document\n      _.defaults(values, { revision: -1, viewId: \"!defaultConsultation\" });\n      _.defaults(options, { force: false });\n\n      _.each(\n        _.pick(values, \"initid\", \"revision\", \"viewId\"),\n        function dcpDocument_setNewOptions(value, key) {\n          currentWidget.options[key] = value;\n        }\n      );\n\n      if (!this._model) {\n        documentPromise = this._initializeWidget(\n          options,\n          values.customClientData\n        );\n      } else {\n        if (values.customClientData) {\n          this._model._customClientData = values.customClientData;\n        }\n\n        if (this._model.isModified() && options.force === false) {\n          callBackPromise = this._model._promiseCallback();\n          this._model.trigger(\"loadDocument\", this._getModelValue(), {\n            success: callBackPromise.success,\n            error: callBackPromise.error\n          });\n          documentPromise = callBackPromise.promise;\n        } else {\n          documentPromise = this._model.fetchDocument(this._getModelValue());\n        }\n      }\n      return this._registerOutputPromise(documentPromise, options);\n    },\n\n    /**\n     * Save the current document\n     * Reload the interface in the same mode\n     * @param options object {\"success\": fct, \"error\", fct, \"customClientData\" : mixed}\n     *\n     */\n    saveDocument: function documentControllerSave(options) {\n      var documentPromise;\n      options = options || {};\n      this._checkInitialisedModel();\n      if (options.customClientData) {\n        this._model._customClientData = options.customClientData;\n      }\n      documentPromise = this._model.saveDocument();\n      return this._registerOutputPromise(documentPromise, options);\n    },\n\n    /**\n     * Change the workflow state of the document\n     *\n     * @param parameters\n     * @param reinitOptions\n     * @param options\n     */\n    changeStateDocument: function documentController_changeStateDocument(\n      parameters,\n      reinitOptions,\n      options\n    ) {\n      var documentPromise;\n      this._checkInitialisedModel();\n      if (!_.isObject(parameters)) {\n        throw new Error(\n          'changeStateDocument first argument must be an object {\"nextState\":, \"transition\": , \"values\":, \"unattended\":, \"\" }'\n        );\n      }\n      if (\n        !_.isString(parameters.nextState) ||\n        !_.isString(parameters.transition)\n      ) {\n        throw new Error(\"nextState and transition arguments are mandatory\");\n      }\n      documentPromise = this._initAndDisplayTransition(\n        parameters.nextState,\n        parameters.transition,\n        parameters.values || null,\n        parameters.unattended || false,\n        reinitOptions\n      );\n      return this._registerOutputPromise(documentPromise, options);\n    },\n\n    /**\n     * Delete the current document\n     * Reload the interface in the same mode\n     * @param options object {\"success\": fct, \"error\", fct, \"customClientData\" : mixed}\n     */\n    deleteDocument: function documentControllerDelete(options) {\n      var documentPromise;\n      options = options || {};\n      this._checkInitialisedModel();\n      if (options.customClientData) {\n        this._model._customClientData = options.customClientData;\n      }\n      documentPromise = this._model.deleteDocument();\n      return this._registerOutputPromise(documentPromise, options);\n    },\n\n    /**\n     * Restore the current document\n     * Reload the interface in the same mode\n     * @param options object {\"success\": fct, \"error\", fct, \"customClientData\" : mixed}\n     */\n    restoreDocument: function documentControllerRestore(options) {\n      var documentPromise;\n      options = options || {};\n      this._checkInitialisedModel();\n      if (options.customClientData) {\n        this._model._customClientData = options.customClientData;\n      }\n      documentPromise = this._model.restoreDocument();\n      return this._registerOutputPromise(documentPromise, options);\n    },\n\n    /**\n     * Get a property value\n     *\n     * @param property\n     * @returns {*}\n     */\n    getProperty: function documentControllerGetDocumentProperty(property) {\n      this._checkInitialisedModel();\n      if (property === \"isModified\") {\n        return this._model.isModified();\n      }\n      return this._model.getServerProperties()[property];\n    },\n\n    /**\n     * Get all the properties\n     * @returns {*}\n     */\n    getProperties: function documentControllerGetDocumentProperties() {\n      var properties,\n        ready = true;\n      try {\n        this._checkInitialisedModel();\n      } catch (e) {\n        ready = false;\n        properties = {\n          notLoaded: true\n        };\n      }\n      if (ready) {\n        properties = this._model.getServerProperties();\n        properties.isModified = this._model.isModified();\n        properties.url = window.location.href;\n      }\n\n      return properties;\n    },\n\n    /**\n     * Check if an attribute exist\n     *\n     * @param attributeId\n     * @return {boolean}\n     */\n    hasAttribute: function documentController_hasAttribute(attributeId) {\n      this._checkInitialisedModel();\n      var attribute = this._model.get(\"attributes\").get(attributeId);\n      return !!attribute;\n    },\n\n    /**\n     * Get the attribute interface object\n     * Return null if attribute not found\n     * @param attributeId\n     * @returns AttributeInterface|null\n     */\n    getAttribute: function documentControllerGetAttribute(attributeId) {\n      this._checkInitialisedModel();\n      var attributeModel = this._getAttributeModel(attributeId);\n      if (!attributeModel) {\n        return null;\n      }\n      return new AttributeInterface(this._getAttributeModel(attributeId));\n    },\n\n    /**\n     * Get all the attributes of the current document\n     *\n     * @returns [AttributeInterface]\n     */\n    getAttributes: function documentControllerGetAttributes() {\n      this._checkInitialisedModel();\n      return this._model\n        .get(\"attributes\")\n        .map(function documentController_mapAttribute(currentAttribute) {\n          return new AttributeInterface(currentAttribute);\n        });\n    },\n\n    /**\n     * Check if a menu exist\n     *\n     * @param menuId\n     * @return {boolean}\n     */\n    hasMenu: function documentController_hasMenu(menuId) {\n      this._checkInitialisedModel();\n      var menu = this._getMenuModel(menuId);\n      return !!menu;\n    },\n\n    /**\n     * Get the menu interface object\n     *\n     * @param menuId\n     * @returns MenuInterface\n     */\n    getMenu: function documentControllerGetMenu(menuId) {\n      this._checkInitialisedModel();\n      var menu = this._getMenuModel(menuId);\n      if (!menu) {\n        return null;\n      }\n      return new MenuInterface(menu);\n    },\n\n    /**\n     * Get all the menu of the current document\n     *\n     * @returns [MenuInterface]\n     */\n    getMenus: function documentControllerGetMenus() {\n      this._checkInitialisedModel();\n      return this._model\n        .get(\"menus\")\n        .map(function documentController_mapMenu(currentMenu) {\n          return new MenuInterface(currentMenu);\n        });\n    },\n\n    /**\n     * Select a tab\n     *\n     * @param tabId\n     * @returns void\n     */\n    selectTab: function documentControllerSelectTab(tabId) {\n      this._checkInitialisedModel();\n      var attributeModel = this._getAttributeModel(tabId);\n      if (!attributeModel) {\n        throw new Error('The attribute \"' + tabId + '\" cannot be found.');\n      }\n      if (attributeModel.get(\"type\") !== \"tab\") {\n        throw new Error('The attribute \"' + tabId + '\" is not a tab.');\n      }\n\n      this._model.trigger(\"doSelectTab\", tabId);\n    },\n\n    /**\n     * Draw tab content\n     *\n     * @param tabId\n     * @returns void\n     */\n    drawTab: function documentControllerDrawTab(tabId) {\n      this._checkInitialisedModel();\n      var attributeModel = this._getAttributeModel(tabId);\n      if (!attributeModel) {\n        throw new Error('The attribute \"' + tabId + '\" cannot be found.');\n      }\n      if (attributeModel.get(\"type\") !== \"tab\") {\n        throw new Error('The attribute \"' + tabId + '\" is not a tab.');\n      }\n\n      this._model.trigger(\"doDrawTab\", tabId);\n    },\n\n    /**\n     * Get an attribute value\n     *\n     * @param attributeId\n     * @param type string (current|previous|initial|all) what kind of value (default : current)\n     * @returns {*}\n     */\n    getValue: function documentControllerGetValue(attributeId, type) {\n      var attribute;\n      this._checkInitialisedModel();\n      var attributeModel = this._getAttributeModel(attributeId);\n      if (!attributeModel) {\n        return null;\n      }\n      attribute = new AttributeInterface(attributeModel);\n      return _.clone(attribute.getValue(type));\n    },\n\n    /**\n     * Get all the values\n     *\n     * @returns {*|{}}\n     */\n    getValues: function documentControllerGetValues() {\n      this._checkInitialisedModel();\n      return this._model.getValues();\n    },\n\n    /**\n     * Get customData from render view model\n     * @returns {*}\n     */\n    getCustomServerData: function documentControllerGetServerCustomData() {\n      this._checkInitialisedModel();\n      return this._model.get(\"customServerData\");\n    },\n    /**\n     * Add customData from render view model\n     * @returns {*}\n     */\n    addCustomClientData: function documentControllerAddCustomClientData(\n      documentCheck,\n      value\n    ) {\n      var currentWidget = this;\n      this._checkInitialisedModel();\n      //First case no data, so documentCheck is data\n      if (_.isUndefined(value)) {\n        value = documentCheck;\n        documentCheck = {};\n      }\n      //Second case documentCheck is a function and data is object\n      if (_.isFunction(documentCheck) && _.isObject(value)) {\n        documentCheck = { documentCheck: documentCheck };\n      }\n      //Third case documentCheck is an object and data is object => check if documentCheck property exist\n      if (_.isObject(value) && _.isObject(documentCheck)) {\n        documentCheck = _.defaults(documentCheck, {\n          documentCheck: function clientCustomOK() {\n            return true;\n          },\n          once: true\n        });\n      } else {\n        throw new Error(\n          \"Constraint must be an value or a function and a value\"\n        );\n      }\n      //Register the customClientData\n      _.each(value, function documentControllerAddCustomClientDataEach(\n        currentValue,\n        currentKey\n      ) {\n        currentWidget._customClientData[currentKey] = {\n          value: currentValue,\n          documentCheck: documentCheck.documentCheck,\n          once: documentCheck.once\n        };\n      });\n    },\n    /**\n     * Get customData from render view model\n     * @returns {*}\n     */\n    setCustomClientData: function documentControllerSetCustomClientData(\n      documentCheck,\n      value\n    ) {\n      console.error(\"this function (setCustomClientData) is deprecated\");\n      return this.addCustomClientData(documentCheck, value);\n    },\n    /**\n     * Get customData from render view model\n     * @returns {*}\n     */\n    getCustomClientData: function documentControllerSetCustomClientData(\n      deleteOnce\n    ) {\n      var values = {},\n        currentWidget = this,\n        $element,\n        properties,\n        newCustomData = {};\n      this._checkInitialisedModel();\n      properties = this.getProperties();\n      $element = $(currentWidget.element);\n      _.each(currentWidget._customClientData, function analyzeCustomClient(\n        currentCustom,\n        key\n      ) {\n        if (currentCustom.documentCheck.call($element, properties)) {\n          values[key] = currentCustom.value;\n          if (deleteOnce === true && !currentCustom.once) {\n            newCustomData[key] = currentCustom;\n          }\n        } else {\n          if (deleteOnce === true) {\n            newCustomData[key] = currentCustom;\n          }\n        }\n      });\n      if (deleteOnce === true) {\n        currentWidget._customClientData = newCustomData;\n      }\n      return values;\n    },\n\n    /**\n     * Delete a custom data\n     * @returns {*}\n     */\n    removeCustomClientData: function documentControllerRemoveCustomClientData(\n      key\n    ) {\n      if (this._customClientData[key]) {\n        delete this._customClientData[key];\n      }\n      return this;\n    },\n    /**\n     * Set a value\n     * Trigger a change event\n     *\n     * @param attributeId string attribute identifier\n     * @param value object { \"value\" : *, \"displayValue\" : *}\n     * @returns {*}\n     */\n    setValue: function documentControllerSetValue(attributeId, value) {\n      this._checkInitialisedModel();\n      var attributeModel = this._getAttributeModel(attributeId);\n      if (!attributeModel) {\n        throw new Error(\"Unable to find attribute \" + attributeId);\n      }\n      var attributeInterface = new AttributeInterface(attributeModel);\n      var index;\n      var currentValueLength;\n      var i;\n\n      if (attributeModel.getParent().get(\"type\") === \"array\") {\n        attributeInterface.setValue(value, true); // Just verify value conditions\n        if (!_.isArray(value)) {\n          index = value.index;\n        } else {\n          index = value.length - 1;\n        }\n        currentValueLength = attributeInterface.getValue().length;\n        attributeInterface.setValue(value);\n\n        // Pad values of complete array with default values\n        var arrayModel = attributeModel.getParent();\n        var modifiedColumns = {};\n        arrayModel.get(\"content\").each(function(aModel) {\n          var aValue = _.clone(aModel.get(\"attributeValue\"));\n          var defaultValue = aModel.get(\"defaultValue\");\n\n          if (!defaultValue) {\n            defaultValue = aModel.hasMultipleOption()\n              ? []\n              : { value: null, displayValue: \"\" };\n          }\n\n          for (i = currentValueLength; i <= index; i++) {\n            if (_.isUndefined(aValue[i])) {\n              aValue[i] = defaultValue;\n              modifiedColumns[aModel.id] = { model: aModel, values: aValue };\n            }\n          }\n        });\n\n        _.each(modifiedColumns, function documentControllerPadValues(modData) {\n          _.defer(function documentControllerPadValue() {\n            modData.model.set(\"attributeValue\", modData.values);\n          });\n        });\n\n        return;\n      }\n      return attributeInterface.setValue(value);\n    },\n\n    /**\n     * Add a row to an array\n     *\n     * @param attributeId string attribute array\n     * @param values object { \"attributeId\" : { \"value\" : *, \"displayValue\" : * }, ...}\n     */\n    appendArrayRow: function documentControllerAddArrayRow(\n      attributeId,\n      values\n    ) {\n      this._checkInitialisedModel();\n      var attribute = this._getAttributeModel(attributeId);\n\n      if (!attribute) {\n        throw new Error(\"Unable to find attribute \" + attributeId);\n      }\n\n      if (attribute.get(\"type\") !== \"array\") {\n        throw new Error(\n          \"Attribute \" + attributeId + \" must be an attribute of type array\"\n        );\n      }\n      if (!_.isObject(values)) {\n        throw new Error(\n          \"Values must be an object where each properties is an attribute of the array for \" +\n            attributeId\n        );\n      }\n      attribute\n        .get(\"content\")\n        .each(function documentController_addACell(currentAttribute) {\n          var newValue = values[currentAttribute.id];\n          var currentValue = currentAttribute.getValue();\n          if (_.isUndefined(newValue)) {\n            // Set default value if no value defined\n            currentAttribute.createIndexedValue(\n              currentValue.length,\n              false,\n              _.isEmpty(values)\n            );\n          } else {\n            newValue = _.defaults(newValue, {\n              value: \"\",\n              displayValue: newValue.value\n            });\n            currentAttribute.addValue(newValue);\n          }\n        });\n    },\n\n    /**\n     * Add a row before another row\n     *\n     * @param attributeId string attribute array\n     * @param values object { \"attributeId\" : { \"value\" : *, \"displayValue\" : * }, ...}\n     * @param index int index of the row\n     */\n    insertBeforeArrayRow: function documentControllerInsertBeforeArrayRow(\n      attributeId,\n      values,\n      index\n    ) {\n      this._checkInitialisedModel();\n      var attribute = this._getAttributeModel(attributeId),\n        maxValue;\n      if (!attribute) {\n        throw new Error(\"Unable to find attribute \" + attributeId);\n      }\n      if (attribute.get(\"type\") !== \"array\") {\n        throw new Error(\n          \"Attribute \" + attributeId + \" must be an attribute of type array\"\n        );\n      }\n      if (!_.isObject(values)) {\n        throw new Error(\n          \"Values must be an object where each properties is an attribute of the array for \" +\n            attributeId\n        );\n      }\n      maxValue = this._getMaxIndex(attribute);\n      if (index < 0 || index > maxValue) {\n        throw new Error(\"Index must be between 0 and \" + maxValue);\n      }\n      attribute\n        .get(\"content\")\n        .each(function documentController_addACell(currentAttribute) {\n          var currentValue = values[currentAttribute.id];\n          if (!_.isUndefined(currentValue)) {\n            currentValue = _.defaults(currentValue, {\n              value: \"\",\n              displayValue: currentValue.value\n            });\n          } else {\n            currentValue = currentAttribute.attributes.defaultValue;\n            if (!currentValue) {\n              currentValue = { value: \"\", displayValue: \"\" };\n            }\n          }\n          currentAttribute.addIndexedValue(currentValue, index);\n        });\n    },\n\n    /**\n     * Remove an array row\n     * @param attributeId string attribute array\n     * @param index int index of the row\n     */\n    removeArrayRow: function documentControllerRemoveArrayRow(\n      attributeId,\n      index\n    ) {\n      this._checkInitialisedModel();\n      var attribute = this._getAttributeModel(attributeId),\n        maxIndex;\n      if (!attribute) {\n        throw new Error(\"Unable to find attribute \" + attributeId);\n      }\n      if (attribute.get(\"type\") !== \"array\") {\n        throw Error(\n          \"Attribute \" + attributeId + \" must be an attribute of type array\"\n        );\n      }\n      maxIndex = this._getMaxIndex(attribute) - 1;\n      if (index < 0 || index > maxIndex) {\n        throw Error(\n          \"Index must be between 0 and \" + maxIndex + \" for \" + attributeId\n        );\n      }\n      attribute\n        .get(\"content\")\n        .each(function documentController_removeACell(currentAttribute) {\n          currentAttribute.removeIndexValue(index);\n        });\n      attribute.removeIndexedLine(index);\n    },\n\n    /**\n     * Add a constraint to the widget\n     *\n     * @param options object { \"name\" : string, \"documentCheck\": function}\n     * @param callback function callback called when the event is triggered\n     * @returns {*}\n     */\n    addConstraint: function documentControlleraddConstraint(options, callback) {\n      var currentConstraint,\n        currentWidget = this,\n        uniqueName;\n      if (_.isUndefined(callback) && _.isFunction(options)) {\n        callback = options;\n        options = {};\n      }\n      if (_.isObject(options) && _.isUndefined(callback)) {\n        if (!options.name) {\n          throw new Error(\n            \"When a constraint is initiated with a single object, this object needs to have the name property \".JSON.stringify(\n              options\n            )\n          );\n        }\n      } else {\n        _.defaults(options, {\n          documentCheck: function documentController_defaultDocumentCheck() {\n            return true;\n          },\n          attributeCheck: function documentController_defaultAttributeCheck() {\n            return true;\n          },\n          constraintCheck: callback,\n          name: _.uniqueId(\"constraint\"),\n          externalConstraint: false,\n          once: false\n        });\n      }\n      currentConstraint = options;\n      if (!_.isFunction(currentConstraint.constraintCheck)) {\n        throw new Error(\"An event need a callback\");\n      }\n      //If constraint is once : wrap it an callback that execute callback and delete it\n      if (currentConstraint.once === true) {\n        currentConstraint.eventCallback = _.wrap(\n          currentConstraint.constraintCheck,\n          function documentController_onceWrapper(callback) {\n            try {\n              callback.apply(this, _.rest(arguments));\n            } catch (e) {\n              console.error(e);\n            }\n            currentWidget.removeConstraint(\n              currentConstraint.name,\n              currentConstraint.externalConstraint\n            );\n          }\n        );\n      }\n      uniqueName =\n        (currentConstraint.externalConstraint ? \"external_\" : \"internal_\") +\n        currentConstraint.name;\n      this.options.constraintList[uniqueName] = currentConstraint;\n      this._initActivatedConstraint();\n      return currentConstraint.name;\n    },\n\n    /**\n     * List the constraint of the widget\n     *\n     * @returns {*}\n     */\n    listConstraints: function documentControllerListConstraint() {\n      return this.options.constraintList;\n    },\n\n    /**\n     * Remove a constraint of the widget\n     *\n     * @param constraintName\n     * @param allKind\n     * @returns {*}\n     */\n    removeConstraint: function documentControllerRemoveConstraint(\n      constraintName,\n      allKind\n    ) {\n      var removed = [],\n        newConstraintList,\n        constraintList,\n        testRegExp = new RegExp(\"\\\\\" + constraintName + \"$\");\n      // jscs:disable disallowImplicitTypeConversion\n      allKind = !!allKind;\n      // jscs:enable disallowImplicitTypeConversion\n      newConstraintList = _.filter(\n        this.options.constraintList,\n        function documentController_removeConstraint(currentConstrait) {\n          if (\n            (allKind || !currentConstrait.externalConstraint) &&\n            (currentConstrait.name === constraintName ||\n              testRegExp.test(currentConstrait.name))\n          ) {\n            removed.push(currentConstrait);\n            return false;\n          }\n          return true;\n        }\n      );\n      constraintList = {};\n      _.each(\n        newConstraintList,\n        function documentController_rebuildConstraintList(currentConstraint) {\n          var uniqueName =\n            (currentConstraint.externalConstraint ? \"external_\" : \"internal_\") +\n            currentConstraint.name;\n          constraintList[uniqueName] = currentConstraint;\n        }\n      );\n      this.options.constraintList = constraintList;\n      this._initActivatedConstraint();\n      return removed;\n    },\n\n    /**\n     * Add an event to the widget\n     *\n     * @param eventType string kind of event\n     * @param options object { \"name\" : string, \"documentCheck\": function}\n     * @param callback function callback called when the event is triggered\n     * @returns {*|Window.options.name}\n     */\n    addEventListener: function documentControllerAddEvent(\n      eventType,\n      options,\n      callback\n    ) {\n      var currentEvent,\n        currentWidget = this;\n      //options is not mandatory and the callback can be the second parameters\n      if (_.isUndefined(callback) && _.isFunction(options)) {\n        callback = options;\n        options = {};\n      }\n      // the first parameters can be the final object (chain removeEvent and addEvent)\n      if (\n        _.isObject(eventType) &&\n        _.isUndefined(options) &&\n        _.isUndefined(callback)\n      ) {\n        currentEvent = eventType;\n        if (!currentEvent.name) {\n          throw new Error(\n            \"When an event is initiated with a single object, this object needs to have the name property \" +\n              JSON.stringify(currentEvent)\n          );\n        }\n      } else {\n        currentEvent = _.defaults(options, {\n          name: _.uniqueId(\"event_\" + eventType),\n          eventType: eventType,\n          eventCallback: callback,\n          externalEvent: false,\n          once: false\n        });\n      }\n      // the eventType must be one the list\n      this._checkEventName(currentEvent.eventType);\n      // callback is mandatory and must be a function\n      if (!_.isFunction(currentEvent.eventCallback)) {\n        throw new Error(\"An event needs a callback that is a function\");\n      }\n      //If event is once : wrap it an callback that execute event and delete it\n      if (currentEvent.once === true) {\n        currentEvent.eventCallback = _.wrap(\n          currentEvent.eventCallback,\n          function documentController_onceWrapper(callback) {\n            currentWidget.removeEventListener(\n              currentEvent.name,\n              currentEvent.externalEvent\n            );\n            try {\n              callback.apply(this, _.rest(arguments));\n            } catch (e) {\n              console.error(e);\n            }\n          }\n        );\n      }\n      this._addAndInitNewEvents(currentEvent);\n      // return the name of the event\n      return currentEvent.name;\n    },\n\n    /**\n     * List of the events of the current widget\n     *\n     * @returns {*}\n     */\n    listEventListeners: function documentControllerListEvents() {\n      return this.options.eventListener;\n    },\n\n    /**\n     * Remove an event of the current widget\n     *\n     * @param eventName string can be an event name or a namespace\n     * @param allKind remove internal/external events\n     * @returns {*}\n     */\n    removeEventListener: function documentControllerRemoveEvent(\n      eventName,\n      allKind\n    ) {\n      var removed = [],\n        testRegExp = new RegExp(\"\\\\\" + eventName + \"$\"),\n        newList,\n        eventList;\n      // jscs:disable\n      allKind = !!allKind;\n      // jscs:enable\n      newList = _.filter(\n        this.options.eventListener,\n        function documentController_removeCurrentEvent(currentEvent) {\n          if (\n            (allKind || !currentEvent.externalEvent) &&\n            (currentEvent.name === eventName ||\n              testRegExp.test(currentEvent.name))\n          ) {\n            removed.push(currentEvent);\n            return false;\n          }\n          return true;\n        }\n      );\n      eventList = {};\n      _.each(newList, function documentController__rebuildEventList(\n        currentEvent\n      ) {\n        var uniqueName =\n          (currentEvent.externalEvent ? \"external_\" : \"internal_\") +\n          currentEvent.name;\n        eventList[uniqueName] = currentEvent;\n      });\n      this.options.eventListener = eventList;\n      this._initActivatedEventListeners({ launchReady: false });\n      return removed;\n    },\n\n    /**\n     * Trigger an event\n     *\n     * @param eventName\n     */\n    triggerEvent: function documentController_triggerEvent(eventName) {\n      var args = _.toArray(arguments);\n      this._checkInitialisedModel();\n      this._checkEventName(eventName);\n\n      args.splice(1, 0, null); // Add null originalEvent\n      return this._triggerControllerEvent.apply(this, args);\n    },\n\n    /**\n     * Hide a visible attribute\n     *\n     * @param attributeId\n     */\n    hideAttribute: function documentControllerHideAttribute(attributeId) {\n      this._checkInitialisedView();\n      var attributeModel = this._getAttributeModel(attributeId);\n      if (!attributeModel) {\n        console.error(\"Unable find and hide the attribute \" + attributeId);\n        return;\n      }\n      attributeModel.trigger(\"hide\");\n    },\n    /**\n     * show a visible attribute (previously hidden)\n     *\n     * @param attributeId\n     */\n    showAttribute: function documentControllerShowAttribute(attributeId) {\n      this._checkInitialisedView();\n      var attributeModel = this._getAttributeModel(attributeId);\n      if (!attributeModel) {\n        console.error(\"Unable find and show the attribute \" + attributeId);\n        return;\n      }\n      attributeModel.trigger(\"show\");\n    },\n\n    /**\n     * Display a message to the user\n     *\n     * @param message\n     */\n    showMessage: function documentControllerShowMessage(message) {\n      this._checkInitialisedView();\n      if (_.isString(message)) {\n        message = {\n          type: \"info\",\n          message: message\n        };\n      }\n      if (_.isObject(message)) {\n        message = _.defaults(message, {\n          type: \"info\"\n        });\n      }\n      this.$notification.dcpNotification(\"show\", message.type, message);\n    },\n\n    /**\n     * Display loading bar\n     *\n     * @param message\n     * @param px\n     */\n    maskDocument: function documentController(message, px) {\n      this.$loading.dcpLoading(\"show\");\n      if (message) {\n        this.$loading.dcpLoading(\"setTitle\", message);\n      }\n      if (px) {\n        this.$loading.dcpLoading(\"setPercent\", px);\n      }\n    },\n\n    /**\n     * Hide loading bar\n     */\n    unmaskDocument: function documentController_unmaskDocument(force) {\n      this.$loading.dcpLoading(\"hide\", force);\n    },\n\n    /**\n     * Add an error message to an attribute\n     *\n     * @param attributeId\n     * @param message\n     * @param index\n     */\n    setAttributeErrorMessage: function documentControllersetAttributeErrorMessage(\n      attributeId,\n      message,\n      index\n    ) {\n      this._checkInitialisedView();\n      var attributeModel = this._getAttributeModel(attributeId);\n      if (!attributeModel) {\n        console.error(\"Unable find and show the attribute \" + attributeId);\n        return;\n      }\n      attributeModel.setErrorMessage(message, index);\n    },\n\n    /**\n     * Clean the error message of an attribute\n     *\n     * @param attributeId\n     * @param index\n     */\n    cleanAttributeErrorMessage: function documentControllercleanAttributeErrorMessage(\n      attributeId,\n      index\n    ) {\n      this._checkInitialisedView();\n      var attributeModel = this._getAttributeModel(attributeId);\n      if (!attributeModel) {\n        console.error(\"Unable find and show the attribute \" + attributeId);\n        return;\n      }\n      attributeModel.setErrorMessage(null, index);\n    },\n\n    injectCSS: function documentController_injectCSS(cssToInject) {\n      this._checkInitialisedView();\n      if (!_.isArray(cssToInject) && !_.isString(cssToInject)) {\n        throw new Error(\n          \"The css to inject must be an array string or a string\"\n        );\n      }\n      if (_.isString(cssToInject)) {\n        cssToInject = [cssToInject];\n      }\n\n      this._model.injectCSS(cssToInject);\n    },\n\n    injectJS: function documentController_injectCSS(jsToInject) {\n      this._checkInitialisedView();\n      if (!_.isArray(jsToInject) && !_.isString(jsToInject)) {\n        throw new Error(\"The js to inject must be an array string or a string\");\n      }\n      if (_.isString(jsToInject)) {\n        jsToInject = [jsToInject];\n      }\n\n      return this._model.injectJS(jsToInject);\n    },\n    /**\n     * tryToDestroy the widget\n     *\n     * @return Promise\n     */\n    tryToDestroy: function documentController_tryToDestroy() {\n      var currentWidget = this;\n      return new Promise(function documentController_promiseDestroy(\n        resolve,\n        reject\n      ) {\n        var event = { prevent: false };\n        if (!currentWidget._model) {\n          resolve();\n          return;\n        }\n        if (\n          currentWidget._model &&\n          currentWidget._model.isModified() &&\n          !window.confirm(\n            currentWidget._model.get(\"properties\").get(\"title\") +\n              \"\\n\" +\n              i18n.___(\n                \"The form has been modified without saving, do you want to close it ?\",\n                \"ddui\"\n              )\n          )\n        ) {\n          reject(\"Unable to destroy because user refuses it\");\n          return;\n        }\n        event.prevent = !currentWidget._triggerControllerEvent(\n          \"beforeClose\",\n          null,\n          currentWidget._model.getServerProperties()\n        );\n        if (event.prevent) {\n          reject(\"Unable to destroy because before close refuses it\");\n          return;\n        }\n        resolve();\n      });\n    }\n  });\n\n  return $.fn.documentController;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2Q0MmMwOWNiNTI5NGUxOGNkYTguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdmVuZG9yL0FuYWtlZW4vRE9DVU1FTlQvSUhNL3dpZGdldHMvZG9jdW1lbnRDb250cm9sbGVyL2RvY3VtZW50Q29udHJvbGxlci5qcz8zNmUyIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIGdsb2JhbCBkZWZpbmUsIGNvbnNvbGUgKi9cbmRlZmluZShbXG4gIFwianF1ZXJ5XCIsXG4gIFwidW5kZXJzY29yZVwiLFxuICBcImJhY2tib25lXCIsXG4gIFwiZGNwRG9jdW1lbnQvcm91dGVycy9yb3V0ZXJcIixcbiAgXCJkY3BEb2N1bWVudC9tb2RlbHMvbURvY3VtZW50XCIsXG4gIFwiZGNwRG9jdW1lbnQvY29udHJvbGxlck9iamVjdHMvYXR0cmlidXRlSW50ZXJmYWNlXCIsXG4gIFwiZGNwRG9jdW1lbnQvY29udHJvbGxlck9iamVjdHMvbWVudUludGVyZmFjZVwiLFxuICBcImRjcERvY3VtZW50L2NvbnRyb2xsZXJPYmplY3RzL3RyYW5zaXRpb25JbnRlcmZhY2VcIixcbiAgXCJkY3BEb2N1bWVudC92aWV3cy9kb2N1bWVudC92RG9jdW1lbnRcIixcbiAgXCJkY3BEb2N1bWVudC9tb2RlbHMvbVRyYW5zaXRpb25cIixcbiAgXCJkY3BEb2N1bWVudC92aWV3cy93b3JrZmxvdy92VHJhbnNpdGlvblwiLFxuICBcImRjcERvY3VtZW50L21vZGVscy9tTWVudVwiLFxuICBcImRjcERvY3VtZW50L2kxOG4vZG9jdW1lbnRDYXRhbG9nXCIsXG4gIFwiZGNwRG9jdW1lbnQvd2lkZ2V0cy93aWRnZXRcIixcbiAgXCJkY3BEb2N1bWVudC93aWRnZXRzL3dpbmRvdy93Q29uZmlybVwiLFxuICBcImRjcERvY3VtZW50L3dpZGdldHMvd2luZG93L3dMb2FkaW5nXCIsXG4gIFwiZGNwRG9jdW1lbnQvd2lkZ2V0cy93aW5kb3cvd05vdGlmaWNhdGlvblwiXG5dLCBmdW5jdGlvbiBkb2N1bWVudENvbnRyb2xsZXIoXG4gICQsXG4gIF8sXG4gIEJhY2tib25lLFxuICBSb3V0ZXIsXG4gIERvY3VtZW50TW9kZWwsXG4gIEF0dHJpYnV0ZUludGVyZmFjZSxcbiAgTWVudUludGVyZmFjZSxcbiAgVHJhbnNpdGlvbkludGVyZmFjZSxcbiAgRG9jdW1lbnRWaWV3LFxuICBUcmFuc2l0aW9uTW9kZWwsXG4gIFRyYW5zaXRpb25WaWV3LFxuICBNZW51TW9kZWwsXG4gIGkxOG5cbikge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgRXJyb3JNb2RlbE5vbkluaXRpYWxpemVkID0gZnVuY3Rpb24gRXJyb3JNb2RlbE5vbkluaXRpYWxpemVkKG1lc3NhZ2UpIHtcbiAgICB0aGlzLm5hbWUgPSBcIkVycm9yTW9kZWxOb25Jbml0aWFsaXplZFwiO1xuICAgIHRoaXMubWVzc2FnZSA9XG4gICAgICBtZXNzYWdlIHx8XG4gICAgICBcIlRoZSB3aWRnZXQgbW9kZWwgaXMgbm90IGluaXRpYWxpemVkLCB1c2UgZmV0Y2hEb2N1bWVudCB0byBpbml0aWFsaXNlIGl0LlwiO1xuICAgIHRoaXMuc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgfTtcbiAgRXJyb3JNb2RlbE5vbkluaXRpYWxpemVkLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlKTtcbiAgRXJyb3JNb2RlbE5vbkluaXRpYWxpemVkLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEVycm9yTW9kZWxOb25Jbml0aWFsaXplZDtcblxuICB2YXIgZXZlbnRMaXN0ID0gW1xuICAgIFwiYmVmb3JlUmVuZGVyXCIsXG4gICAgXCJyZWFkeVwiLFxuICAgIFwiY2hhbmdlXCIsXG4gICAgXCJkaXNwbGF5TWVzc2FnZVwiLFxuICAgIFwiZGlzcGxheUVycm9yXCIsXG4gICAgXCJ2YWxpZGF0ZVwiLFxuICAgIFwiYXR0cmlidXRlQmVmb3JlUmVuZGVyXCIsXG4gICAgXCJhdHRyaWJ1dGVSZWFkeVwiLFxuICAgIFwiYXR0cmlidXRlSGVscGVyU2VhcmNoXCIsXG4gICAgXCJhdHRyaWJ1dGVIZWxwZXJSZXNwb25zZVwiLFxuICAgIFwiYXR0cmlidXRlSGVscGVyU2VsZWN0XCIsXG4gICAgXCJhdHRyaWJ1dGVBcnJheUNoYW5nZVwiLFxuICAgIFwiYWN0aW9uQ2xpY2tcIixcbiAgICBcImF0dHJpYnV0ZUFuY2hvckNsaWNrXCIsXG4gICAgXCJiZWZvcmVDbG9zZVwiLFxuICAgIFwiY2xvc2VcIixcbiAgICBcImJlZm9yZVNhdmVcIixcbiAgICBcImFmdGVyU2F2ZVwiLFxuICAgIFwiYXR0cmlidXRlRG93bmxvYWRGaWxlXCIsXG4gICAgXCJhdHRyaWJ1dGVVcGxvYWRGaWxlXCIsXG4gICAgXCJhdHRyaWJ1dGVVcGxvYWRGaWxlRG9uZVwiLFxuICAgIFwiYmVmb3JlRGVsZXRlXCIsXG4gICAgXCJhZnRlckRlbGV0ZVwiLFxuICAgIFwiYmVmb3JlUmVzdG9yZVwiLFxuICAgIFwiYWZ0ZXJSZXN0b3JlXCIsXG4gICAgXCJmYWlsVHJhbnNpdGlvblwiLFxuICAgIFwic3VjY2Vzc1RyYW5zaXRpb25cIixcbiAgICBcImF0dHJpYnV0ZUJlZm9yZVRhYlNlbGVjdFwiLFxuICAgIFwiYXR0cmlidXRlQWZ0ZXJUYWJTZWxlY3RcIixcbiAgICBcImF0dHJpYnV0ZVRhYkNoYW5nZVwiLFxuICAgIFwiYmVmb3JlRGlzcGxheVRyYW5zaXRpb25cIixcbiAgICBcImFmdGVyRGlzcGxheVRyYW5zaXRpb25cIixcbiAgICBcImJlZm9yZVRyYW5zaXRpb25cIixcbiAgICBcImJlZm9yZVRyYW5zaXRpb25DbG9zZVwiLFxuICAgIFwiZGVzdHJveVwiLFxuICAgIFwiYXR0cmlidXRlQ3JlYXRlRGlhbG9nRG9jdW1lbnRCZWZvcmVTZXRGb3JtVmFsdWVzXCIsXG4gICAgXCJhdHRyaWJ1dGVDcmVhdGVEaWFsb2dEb2N1bWVudEJlZm9yZVNldFRhcmdldFZhbHVlXCIsXG4gICAgXCJhdHRyaWJ1dGVDcmVhdGVEaWFsb2dEb2N1bWVudFJlYWR5XCIsXG4gICAgXCJhdHRyaWJ1dGVDcmVhdGVEaWFsb2dEb2N1bWVudEJlZm9yZUNsb3NlXCIsXG4gICAgXCJhdHRyaWJ1dGVDcmVhdGVEaWFsb2dEb2N1bWVudEJlZm9yZURlc3Ryb3lcIlxuICBdO1xuXG4gICQud2lkZ2V0KFwiZGNwLmRvY3VtZW50Q29udHJvbGxlclwiLCB7XG4gICAgb3B0aW9uczoge1xuICAgICAgZXZlbnRQcmVmaXg6IFwiZG9jdW1lbnRcIixcbiAgICAgIGluaXRpZDogbnVsbCxcbiAgICAgIHZpZXdJZDogdW5kZWZpbmVkLFxuICAgICAgcmV2aXNpb246IHVuZGVmaW5lZCxcbiAgICAgIGNvbnN0cmFpbnRMaXN0OiBbXSxcbiAgICAgIGV2ZW50TGlzdGVuZXI6IFtdLFxuICAgICAgX21vZGVsOiBudWxsLFxuICAgICAgYWN0aXZhdGVkQ29uc3RyYWludDoge30sXG4gICAgICBhY3RpdmF0ZWRFdmVudExpc3RlbmVyOiB7fSxcbiAgICAgIF9pbml0aWFsaXplZE1vZGVsOiBmYWxzZSxcbiAgICAgIF9pbml0aWFsaXplZFZpZXc6IGZhbHNlXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSB3aWRnZXRcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9jcmVhdGU6IGZ1bmN0aW9uIGRvY3VtZW50Q29udHJvbGxlcl9jcmVhdGUoKSB7XG4gICAgICB0aGlzLm9wdGlvbnMuY29uc3RyYWludExpc3QgPSB7fTtcbiAgICAgIHRoaXMub3B0aW9ucy5ldmVudExpc3RlbmVyID0ge307XG4gICAgICB0aGlzLmFjdGl2YXRlZENvbnN0cmFpbnQgPSB7fTtcbiAgICAgIHRoaXMuYWN0aXZhdGVkRXZlbnRMaXN0ZW5lciA9IHt9O1xuICAgICAgdGhpcy5faW5pdGlhbGl6ZWRNb2RlbCA9IGZhbHNlO1xuICAgICAgdGhpcy5faW5pdGlhbGl6ZWRWaWV3ID0gZmFsc2U7XG4gICAgICB0aGlzLl9jdXN0b21DbGllbnREYXRhID0ge307XG4gICAgICBpZiAoIXRoaXMub3B0aW9ucy5pbml0aWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5faW5pdGlhbGl6ZVdpZGdldCh7fSwgdGhpcy5vcHRpb25zLmN1c3RvbUNsaWVudERhdGEpO1xuICAgICAgdGhpcy5fc3VwZXIoKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRGVsZXRlIHRoZSB3aWRnZXRcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9kZXN0cm95OiBmdW5jdGlvbiBkb2N1bWVudENvbnRyb2xsZXJfZGVzdHJveSgpIHtcbiAgICAgIHRoaXMuX3RyaWdnZXJDb250cm9sbGVyRXZlbnQoXCJkZXN0cm95XCIsIG51bGwsIHRoaXMuZ2V0UHJvcGVydGllcygpKTtcbiAgICAgIHRoaXMub3B0aW9ucy5jb25zdHJhaW50TGlzdCA9IHt9O1xuICAgICAgdGhpcy5vcHRpb25zLmV2ZW50TGlzdGVuZXIgPSB7fTtcbiAgICAgIHRoaXMuYWN0aXZhdGVkQ29uc3RyYWludCA9IHt9O1xuICAgICAgdGhpcy5hY3RpdmF0ZWRFdmVudExpc3RlbmVyID0ge307XG4gICAgICB0aGlzLl9pbml0aWFsaXplZE1vZGVsID0gZmFsc2U7XG4gICAgICB0aGlzLl9pbml0aWFsaXplZFZpZXcgPSBmYWxzZTtcbiAgICAgIHRoaXMuZWxlbWVudC5yZW1vdmVEYXRhKFwiZG9jdW1lbnRcIik7XG4gICAgICBpZiAodGhpcy5fbW9kZWwpIHtcbiAgICAgICAgdGhpcy5fbW9kZWwudHJpZ2dlcihcImRlc3Ryb3lcIik7XG4gICAgICB9XG4gICAgICB0aGlzLl90cmlnZ2VyKFwiZGVzdHJveVwiKTtcbiAgICAgIHRoaXMuX3N1cGVyKCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemUgdGhlIHdpZGdldFxuICAgICAqXG4gICAgICogQ3JlYXRlIE1vZGVsLCBpbml0Vmlld1xuICAgICAqXG4gICAgICogQHBhcmFtIG9wdGlvbnMgb2JqZWN0IHtcInN1Y2Nlc3NcIjogZmN0LCBcImVycm9yXCIsIGZjdH1cbiAgICAgKiBAcGFyYW0gY3VzdG9tQ2xpZW50RGF0YSBvYmplY3RcbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2luaXRpYWxpemVXaWRnZXQ6IGZ1bmN0aW9uIGRvY3VtZW50Q29udHJvbGxlcl9pbml0aWFsaXplV2lkZ2V0KFxuICAgICAgb3B0aW9ucyxcbiAgICAgIGN1c3RvbUNsaWVudERhdGFcbiAgICApIHtcbiAgICAgIHZhciBwcm9taXNlLFxuICAgICAgICBjdXJyZW50V2lkZ2V0ID0gdGhpcyxcbiAgICAgICAgaW5pdGlhbGl6ZVN1Y2Nlc3MgPSBmdW5jdGlvbiBkb2N1bWVudENvbnRyb2xsZXJfaW5pdGlhbGl6ZVN1Y2Nlc3MoKSB7XG4gICAgICAgICAgY3VycmVudFdpZGdldC5faW5pdGlhbGl6ZWRNb2RlbCA9IHRydWU7XG4gICAgICAgIH07XG4gICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgIHRoaXMuX2luaXRFeHRlcm5hbEVsZW1lbnRzKCk7XG4gICAgICB0aGlzLl9pbml0TW9kZWwodGhpcy5fZ2V0TW9kZWxWYWx1ZSgpKTtcbiAgICAgIHRoaXMuX2luaXRWaWV3KCk7XG4gICAgICBpZiAob3B0aW9ucy5zdWNjZXNzKSB7XG4gICAgICAgIG9wdGlvbnMuc3VjY2VzcyA9IF8ud3JhcChcbiAgICAgICAgICBvcHRpb25zLnN1Y2Nlc3MsXG4gICAgICAgICAgZnVuY3Rpb24gZG9jdW1lbnRDb250cm9sbGVyX2ZldGNoU3VjY2VzcyhzdWNjZXNzKSB7XG4gICAgICAgICAgICBpbml0aWFsaXplU3VjY2Vzcy5hcHBseSh0aGlzLCBfLnJlc3QoYXJndW1lbnRzKSk7XG4gICAgICAgICAgICByZXR1cm4gc3VjY2Vzcy5hcHBseSh0aGlzLCBfLnJlc3QoYXJndW1lbnRzKSk7XG4gICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKGN1c3RvbUNsaWVudERhdGEpIHtcbiAgICAgICAgdGhpcy5fbW9kZWwuX2N1c3RvbUNsaWVudERhdGEgPSBjdXN0b21DbGllbnREYXRhO1xuICAgICAgfVxuICAgICAgcHJvbWlzZSA9IHRoaXMuX21vZGVsLmZldGNoRG9jdW1lbnQodGhpcy5fZ2V0TW9kZWxWYWx1ZSgpLCBvcHRpb25zKTtcbiAgICAgIGlmICghb3B0aW9ucy5zdWNjZXNzKSB7XG4gICAgICAgIHByb21pc2UudGhlbihpbml0aWFsaXplU3VjY2Vzcyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2luaXRSb3V0ZXIoeyB1c2VIaXN0b3J5OiAhdGhpcy5vcHRpb25zLm5vUm91dGVyIH0pO1xuXG4gICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJuIGVzc2VudGlhbCBlbGVtZW50IG9mIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2dldE1vZGVsVmFsdWU6IGZ1bmN0aW9uIGRvY3VtZW50Q29udHJvbGxlcl9nZXRNb2RlbFZhbHVlKCkge1xuICAgICAgcmV0dXJuIF8ucGljayh0aGlzLm9wdGlvbnMsIFwiaW5pdGlkXCIsIFwidmlld0lkXCIsIFwicmV2aXNpb25cIik7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlIHRoZSBkb20gd2hlcmUgdGhlIHZpZXcgaXMgaW5zZXJ0ZWRcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9pbml0RG9tOiBmdW5jdGlvbiBkb2N1bWVudENvbnRyb2xsZXJfaW5pdERvbSgpIHtcbiAgICAgIHZhciAkZG9jdW1lbnQgPSB0aGlzLmVsZW1lbnQuZmluZChcIi5kY3BEb2N1bWVudFwiKTtcbiAgICAgIGlmICghdGhpcy4kZG9jdW1lbnQgfHwgJGRvY3VtZW50Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICB0aGlzLmVsZW1lbnQuYXBwZW5kKCc8ZGl2IGNsYXNzPVwiZGNwRG9jdW1lbnRcIj48L2Rpdj4nKTtcbiAgICAgICAgdGhpcy4kZG9jdW1lbnQgPSB0aGlzLmVsZW1lbnQuZmluZChcIi5kY3BEb2N1bWVudFwiKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogSW5pdCB0aGUgbW9kZWwgYW5kIGJpbmQgdGhlIGV2ZW50c1xuICAgICAqXG4gICAgICogQHBhcmFtIGluaXRpYWxWYWx1ZVxuICAgICAqIEByZXR1cm5zIERvY3VtZW50TW9kZWxcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9pbml0TW9kZWw6IGZ1bmN0aW9uIGRvY3VtZW50Q29udHJvbGxlcl9pbml0TW9kZWwoaW5pdGlhbFZhbHVlKSB7XG4gICAgICB2YXIgbW9kZWw7XG5cbiAgICAgIC8vRG9uJ3QgcmVpbml0IHRoZSBtb2RlbFxuICAgICAgaWYgKCF0aGlzLl9tb2RlbCkge1xuICAgICAgICBtb2RlbCA9IG5ldyBEb2N1bWVudE1vZGVsKGluaXRpYWxWYWx1ZSk7XG4gICAgICAgIHRoaXMuX21vZGVsID0gbW9kZWw7XG4gICAgICAgIHRoaXMuX2luaXRNb2RlbEV2ZW50cygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fcmVpbml0TW9kZWwoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBtb2RlbDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogSW5pdCB0aGUgdmlldyBhbmQgYmluZCB0aGUgZXZlbnRzXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBEb2N1bWVudFZpZXdcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9pbml0VmlldzogZnVuY3Rpb24gZG9jdW1lbnRDb250cm9sbGVyX2luaXRWaWV3KCkge1xuICAgICAgdmFyIGRvY3VtZW50VmlldztcbiAgICAgIC8vL0Rvbid0IHJlaW5pdCB2aWV3XG4gICAgICBpZiAoIXRoaXMudmlldykge1xuICAgICAgICB0aGlzLl9pbml0RG9tKCk7XG4gICAgICAgIGRvY3VtZW50VmlldyA9IG5ldyBEb2N1bWVudFZpZXcoe1xuICAgICAgICAgIG1vZGVsOiB0aGlzLl9tb2RlbCxcbiAgICAgICAgICBlbDogdGhpcy4kZG9jdW1lbnRbMF1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudmlldyA9IGRvY3VtZW50VmlldztcbiAgICAgICAgdGhpcy5faW5pdFZpZXdFdmVudHMoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLnZpZXc7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENsZWFyIGFuZCByZWluaXQgdGhlIG1vZGVsIHdpdGggY3VycmVudCB3aWRnZXQgdmFsdWVzXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9yZWluaXRNb2RlbDogZnVuY3Rpb24gZG9jdW1lbnRDb250cm9sbGVyX3JlaW5pdE1vZGVsKCkge1xuICAgICAgdGhpcy5fbW9kZWwuc2V0KHRoaXMuX2dldE1vZGVsVmFsdWUoKSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEluaXQgdGhlIGV4dGVybmFsIGVsZW1lbnRzIChsb2FkaW5nIGJhciBhbmQgbm90aWZpY2F0aW9uIHdpZGdldClcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9pbml0RXh0ZXJuYWxFbGVtZW50czogZnVuY3Rpb24gZG9jdW1lbnRDb250cm9sbGVyX2luaXRFeHRlcm5hbEVsZW1lbnRzKCkge1xuICAgICAgdGhpcy4kbG9hZGluZyA9ICQoXCIuZGNwTG9hZGluZ1wiKS5kY3BMb2FkaW5nKCk7XG4gICAgICB0aGlzLiRub3RpZmljYXRpb24gPSAkKFwiYm9keVwiKS5kY3BOb3RpZmljYXRpb24od2luZG93LmRjcC5ub3RpZmljYXRpb25zKTsgLy8gYWN0aXZlIG5vdGlmaWNhdGlvblxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBCaW5kIHRoZSBtb2RlbCBldmVudFxuICAgICAqXG4gICAgICogUmUtdHJpZ2dlciB0aGUgZXZlbnRcbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2luaXRNb2RlbEV2ZW50czogZnVuY3Rpb24gZG9jdW1lbnRDb250cm9sbGVyX2luaXRFdmVudHMoKSB7XG4gICAgICB2YXIgY3VycmVudFdpZGdldCA9IHRoaXM7XG4gICAgICB0aGlzLl9tb2RlbC5saXN0ZW5UbyhcbiAgICAgICAgdGhpcy5fbW9kZWwsXG4gICAgICAgIFwiaW52YWxpZFwiLFxuICAgICAgICBmdW5jdGlvbiBkb2N1bWVudENvbnRyb2xsZXJfdHJpZ2dlclNob3dJbnZhbGlkKG1vZGVsLCBlcnJvcikge1xuICAgICAgICAgIHZhciByZXN1bHQgPSBjdXJyZW50V2lkZ2V0Ll90cmlnZ2VyQ29udHJvbGxlckV2ZW50KFxuICAgICAgICAgICAgXCJkaXNwbGF5RXJyb3JcIixcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBjdXJyZW50V2lkZ2V0LmdldFByb3BlcnRpZXMoKSxcbiAgICAgICAgICAgIGVycm9yXG4gICAgICAgICAgKTtcbiAgICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICBjdXJyZW50V2lkZ2V0LiRub3RpZmljYXRpb24uZGNwTm90aWZpY2F0aW9uKFwic2hvd0Vycm9yXCIsIGVycm9yKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgICB0aGlzLl9tb2RlbC5saXN0ZW5UbyhcbiAgICAgICAgdGhpcy5fbW9kZWwsXG4gICAgICAgIFwic2hvd0Vycm9yXCIsXG4gICAgICAgIGZ1bmN0aW9uIGRvY3VtZW50Q29udHJvbGxlcl90cmlnZ2VyU2hvd0Vycm9yKGVycm9yKSB7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IGN1cnJlbnRXaWRnZXQuX3RyaWdnZXJDb250cm9sbGVyRXZlbnQoXG4gICAgICAgICAgICBcImRpc3BsYXlFcnJvclwiLFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIGN1cnJlbnRXaWRnZXQuZ2V0UHJvcGVydGllcygpLFxuICAgICAgICAgICAgZXJyb3JcbiAgICAgICAgICApO1xuICAgICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgIGN1cnJlbnRXaWRnZXQuJG5vdGlmaWNhdGlvbi5kY3BOb3RpZmljYXRpb24oXCJzaG93RXJyb3JcIiwgZXJyb3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgKTtcbiAgICAgIHRoaXMuX21vZGVsLmxpc3RlblRvKFxuICAgICAgICB0aGlzLl9tb2RlbCxcbiAgICAgICAgXCJzaG93TWVzc2FnZVwiLFxuICAgICAgICBmdW5jdGlvbiBkb2N1bWVudENvbnRyb2xsZXJfdHJpZ2dlclNob3dNZXNzYWdlKG1zZykge1xuICAgICAgICAgIHZhciByZXN1bHQgPSBjdXJyZW50V2lkZ2V0Ll90cmlnZ2VyQ29udHJvbGxlckV2ZW50KFxuICAgICAgICAgICAgXCJkaXNwbGF5TWVzc2FnZVwiLFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIGN1cnJlbnRXaWRnZXQuZ2V0UHJvcGVydGllcygpLFxuICAgICAgICAgICAgbXNnXG4gICAgICAgICAgKTtcbiAgICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICBjdXJyZW50V2lkZ2V0LiRub3RpZmljYXRpb24uZGNwTm90aWZpY2F0aW9uKFwic2hvd1wiLCBtc2cudHlwZSwgbXNnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgICB0aGlzLl9tb2RlbC5saXN0ZW5UbyhcbiAgICAgICAgdGhpcy5fbW9kZWwsXG4gICAgICAgIFwicmVsb2FkXCIsXG4gICAgICAgIGZ1bmN0aW9uIGRvY3VtZW50Q29udHJvbGxlcl90cmlnZ2VyUmVpbml0KCkge1xuICAgICAgICAgIC8vIGN1cnJlbnRXaWRnZXQuX2luaXRNb2RlbChjdXJyZW50V2lkZ2V0Ll9nZXRNb2RlbFZhbHVlKCkpO1xuICAgICAgICAgIC8vIGN1cnJlbnRXaWRnZXQuX2luaXRWaWV3KCk7XG4gICAgICAgICAgY3VycmVudFdpZGdldC5fbW9kZWwuZmV0Y2hEb2N1bWVudCgpO1xuICAgICAgICB9XG4gICAgICApO1xuICAgICAgdGhpcy5fbW9kZWwubGlzdGVuVG8oXG4gICAgICAgIHRoaXMuX21vZGVsLFxuICAgICAgICBcInN5bmNcIixcbiAgICAgICAgZnVuY3Rpb24gZG9jdW1lbnRDb250cm9sbGVyX3RyaWdnZXJTeW5jKCkge1xuICAgICAgICAgIGN1cnJlbnRXaWRnZXQuX2luaXRpYWxpemVkTW9kZWwgPSB0cnVlO1xuICAgICAgICAgIGN1cnJlbnRXaWRnZXQub3B0aW9ucy5pbml0aWQgPSBjdXJyZW50V2lkZ2V0Ll9tb2RlbC5pZDtcbiAgICAgICAgICBjdXJyZW50V2lkZ2V0Lm9wdGlvbnMudmlld0lkID0gY3VycmVudFdpZGdldC5fbW9kZWwuZ2V0KFwidmlld0lkXCIpO1xuICAgICAgICAgIGN1cnJlbnRXaWRnZXQub3B0aW9ucy5yZXZpc2lvbiA9IGN1cnJlbnRXaWRnZXQuX21vZGVsLmdldChcInJldmlzaW9uXCIpO1xuICAgICAgICAgIGN1cnJlbnRXaWRnZXQuZWxlbWVudC5kYXRhKFxuICAgICAgICAgICAgXCJkb2N1bWVudFwiLFxuICAgICAgICAgICAgY3VycmVudFdpZGdldC5fZ2V0TW9kZWxWYWx1ZSgpXG4gICAgICAgICAgKTtcbiAgICAgICAgICBjdXJyZW50V2lkZ2V0Ll9pbml0QWN0aXZhdGVkQ29uc3RyYWludCgpO1xuICAgICAgICAgIGN1cnJlbnRXaWRnZXQuX2luaXRBY3RpdmF0ZWRFdmVudExpc3RlbmVycyh7IGxhdW5jaFJlYWR5OiBmYWxzZSB9KTtcbiAgICAgICAgfVxuICAgICAgKTtcbiAgICAgIHRoaXMuX21vZGVsLmxpc3RlblRvKFxuICAgICAgICB0aGlzLl9tb2RlbCxcbiAgICAgICAgXCJiZWZvcmVSZW5kZXJcIixcbiAgICAgICAgZnVuY3Rpb24gZG9jdW1lbnRDb250cm9sbGVyX3RyaWdnZXJCZWZvcmVSZW5kZXIoZXZlbnQpIHtcbiAgICAgICAgICBldmVudC5wcmV2ZW50ID0gIWN1cnJlbnRXaWRnZXQuX3RyaWdnZXJDb250cm9sbGVyRXZlbnQoXG4gICAgICAgICAgICBcImJlZm9yZVJlbmRlclwiLFxuICAgICAgICAgICAgZXZlbnQsXG4gICAgICAgICAgICBjdXJyZW50V2lkZ2V0LmdldFByb3BlcnRpZXMoKSxcbiAgICAgICAgICAgIGN1cnJlbnRXaWRnZXQuX21vZGVsLmdldE1vZGVsUHJvcGVydGllcygpXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgKTtcbiAgICAgIHRoaXMuX21vZGVsLmxpc3RlblRvKFxuICAgICAgICB0aGlzLl9tb2RlbCxcbiAgICAgICAgXCJiZWZvcmVDbG9zZVwiLFxuICAgICAgICBmdW5jdGlvbiBkb2N1bWVudENvbnRyb2xsZXJfdHJpZ2dlckJlZm9yZUNsb3NlKFxuICAgICAgICAgIGV2ZW50LFxuICAgICAgICAgIG5leHREb2N1bWVudCxcbiAgICAgICAgICBjdXN0b21DbGllbnREYXRhXG4gICAgICAgICkge1xuICAgICAgICAgIGlmIChjdXJyZW50V2lkZ2V0Ll9pbml0aWFsaXplZFZpZXcgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50ID0gIWN1cnJlbnRXaWRnZXQuX3RyaWdnZXJDb250cm9sbGVyRXZlbnQoXG4gICAgICAgICAgICAgIFwiYmVmb3JlQ2xvc2VcIixcbiAgICAgICAgICAgICAgZXZlbnQsXG4gICAgICAgICAgICAgIGN1cnJlbnRXaWRnZXQuZ2V0UHJvcGVydGllcygpLFxuICAgICAgICAgICAgICBuZXh0RG9jdW1lbnQsXG4gICAgICAgICAgICAgIGN1c3RvbUNsaWVudERhdGFcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICApO1xuICAgICAgdGhpcy5fbW9kZWwubGlzdGVuVG8oXG4gICAgICAgIHRoaXMuX21vZGVsLFxuICAgICAgICBcImNsb3NlXCIsXG4gICAgICAgIGZ1bmN0aW9uIGRvY3VtZW50Q29udHJvbGxlcl90cmlnZ2VyQ2xvc2Uob2xkUHJvcGVydGllcykge1xuICAgICAgICAgIGlmIChjdXJyZW50V2lkZ2V0Ll9pbml0aWFsaXplZFZpZXcgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICBjdXJyZW50V2lkZ2V0Ll90cmlnZ2VyQ29udHJvbGxlckV2ZW50KFxuICAgICAgICAgICAgICBcImNsb3NlXCIsXG4gICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgIGN1cnJlbnRXaWRnZXQuZ2V0UHJvcGVydGllcygpLFxuICAgICAgICAgICAgICBvbGRQcm9wZXJ0aWVzXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjdXJyZW50V2lkZ2V0Ll9pbml0aWFsaXplZFZpZXcgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgKTtcbiAgICAgIHRoaXMuX21vZGVsLmxpc3RlblRvKFxuICAgICAgICB0aGlzLl9tb2RlbCxcbiAgICAgICAgXCJnZXRDdXN0b21DbGllbnREYXRhXCIsXG4gICAgICAgIGZ1bmN0aW9uIGRvY3VtZW50Q29udHJvbGxlcl90cmlnZ2VyQWRkQ3VzdG9tRGF0YSgpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgY3VycmVudFdpZGdldC5fbW9kZWwuX2N1c3RvbUNsaWVudERhdGEgPSBjdXJyZW50V2lkZ2V0LmdldEN1c3RvbUNsaWVudERhdGEoXG4gICAgICAgICAgICAgIGZhbHNlXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIC8vbm8gdGVzdCBoZXJlXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICApO1xuICAgICAgdGhpcy5fbW9kZWwubGlzdGVuVG8oXG4gICAgICAgIHRoaXMuX21vZGVsLFxuICAgICAgICBcImJlZm9yZVNhdmVcIixcbiAgICAgICAgZnVuY3Rpb24gZG9jdW1lbnRDb250cm9sbGVyX3RyaWdnZXJCZWZvcmVTYXZlKGV2ZW50LCBjdXN0b21DbGllbnREYXRhKSB7XG4gICAgICAgICAgdmFyIF9tb2RlbCA9IHRoaXM7XG4gICAgICAgICAgdmFyIHJlcXVlc3RPcHRpb25zID0ge1xuICAgICAgICAgICAgZ2V0UmVxdWVzdERhdGE6IGZ1bmN0aW9uIGdldFJlcXVlc3REYXRhKCkge1xuICAgICAgICAgICAgICByZXR1cm4gX21vZGVsLnRvSlNPTigpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldFJlcXVlc3REYXRhOiBmdW5jdGlvbiBkb2N1bWVudENvbnRyb2xsZXJTZXRSZXF1ZXN0RGF0YShkYXRhKSB7XG4gICAgICAgICAgICAgIF9tb2RlbC5fY3VzdG9tUmVxdWVzdERhdGEgPSBkYXRhO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgICAgZXZlbnQucHJldmVudCA9ICFjdXJyZW50V2lkZ2V0Ll90cmlnZ2VyQ29udHJvbGxlckV2ZW50KFxuICAgICAgICAgICAgXCJiZWZvcmVTYXZlXCIsXG4gICAgICAgICAgICBldmVudCxcbiAgICAgICAgICAgIGN1cnJlbnRXaWRnZXQuZ2V0UHJvcGVydGllcygpLFxuICAgICAgICAgICAgcmVxdWVzdE9wdGlvbnMsXG4gICAgICAgICAgICBjdXN0b21DbGllbnREYXRhXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgKTtcbiAgICAgIHRoaXMuX21vZGVsLmxpc3RlblRvKFxuICAgICAgICB0aGlzLl9tb2RlbCxcbiAgICAgICAgXCJhZnRlclNhdmVcIixcbiAgICAgICAgZnVuY3Rpb24gZG9jdW1lbnRDb250cm9sbGVyX3RyaWdnZXJBZnRlclNhdmUob2xkUHJvcGVydGllcykge1xuICAgICAgICAgIGN1cnJlbnRXaWRnZXQuX3RyaWdnZXJDb250cm9sbGVyRXZlbnQoXG4gICAgICAgICAgICBcImFmdGVyU2F2ZVwiLFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIGN1cnJlbnRXaWRnZXQuZ2V0UHJvcGVydGllcygpLFxuICAgICAgICAgICAgb2xkUHJvcGVydGllc1xuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgICB0aGlzLl9tb2RlbC5saXN0ZW5UbyhcbiAgICAgICAgdGhpcy5fbW9kZWwsXG4gICAgICAgIFwiYmVmb3JlUmVzdG9yZVwiLFxuICAgICAgICBmdW5jdGlvbiBkb2N1bWVudENvbnRyb2xsZXJfdHJpZ2dlckJlZm9yZVJlc3RvcmUoZXZlbnQpIHtcbiAgICAgICAgICBldmVudC5wcmV2ZW50ID0gIWN1cnJlbnRXaWRnZXQuX3RyaWdnZXJDb250cm9sbGVyRXZlbnQoXG4gICAgICAgICAgICBcImJlZm9yZVJlc3RvcmVcIixcbiAgICAgICAgICAgIGV2ZW50LFxuICAgICAgICAgICAgY3VycmVudFdpZGdldC5nZXRQcm9wZXJ0aWVzKClcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICApO1xuICAgICAgdGhpcy5fbW9kZWwubGlzdGVuVG8oXG4gICAgICAgIHRoaXMuX21vZGVsLFxuICAgICAgICBcImFmdGVyUmVzdG9yZVwiLFxuICAgICAgICBmdW5jdGlvbiBkb2N1bWVudENvbnRyb2xsZXJfdHJpZ2dlckFmdGVyUmVzdG9yZShvbGRQcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgY3VycmVudFdpZGdldC5fdHJpZ2dlckNvbnRyb2xsZXJFdmVudChcbiAgICAgICAgICAgIFwiYWZ0ZXJSZXN0b3JlXCIsXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgY3VycmVudFdpZGdldC5nZXRQcm9wZXJ0aWVzKCksXG4gICAgICAgICAgICBvbGRQcm9wZXJ0aWVzXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgKTtcbiAgICAgIHRoaXMuX21vZGVsLmxpc3RlblRvKFxuICAgICAgICB0aGlzLl9tb2RlbCxcbiAgICAgICAgXCJiZWZvcmVEZWxldGVcIixcbiAgICAgICAgZnVuY3Rpb24gZG9jdW1lbnRDb250cm9sbGVyX3RyaWdnZXJCZWZvcmVEZWxldGUoXG4gICAgICAgICAgZXZlbnQsXG4gICAgICAgICAgY3VzdG9tQ2xpZW50RGF0YVxuICAgICAgICApIHtcbiAgICAgICAgICBldmVudC5wcmV2ZW50ID0gIWN1cnJlbnRXaWRnZXQuX3RyaWdnZXJDb250cm9sbGVyRXZlbnQoXG4gICAgICAgICAgICBcImJlZm9yZURlbGV0ZVwiLFxuICAgICAgICAgICAgZXZlbnQsXG4gICAgICAgICAgICBjdXJyZW50V2lkZ2V0LmdldFByb3BlcnRpZXMoKSxcbiAgICAgICAgICAgIGN1cnJlbnRXaWRnZXQuX21vZGVsLmdldE1vZGVsUHJvcGVydGllcygpLFxuICAgICAgICAgICAgY3VzdG9tQ2xpZW50RGF0YVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgICB0aGlzLl9tb2RlbC5saXN0ZW5UbyhcbiAgICAgICAgdGhpcy5fbW9kZWwsXG4gICAgICAgIFwiYWZ0ZXJEZWxldGVcIixcbiAgICAgICAgZnVuY3Rpb24gZG9jdW1lbnRDb250cm9sbGVyX3RyaWdnZXJBZnRlckRlbGV0ZShvbGRQcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgY3VycmVudFdpZGdldC5fdHJpZ2dlckNvbnRyb2xsZXJFdmVudChcbiAgICAgICAgICAgIFwiYWZ0ZXJEZWxldGVcIixcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBjdXJyZW50V2lkZ2V0LmdldFByb3BlcnRpZXMoKSxcbiAgICAgICAgICAgIG9sZFByb3BlcnRpZXNcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICApO1xuICAgICAgdGhpcy5fbW9kZWwubGlzdGVuVG8oXG4gICAgICAgIHRoaXMuX21vZGVsLFxuICAgICAgICBcInZhbGlkYXRlXCIsXG4gICAgICAgIGZ1bmN0aW9uIGRvY3VtZW50Q29udHJvbGxlcl90cmlnZ2VyVmFsaWRhdGUoZXZlbnQpIHtcbiAgICAgICAgICBldmVudC5wcmV2ZW50ID0gIWN1cnJlbnRXaWRnZXQuX3RyaWdnZXJDb250cm9sbGVyRXZlbnQoXG4gICAgICAgICAgICBcInZhbGlkYXRlXCIsXG4gICAgICAgICAgICBldmVudCxcbiAgICAgICAgICAgIGN1cnJlbnRXaWRnZXQuZ2V0UHJvcGVydGllcygpXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgKTtcbiAgICAgIHRoaXMuX21vZGVsLmxpc3RlblRvKFxuICAgICAgICB0aGlzLl9tb2RlbCxcbiAgICAgICAgXCJjaGFuZ2VWYWx1ZVwiLFxuICAgICAgICBmdW5jdGlvbiBkb2N1bWVudENvbnRyb2xsZXJfdHJpZ2dlckNoYW5nZVZhbHVlKG9wdGlvbnMpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRBdHRyaWJ1dGUgPSBjdXJyZW50V2lkZ2V0LmdldEF0dHJpYnV0ZShcbiAgICAgICAgICAgICAgICBvcHRpb25zLmF0dHJpYnV0ZUlkXG4gICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgIGluZGV4ID0gMCxcbiAgICAgICAgICAgICAgdmFsdWVzID0gY3VycmVudEF0dHJpYnV0ZS5nZXRWYWx1ZShcImFsbFwiKSxcbiAgICAgICAgICAgICAgbUF0dHJpYnV0ZSA9IGN1cnJlbnRXaWRnZXQuX2dldEF0dHJpYnV0ZU1vZGVsKFxuICAgICAgICAgICAgICAgIG9wdGlvbnMuYXR0cmlidXRlSWRcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGlmIChtQXR0cmlidXRlLmdldFBhcmVudCgpLmdldChcInR5cGVcIikgIT09IFwiYXJyYXlcIikge1xuICAgICAgICAgICAgICBpbmRleCA9IC0xO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdmFyIGNoYW5nZXNJbmRleCA9IFtdO1xuICAgICAgICAgICAgICBfLmVhY2goXG4gICAgICAgICAgICAgICAgdmFsdWVzLmN1cnJlbnQsXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gZG9jdW1lbnRDb250cm9sbGVyX3ZhbHVlSXNNb2RpZmllZChjdXJyZW50VmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBwcmV2aW91cyA9IHZhbHVlcy5wcmV2aW91c1tpbmRleF07XG4gICAgICAgICAgICAgICAgICBpZiAoIXByZXZpb3VzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoYW5nZXNJbmRleC5wdXNoKGluZGV4KTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfLmlzQXJyYXkoY3VycmVudFZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRWYWx1ZSA9IGN1cnJlbnRWYWx1ZS5qb2luKFwiLFwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50VmFsdWUgPSBfLmhhcyhjdXJyZW50VmFsdWUsIFwidmFsdWVcIilcbiAgICAgICAgICAgICAgICAgICAgICA/IGN1cnJlbnRWYWx1ZS52YWx1ZVxuICAgICAgICAgICAgICAgICAgICAgIDogY3VycmVudFZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoXy5pc0FycmF5KHByZXZpb3VzKSkge1xuICAgICAgICAgICAgICAgICAgICAgIHByZXZpb3VzID0gcHJldmlvdXMuam9pbihcIixcIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcHJldmlvdXMgPSBfLmhhcyhwcmV2aW91cywgXCJ2YWx1ZVwiKVxuICAgICAgICAgICAgICAgICAgICAgID8gcHJldmlvdXMudmFsdWVcbiAgICAgICAgICAgICAgICAgICAgICA6IHByZXZpb3VzO1xuICAgICAgICAgICAgICAgICAgICBpZiAocHJldmlvdXMgIT09IGN1cnJlbnRWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZXNJbmRleC5wdXNoKGluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgaW5kZXgrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIGluZGV4ID0gY2hhbmdlc0luZGV4Lmxlbmd0aCA9PT0gMSA/IGNoYW5nZXNJbmRleFswXSA6IC0xO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3VycmVudFdpZGdldC5fdHJpZ2dlckF0dHJpYnV0ZUNvbnRyb2xsZXJFdmVudChcbiAgICAgICAgICAgICAgXCJjaGFuZ2VcIixcbiAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgY3VycmVudEF0dHJpYnV0ZSxcbiAgICAgICAgICAgICAgY3VycmVudFdpZGdldC5nZXRQcm9wZXJ0aWVzKCksXG4gICAgICAgICAgICAgIGN1cnJlbnRBdHRyaWJ1dGUsXG4gICAgICAgICAgICAgIGN1cnJlbnRBdHRyaWJ1dGUuZ2V0VmFsdWUoXCJhbGxcIiksXG4gICAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAoIShlcnJvciBpbnN0YW5jZW9mIEVycm9yTW9kZWxOb25Jbml0aWFsaXplZCkpIHtcbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICApO1xuICAgICAgdGhpcy5fbW9kZWwubGlzdGVuVG8oXG4gICAgICAgIHRoaXMuX21vZGVsLFxuICAgICAgICBcImJlZm9yZUF0dHJpYnV0ZVJlbmRlclwiLFxuICAgICAgICBmdW5jdGlvbiBkb2N1bWVudENvbnRyb2xsZXJfdHJpZ2dlckF0dHJpYnV0ZVJlbmRlcihcbiAgICAgICAgICBldmVudCxcbiAgICAgICAgICBhdHRyaWJ1dGVJZCxcbiAgICAgICAgICAkZWwsXG4gICAgICAgICAgaW5kZXhcbiAgICAgICAgKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciBjdXJyZW50QXR0cmlidXRlID0gY3VycmVudFdpZGdldC5nZXRBdHRyaWJ1dGUoYXR0cmlidXRlSWQpO1xuICAgICAgICAgICAgZXZlbnQucHJldmVudCA9ICFjdXJyZW50V2lkZ2V0Ll90cmlnZ2VyQXR0cmlidXRlQ29udHJvbGxlckV2ZW50KFxuICAgICAgICAgICAgICBcImF0dHJpYnV0ZUJlZm9yZVJlbmRlclwiLFxuICAgICAgICAgICAgICBldmVudCxcbiAgICAgICAgICAgICAgY3VycmVudEF0dHJpYnV0ZSxcbiAgICAgICAgICAgICAgY3VycmVudFdpZGdldC5nZXRQcm9wZXJ0aWVzKCksXG4gICAgICAgICAgICAgIGN1cnJlbnRBdHRyaWJ1dGUsXG4gICAgICAgICAgICAgICRlbCxcbiAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmICghKGVycm9yIGluc3RhbmNlb2YgRXJyb3JNb2RlbE5vbkluaXRpYWxpemVkKSkge1xuICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgICB0aGlzLl9tb2RlbC5saXN0ZW5UbyhcbiAgICAgICAgdGhpcy5fbW9kZWwsXG4gICAgICAgIFwiYXR0cmlidXRlUmVuZGVyXCIsXG4gICAgICAgIGZ1bmN0aW9uIGRvY3VtZW50Q29udHJvbGxlcl90cmlnZ2VyQXR0cmlidXRlUmVuZGVyKFxuICAgICAgICAgIGF0dHJpYnV0ZUlkLFxuICAgICAgICAgICRlbCxcbiAgICAgICAgICBpbmRleFxuICAgICAgICApIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRBdHRyaWJ1dGUgPSBjdXJyZW50V2lkZ2V0LmdldEF0dHJpYnV0ZShhdHRyaWJ1dGVJZCk7XG4gICAgICAgICAgICBjdXJyZW50V2lkZ2V0Ll90cmlnZ2VyQXR0cmlidXRlQ29udHJvbGxlckV2ZW50KFxuICAgICAgICAgICAgICBcImF0dHJpYnV0ZVJlYWR5XCIsXG4gICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgIGN1cnJlbnRBdHRyaWJ1dGUsXG4gICAgICAgICAgICAgIGN1cnJlbnRXaWRnZXQuZ2V0UHJvcGVydGllcygpLFxuICAgICAgICAgICAgICBjdXJyZW50QXR0cmlidXRlLFxuICAgICAgICAgICAgICAkZWwsXG4gICAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAoIShlcnJvciBpbnN0YW5jZW9mIEVycm9yTW9kZWxOb25Jbml0aWFsaXplZCkpIHtcbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICApO1xuICAgICAgdGhpcy5fbW9kZWwubGlzdGVuVG8oXG4gICAgICAgIHRoaXMuX21vZGVsLFxuICAgICAgICBcImFycmF5TW9kaWZpZWRcIixcbiAgICAgICAgZnVuY3Rpb24gZG9jdW1lbnRDb250cm9sbGVyX3RyaWdnZXJBcnJheU1vZGlmaWVkKG9wdGlvbnMpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRBdHRyaWJ1dGUgPSBjdXJyZW50V2lkZ2V0LmdldEF0dHJpYnV0ZShcbiAgICAgICAgICAgICAgb3B0aW9ucy5hdHRyaWJ1dGVJZFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGN1cnJlbnRXaWRnZXQuX3RyaWdnZXJBdHRyaWJ1dGVDb250cm9sbGVyRXZlbnQoXG4gICAgICAgICAgICAgIFwiYXR0cmlidXRlQXJyYXlDaGFuZ2VcIixcbiAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgY3VycmVudEF0dHJpYnV0ZSxcbiAgICAgICAgICAgICAgY3VycmVudFdpZGdldC5nZXRQcm9wZXJ0aWVzKCksXG4gICAgICAgICAgICAgIGN1cnJlbnRBdHRyaWJ1dGUsXG4gICAgICAgICAgICAgIG9wdGlvbnMudHlwZSxcbiAgICAgICAgICAgICAgb3B0aW9ucy5vcHRpb25zXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAoIShlcnJvciBpbnN0YW5jZW9mIEVycm9yTW9kZWxOb25Jbml0aWFsaXplZCkpIHtcbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICApO1xuICAgICAgdGhpcy5fbW9kZWwubGlzdGVuVG8oXG4gICAgICAgIHRoaXMuX21vZGVsLFxuICAgICAgICBcImludGVybmFsTGlua1NlbGVjdGVkXCIsXG4gICAgICAgIGZ1bmN0aW9uIGRvY3VtZW50Q29udHJvbGxlcl90cmlnZ2VySW50ZXJuYWxMaW5rU2VsZWN0ZWQoXG4gICAgICAgICAgZXZlbnQsXG4gICAgICAgICAgb3B0aW9uc1xuICAgICAgICApIHtcbiAgICAgICAgICBldmVudC5wcmV2ZW50ID0gIWN1cnJlbnRXaWRnZXQuX3RyaWdnZXJDb250cm9sbGVyRXZlbnQoXG4gICAgICAgICAgICBcImFjdGlvbkNsaWNrXCIsXG4gICAgICAgICAgICBldmVudCxcbiAgICAgICAgICAgIGN1cnJlbnRXaWRnZXQuZ2V0UHJvcGVydGllcygpLFxuICAgICAgICAgICAgb3B0aW9uc1xuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgICB0aGlzLl9tb2RlbC5saXN0ZW5UbyhcbiAgICAgICAgdGhpcy5fbW9kZWwsXG4gICAgICAgIFwiZG93bmxvYWRGaWxlXCIsXG4gICAgICAgIGZ1bmN0aW9uIGRvY3VtZW50Q29udHJvbGxlcl90cmlnZ2VyRG93bmxvYWRGaWxlKFxuICAgICAgICAgIGV2ZW50LFxuICAgICAgICAgIGF0dHJpZCxcbiAgICAgICAgICBvcHRpb25zXG4gICAgICAgICkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgY3VycmVudEF0dHJpYnV0ZSA9IGN1cnJlbnRXaWRnZXQuZ2V0QXR0cmlidXRlKGF0dHJpZCk7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50ID0gIWN1cnJlbnRXaWRnZXQuX3RyaWdnZXJBdHRyaWJ1dGVDb250cm9sbGVyRXZlbnQoXG4gICAgICAgICAgICAgIFwiYXR0cmlidXRlRG93bmxvYWRGaWxlXCIsXG4gICAgICAgICAgICAgIGV2ZW50LFxuICAgICAgICAgICAgICBjdXJyZW50QXR0cmlidXRlLFxuICAgICAgICAgICAgICBjdXJyZW50V2lkZ2V0LmdldFByb3BlcnRpZXMoKSxcbiAgICAgICAgICAgICAgY3VycmVudEF0dHJpYnV0ZSxcbiAgICAgICAgICAgICAgb3B0aW9ucy4kZWwsXG4gICAgICAgICAgICAgIG9wdGlvbnMuaW5kZXhcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmICghKGVycm9yIGluc3RhbmNlb2YgRXJyb3JNb2RlbE5vbkluaXRpYWxpemVkKSkge1xuICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgICB0aGlzLl9tb2RlbC5saXN0ZW5UbyhcbiAgICAgICAgdGhpcy5fbW9kZWwsXG4gICAgICAgIFwidXBsb2FkRmlsZVwiLFxuICAgICAgICBmdW5jdGlvbiBkb2N1bWVudENvbnRyb2xsZXJfdHJpZ2dlclVwbG9hZEZpbGUoZXZlbnQsIGF0dHJpZCwgb3B0aW9ucykge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgY3VycmVudEF0dHJpYnV0ZSA9IGN1cnJlbnRXaWRnZXQuZ2V0QXR0cmlidXRlKGF0dHJpZCk7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50ID0gIWN1cnJlbnRXaWRnZXQuX3RyaWdnZXJBdHRyaWJ1dGVDb250cm9sbGVyRXZlbnQoXG4gICAgICAgICAgICAgIFwiYXR0cmlidXRlVXBsb2FkRmlsZVwiLFxuICAgICAgICAgICAgICBldmVudCxcbiAgICAgICAgICAgICAgY3VycmVudEF0dHJpYnV0ZSxcbiAgICAgICAgICAgICAgY3VycmVudFdpZGdldC5nZXRQcm9wZXJ0aWVzKCksXG4gICAgICAgICAgICAgIGN1cnJlbnRBdHRyaWJ1dGUsXG4gICAgICAgICAgICAgIG9wdGlvbnMuJGVsLFxuICAgICAgICAgICAgICBvcHRpb25zLmluZGV4LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZmlsZTogb3B0aW9ucy5maWxlLFxuICAgICAgICAgICAgICAgIGhhc1VwbG9hZGluZ0ZpbGVzOiBjdXJyZW50V2lkZ2V0Ll9tb2RlbC5oYXNVcGxvYWRpbmdGaWxlKClcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKCEoZXJyb3IgaW5zdGFuY2VvZiBFcnJvck1vZGVsTm9uSW5pdGlhbGl6ZWQpKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgKTtcbiAgICAgIHRoaXMuX21vZGVsLmxpc3RlblRvKFxuICAgICAgICB0aGlzLl9tb2RlbCxcbiAgICAgICAgXCJ1cGxvYWRGaWxlRG9uZVwiLFxuICAgICAgICBmdW5jdGlvbiBkb2N1bWVudENvbnRyb2xsZXJfdHJpZ2dlclVwbG9hZEZpbGUoZXZlbnQsIGF0dHJpZCwgb3B0aW9ucykge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgY3VycmVudEF0dHJpYnV0ZSA9IGN1cnJlbnRXaWRnZXQuZ2V0QXR0cmlidXRlKGF0dHJpZCk7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50ID0gIWN1cnJlbnRXaWRnZXQuX3RyaWdnZXJBdHRyaWJ1dGVDb250cm9sbGVyRXZlbnQoXG4gICAgICAgICAgICAgIFwiYXR0cmlidXRlVXBsb2FkRmlsZURvbmVcIixcbiAgICAgICAgICAgICAgZXZlbnQsXG4gICAgICAgICAgICAgIGN1cnJlbnRBdHRyaWJ1dGUsXG4gICAgICAgICAgICAgIGN1cnJlbnRXaWRnZXQuZ2V0UHJvcGVydGllcygpLFxuICAgICAgICAgICAgICBjdXJyZW50QXR0cmlidXRlLFxuICAgICAgICAgICAgICBvcHRpb25zLiRlbCxcbiAgICAgICAgICAgICAgb3B0aW9ucy5pbmRleCxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGZpbGU6IG9wdGlvbnMuZmlsZSxcbiAgICAgICAgICAgICAgICBoYXNVcGxvYWRpbmdGaWxlczogY3VycmVudFdpZGdldC5fbW9kZWwuaGFzVXBsb2FkaW5nRmlsZSgpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmICghKGVycm9yIGluc3RhbmNlb2YgRXJyb3JNb2RlbE5vbkluaXRpYWxpemVkKSkge1xuICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICk7XG5cbiAgICAgIHRoaXMuX21vZGVsLmxpc3RlblRvKFxuICAgICAgICB0aGlzLl9tb2RlbCxcbiAgICAgICAgXCJhdHRyaWJ1dGVCZWZvcmVUYWJTZWxlY3RcIixcbiAgICAgICAgZnVuY3Rpb24gZG9jdW1lbnRDb250cm9sbGVyX3RyaWdnZXJCZWZvcmVTZWxlY3RUYWIoZXZlbnQsIGF0dHJpZCkge1xuICAgICAgICAgIHZhciBjdXJyZW50QXR0cmlidXRlID0gY3VycmVudFdpZGdldC5nZXRBdHRyaWJ1dGUoYXR0cmlkKTtcbiAgICAgICAgICB2YXIgcHJldmVudDtcblxuICAgICAgICAgIHByZXZlbnQgPSAhY3VycmVudFdpZGdldC5fdHJpZ2dlckF0dHJpYnV0ZUNvbnRyb2xsZXJFdmVudChcbiAgICAgICAgICAgIFwiYXR0cmlidXRlQmVmb3JlVGFiU2VsZWN0XCIsXG4gICAgICAgICAgICBldmVudCxcbiAgICAgICAgICAgIGN1cnJlbnRBdHRyaWJ1dGUsXG4gICAgICAgICAgICBjdXJyZW50V2lkZ2V0LmdldFByb3BlcnRpZXMoKSxcbiAgICAgICAgICAgIGN1cnJlbnRBdHRyaWJ1dGUsXG4gICAgICAgICAgICAkKGV2ZW50Lml0ZW0pXG4gICAgICAgICAgKTtcbiAgICAgICAgICBpZiAocHJldmVudCkge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgICB0aGlzLl9tb2RlbC5saXN0ZW5UbyhcbiAgICAgICAgdGhpcy5fbW9kZWwsXG4gICAgICAgIFwiYXR0cmlidXRlVGFiQ2hhbmdlXCIsXG4gICAgICAgIGZ1bmN0aW9uIGRvY3VtZW50Q29udHJvbGxlcl90cmlnZ2VyQWZ0ZXJTZWxlY3RUYWIoXG4gICAgICAgICAgZXZlbnQsXG4gICAgICAgICAgYXR0cmlkLFxuICAgICAgICAgICRlbCxcbiAgICAgICAgICBkYXRhXG4gICAgICAgICkge1xuICAgICAgICAgIHZhciBjdXJyZW50QXR0cmlidXRlID0gY3VycmVudFdpZGdldC5nZXRBdHRyaWJ1dGUoYXR0cmlkKTtcblxuICAgICAgICAgIGN1cnJlbnRXaWRnZXQuX3RyaWdnZXJBdHRyaWJ1dGVDb250cm9sbGVyRXZlbnQoXG4gICAgICAgICAgICBcImF0dHJpYnV0ZVRhYkNoYW5nZVwiLFxuICAgICAgICAgICAgZXZlbnQsXG4gICAgICAgICAgICBjdXJyZW50QXR0cmlidXRlLFxuICAgICAgICAgICAgY3VycmVudFdpZGdldC5nZXRQcm9wZXJ0aWVzKCksXG4gICAgICAgICAgICBjdXJyZW50QXR0cmlidXRlLFxuICAgICAgICAgICAgJGVsLFxuICAgICAgICAgICAgZGF0YVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgICB0aGlzLl9tb2RlbC5saXN0ZW5UbyhcbiAgICAgICAgdGhpcy5fbW9kZWwsXG4gICAgICAgIFwiYXR0cmlidXRlQWZ0ZXJUYWJTZWxlY3RcIixcbiAgICAgICAgZnVuY3Rpb24gZG9jdW1lbnRDb250cm9sbGVyX3RyaWdnZXJBZnRlclNlbGVjdFRhYihldmVudCwgYXR0cmlkKSB7XG4gICAgICAgICAgdmFyIGN1cnJlbnRBdHRyaWJ1dGUgPSBjdXJyZW50V2lkZ2V0LmdldEF0dHJpYnV0ZShhdHRyaWQpO1xuXG4gICAgICAgICAgY3VycmVudFdpZGdldC5fdHJpZ2dlckF0dHJpYnV0ZUNvbnRyb2xsZXJFdmVudChcbiAgICAgICAgICAgIFwiYXR0cmlidXRlQWZ0ZXJUYWJTZWxlY3RcIixcbiAgICAgICAgICAgIGV2ZW50LFxuICAgICAgICAgICAgY3VycmVudEF0dHJpYnV0ZSxcbiAgICAgICAgICAgIGN1cnJlbnRXaWRnZXQuZ2V0UHJvcGVydGllcygpLFxuICAgICAgICAgICAgY3VycmVudEF0dHJpYnV0ZSxcbiAgICAgICAgICAgICQoZXZlbnQuaXRlbSlcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICApO1xuICAgICAgdGhpcy5fbW9kZWwubGlzdGVuVG8oXG4gICAgICAgIHRoaXMuX21vZGVsLFxuICAgICAgICBcImhlbHBlclNlYXJjaFwiLFxuICAgICAgICBmdW5jdGlvbiBkb2N1bWVudENvbnRyb2xsZXJfdHJpZ2dlckhlbHBlclNlYXJjaChcbiAgICAgICAgICBldmVudCxcbiAgICAgICAgICBhdHRyaWQsXG4gICAgICAgICAgb3B0aW9uc1xuICAgICAgICApIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRBdHRyaWJ1dGUgPSBjdXJyZW50V2lkZ2V0LmdldEF0dHJpYnV0ZShhdHRyaWQpO1xuICAgICAgICAgICAgZXZlbnQucHJldmVudCA9ICFjdXJyZW50V2lkZ2V0Ll90cmlnZ2VyQXR0cmlidXRlQ29udHJvbGxlckV2ZW50KFxuICAgICAgICAgICAgICBcImF0dHJpYnV0ZUhlbHBlclNlYXJjaFwiLFxuICAgICAgICAgICAgICBldmVudCxcbiAgICAgICAgICAgICAgY3VycmVudEF0dHJpYnV0ZSxcbiAgICAgICAgICAgICAgY3VycmVudFdpZGdldC5nZXRQcm9wZXJ0aWVzKCksXG4gICAgICAgICAgICAgIGN1cnJlbnRBdHRyaWJ1dGUsXG4gICAgICAgICAgICAgIG9wdGlvbnNcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmICghKGVycm9yIGluc3RhbmNlb2YgRXJyb3JNb2RlbE5vbkluaXRpYWxpemVkKSkge1xuICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgICB0aGlzLl9tb2RlbC5saXN0ZW5UbyhcbiAgICAgICAgdGhpcy5fbW9kZWwsXG4gICAgICAgIFwiaGVscGVyUmVzcG9uc2VcIixcbiAgICAgICAgZnVuY3Rpb24gZG9jdW1lbnRDb250cm9sbGVyX3RyaWdnZXJIZWxwZXJSZXNwb25zZShcbiAgICAgICAgICBldmVudCxcbiAgICAgICAgICBhdHRyaWQsXG4gICAgICAgICAgb3B0aW9uc1xuICAgICAgICApIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRBdHRyaWJ1dGUgPSBjdXJyZW50V2lkZ2V0LmdldEF0dHJpYnV0ZShhdHRyaWQpO1xuICAgICAgICAgICAgZXZlbnQucHJldmVudCA9ICFjdXJyZW50V2lkZ2V0Ll90cmlnZ2VyQXR0cmlidXRlQ29udHJvbGxlckV2ZW50KFxuICAgICAgICAgICAgICBcImF0dHJpYnV0ZUhlbHBlclJlc3BvbnNlXCIsXG4gICAgICAgICAgICAgIGV2ZW50LFxuICAgICAgICAgICAgICBjdXJyZW50QXR0cmlidXRlLFxuICAgICAgICAgICAgICBjdXJyZW50V2lkZ2V0LmdldFByb3BlcnRpZXMoKSxcbiAgICAgICAgICAgICAgY3VycmVudEF0dHJpYnV0ZSxcbiAgICAgICAgICAgICAgb3B0aW9uc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKCEoZXJyb3IgaW5zdGFuY2VvZiBFcnJvck1vZGVsTm9uSW5pdGlhbGl6ZWQpKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgKTtcbiAgICAgIHRoaXMuX21vZGVsLmxpc3RlblRvKFxuICAgICAgICB0aGlzLl9tb2RlbCxcbiAgICAgICAgXCJoZWxwZXJTZWxlY3RcIixcbiAgICAgICAgZnVuY3Rpb24gZG9jdW1lbnRDb250cm9sbGVyX3RyaWdnZXJIZWxwZXJTZWxlY3QoXG4gICAgICAgICAgZXZlbnQsXG4gICAgICAgICAgYXR0cmlkLFxuICAgICAgICAgIG9wdGlvbnNcbiAgICAgICAgKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciBjdXJyZW50QXR0cmlidXRlID0gY3VycmVudFdpZGdldC5nZXRBdHRyaWJ1dGUoYXR0cmlkKTtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnQgPSAhY3VycmVudFdpZGdldC5fdHJpZ2dlckF0dHJpYnV0ZUNvbnRyb2xsZXJFdmVudChcbiAgICAgICAgICAgICAgXCJhdHRyaWJ1dGVIZWxwZXJTZWxlY3RcIixcbiAgICAgICAgICAgICAgZXZlbnQsXG4gICAgICAgICAgICAgIGN1cnJlbnRBdHRyaWJ1dGUsXG4gICAgICAgICAgICAgIGN1cnJlbnRXaWRnZXQuZ2V0UHJvcGVydGllcygpLFxuICAgICAgICAgICAgICBjdXJyZW50QXR0cmlidXRlLFxuICAgICAgICAgICAgICBvcHRpb25zXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAoIShlcnJvciBpbnN0YW5jZW9mIEVycm9yTW9kZWxOb25Jbml0aWFsaXplZCkpIHtcbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICApO1xuXG4gICAgICAvLyBsaXN0ZW5lciB0byBwcmV2ZW50IGRlZmF1bHQgYWN0aW9ucyB3aGVuIGFuY2hvckNsaWNrIGlzIHRyaWdnZXJlZFxuICAgICAgdGhpcy5fbW9kZWwubGlzdGVuVG8oXG4gICAgICAgIHRoaXMuX21vZGVsLFxuICAgICAgICBcImFuY2hvckNsaWNrXCIsXG4gICAgICAgIGZ1bmN0aW9uIGRvY3VtZW50Q29udHJvbGxlcl90cmlnZ2VySGVscGVyU2VsZWN0KFxuICAgICAgICAgIGV2ZW50LFxuICAgICAgICAgIGF0dHJpZCxcbiAgICAgICAgICBvcHRpb25zXG4gICAgICAgICkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgY3VycmVudEF0dHJpYnV0ZSA9IGN1cnJlbnRXaWRnZXQuZ2V0QXR0cmlidXRlKGF0dHJpZCk7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50ID0gIWN1cnJlbnRXaWRnZXQuX3RyaWdnZXJBdHRyaWJ1dGVDb250cm9sbGVyRXZlbnQoXG4gICAgICAgICAgICAgIFwiYXR0cmlidXRlQW5jaG9yQ2xpY2tcIixcbiAgICAgICAgICAgICAgZXZlbnQsXG4gICAgICAgICAgICAgIGN1cnJlbnRBdHRyaWJ1dGUsXG4gICAgICAgICAgICAgIGN1cnJlbnRXaWRnZXQuZ2V0UHJvcGVydGllcygpLFxuICAgICAgICAgICAgICBjdXJyZW50QXR0cmlidXRlLFxuICAgICAgICAgICAgICBvcHRpb25zLiRlbCxcbiAgICAgICAgICAgICAgb3B0aW9ucy5pbmRleCxcbiAgICAgICAgICAgICAgb3B0aW9ucy5vcHRpb25zXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAoIShlcnJvciBpbnN0YW5jZW9mIEVycm9yTW9kZWxOb25Jbml0aWFsaXplZCkpIHtcbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICApO1xuXG4gICAgICAvLyBHZW5lcmljIGxpc3RlbmVyIGZvciBhZGRDcmVhdGVEb2N1bWVudEJ1dHRvbiBkb2NpZCByZW5kZXIgb3B0aW9uXG4gICAgICB0aGlzLl9tb2RlbC5saXN0ZW5UbyhcbiAgICAgICAgdGhpcy5fbW9kZWwsXG4gICAgICAgIFwiY3JlYXRlRGlhbG9nTGlzdGVuZXJcIixcbiAgICAgICAgZnVuY3Rpb24gZG9jdW1lbnRDb250cm9sbGVyX3RyaWdnZXJjcmVhdGVEaWFsb2dEb2N1bWVudE9wZW4oXG4gICAgICAgICAgZXZlbnQsXG4gICAgICAgICAgYXR0cmlkLFxuICAgICAgICAgIG9wdGlvbnNcbiAgICAgICAgKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciBjdXJyZW50QXR0cmlidXRlID0gY3VycmVudFdpZGdldC5nZXRBdHRyaWJ1dGUoYXR0cmlkKTtcbiAgICAgICAgICAgIHZhciB0cmlnZ2VybmFtZSA9IFwiYXR0cmlidXRlQ3JlYXRlRGlhbG9nRG9jdW1lbnRcIjtcbiAgICAgICAgICAgIC8vIFVwcGVyY2FzZSBmaXJzdCBsZXR0ZXJcbiAgICAgICAgICAgIHRyaWdnZXJuYW1lICs9XG4gICAgICAgICAgICAgIG9wdGlvbnMudHJpZ2dlcklkLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICtcbiAgICAgICAgICAgICAgb3B0aW9ucy50cmlnZ2VySWQuc2xpY2UoMSk7XG5cbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnQgPSAhY3VycmVudFdpZGdldC5fdHJpZ2dlckF0dHJpYnV0ZUNvbnRyb2xsZXJFdmVudChcbiAgICAgICAgICAgICAgdHJpZ2dlcm5hbWUsXG4gICAgICAgICAgICAgIGV2ZW50LFxuICAgICAgICAgICAgICBjdXJyZW50QXR0cmlidXRlLFxuICAgICAgICAgICAgICBjdXJyZW50V2lkZ2V0LmdldFByb3BlcnRpZXMoKSxcbiAgICAgICAgICAgICAgY3VycmVudEF0dHJpYnV0ZSxcbiAgICAgICAgICAgICAgb3B0aW9uc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKCEoZXJyb3IgaW5zdGFuY2VvZiBFcnJvck1vZGVsTm9uSW5pdGlhbGl6ZWQpKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgKTtcbiAgICAgIHRoaXMuX21vZGVsLmxpc3RlblRvKFxuICAgICAgICB0aGlzLl9tb2RlbCxcbiAgICAgICAgXCJjb25zdHJhaW50XCIsXG4gICAgICAgIGZ1bmN0aW9uIGRvY3VtZW50Q29udHJvbGxlcl90cmlnZ2VyQ29uc3RyYWludChcbiAgICAgICAgICBhdHRyaWJ1dGUsXG4gICAgICAgICAgY29uc3RyYWludENvbnRyb2xsZXJcbiAgICAgICAgKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciBjdXJyZW50QXR0cmlidXRlID0gY3VycmVudFdpZGdldC5nZXRBdHRyaWJ1dGUoYXR0cmlidXRlKSxcbiAgICAgICAgICAgICAgY3VycmVudE1vZGVsID0gY3VycmVudFdpZGdldC5nZXRQcm9wZXJ0aWVzKCksXG4gICAgICAgICAgICAgICRlbGVtZW50ID0gJChjdXJyZW50V2lkZ2V0LmVsZW1lbnQpLFxuICAgICAgICAgICAgICBhZGRDb25zdHJhaW50ID0gZnVuY3Rpb24gZG9jdW1lbnRDb250cm9sbGVyX2FkZENvbnN0cmFpbnQoXG4gICAgICAgICAgICAgICAgY3VycmVudENvbnN0cmFpbnRcbiAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgaWYgKF8uaXNTdHJpbmcoY3VycmVudENvbnN0cmFpbnQpKSB7XG4gICAgICAgICAgICAgICAgICBjb25zdHJhaW50Q29udHJvbGxlci5hZGRDb25zdHJhaW50TWVzc2FnZShjdXJyZW50Q29uc3RyYWludCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgIF8uaXNPYmplY3QoY3VycmVudENvbnN0cmFpbnQpICYmXG4gICAgICAgICAgICAgICAgICBjdXJyZW50Q29uc3RyYWludC5tZXNzYWdlICYmXG4gICAgICAgICAgICAgICAgICBfLmlzTnVtYmVyKGN1cnJlbnRDb25zdHJhaW50LmluZGV4KVxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgY29uc3RyYWludENvbnRyb2xsZXIuYWRkQ29uc3RyYWludE1lc3NhZ2UoXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRDb25zdHJhaW50Lm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRDb25zdHJhaW50LmluZGV4XG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIF8uZWFjaChcbiAgICAgICAgICAgICAgY3VycmVudFdpZGdldC5hY3RpdmF0ZWRDb25zdHJhaW50LFxuICAgICAgICAgICAgICBmdW5jdGlvbiB0cmlnZ2VyQ3VycmVudENvbnN0cmFpbnQoY3VycmVudENvbnN0cmFpbnQpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50Q29uc3RyYWludC5hdHRyaWJ1dGVDaGVjay5hcHBseSgkZWxlbWVudCwgW1xuICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRBdHRyaWJ1dGUsXG4gICAgICAgICAgICAgICAgICAgICAgY3VycmVudE1vZGVsXG4gICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3BvbnNlID0gY3VycmVudENvbnN0cmFpbnQuY29uc3RyYWludENoZWNrLmNhbGwoXG4gICAgICAgICAgICAgICAgICAgICAgJGVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgICAgY3VycmVudE1vZGVsLFxuICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRBdHRyaWJ1dGUsXG4gICAgICAgICAgICAgICAgICAgICAgY3VycmVudEF0dHJpYnV0ZS5nZXRWYWx1ZShcImFsbFwiKVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICBpZiAoXy5pc0FycmF5KHJlc3BvbnNlKSkge1xuICAgICAgICAgICAgICAgICAgICAgIF8uZWFjaChyZXNwb25zZSwgYWRkQ29uc3RyYWludCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgYWRkQ29uc3RyYWludChyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKCEoZXJyb3IgaW5zdGFuY2VvZiBFcnJvck1vZGVsTm9uSW5pdGlhbGl6ZWQpKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgKTtcbiAgICAgIHRoaXMuX21vZGVsLmxpc3RlblRvKFxuICAgICAgICB0aGlzLl9tb2RlbCxcbiAgICAgICAgXCJzaG93VHJhbnNpdGlvblwiLFxuICAgICAgICBfLmJpbmQoY3VycmVudFdpZGdldC5faW5pdEFuZERpc3BsYXlUcmFuc2l0aW9uLCB0aGlzKVxuICAgICAgKTtcbiAgICAgIHRoaXMuX21vZGVsLmxpc3RlblRvKFxuICAgICAgICB0aGlzLl9tb2RlbCxcbiAgICAgICAgXCJiZWZvcmVQYXJzZVwiLFxuICAgICAgICBfLmJpbmQoZnVuY3Rpb24gZGVsZXRlQ3VzdG9tQ2xpZW50KCkge1xuICAgICAgICAgIC8vU3VwcHJlc3MgY3VzdG9tQ2xpZW50RGF0YSBhZnRlciBhIHN1Y2Vzc2Z1bCB0cmFuc2FjdGlvblxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjdXJyZW50V2lkZ2V0LmdldEN1c3RvbUNsaWVudERhdGEodHJ1ZSk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgLy9ubyB0ZXN0IGhlcmVcbiAgICAgICAgICB9XG4gICAgICAgIH0sIHRoaXMpXG4gICAgICApO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBCaW5kIHRoZSB2aWV3XG4gICAgICogUmUtdHJpZ2dlciB0aGUgZXZlbnRzXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9pbml0Vmlld0V2ZW50czogZnVuY3Rpb24gZG9jdW1lbnRDb250cm9sbGVyX2luaXRWaWV3RXZlbnRzKCkge1xuICAgICAgdmFyIGN1cnJlbnRXaWRnZXQgPSB0aGlzO1xuICAgICAgdGhpcy52aWV3Lm9uKFxuICAgICAgICBcImNsZWFuTm90aWZpY2F0aW9uXCIsXG4gICAgICAgIGZ1bmN0aW9uIGRvY3VtZW50Q29udHJvbGxlcl90cmlnZ2VyQ2xlYW5Ob3RpZmljYXRpb24oKSB7XG4gICAgICAgICAgY3VycmVudFdpZGdldC4kbm90aWZpY2F0aW9uLmRjcE5vdGlmaWNhdGlvbihcImNsZWFyXCIpO1xuICAgICAgICB9XG4gICAgICApO1xuICAgICAgdGhpcy52aWV3Lm9uKFwibG9hZGluZ1wiLCBmdW5jdGlvbiBkb2N1bWVudENvbnRyb2xsZXJfdHJpZ2dlckxvYWRpbmcoXG4gICAgICAgIGRhdGEsXG4gICAgICAgIG5iSXRlbVxuICAgICAgKSB7XG4gICAgICAgIGN1cnJlbnRXaWRnZXQuJGxvYWRpbmcuZGNwTG9hZGluZyhcInNldFBlcmNlbnRcIiwgZGF0YSk7XG4gICAgICAgIGlmIChuYkl0ZW0pIHtcbiAgICAgICAgICBjdXJyZW50V2lkZ2V0LiRsb2FkaW5nLmRjcExvYWRpbmcoXCJzZXROYkl0ZW1cIiwgbmJJdGVtKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICB0aGlzLnZpZXcub24oXCJsb2FkZXJTaG93XCIsIGZ1bmN0aW9uIGRvY3VtZW50Q29udHJvbGxlcl90cmlnZ2VyTG9hZGVyU2hvdyhcbiAgICAgICAgdGV4dCxcbiAgICAgICAgcGNcbiAgICAgICkge1xuICAgICAgICBjb25zb2xlLnRpbWUoXCJ4aHIrcmVuZGVyIGRvY3VtZW50IHZpZXdcIik7XG4gICAgICAgIGN1cnJlbnRXaWRnZXQuJGxvYWRpbmcuZGNwTG9hZGluZyhcInNob3dcIiwgdGV4dCwgcGMpO1xuICAgICAgfSk7XG4gICAgICB0aGlzLnZpZXcub24oXCJsb2FkZXJIaWRlXCIsIGZ1bmN0aW9uIGRvY3VtZW50Q29udHJvbGxlcl90cmlnZ2VySGlkZSgpIHtcbiAgICAgICAgY3VycmVudFdpZGdldC4kbG9hZGluZy5kY3BMb2FkaW5nKFwiaGlkZVwiKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy52aWV3Lm9uKFxuICAgICAgICBcInBhcnRSZW5kZXJcIixcbiAgICAgICAgZnVuY3Rpb24gZG9jdW1lbnRDb250cm9sbGVyX3RyaWdnZXJQYXJ0UmVuZGVyKCkge1xuICAgICAgICAgIGN1cnJlbnRXaWRnZXQuJGxvYWRpbmcuZGNwTG9hZGluZyhcImFkZEl0ZW1cIik7XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgICB0aGlzLnZpZXcub24oXG4gICAgICAgIFwicmVuZGVyRG9uZVwiLFxuICAgICAgICBmdW5jdGlvbiBkb2N1bWVudENvbnRyb2xsZXJfdHJpZ2dlclJlbmRlckRvbmUoKSB7XG4gICAgICAgICAgY29uc29sZS50aW1lRW5kKFwieGhyK3JlbmRlciBkb2N1bWVudCB2aWV3XCIpO1xuICAgICAgICAgIGN1cnJlbnRXaWRnZXQuJGxvYWRpbmcuZGNwTG9hZGluZyhcInNldFBlcmNlbnRcIiwgMTAwKTtcbiAgICAgICAgICBjdXJyZW50V2lkZ2V0LiRsb2FkaW5nLmRjcExvYWRpbmcoXCJzZXRMYWJlbFwiLCBudWxsKTtcbiAgICAgICAgICBjdXJyZW50V2lkZ2V0Ll9pbml0aWFsaXplZFZpZXcgPSB0cnVlO1xuICAgICAgICAgIGN1cnJlbnRXaWRnZXQuX3RyaWdnZXJDb250cm9sbGVyRXZlbnQoXG4gICAgICAgICAgICBcInJlYWR5XCIsXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgY3VycmVudFdpZGdldC5nZXRQcm9wZXJ0aWVzKClcbiAgICAgICAgICApO1xuICAgICAgICAgIF8uZGVsYXkoZnVuY3Rpb24gZG9jdW1lbnRDb250cm9sbGVyX2VuZFJlbmRlcigpIHtcbiAgICAgICAgICAgIGN1cnJlbnRXaWRnZXQuJGxvYWRpbmcuZGNwTG9hZGluZyhcImhpZGVcIiwgdHJ1ZSk7XG4gICAgICAgICAgICBjb25zb2xlLnRpbWVFbmQoXCJtYWluXCIpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICApO1xuICAgICAgdGhpcy52aWV3Lm9uKFxuICAgICAgICBcInNob3dNZXNzYWdlXCIsXG4gICAgICAgIGZ1bmN0aW9uIGRvY3VtZW50Q29udHJvbGxlcl90cmlnZ2VyU2hvd01lc3NhZ2UobWVzc2FnZSkge1xuICAgICAgICAgIHZhciByZXN1bHQgPSBjdXJyZW50V2lkZ2V0Ll90cmlnZ2VyQ29udHJvbGxlckV2ZW50KFxuICAgICAgICAgICAgXCJkaXNwbGF5TWVzc2FnZVwiLFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIGN1cnJlbnRXaWRnZXQuZ2V0UHJvcGVydGllcygpLFxuICAgICAgICAgICAgbWVzc2FnZVxuICAgICAgICAgICk7XG4gICAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgY3VycmVudFdpZGdldC4kbm90aWZpY2F0aW9uLmRjcE5vdGlmaWNhdGlvbihcbiAgICAgICAgICAgICAgXCJzaG93XCIsXG4gICAgICAgICAgICAgIG1lc3NhZ2UudHlwZSxcbiAgICAgICAgICAgICAgbWVzc2FnZVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgICB0aGlzLnZpZXcub24oXG4gICAgICAgIFwic2hvd1N1Y2Nlc3NcIixcbiAgICAgICAgZnVuY3Rpb24gZG9jdW1lbnRDb250cm9sbGVyX3RyaWdnZXJTaG93U3VjY2VzcyhtZXNzYWdlKSB7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IGN1cnJlbnRXaWRnZXQuX3RyaWdnZXJDb250cm9sbGVyRXZlbnQoXG4gICAgICAgICAgICBcImRpc3BsYXlNZXNzYWdlXCIsXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgY3VycmVudFdpZGdldC5nZXRQcm9wZXJ0aWVzKCksXG4gICAgICAgICAgICBtZXNzYWdlXG4gICAgICAgICAgKTtcbiAgICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICBjdXJyZW50V2lkZ2V0LiRub3RpZmljYXRpb24uZGNwTm90aWZpY2F0aW9uKFwic2hvd1N1Y2Nlc3NcIiwgbWVzc2FnZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICApO1xuICAgICAgdGhpcy52aWV3Lm9uKFwicmVpbml0XCIsIGZ1bmN0aW9uIGRvY3VtZW50Q29udHJvbGxlcl90cmlnZ2VyUmVpbml0KCkge1xuICAgICAgICBjdXJyZW50V2lkZ2V0Ll9pbml0TW9kZWwoY3VycmVudFdpZGdldC5fZ2V0TW9kZWxWYWx1ZSgpKTtcbiAgICAgICAgY3VycmVudFdpZGdldC5faW5pdFZpZXcoKTtcbiAgICAgICAgY3VycmVudFdpZGdldC5fbW9kZWwuZmV0Y2hEb2N1bWVudCgpO1xuICAgICAgfSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEluaXQgdGhlIHB1c2hzdGF0ZSByb3V0ZXJcbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2luaXRSb3V0ZXI6IGZ1bmN0aW9uIGRvY3VtZW50Q29udHJvbGxlcl9pbml0Um91dGVyKGNvbmZpZykge1xuICAgICAgaWYgKHRoaXMucm91dGVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJvdXRlcjtcbiAgICAgIH1cbiAgICAgIHRyeSB7XG4gICAgICAgIGlmICh3aW5kb3cuaGlzdG9yeSAmJiBoaXN0b3J5LnB1c2hTdGF0ZSkge1xuICAgICAgICAgIEJhY2tib25lLmhpc3Rvcnkuc3RhcnQoeyBwdXNoU3RhdGU6IHRydWUgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy9Gb3IgYnJvd3NlciB3aXRob3V0IEFQSSBoaXN0b3J5XG4gICAgICAgICAgQmFja2JvbmUuaGlzdG9yeS5zdGFydCgpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICB9XG4gICAgICB0aGlzLnJvdXRlciA9IG5ldyBSb3V0ZXIoe1xuICAgICAgICBkb2N1bWVudDogdGhpcy5fbW9kZWwsXG4gICAgICAgIHVzZUhpc3Rvcnk6ICFjb25maWcgfHwgY29uZmlnLnVzZUhpc3RvcnlcbiAgICAgIH0pO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBJbml0IGFuZCBkaXNwbGF5IHRoZSBjaGFuZ2Ugc3RhdGUgcG9wLXVwXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbmV4dFN0YXRlXG4gICAgICogQHBhcmFtIHRyYW5zaXRpb25cbiAgICAgKiBAcGFyYW0gdmFsdWVzXG4gICAgICogQHBhcmFtIHdpdGhvdXRJbnRlcmZhY2VcbiAgICAgKiBAcGFyYW0gcmVpbml0T3B0aW9uc1xuICAgICAqL1xuICAgIF9pbml0QW5kRGlzcGxheVRyYW5zaXRpb246IGZ1bmN0aW9uIGRvY3VtZW50Q29udHJvbGxlcl9pbml0QW5kRGlzcGxheVRyYW5zaXRpb24oXG4gICAgICBuZXh0U3RhdGUsXG4gICAgICB0cmFuc2l0aW9uLFxuICAgICAgdmFsdWVzLFxuICAgICAgd2l0aG91dEludGVyZmFjZSxcbiAgICAgIHJlaW5pdE9wdGlvbnNcbiAgICApIHtcbiAgICAgIHZhciAkdGFyZ2V0ID0gJCgnPGRpdiBjbGFzcz1cImRjcFRyYW5zaXRpb25cIi8+JyksXG4gICAgICAgIHRyYW5zaXRpb25FbGVtZW50cyA9IHt9LFxuICAgICAgICBjdXJyZW50V2lkZ2V0ID0gdGhpcyxcbiAgICAgICAgcmVzdWx0LFxuICAgICAgICB0cmFuc2l0aW9uSW50ZXJmYWNlLFxuICAgICAgICBkb2N1bWVudFNlcnZlclByb3BlcnRpZXMgPSB0aGlzLmdldFByb3BlcnRpZXMoKTtcblxuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIGRvY3VtZW50Q29udHJvbGxlcl9jaGFuZ2VTdGF0ZVByb21pc2UoXG4gICAgICAgIHJlc29sdmUsXG4gICAgICAgIHJlamVjdFxuICAgICAgKSB7XG4gICAgICAgIHJlc3VsdCA9ICFjdXJyZW50V2lkZ2V0Ll90cmlnZ2VyQ29udHJvbGxlckV2ZW50KFxuICAgICAgICAgIFwiYmVmb3JlRGlzcGxheUNoYW5nZVN0YXRlXCIsXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgICBjdXJyZW50V2lkZ2V0LmdldFByb3BlcnRpZXMoKSxcbiAgICAgICAgICBuZXcgVHJhbnNpdGlvbkludGVyZmFjZShudWxsLCAkdGFyZ2V0LCBuZXh0U3RhdGUsIHRyYW5zaXRpb24pXG4gICAgICAgICk7XG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICByZWplY3QoKTtcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vSW5pdCB0cmFuc2l0aW9uIG1vZGVsXG4gICAgICAgIHRyYW5zaXRpb25FbGVtZW50cy5tb2RlbCA9IG5ldyBUcmFuc2l0aW9uTW9kZWwoe1xuICAgICAgICAgIGRvY3VtZW50SWQ6IGN1cnJlbnRXaWRnZXQuX21vZGVsLmlkLFxuICAgICAgICAgIGRvY3VtZW50TW9kZWw6IGN1cnJlbnRXaWRnZXQuX21vZGVsLFxuICAgICAgICAgIHN0YXRlOiBuZXh0U3RhdGUsXG4gICAgICAgICAgdHJhbnNpdGlvbjogdHJhbnNpdGlvblxuICAgICAgICB9KTtcblxuICAgICAgICAvL0luaXQgdHJhbnNpdGlvbiB2aWV3XG4gICAgICAgIGlmICh3aXRob3V0SW50ZXJmYWNlICE9PSB0cnVlKSB7XG4gICAgICAgICAgdHJhbnNpdGlvbkVsZW1lbnRzLnZpZXcgPSBuZXcgVHJhbnNpdGlvblZpZXcoe1xuICAgICAgICAgICAgbW9kZWw6IHRyYW5zaXRpb25FbGVtZW50cy5tb2RlbCxcbiAgICAgICAgICAgIGVsOiAkdGFyZ2V0XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICB0cmFuc2l0aW9uSW50ZXJmYWNlID0gbmV3IFRyYW5zaXRpb25JbnRlcmZhY2UoXG4gICAgICAgICAgdHJhbnNpdGlvbkVsZW1lbnRzLm1vZGVsLFxuICAgICAgICAgICR0YXJnZXQsXG4gICAgICAgICAgbmV4dFN0YXRlLFxuICAgICAgICAgIHRyYW5zaXRpb25cbiAgICAgICAgKTtcblxuICAgICAgICBpZiAodHJhbnNpdGlvbkVsZW1lbnRzLnZpZXcpIHtcbiAgICAgICAgICAvL1Byb3BhZ2F0ZSBhZnRlckRpc3BsYXlDaGFuZ2Ugb24gcmVuZGVyRG9uZVxuICAgICAgICAgIHRyYW5zaXRpb25FbGVtZW50cy52aWV3Lm9uY2UoXG4gICAgICAgICAgICBcInJlbmRlclRyYW5zaXRpb25XaW5kb3dEb25lXCIsXG4gICAgICAgICAgICBmdW5jdGlvbiBkb2N1bWVudENvbnRyb2xsZXJfcHJvcGFnYXRlQWZ0ZXIoKSB7XG4gICAgICAgICAgICAgIGN1cnJlbnRXaWRnZXQuX3RyaWdnZXJDb250cm9sbGVyRXZlbnQoXG4gICAgICAgICAgICAgICAgXCJhZnRlckRpc3BsYXlUcmFuc2l0aW9uXCIsXG4gICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICBjdXJyZW50V2lkZ2V0LmdldFByb3BlcnRpZXMoKSxcbiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uSW50ZXJmYWNlXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vUHJvcGFnYXRlIHRoZSBiZWZvcmVUcmFuc2l0aW9uXG4gICAgICAgIHRyYW5zaXRpb25FbGVtZW50cy5tb2RlbC5saXN0ZW5UbyhcbiAgICAgICAgICB0cmFuc2l0aW9uRWxlbWVudHMubW9kZWwsXG4gICAgICAgICAgXCJiZWZvcmVDaGFuZ2VTdGF0ZVwiLFxuICAgICAgICAgIGZ1bmN0aW9uIGRvY3VtZW50Q29udHJvbGxlcl9wcm9wYWdhdGVCZWZvcmVUcmFuc2l0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50ID0gIWN1cnJlbnRXaWRnZXQuX3RyaWdnZXJDb250cm9sbGVyRXZlbnQoXG4gICAgICAgICAgICAgIFwiYmVmb3JlVHJhbnNpdGlvblwiLFxuICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICBjdXJyZW50V2lkZ2V0LmdldFByb3BlcnRpZXMoKSxcbiAgICAgICAgICAgICAgdHJhbnNpdGlvbkludGVyZmFjZVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgICk7XG5cbiAgICAgICAgLy9Qcm9wYWdhdGUgdGhlIGJlZm9yZVRyYW5zaXRpb25DbG9zZVxuICAgICAgICB0cmFuc2l0aW9uRWxlbWVudHMubW9kZWwubGlzdGVuVG8oXG4gICAgICAgICAgdHJhbnNpdGlvbkVsZW1lbnRzLm1vZGVsLFxuICAgICAgICAgIFwiYmVmb3JlQ2hhbmdlU3RhdGVDbG9zZVwiLFxuICAgICAgICAgIGZ1bmN0aW9uIGRvY3VtZW50Q29udHJvbGxlcl9wcm9wYWdhdGVUcmFuc2l0aW9uQ2xvc2UoZXZlbnQpIHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnQgPSAhY3VycmVudFdpZGdldC5fdHJpZ2dlckNvbnRyb2xsZXJFdmVudChcbiAgICAgICAgICAgICAgXCJiZWZvcmVUcmFuc2l0aW9uQ2xvc2VcIixcbiAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgY3VycmVudFdpZGdldC5nZXRQcm9wZXJ0aWVzKCksXG4gICAgICAgICAgICAgIHRyYW5zaXRpb25JbnRlcmZhY2VcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICApO1xuXG4gICAgICAgIHRyYW5zaXRpb25FbGVtZW50cy5tb2RlbC5saXN0ZW5UbyhcbiAgICAgICAgICB0cmFuc2l0aW9uRWxlbWVudHMubW9kZWwsXG4gICAgICAgICAgXCJzaG93RXJyb3JcIixcbiAgICAgICAgICBmdW5jdGlvbiBkb2N1bWVudENvbnRyb2xsZXJfcHJvcGFnYXRlVHJhbnNpdGlvbkVycm9yKGVycm9yKSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50ID0gIWN1cnJlbnRXaWRnZXQuX3RyaWdnZXJDb250cm9sbGVyRXZlbnQoXG4gICAgICAgICAgICAgIFwiZmFpbFRyYW5zaXRpb25cIixcbiAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgY3VycmVudFdpZGdldC5nZXRQcm9wZXJ0aWVzKCksXG4gICAgICAgICAgICAgIHRyYW5zaXRpb25JbnRlcmZhY2UsXG4gICAgICAgICAgICAgIGVycm9yXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgcmVqZWN0KHsgZG9jdW1lbnRQcm9wZXJ0aWVzOiBkb2N1bWVudFNlcnZlclByb3BlcnRpZXMgfSk7XG4gICAgICAgICAgfVxuICAgICAgICApO1xuXG4gICAgICAgIHRyYW5zaXRpb25FbGVtZW50cy5tb2RlbC5saXN0ZW5UbyhcbiAgICAgICAgICB0cmFuc2l0aW9uRWxlbWVudHMubW9kZWwsXG4gICAgICAgICAgXCJzdWNjZXNzXCIsXG4gICAgICAgICAgZnVuY3Rpb24gZG9jdW1lbnRDb250cm9sbGVyX1RyYW5zaXRpb25TdWNjZXNzKG1lc3NhZ2VzKSB7XG4gICAgICAgICAgICBpZiAodHJhbnNpdGlvbkVsZW1lbnRzLnZpZXcpIHtcbiAgICAgICAgICAgICAgdHJhbnNpdGlvbkVsZW1lbnRzLnZpZXcuJGVsLmhpZGUoKTtcbiAgICAgICAgICAgICAgY3VycmVudFdpZGdldC52aWV3Lm9uY2UoXG4gICAgICAgICAgICAgICAgXCJyZW5kZXJEb25lXCIsXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gZG9jdW1lbnRDb250cm9sbGVyX3RyYW5zaXRpb25SZW5kZXIoKSB7XG4gICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uRWxlbWVudHMudmlldy5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICAgIF8uZWFjaChtZXNzYWdlcywgZnVuY3Rpb24gZG9jdW1lbnRDb250cm9sbGVyX3BhcnNlTWVzc2FnZShcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZVxuICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRXaWRnZXQudmlldy50cmlnZ2VyKFwic2hvd01lc3NhZ2VcIiwgbWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vZGVsZXRlIHRoZSBwb3AgdXAgd2hlbiB0aGUgcmVuZGVyIG9mIHRoZSBwb3AgdXAgaXMgZG9uZVxuICAgICAgICAgICAgY3VycmVudFdpZGdldC5fdHJpZ2dlckNvbnRyb2xsZXJFdmVudChcbiAgICAgICAgICAgICAgXCJzdWNjZXNzVHJhbnNpdGlvblwiLFxuICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICBjdXJyZW50V2lkZ2V0LmdldFByb3BlcnRpZXMoKSxcbiAgICAgICAgICAgICAgdHJhbnNpdGlvbkludGVyZmFjZVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgcmVpbml0T3B0aW9ucyA9IHJlaW5pdE9wdGlvbnMgfHwgeyByZXZpc2lvbjogLTEgfTtcbiAgICAgICAgICAgIGlmICghXy5oYXMocmVpbml0T3B0aW9ucywgXCJyZXZpc2lvblwiKSkge1xuICAgICAgICAgICAgICByZWluaXRPcHRpb25zLnJldmlzaW9uID0gLTE7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vUmVpbml0IHRoZSBtYWluIG1vZGVsIHdpdGggbGFzdCByZXZpc2lvblxuICAgICAgICAgICAgY3VycmVudFdpZGdldC5yZWluaXREb2N1bWVudChyZWluaXRPcHRpb25zKS50aGVuKFxuICAgICAgICAgICAgICBmdW5jdGlvbiBkb2N1bWVudENvbnRyb2xsZXJfcmVpbml0RG9uZSgpIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKHsgZG9jdW1lbnRQcm9wZXJ0aWVzOiBkb2N1bWVudFNlcnZlclByb3BlcnRpZXMgfSk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGZ1bmN0aW9uIGRvY3VtZW50Q29udHJvbGxlcl9yZWluaXRGYWlsKCkge1xuICAgICAgICAgICAgICAgIHJlamVjdCh7IGRvY3VtZW50UHJvcGVydGllczogZG9jdW1lbnRTZXJ2ZXJQcm9wZXJ0aWVzIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgKTtcblxuICAgICAgICB0cmFuc2l0aW9uRWxlbWVudHMubW9kZWwubGlzdGVuVG8oXG4gICAgICAgICAgY3VycmVudFdpZGdldC5fbW9kZWwsXG4gICAgICAgICAgXCJzeW5jXCIsXG4gICAgICAgICAgZnVuY3Rpb24gZG9jdW1lbnRDb250cm9sbGVyX1RyYW5zaXRpb25DbG9zZSgpIHtcbiAgICAgICAgICAgIHRoaXMudHJpZ2dlcihcImNsb3NlXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgKTtcblxuICAgICAgICB0cmFuc2l0aW9uRWxlbWVudHMubW9kZWwuZmV0Y2goe1xuICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIHRyYW5zaXRpb25Nb2RlbF9zZXREZWZhdWx0VmFsdWVzKCkge1xuICAgICAgICAgICAgaWYgKHZhbHVlcykge1xuICAgICAgICAgICAgICB0cmFuc2l0aW9uRWxlbWVudHMubW9kZWwuc2V0VmFsdWVzKHZhbHVlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAod2l0aG91dEludGVyZmFjZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICB0cmFuc2l0aW9uRWxlbWVudHMubW9kZWxcbiAgICAgICAgICAgICAgICAuX2xvYWREb2N1bWVudCh0cmFuc2l0aW9uRWxlbWVudHMubW9kZWwpXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gZG9jdW1lbnRDb250cm9sbGVyX1RyYW5zaXRpb25TYXZlKCkge1xuICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbkVsZW1lbnRzLm1vZGVsLnNhdmUoXG4gICAgICAgICAgICAgICAgICAgIHt9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gdHJhbnNpdGlvbk1vZGVsX2FmdGVyU2F2ZSgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb25FbGVtZW50cy5tb2RlbC50cmlnZ2VyKFwic3VjY2Vzc1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudFByb3BlcnRpZXM6IGRvY3VtZW50U2VydmVyUHJvcGVydGllc1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gdHJhbnNpdGlvbk1vZGVsX2Vycm9yKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnRQcm9wZXJ0aWVzOiBkb2N1bWVudFNlcnZlclByb3BlcnRpZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbiB0cmFuc2l0aW9uTW9kZWxfZXJyb3IoKSB7XG4gICAgICAgICAgICAgICAgICByZWplY3QoeyBkb2N1bWVudFByb3BlcnRpZXM6IGRvY3VtZW50U2VydmVyUHJvcGVydGllcyB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRyYW5zaXRpb25FbGVtZW50cy5tb2RlbFxuICAgICAgICAgICAgICAgIC5fbG9hZERvY3VtZW50KHRyYW5zaXRpb25FbGVtZW50cy5tb2RlbClcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiBkb2N1bWVudENvbnRyb2xsZXJfVHJhbnNpdGlvbkRpc3BsYXkoKSB7XG4gICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uRWxlbWVudHMubW9kZWwudHJpZ2dlcihcImRkdWlEb2N1bWVudFJlYWR5XCIpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uIHRyYW5zaXRpb25Nb2RlbF9lcnJvcigpIHtcbiAgICAgICAgICAgICAgICAgIHJlamVjdCh7IGRvY3VtZW50UHJvcGVydGllczogZG9jdW1lbnRTZXJ2ZXJQcm9wZXJ0aWVzIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uIHRyYW5zaXRpb25Nb2RlbF9lcnJvcih0aGVNb2RlbCwgcmVzcG9uc2UsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHZhciBlcnJvclR4dCA9IHsgdGl0bGU6IFwiVHJhbnNpdGlvbiBFcnJvclwiIH07XG4gICAgICAgICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmVycm9yVGhyb3duKSB7XG4gICAgICAgICAgICAgIGVycm9yVHh0Lm1lc3NhZ2UgPSBvcHRpb25zLmVycm9yVGhyb3duO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3VycmVudFdpZGdldC4kbm90aWZpY2F0aW9uLmRjcE5vdGlmaWNhdGlvbihcInNob3dFcnJvclwiLCBlcnJvclR4dCk7XG4gICAgICAgICAgICB0cmFuc2l0aW9uRWxlbWVudHMubW9kZWwudHJpZ2dlcihcInNob3dFcnJvclwiLCBlcnJvclR4dCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBHZXQgYSBiYWNrYm9uZSBtb2RlbCBvZiBhbiBhdHRyaWJ1dGVcbiAgICAgKlxuICAgICAqIEBwYXJhbSBhdHRyaWJ1dGVJZFxuICAgICAqIEByZXR1cm5zIHsqfVxuICAgICAqL1xuICAgIF9nZXRBdHRyaWJ1dGVNb2RlbDogZnVuY3Rpb24gZG9jdW1lbnRDb250cm9sbGVyX2dldEF0dHJpYnV0ZU1vZGVsKFxuICAgICAgYXR0cmlidXRlSWRcbiAgICApIHtcbiAgICAgIHZhciBhdHRyaWJ1dGVzID0gdGhpcy5fbW9kZWwuZ2V0KFwiYXR0cmlidXRlc1wiKTtcbiAgICAgIHZhciBhdHRyaWJ1dGU7XG4gICAgICBpZiAoIWF0dHJpYnV0ZXMpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICdBdHRyaWJ1dGUgbW9kZWxzIG5vdCBpbml0aWFsaXplZCB5ZXQgOiBUaGUgYXR0cmlidXRlIFwiJyArXG4gICAgICAgICAgICBhdHRyaWJ1dGVJZCArXG4gICAgICAgICAgICAnXCIgY2Fubm90IGJlIGZvdW5kLidcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGF0dHJpYnV0ZSA9IHRoaXMuX21vZGVsLmdldChcImF0dHJpYnV0ZXNcIikuZ2V0KGF0dHJpYnV0ZUlkKTtcbiAgICAgIGlmICghYXR0cmlidXRlKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXR0cmlidXRlO1xuICAgIH0sXG5cbiAgICBfZ2V0TWVudU1vZGVsOiBmdW5jdGlvbiBkb2N1bWVudENvbnRyb2xsZXJfZ2V0TWVudU1vZGVsKG1lbnVJZCkge1xuICAgICAgdmFyIG1lbnVzID0gdGhpcy5fbW9kZWwuZ2V0KFwibWVudXNcIik7XG5cbiAgICAgIHZhciBtZW51ID0gbWVudXMuZ2V0KG1lbnVJZCk7XG4gICAgICBpZiAoIW1lbnUgJiYgbWVudXMpIHtcbiAgICAgICAgbWVudXMuZWFjaChmdW5jdGlvbiBkb2N1bWVudENvbnRyb2xsZXJHZXRNZW51SXRlcmF0ZShpdGVtTWVudSkge1xuICAgICAgICAgIGlmIChpdGVtTWVudS5nZXQoXCJjb250ZW50XCIpKSB7XG4gICAgICAgICAgICBfLmVhY2goXG4gICAgICAgICAgICAgIGl0ZW1NZW51LmdldChcImNvbnRlbnRcIiksXG4gICAgICAgICAgICAgIGZ1bmN0aW9uIGRvY3VtZW50Q29udHJvbGxlckdldFN1Yk1lbnVJdGVyYXRlKHN1Yk1lbnUpIHtcbiAgICAgICAgICAgICAgICBpZiAoc3ViTWVudS5pZCA9PT0gbWVudUlkKSB7XG4gICAgICAgICAgICAgICAgICBtZW51ID0gbmV3IE1lbnVNb2RlbChzdWJNZW51KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBtZW51O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBHZXQgYWxsIHJlbmRlcmVkIGF0dHJpYnV0ZXMgd2l0aCB0aGVpciByb290IGRvbSBub2RlXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7Kn1cbiAgICAgKi9cbiAgICBfZ2V0UmVuZGVyZWRBdHRyaWJ1dGVzOiBmdW5jdGlvbiBkb2N1bWVudENvbnRyb2xsZXJfZ2V0UmVuZGVyZWRBdHRyaWJ1dGVzKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX21vZGVsXG4gICAgICAgIC5nZXQoXCJhdHRyaWJ1dGVzXCIpXG4gICAgICAgIC5jaGFpbigpXG4gICAgICAgIC5tYXAoZnVuY3Rpb24gZG9jdW1lbnRDb250cm9sbGVyX2dldFJlbmRlcmVkQXR0cmlidXRlKFxuICAgICAgICAgIGN1cnJlbnRBdHRyaWJ1dGVcbiAgICAgICAgKSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZpZXc6IGN1cnJlbnRBdHRyaWJ1dGUuaGF2ZVZpZXcoKSxcbiAgICAgICAgICAgIGlkOiBjdXJyZW50QXR0cmlidXRlLmlkXG4gICAgICAgICAgfTtcbiAgICAgICAgfSlcbiAgICAgICAgLmZpbHRlcihmdW5jdGlvbiBkb2N1bWVudENvbnRyb2xsZXJfc3VwcHJlc3NOb1ZpZXcoY3VycmVudEF0dHJpYnV0KSB7XG4gICAgICAgICAgcmV0dXJuIGN1cnJlbnRBdHRyaWJ1dC52aWV3LmhhdmVWaWV3O1xuICAgICAgICB9KVxuICAgICAgICAudmFsdWUoKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogR2V0IG1heCBpbmRleCBvZiBhbiBhcnJheVxuICAgICAqXG4gICAgICogQHBhcmFtIGF0dHJpYnV0ZUFycmF5XG4gICAgICogQHJldHVybnMgeyp9XG4gICAgICovXG4gICAgX2dldE1heEluZGV4OiBmdW5jdGlvbiBkb2N1bWVudENvbnRyb2xsZXJfZ2V0TWF4SW5kZXgoYXR0cmlidXRlQXJyYXkpIHtcbiAgICAgIHJldHVybiBfLnNpemUoXG4gICAgICAgIGF0dHJpYnV0ZUFycmF5XG4gICAgICAgICAgLmdldChcImNvbnRlbnRcIilcbiAgICAgICAgICAubWF4KGZ1bmN0aW9uIGRvY3VtZW50Q29udHJvbGxlcl9nZXRNYXgoY3VycmVudEF0dHIpIHtcbiAgICAgICAgICAgIHJldHVybiBfLnNpemUoY3VycmVudEF0dHIuZ2V0KFwiYXR0cmlidXRlVmFsdWVcIikpO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLmdldChcImF0dHJpYnV0ZVZhbHVlXCIpXG4gICAgICApO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBBY3RpdmF0ZSBjb25zdHJhaW50IG9uIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gICAgICogVXNlZCBvbiB0aGUgZmV0Y2ggb2YgYSBuZXcgZG9jdW1lbnRcbiAgICAgKlxuICAgICAqL1xuICAgIF9pbml0QWN0aXZhdGVkQ29uc3RyYWludDogZnVuY3Rpb24gZG9jdW1lbnRDb250cm9sbGVyX2luaXRBY3RpdmF0ZWRDb25zdHJhaW50KCkge1xuICAgICAgdmFyIGN1cnJlbnREb2N1bWVudFByb3BlcnRpZXMgPSB0aGlzLmdldFByb3BlcnRpZXMoKSxcbiAgICAgICAgY3VycmVudFdpZGdldCA9IHRoaXM7XG4gICAgICB0aGlzLmFjdGl2YXRlZENvbnN0cmFpbnQgPSB7fTtcbiAgICAgIF8uZWFjaChcbiAgICAgICAgdGhpcy5vcHRpb25zLmNvbnN0cmFpbnRMaXN0LFxuICAgICAgICBmdW5jdGlvbiBkb2N1bWVudENvbnRyb2xsZXJfZ2V0QWN0aXZhdGVkQ29uc3RyYWludChjdXJyZW50Q29uc3RyYWludCkge1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIGN1cnJlbnRDb25zdHJhaW50LmRvY3VtZW50Q2hlY2suY2FsbChcbiAgICAgICAgICAgICAgJChjdXJyZW50V2lkZ2V0LmVsZW1lbnQpLFxuICAgICAgICAgICAgICBjdXJyZW50RG9jdW1lbnRQcm9wZXJ0aWVzXG4gICAgICAgICAgICApXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBjdXJyZW50V2lkZ2V0LmFjdGl2YXRlZENvbnN0cmFpbnRbXG4gICAgICAgICAgICAgIGN1cnJlbnRDb25zdHJhaW50Lm5hbWVcbiAgICAgICAgICAgIF0gPSBjdXJyZW50Q29uc3RyYWludDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEFjdGl2YXRlIGV2ZW50cyBvbiB0aGUgY3VycmVudCBkb2N1bWVudFxuICAgICAqIFVzZWQgb24gdGhlIGZldGNoIG9mIGEgbmV3IGRvY3VtZW50XG4gICAgICovXG4gICAgX2luaXRBY3RpdmF0ZWRFdmVudExpc3RlbmVyczogZnVuY3Rpb24gZG9jdW1lbnRDb250cm9sbGVyX2luaXRBY3RpdmF0ZWRFdmVudHMoXG4gICAgICBvcHRpb25zXG4gICAgKSB7XG4gICAgICB2YXIgY3VycmVudERvY3VtZW50UHJvcGVydGllcyA9IHRoaXMuZ2V0UHJvcGVydGllcygpLFxuICAgICAgICBjdXJyZW50V2lkZ2V0ID0gdGhpcztcbiAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgdGhpcy5hY3RpdmF0ZWRFdmVudExpc3RlbmVyID0ge307XG4gICAgICBfLmVhY2goXG4gICAgICAgIHRoaXMub3B0aW9ucy5ldmVudExpc3RlbmVyLFxuICAgICAgICBmdW5jdGlvbiBkb2N1bWVudENvbnRyb2xsZXJfZ2V0QWN0aXZhdGVkRXZlbnQoY3VycmVudEV2ZW50KSB7XG4gICAgICAgICAgaWYgKCFfLmlzRnVuY3Rpb24oY3VycmVudEV2ZW50LmRvY3VtZW50Q2hlY2spKSB7XG4gICAgICAgICAgICBjdXJyZW50V2lkZ2V0LmFjdGl2YXRlZEV2ZW50TGlzdGVuZXJbXG4gICAgICAgICAgICAgIGN1cnJlbnRFdmVudC5uYW1lXG4gICAgICAgICAgICBdID0gY3VycmVudEV2ZW50O1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICBjdXJyZW50RXZlbnQuZG9jdW1lbnRDaGVjay5jYWxsKFxuICAgICAgICAgICAgICAkKGN1cnJlbnRXaWRnZXQuZWxlbWVudCksXG4gICAgICAgICAgICAgIGN1cnJlbnREb2N1bWVudFByb3BlcnRpZXNcbiAgICAgICAgICAgIClcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIGN1cnJlbnRXaWRnZXQuYWN0aXZhdGVkRXZlbnRMaXN0ZW5lcltcbiAgICAgICAgICAgICAgY3VycmVudEV2ZW50Lm5hbWVcbiAgICAgICAgICAgIF0gPSBjdXJyZW50RXZlbnQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICApO1xuICAgICAgLy9UcmlnZ2VyIG5ldyBhZGRlZCByZWFkeSBldmVudFxuICAgICAgaWYgKHRoaXMuX2luaXRpYWxpemVkVmlldyAhPT0gZmFsc2UgJiYgb3B0aW9ucy5sYXVuY2hSZWFkeSAhPT0gZmFsc2UpIHtcbiAgICAgICAgdGhpcy5fdHJpZ2dlckNvbnRyb2xsZXJFdmVudChcInJlYWR5XCIsIG51bGwsIGN1cnJlbnREb2N1bWVudFByb3BlcnRpZXMpO1xuICAgICAgICBfLmVhY2goXG4gICAgICAgICAgdGhpcy5fZ2V0UmVuZGVyZWRBdHRyaWJ1dGVzKCksXG4gICAgICAgICAgZnVuY3Rpb24gZG9jdW1lbnRDb250cm9sbGVyX3RyaWdnZXJSZW5kZXJlZEF0dHJpYnV0ZXMoXG4gICAgICAgICAgICBjdXJyZW50QXR0cmlidXRlXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICB2YXIgb2JqZWN0QXR0cmlidXRlID0gY3VycmVudFdpZGdldC5nZXRBdHRyaWJ1dGUoXG4gICAgICAgICAgICAgIGN1cnJlbnRBdHRyaWJ1dGUuaWRcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBjdXJyZW50V2lkZ2V0Ll90cmlnZ2VyQXR0cmlidXRlQ29udHJvbGxlckV2ZW50KFxuICAgICAgICAgICAgICBcImF0dHJpYnV0ZVJlYWR5XCIsXG4gICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgIGN1cnJlbnRBdHRyaWJ1dGUsXG4gICAgICAgICAgICAgIGN1cnJlbnREb2N1bWVudFByb3BlcnRpZXMsXG4gICAgICAgICAgICAgIG9iamVjdEF0dHJpYnV0ZSxcbiAgICAgICAgICAgICAgY3VycmVudEF0dHJpYnV0ZS52aWV3LmVsZW1lbnRzXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQWRkIG5ldyBldmVudCBhbmQgYXV0b3RyaWdnZXIgYWxyZWFkeSBkb25lIGV2ZW50IGZvciByZWFkeVxuICAgICAqXG4gICAgICogQHBhcmFtIG5ld0V2ZW50XG4gICAgICovXG4gICAgX2FkZEFuZEluaXROZXdFdmVudHM6IGZ1bmN0aW9uIGRvY3VtZW50Q29udHJvbGxlcl9hZGRBbmRJbml0TmV3RXZlbnRzKFxuICAgICAgbmV3RXZlbnRcbiAgICApIHtcbiAgICAgIHZhciBjdXJyZW50RG9jdW1lbnRQcm9wZXJ0aWVzLFxuICAgICAgICBjdXJyZW50V2lkZ2V0ID0gdGhpcyxcbiAgICAgICAgZXZlbnQsXG4gICAgICAgIHVuaXF1ZU5hbWUsXG4gICAgICAgICRlbGVtZW50ID0gJChjdXJyZW50V2lkZ2V0LmVsZW1lbnQpO1xuICAgICAgdW5pcXVlTmFtZSA9XG4gICAgICAgIChuZXdFdmVudC5leHRlcm5hbEV2ZW50ID8gXCJleHRlcm5hbF9cIiA6IFwiaW50ZXJuYWxfXCIpICsgbmV3RXZlbnQubmFtZTtcbiAgICAgIHRoaXMub3B0aW9ucy5ldmVudExpc3RlbmVyW3VuaXF1ZU5hbWVdID0gbmV3RXZlbnQ7XG5cbiAgICAgIGlmICghdGhpcy5faW5pdGlhbGl6ZWRNb2RlbCkge1xuICAgICAgICAvL2Vhcmx5IGV2ZW50IG1vZGVsIGlzIG5vdCByZWFkeSAobm8gdHJpZ2dlciwgb3IgY3VycmVudCByZWdpc3RlciBwb3NzaWJsZSlcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICBjdXJyZW50RG9jdW1lbnRQcm9wZXJ0aWVzID0gdGhpcy5nZXRQcm9wZXJ0aWVzKCk7XG4gICAgICAvLyBDaGVjayBpZiB0aGUgZXZlbnQgaXMgZm9yIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gICAgICBpZiAoXG4gICAgICAgICFfLmlzRnVuY3Rpb24obmV3RXZlbnQuZG9jdW1lbnRDaGVjaykgfHxcbiAgICAgICAgbmV3RXZlbnQuZG9jdW1lbnRDaGVjay5jYWxsKCRlbGVtZW50LCBjdXJyZW50RG9jdW1lbnRQcm9wZXJ0aWVzKVxuICAgICAgKSB7XG4gICAgICAgIHRoaXMuYWN0aXZhdGVkRXZlbnRMaXN0ZW5lcltuZXdFdmVudC5uYW1lXSA9IG5ld0V2ZW50O1xuICAgICAgICAvLyBDaGVjayBpZiB3ZSBuZWVkIHRvIG1hbnVhbGx5IHRyaWdnZXIgdGhpcyBjYWxsYmFjayAobGF0ZSByZWdpc3RlcmVkIDogb25seSBmb3IgcmVhZHkgZXZlbnRzKVxuICAgICAgICBpZiAodGhpcy5faW5pdGlhbGl6ZWRWaWV3ICE9PSBmYWxzZSkge1xuICAgICAgICAgIGlmIChuZXdFdmVudC5ldmVudFR5cGUgPT09IFwicmVhZHlcIikge1xuICAgICAgICAgICAgZXZlbnQgPSAkLkV2ZW50KG5ld0V2ZW50LmV2ZW50VHlwZSk7XG4gICAgICAgICAgICBldmVudC50YXJnZXQgPSBjdXJyZW50V2lkZ2V0LmVsZW1lbnQ7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAvLyBhZGQgZWxlbWVudCBhcyBmdW5jdGlvbiBjb250ZXh0XG4gICAgICAgICAgICAgIG5ld0V2ZW50LmV2ZW50Q2FsbGJhY2suY2FsbChcbiAgICAgICAgICAgICAgICAkZWxlbWVudCxcbiAgICAgICAgICAgICAgICBldmVudCxcbiAgICAgICAgICAgICAgICBjdXJyZW50RG9jdW1lbnRQcm9wZXJ0aWVzXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChuZXdFdmVudC5ldmVudFR5cGUgPT09IFwiYXR0cmlidXRlUmVhZHlcIikge1xuICAgICAgICAgICAgZXZlbnQgPSAkLkV2ZW50KG5ld0V2ZW50LmV2ZW50VHlwZSk7XG4gICAgICAgICAgICBldmVudC50YXJnZXQgPSBjdXJyZW50V2lkZ2V0LmVsZW1lbnQ7XG4gICAgICAgICAgICBfLmVhY2goXG4gICAgICAgICAgICAgIHRoaXMuX2dldFJlbmRlcmVkQXR0cmlidXRlcygpLFxuICAgICAgICAgICAgICBmdW5jdGlvbiBkb2N1bWVudENvbnRyb2xsZXJfdHJpZ2dlclJlbmRlcmVkQXR0cmlidXRlcyhcbiAgICAgICAgICAgICAgICBjdXJyZW50QXR0cmlidXRlXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHZhciBvYmplY3RBdHRyaWJ1dGUgPSBjdXJyZW50V2lkZ2V0LmdldEF0dHJpYnV0ZShcbiAgICAgICAgICAgICAgICAgIGN1cnJlbnRBdHRyaWJ1dGUuaWRcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICFfLmlzRnVuY3Rpb24obmV3RXZlbnQuYXR0cmlidXRlQ2hlY2spIHx8XG4gICAgICAgICAgICAgICAgICBuZXdFdmVudC5hdHRyaWJ1dGVDaGVjay5hcHBseSgkZWxlbWVudCwgW29iamVjdEF0dHJpYnV0ZV0pXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAvLyBhZGQgZWxlbWVudCBhcyBmdW5jdGlvbiBjb250ZXh0XG4gICAgICAgICAgICAgICAgICAgIG5ld0V2ZW50LmV2ZW50Q2FsbGJhY2suY2FsbChcbiAgICAgICAgICAgICAgICAgICAgICAkZWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgICBldmVudCxcbiAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50RG9jdW1lbnRQcm9wZXJ0aWVzLFxuICAgICAgICAgICAgICAgICAgICAgIG9iamVjdEF0dHJpYnV0ZSxcbiAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50QXR0cmlidXRlLnZpZXcuZWxlbWVudHNcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXIgYXR0cmlidXRlIGV2ZW50XG4gICAgICpcbiAgICAgKiBTaW1pbGFyIGF0IHRyaWdnZXIgZG9jdW1lbnQgZXZlbnQgd2l0aCBhIGNvbnN0cmFpbnQgb24gYXR0cmlidXRlXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZXZlbnROYW1lXG4gICAgICogQHBhcmFtIG9yaWdpbmFsRXZlbnRcbiAgICAgKiBAcGFyYW0gYXR0cmlidXRlSW50ZXJuYWxFbGVtZW50XG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICovXG4gICAgX3RyaWdnZXJBdHRyaWJ1dGVDb250cm9sbGVyRXZlbnQ6IGZ1bmN0aW9uIGRvY3VtZW50Q29udHJvbGxlcl90cmlnZ2VyQXR0cmlidXRlQ29udHJvbGxlckV2ZW50KFxuICAgICAgZXZlbnROYW1lLFxuICAgICAgb3JpZ2luYWxFdmVudCxcbiAgICAgIGF0dHJpYnV0ZUludGVybmFsRWxlbWVudFxuICAgICkge1xuICAgICAgdmFyIGN1cnJlbnRXaWRnZXQgPSB0aGlzLFxuICAgICAgICBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAzKSxcbiAgICAgICAgZXZlbnQgPSAkLkV2ZW50KGV2ZW50TmFtZSksXG4gICAgICAgIGV4dGVybmFsRXZlbnRBcmd1bWVudCxcbiAgICAgICAgJGVsZW1lbnQgPSAkKGN1cnJlbnRXaWRnZXQuZWxlbWVudCk7XG4gICAgICBldmVudC50YXJnZXQgPSBjdXJyZW50V2lkZ2V0LmVsZW1lbnQ7XG4gICAgICAvLyBpbnRlcm5hbCBldmVudCB0cmlnZ2VyXG4gICAgICBpZiAob3JpZ2luYWxFdmVudCAmJiBvcmlnaW5hbEV2ZW50LnByZXZlbnREZWZhdWx0KSB7XG4gICAgICAgIGV2ZW50Lm9yaWdpbmFsRXZlbnQgPSBvcmlnaW5hbEV2ZW50O1xuICAgICAgfVxuICAgICAgYXJncy51bnNoaWZ0KGV2ZW50KTtcbiAgICAgIF8uY2hhaW4odGhpcy5hY3RpdmF0ZWRFdmVudExpc3RlbmVyKVxuICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIGRvY3VtZW50Q29udHJvbGxlcl9fZmlsdGVyVXNhYmxlRXZlbnRzKGN1cnJlbnRFdmVudCkge1xuICAgICAgICAgIC8vIENoZWNrIGJ5IGV2ZW50VHlwZSAob25seSBjYWxsIGNhbGxiYWNrIHdpdGggZ29vZCBldmVudFR5cGUpXG4gICAgICAgICAgaWYgKGN1cnJlbnRFdmVudC5ldmVudFR5cGUgPT09IGV2ZW50TmFtZSkge1xuICAgICAgICAgICAgLy9DaGVjayB3aXRoIGF0dHJpYnV0ZUNoZWNrIGlmIHRoZSBmdW5jdGlvbiBleGlzdFxuICAgICAgICAgICAgaWYgKCFfLmlzRnVuY3Rpb24oY3VycmVudEV2ZW50LmF0dHJpYnV0ZUNoZWNrKSkge1xuICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjdXJyZW50RXZlbnQuYXR0cmlidXRlQ2hlY2suYXBwbHkoJGVsZW1lbnQsIFtcbiAgICAgICAgICAgICAgYXR0cmlidXRlSW50ZXJuYWxFbGVtZW50LFxuICAgICAgICAgICAgICBjdXJyZW50V2lkZ2V0LmdldFByb3BlcnRpZXMoKVxuICAgICAgICAgICAgXSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSlcbiAgICAgICAgLmVhY2goZnVuY3Rpb24gZG9jdW1lbnRDb250cm9sbGVyX2FwcGx5Q2FsbEJhY2soY3VycmVudEV2ZW50KSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGN1cnJlbnRFdmVudC5ldmVudENhbGxiYWNrLmFwcGx5KCRlbGVtZW50LCBhcmdzKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBpZiAod2luZG93LmRjcCAmJiB3aW5kb3cuZGNwLmxvZ2dlcikge1xuICAgICAgICAgICAgICB3aW5kb3cuZGNwLmxvZ2dlcihlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIGV4dGVybmFsRXZlbnRBcmd1bWVudCA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMCk7XG4gICAgICBleHRlcm5hbEV2ZW50QXJndW1lbnQuc3BsaWNlKDEsIDEpO1xuICAgICAgY3VycmVudFdpZGdldC5fdHJpZ2dlckV4dGVybmFsRXZlbnQuYXBwbHkoXG4gICAgICAgIGN1cnJlbnRXaWRnZXQsXG4gICAgICAgIGV4dGVybmFsRXZlbnRBcmd1bWVudFxuICAgICAgKTtcbiAgICAgIHJldHVybiAhZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXIgYSBjb250cm9sbGVyIGV2ZW50XG4gICAgICogVGhhdCBraW5kIG9mIGV2ZW50IGFyZSBvbmx5IGZvciB0aGlzIHdpZGdldFxuICAgICAqXG4gICAgICogQHBhcmFtIGV2ZW50TmFtZVxuICAgICAqIEBwYXJhbSBvcmlnaW5hbEV2ZW50XG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICovXG4gICAgX3RyaWdnZXJDb250cm9sbGVyRXZlbnQ6IGZ1bmN0aW9uIGRvY3VtZW50Q29udHJvbGxlcl90cmlnZ2VyQ29udHJvbGxlckV2ZW50KFxuICAgICAgZXZlbnROYW1lLFxuICAgICAgb3JpZ2luYWxFdmVudFxuICAgICkge1xuICAgICAgdmFyIGN1cnJlbnRXaWRnZXQgPSB0aGlzLFxuICAgICAgICBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKSxcbiAgICAgICAgZXZlbnQgPSAkLkV2ZW50KGV2ZW50TmFtZSk7XG4gICAgICBldmVudC50YXJnZXQgPSBjdXJyZW50V2lkZ2V0LmVsZW1lbnQ7XG4gICAgICBpZiAob3JpZ2luYWxFdmVudCAmJiBvcmlnaW5hbEV2ZW50LnByZXZlbnREZWZhdWx0KSB7XG4gICAgICAgIGV2ZW50Lm9yaWdpbmFsRXZlbnQgPSBvcmlnaW5hbEV2ZW50O1xuICAgICAgfVxuICAgICAgLy8gaW50ZXJuYWwgZXZlbnQgdHJpZ2dlclxuICAgICAgYXJncy51bnNoaWZ0KGV2ZW50KTtcbiAgICAgIF8uY2hhaW4odGhpcy5hY3RpdmF0ZWRFdmVudExpc3RlbmVyKVxuICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIGRvY3VtZW50Q29udHJvbGxlcl9nZXRFdmVudE5hbWUoY3VycmVudEV2ZW50KSB7XG4gICAgICAgICAgcmV0dXJuIGN1cnJlbnRFdmVudC5ldmVudFR5cGUgPT09IGV2ZW50TmFtZTtcbiAgICAgICAgfSlcbiAgICAgICAgLmVhY2goZnVuY3Rpb24gZG9jdW1lbnRDb250cm9sbGVyX3RyaWdnZXJBbkV2ZW50KGN1cnJlbnRFdmVudCkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjdXJyZW50RXZlbnQuZXZlbnRDYWxsYmFjay5hcHBseSgkKGN1cnJlbnRXaWRnZXQuZWxlbWVudCksIGFyZ3MpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGlmICh3aW5kb3cuZGNwLmxvZ2dlcikge1xuICAgICAgICAgICAgICB3aW5kb3cuZGNwLmxvZ2dlcihlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIGN1cnJlbnRXaWRnZXQuX3RyaWdnZXJFeHRlcm5hbEV2ZW50LmFwcGx5KGN1cnJlbnRXaWRnZXQsIGFyZ3VtZW50cyk7XG4gICAgICByZXR1cm4gIWV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyIGV2ZW50IGFzIGpRdWVyeSBzdGFuZGFyZCBldmVudHMgKGFsbCBldmVudHMgYXJlIHByZWZpeGVkIGJ5IGRvY3VtZW50KVxuICAgICAqXG4gICAgICogQHBhcmFtIHR5cGVcbiAgICAgKi9cbiAgICBfdHJpZ2dlckV4dGVybmFsRXZlbnQ6IGZ1bmN0aW9uIGRvY3VtZW50Q29udHJvbGxlcl90cmlnZ2VyRXh0ZXJuYWxFdmVudChcbiAgICAgIHR5cGVcbiAgICApIHtcbiAgICAgIHZhciBjdXJyZW50V2lkZ2V0ID0gdGhpcyxcbiAgICAgICAgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSksXG4gICAgICAgIGV2ZW50ID0gJC5FdmVudCh0eXBlKTtcbiAgICAgIC8vcHJlcGFyZSBhcmd1bWVudCBmb3Igd2lkZ2V0IGV2ZW50IHRyaWdnZXIgKHdlIHdhbnQgdHlwZSwgZXZlbnQsIGRhdGEpXG4gICAgICAvLyBhZGQgdGhlIGV2ZW50T2JqZWN0XG4gICAgICBhcmdzLnVuc2hpZnQoZXZlbnQpO1xuICAgICAgLy8gYWRkIHRoZSB0eXBlXG4gICAgICBhcmdzLnVuc2hpZnQodHlwZSk7XG4gICAgICAvLyBjb25jYXRlbmF0ZSBvdGhlciBhcmd1bWVudCBpbiBvbmUgZWxlbWVudCAodG8gcmVzcGVjdCB3aWRnZXQgcGF0dGVybilcbiAgICAgIGFyZ3NbMl0gPSBhcmdzLnNsaWNlKDIpO1xuICAgICAgLy8gc3VwcHJlc3Mgb3RoZXIgYXJndW1lbnRzIChzaW5jZSB0aGV5IGhhdmUgYmVlbiBjb25jYXRlbmVkKVxuICAgICAgYXJncyA9IGFyZ3Muc2xpY2UoMCwgMyk7XG4gICAgICAvL3RyaWdnZXIgZXh0ZXJuYWwgZXZlbnRcbiAgICAgIGN1cnJlbnRXaWRnZXQuX3RyaWdnZXIuYXBwbHkoY3VycmVudFdpZGdldCwgYXJncyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIGV2ZW50IG5hbWUgaXMgdmFsaWRcbiAgICAgKlxuICAgICAqIEBwYXJhbSBldmVudE5hbWUgc3RyaW5nXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfY2hlY2tFdmVudE5hbWU6IGZ1bmN0aW9uIGRvY3VtZW50Q29udHJvbGxlcl9jaGVja0V2ZW50TmFtZShldmVudE5hbWUpIHtcbiAgICAgIGlmIChcbiAgICAgICAgXy5pc1N0cmluZyhldmVudE5hbWUpICYmXG4gICAgICAgIChldmVudE5hbWUuaW5kZXhPZihcImN1c3RvbTpcIikgPT09IDAgfHxcbiAgICAgICAgICBfLmZpbmQoZXZlbnRMaXN0LCBmdW5jdGlvbiBkb2N1bWVudENvbnRyb2xsZXJfQ2hlY2tFdmVudFR5cGUoXG4gICAgICAgICAgICBjdXJyZW50RXZlbnRUeXBlXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm4gY3VycmVudEV2ZW50VHlwZSA9PT0gZXZlbnROYW1lO1xuICAgICAgICAgIH0pKVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBcIlRoZSBldmVudCB0eXBlIFwiICtcbiAgICAgICAgICBldmVudE5hbWUgK1xuICAgICAgICAgIFwiIGlzIG5vdCBrbm93bi4gSXQgbXVzdCBiZSBvbmUgb2YgXCIgK1xuICAgICAgICAgIGV2ZW50TGlzdC5zb3J0KCkuam9pbihcIiAsXCIpXG4gICAgICApO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiB0aGUgdmlldyBpcyBpbml0aWFsaXplZFxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfY2hlY2tJbml0aWFsaXNlZFZpZXc6IGZ1bmN0aW9uIGRvY3VtZW50Q29udHJvbGxlcl9jaGVja0luaXRpYWxpc2VkKCkge1xuICAgICAgaWYgKCF0aGlzLl9pbml0aWFsaXplZFZpZXcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yTW9kZWxOb25Jbml0aWFsaXplZChcbiAgICAgICAgICBcIlRoZSB3aWRnZXQgdmlldyBpcyBub3QgaW5pdGlhbGl6ZWQsIHVzZSBmZXRjaERvY3VtZW50IHRvIGluaXRpYWxpc2UgaXQuXCJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ2hlY2sgaWYgdGhlIG1vZGVsIGlzIGluaXRpYWxpemVkXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9jaGVja0luaXRpYWxpc2VkTW9kZWw6IGZ1bmN0aW9uIGRvY3VtZW50Q29udHJvbGxlcl9jaGVja0luaXRpYWxpc2VkTW9kZWwoKSB7XG4gICAgICBpZiAoIXRoaXMuX2luaXRpYWxpemVkTW9kZWwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yTW9kZWxOb25Jbml0aWFsaXplZCgpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBfcmVnaXN0ZXJPdXRwdXRQcm9taXNlOiBmdW5jdGlvbiBkb2N1bWVudENvbnRyb2xsZXJfcmVnaXN0ZXJPdXRwdXRQcm9taXNlKFxuICAgICAgZG9jdW1lbnRQcm9taXNlLFxuICAgICAgb3B0aW9uc1xuICAgICkge1xuICAgICAgdmFyIGN1cnJlbnRXaWRnZXQgPSB0aGlzO1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIGRvY3VtZW50Q29udHJvbGxlcl9yZWluaXRQcm9taXNlKFxuICAgICAgICByZXNvbHZlLFxuICAgICAgICByZWplY3RcbiAgICAgICkge1xuICAgICAgICBkb2N1bWVudFByb21pc2UudGhlbihcbiAgICAgICAgICBmdW5jdGlvbiBkb2N1bWVudENvbnRyb2xsZXJfcmVpbml0RG9uZSh2YWx1ZXMpIHtcbiAgICAgICAgICAgIGlmIChvcHRpb25zICYmIF8uaXNGdW5jdGlvbihvcHRpb25zLnN1Y2Nlc3MpKSB7XG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKHdpbmRvdy5jb25zb2xlLndhcm4pIHtcbiAgICAgICAgICAgICAgICAgIHdpbmRvdy5jb25zb2xlLndhcm4oXG4gICAgICAgICAgICAgICAgICAgICdDYWxsYmFjayBcInN1Y2Nlc3NcIiBpcyBkZXByZWNhdGVkIHVzZSBwcm9taXNlIGluc3RlYWQnXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBvcHRpb25zLnN1Y2Nlc3MuY2FsbChcbiAgICAgICAgICAgICAgICAgICQoY3VycmVudFdpZGdldC5lbGVtZW50KSxcbiAgICAgICAgICAgICAgICAgIHZhbHVlcy5kb2N1bWVudFByb3BlcnRpZXMgfHwge30sXG4gICAgICAgICAgICAgICAgICBjdXJyZW50V2lkZ2V0LmdldFByb3BlcnRpZXMoKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH0gY2F0Y2ggKGV4Y2VwdGlvbikge1xuICAgICAgICAgICAgICAgIGlmICh3aW5kb3cuZGNwLmxvZ2dlcikge1xuICAgICAgICAgICAgICAgICAgd2luZG93LmRjcC5sb2dnZXIoZXhjZXB0aW9uKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihleGNlcHRpb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzb2x2ZSh7XG4gICAgICAgICAgICAgIGVsZW1lbnQ6ICQoY3VycmVudFdpZGdldC5lbGVtZW50KSxcbiAgICAgICAgICAgICAgcHJldmlvdXNEb2N1bWVudDogdmFsdWVzLmRvY3VtZW50UHJvcGVydGllcyB8fCB7fSxcbiAgICAgICAgICAgICAgbmV4dERvY3VtZW50OiBjdXJyZW50V2lkZ2V0LmdldFByb3BlcnRpZXMoKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBmdW5jdGlvbiBkb2N1bWVudENvbnRyb2xsZXJfcmVpbml0RmFpbCh2YWx1ZXMpIHtcbiAgICAgICAgICAgIHZhciBlcnJvckFyZ3VtZW50cyA9IHZhbHVlcy5hcmd1bWVudHM7XG4gICAgICAgICAgICB2YXIgZXJyb3JNZXNzYWdlID0geyBjb250ZW50VGV4dDogXCJVbmRlZmluZWQgZXJyb3JcIiB9O1xuXG4gICAgICAgICAgICBpZiAodmFsdWVzLmFyZ3VtZW50cykge1xuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgIGVycm9yQXJndW1lbnRzICYmXG4gICAgICAgICAgICAgICAgICBlcnJvckFyZ3VtZW50c1sxXSAmJlxuICAgICAgICAgICAgICAgICAgZXJyb3JBcmd1bWVudHNbMV0ucmVzcG9uc2VKU09OXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2UgPSBlcnJvckFyZ3VtZW50c1sxXS5yZXNwb25zZUpTT04ubWVzc2FnZXNbMF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgLy9ubyBlcnJvciBoZXJlXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIGVycm9yQXJndW1lbnRzICYmXG4gICAgICAgICAgICAgICAgZXJyb3JBcmd1bWVudHNbMF0gJiZcbiAgICAgICAgICAgICAgICBlcnJvckFyZ3VtZW50c1swXS5ldmVudFByZXZlbnRlZFxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2UgPSB7IGNvbnRlbnRUZXh0OiBcIkV2ZW50IHByZXZlbnRlZFwiIH07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIGVycm9yQXJndW1lbnRzICYmXG4gICAgICAgICAgICAgICAgZXJyb3JBcmd1bWVudHNbMF0gJiZcbiAgICAgICAgICAgICAgICBlcnJvckFyZ3VtZW50c1swXS5lcnJvck1lc3NhZ2VcbiAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gZXJyb3JBcmd1bWVudHNbMF0uZXJyb3JNZXNzYWdlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob3B0aW9ucyAmJiBfLmlzRnVuY3Rpb24ob3B0aW9ucy5lcnJvcikpIHtcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAod2luZG93LmNvbnNvbGUud2Fybikge1xuICAgICAgICAgICAgICAgICAgd2luZG93LmNvbnNvbGUud2FybihcbiAgICAgICAgICAgICAgICAgICAgJ0NhbGxiYWNrIFwiZXJyb3JcIiBpcyBkZXByZWNhdGVkIHVzZSBwcm9taXNlIGluc3RlYWQnXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBvcHRpb25zLmVycm9yLmNhbGwoXG4gICAgICAgICAgICAgICAgICAkKGN1cnJlbnRXaWRnZXQuZWxlbWVudCksXG4gICAgICAgICAgICAgICAgICB2YWx1ZXMuZG9jdW1lbnRQcm9wZXJ0aWVzIHx8IHt9LFxuICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH0gY2F0Y2ggKGV4Y2VwdGlvbikge1xuICAgICAgICAgICAgICAgIHdpbmRvdy5kY3AubG9nZ2VyKGV4Y2VwdGlvbik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlamVjdCh7XG4gICAgICAgICAgICAgIGVsZW1lbnQ6ICQoY3VycmVudFdpZGdldC5lbGVtZW50KSxcbiAgICAgICAgICAgICAgcHJldmlvdXNEb2N1bWVudDogdmFsdWVzLmRvY3VtZW50UHJvcGVydGllcyB8fCB7fSxcbiAgICAgICAgICAgICAgbmV4dERvY3VtZW50OiBudWxsLFxuICAgICAgICAgICAgICBlcnJvck1lc3NhZ2U6IGVycm9yTWVzc2FnZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgfSk7XG4gICAgfSxcblxuICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgICAgKiBFeHRlcm5hbCBmdW5jdGlvblxuICAgICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbiAgICAvKipcbiAgICAgKiBSZWluaXQgdGhlIGN1cnJlbnQgZG9jdW1lbnQgKGNsb3NlIGl0IGFuZCByZS1vcGVuIGl0KSA6IGtlZXAgdGhlIHNhbWUgdmlldywgcmV2aXNpb24sIGV0Yy4uLlxuICAgICAqXG4gICAgICogQHBhcmFtIHZhbHVlcyBvYmplY3Qge1wiaW5pdGlkXCIgOiBpbnQsIFwicmV2aXNpb25cIiA6IGludCwgXCJ2aWV3SWRcIiA6IHN0cmluZywgXCJjdXN0b21DbGllbnREYXRhXCIgOiBtaXhlZH1cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBvYmplY3Qge1wic3VjY2Vzc1wiOiBmY3QsIFwiZXJyb3JcIiwgZmN0fVxuICAgICAqL1xuICAgIHJlaW5pdERvY3VtZW50OiBmdW5jdGlvbiBkb2N1bWVudENvbnRyb2xsZXJSZWluaXREb2N1bWVudCh2YWx1ZXMsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBwcm9wZXJ0aWVzID0gdGhpcy5nZXRQcm9wZXJ0aWVzKCk7XG4gICAgICB0aGlzLl9jaGVja0luaXRpYWxpc2VkTW9kZWwoKTtcbiAgICAgIHZhbHVlcyA9IHZhbHVlcyB8fCB7fTtcblxuICAgICAgLy9SZWluaXQgbW9kZWwgd2l0aCBzZXJ2ZXIgdmFsdWVzXG4gICAgICBfLmRlZmF1bHRzKHZhbHVlcywge1xuICAgICAgICByZXZpc2lvbjogcHJvcGVydGllcy5yZXZpc2lvbixcbiAgICAgICAgdmlld0lkOiBwcm9wZXJ0aWVzLnZpZXdJZCxcbiAgICAgICAgaW5pdGlkOiBwcm9wZXJ0aWVzLmluaXRpZFxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiB0aGlzLmZldGNoRG9jdW1lbnQodmFsdWVzLCBvcHRpb25zKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRmV0Y2ggYSBuZXcgZG9jdW1lbnRcbiAgICAgKiBAcGFyYW0gdmFsdWVzIG9iamVjdCB7XCJpbml0aWRcIiA6IGludCwgXCJyZXZpc2lvblwiIDogaW50LCBcInZpZXdJZFwiIDogc3RyaW5nLCBcImN1c3RvbUNsaWVudERhdGFcIiA6IG1peGVkfVxuICAgICAqIEBwYXJhbSBvcHRpb25zIG9iamVjdCB7XCJzdWNjZXNzXCI6IGZjdCwgXCJlcnJvclwiLCBmY3R9XG4gICAgICovXG4gICAgZmV0Y2hEb2N1bWVudDogZnVuY3Rpb24gZG9jdW1lbnRDb250cm9sbGVyRmV0Y2hEb2N1bWVudCh2YWx1ZXMsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBkb2N1bWVudFByb21pc2UsIGNhbGxCYWNrUHJvbWlzZTtcbiAgICAgIHZhciBjdXJyZW50V2lkZ2V0ID0gdGhpcztcbiAgICAgIHZhbHVlcyA9IF8uaXNVbmRlZmluZWQodmFsdWVzKSA/IHt9IDogdmFsdWVzO1xuICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgICAgIGlmICghXy5pc09iamVjdCh2YWx1ZXMpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAnRmV0Y2ggYXJndW1lbnQgbXVzdCBiZSBhbiBvYmplY3Qge1wiaW5pdGlkXCI6LCBcInJldmlzaW9uXCI6ICwgXCJ2aWV3SWRcIjogfSdcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCF2YWx1ZXMuaW5pdGlkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImluaXRpZCBhcmd1bWVudCBpcyBtYW5kYXRvcnlcIik7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOYU4odmFsdWVzLmluaXRpZCkpIHtcbiAgICAgICAgLy8gQ29udmVydCB0byBudW1lcmljIGluaXRpZCBpcyBwb3NzaWJsZVxuICAgICAgICB2YWx1ZXMuaW5pdGlkID0gcGFyc2VJbnQodmFsdWVzLmluaXRpZCk7XG4gICAgICB9XG5cbiAgICAgIC8vIFVzZSBkZWZhdWx0IHZhbHVlcyB3aGVuIGZldGNoIGFub3RoZXIgZG9jdW1lbnRcbiAgICAgIF8uZGVmYXVsdHModmFsdWVzLCB7IHJldmlzaW9uOiAtMSwgdmlld0lkOiBcIiFkZWZhdWx0Q29uc3VsdGF0aW9uXCIgfSk7XG4gICAgICBfLmRlZmF1bHRzKG9wdGlvbnMsIHsgZm9yY2U6IGZhbHNlIH0pO1xuXG4gICAgICBfLmVhY2goXG4gICAgICAgIF8ucGljayh2YWx1ZXMsIFwiaW5pdGlkXCIsIFwicmV2aXNpb25cIiwgXCJ2aWV3SWRcIiksXG4gICAgICAgIGZ1bmN0aW9uIGRjcERvY3VtZW50X3NldE5ld09wdGlvbnModmFsdWUsIGtleSkge1xuICAgICAgICAgIGN1cnJlbnRXaWRnZXQub3B0aW9uc1trZXldID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICk7XG5cbiAgICAgIGlmICghdGhpcy5fbW9kZWwpIHtcbiAgICAgICAgZG9jdW1lbnRQcm9taXNlID0gdGhpcy5faW5pdGlhbGl6ZVdpZGdldChcbiAgICAgICAgICBvcHRpb25zLFxuICAgICAgICAgIHZhbHVlcy5jdXN0b21DbGllbnREYXRhXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodmFsdWVzLmN1c3RvbUNsaWVudERhdGEpIHtcbiAgICAgICAgICB0aGlzLl9tb2RlbC5fY3VzdG9tQ2xpZW50RGF0YSA9IHZhbHVlcy5jdXN0b21DbGllbnREYXRhO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX21vZGVsLmlzTW9kaWZpZWQoKSAmJiBvcHRpb25zLmZvcmNlID09PSBmYWxzZSkge1xuICAgICAgICAgIGNhbGxCYWNrUHJvbWlzZSA9IHRoaXMuX21vZGVsLl9wcm9taXNlQ2FsbGJhY2soKTtcbiAgICAgICAgICB0aGlzLl9tb2RlbC50cmlnZ2VyKFwibG9hZERvY3VtZW50XCIsIHRoaXMuX2dldE1vZGVsVmFsdWUoKSwge1xuICAgICAgICAgICAgc3VjY2VzczogY2FsbEJhY2tQcm9taXNlLnN1Y2Nlc3MsXG4gICAgICAgICAgICBlcnJvcjogY2FsbEJhY2tQcm9taXNlLmVycm9yXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZG9jdW1lbnRQcm9taXNlID0gY2FsbEJhY2tQcm9taXNlLnByb21pc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZG9jdW1lbnRQcm9taXNlID0gdGhpcy5fbW9kZWwuZmV0Y2hEb2N1bWVudCh0aGlzLl9nZXRNb2RlbFZhbHVlKCkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5fcmVnaXN0ZXJPdXRwdXRQcm9taXNlKGRvY3VtZW50UHJvbWlzZSwgb3B0aW9ucyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNhdmUgdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAgICAgKiBSZWxvYWQgdGhlIGludGVyZmFjZSBpbiB0aGUgc2FtZSBtb2RlXG4gICAgICogQHBhcmFtIG9wdGlvbnMgb2JqZWN0IHtcInN1Y2Nlc3NcIjogZmN0LCBcImVycm9yXCIsIGZjdCwgXCJjdXN0b21DbGllbnREYXRhXCIgOiBtaXhlZH1cbiAgICAgKlxuICAgICAqL1xuICAgIHNhdmVEb2N1bWVudDogZnVuY3Rpb24gZG9jdW1lbnRDb250cm9sbGVyU2F2ZShvcHRpb25zKSB7XG4gICAgICB2YXIgZG9jdW1lbnRQcm9taXNlO1xuICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICB0aGlzLl9jaGVja0luaXRpYWxpc2VkTW9kZWwoKTtcbiAgICAgIGlmIChvcHRpb25zLmN1c3RvbUNsaWVudERhdGEpIHtcbiAgICAgICAgdGhpcy5fbW9kZWwuX2N1c3RvbUNsaWVudERhdGEgPSBvcHRpb25zLmN1c3RvbUNsaWVudERhdGE7XG4gICAgICB9XG4gICAgICBkb2N1bWVudFByb21pc2UgPSB0aGlzLl9tb2RlbC5zYXZlRG9jdW1lbnQoKTtcbiAgICAgIHJldHVybiB0aGlzLl9yZWdpc3Rlck91dHB1dFByb21pc2UoZG9jdW1lbnRQcm9taXNlLCBvcHRpb25zKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ2hhbmdlIHRoZSB3b3JrZmxvdyBzdGF0ZSBvZiB0aGUgZG9jdW1lbnRcbiAgICAgKlxuICAgICAqIEBwYXJhbSBwYXJhbWV0ZXJzXG4gICAgICogQHBhcmFtIHJlaW5pdE9wdGlvbnNcbiAgICAgKiBAcGFyYW0gb3B0aW9uc1xuICAgICAqL1xuICAgIGNoYW5nZVN0YXRlRG9jdW1lbnQ6IGZ1bmN0aW9uIGRvY3VtZW50Q29udHJvbGxlcl9jaGFuZ2VTdGF0ZURvY3VtZW50KFxuICAgICAgcGFyYW1ldGVycyxcbiAgICAgIHJlaW5pdE9wdGlvbnMsXG4gICAgICBvcHRpb25zXG4gICAgKSB7XG4gICAgICB2YXIgZG9jdW1lbnRQcm9taXNlO1xuICAgICAgdGhpcy5fY2hlY2tJbml0aWFsaXNlZE1vZGVsKCk7XG4gICAgICBpZiAoIV8uaXNPYmplY3QocGFyYW1ldGVycykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICdjaGFuZ2VTdGF0ZURvY3VtZW50IGZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYW4gb2JqZWN0IHtcIm5leHRTdGF0ZVwiOiwgXCJ0cmFuc2l0aW9uXCI6ICwgXCJ2YWx1ZXNcIjosIFwidW5hdHRlbmRlZFwiOiwgXCJcIiB9J1xuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKFxuICAgICAgICAhXy5pc1N0cmluZyhwYXJhbWV0ZXJzLm5leHRTdGF0ZSkgfHxcbiAgICAgICAgIV8uaXNTdHJpbmcocGFyYW1ldGVycy50cmFuc2l0aW9uKVxuICAgICAgKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5leHRTdGF0ZSBhbmQgdHJhbnNpdGlvbiBhcmd1bWVudHMgYXJlIG1hbmRhdG9yeVwiKTtcbiAgICAgIH1cbiAgICAgIGRvY3VtZW50UHJvbWlzZSA9IHRoaXMuX2luaXRBbmREaXNwbGF5VHJhbnNpdGlvbihcbiAgICAgICAgcGFyYW1ldGVycy5uZXh0U3RhdGUsXG4gICAgICAgIHBhcmFtZXRlcnMudHJhbnNpdGlvbixcbiAgICAgICAgcGFyYW1ldGVycy52YWx1ZXMgfHwgbnVsbCxcbiAgICAgICAgcGFyYW1ldGVycy51bmF0dGVuZGVkIHx8IGZhbHNlLFxuICAgICAgICByZWluaXRPcHRpb25zXG4gICAgICApO1xuICAgICAgcmV0dXJuIHRoaXMuX3JlZ2lzdGVyT3V0cHV0UHJvbWlzZShkb2N1bWVudFByb21pc2UsIG9wdGlvbnMpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBEZWxldGUgdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAgICAgKiBSZWxvYWQgdGhlIGludGVyZmFjZSBpbiB0aGUgc2FtZSBtb2RlXG4gICAgICogQHBhcmFtIG9wdGlvbnMgb2JqZWN0IHtcInN1Y2Nlc3NcIjogZmN0LCBcImVycm9yXCIsIGZjdCwgXCJjdXN0b21DbGllbnREYXRhXCIgOiBtaXhlZH1cbiAgICAgKi9cbiAgICBkZWxldGVEb2N1bWVudDogZnVuY3Rpb24gZG9jdW1lbnRDb250cm9sbGVyRGVsZXRlKG9wdGlvbnMpIHtcbiAgICAgIHZhciBkb2N1bWVudFByb21pc2U7XG4gICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgIHRoaXMuX2NoZWNrSW5pdGlhbGlzZWRNb2RlbCgpO1xuICAgICAgaWYgKG9wdGlvbnMuY3VzdG9tQ2xpZW50RGF0YSkge1xuICAgICAgICB0aGlzLl9tb2RlbC5fY3VzdG9tQ2xpZW50RGF0YSA9IG9wdGlvbnMuY3VzdG9tQ2xpZW50RGF0YTtcbiAgICAgIH1cbiAgICAgIGRvY3VtZW50UHJvbWlzZSA9IHRoaXMuX21vZGVsLmRlbGV0ZURvY3VtZW50KCk7XG4gICAgICByZXR1cm4gdGhpcy5fcmVnaXN0ZXJPdXRwdXRQcm9taXNlKGRvY3VtZW50UHJvbWlzZSwgb3B0aW9ucyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJlc3RvcmUgdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAgICAgKiBSZWxvYWQgdGhlIGludGVyZmFjZSBpbiB0aGUgc2FtZSBtb2RlXG4gICAgICogQHBhcmFtIG9wdGlvbnMgb2JqZWN0IHtcInN1Y2Nlc3NcIjogZmN0LCBcImVycm9yXCIsIGZjdCwgXCJjdXN0b21DbGllbnREYXRhXCIgOiBtaXhlZH1cbiAgICAgKi9cbiAgICByZXN0b3JlRG9jdW1lbnQ6IGZ1bmN0aW9uIGRvY3VtZW50Q29udHJvbGxlclJlc3RvcmUob3B0aW9ucykge1xuICAgICAgdmFyIGRvY3VtZW50UHJvbWlzZTtcbiAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgdGhpcy5fY2hlY2tJbml0aWFsaXNlZE1vZGVsKCk7XG4gICAgICBpZiAob3B0aW9ucy5jdXN0b21DbGllbnREYXRhKSB7XG4gICAgICAgIHRoaXMuX21vZGVsLl9jdXN0b21DbGllbnREYXRhID0gb3B0aW9ucy5jdXN0b21DbGllbnREYXRhO1xuICAgICAgfVxuICAgICAgZG9jdW1lbnRQcm9taXNlID0gdGhpcy5fbW9kZWwucmVzdG9yZURvY3VtZW50KCk7XG4gICAgICByZXR1cm4gdGhpcy5fcmVnaXN0ZXJPdXRwdXRQcm9taXNlKGRvY3VtZW50UHJvbWlzZSwgb3B0aW9ucyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEdldCBhIHByb3BlcnR5IHZhbHVlXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcHJvcGVydHlcbiAgICAgKiBAcmV0dXJucyB7Kn1cbiAgICAgKi9cbiAgICBnZXRQcm9wZXJ0eTogZnVuY3Rpb24gZG9jdW1lbnRDb250cm9sbGVyR2V0RG9jdW1lbnRQcm9wZXJ0eShwcm9wZXJ0eSkge1xuICAgICAgdGhpcy5fY2hlY2tJbml0aWFsaXNlZE1vZGVsKCk7XG4gICAgICBpZiAocHJvcGVydHkgPT09IFwiaXNNb2RpZmllZFwiKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tb2RlbC5pc01vZGlmaWVkKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5fbW9kZWwuZ2V0U2VydmVyUHJvcGVydGllcygpW3Byb3BlcnR5XTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogR2V0IGFsbCB0aGUgcHJvcGVydGllc1xuICAgICAqIEByZXR1cm5zIHsqfVxuICAgICAqL1xuICAgIGdldFByb3BlcnRpZXM6IGZ1bmN0aW9uIGRvY3VtZW50Q29udHJvbGxlckdldERvY3VtZW50UHJvcGVydGllcygpIHtcbiAgICAgIHZhciBwcm9wZXJ0aWVzLFxuICAgICAgICByZWFkeSA9IHRydWU7XG4gICAgICB0cnkge1xuICAgICAgICB0aGlzLl9jaGVja0luaXRpYWxpc2VkTW9kZWwoKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmVhZHkgPSBmYWxzZTtcbiAgICAgICAgcHJvcGVydGllcyA9IHtcbiAgICAgICAgICBub3RMb2FkZWQ6IHRydWVcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIGlmIChyZWFkeSkge1xuICAgICAgICBwcm9wZXJ0aWVzID0gdGhpcy5fbW9kZWwuZ2V0U2VydmVyUHJvcGVydGllcygpO1xuICAgICAgICBwcm9wZXJ0aWVzLmlzTW9kaWZpZWQgPSB0aGlzLl9tb2RlbC5pc01vZGlmaWVkKCk7XG4gICAgICAgIHByb3BlcnRpZXMudXJsID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcm9wZXJ0aWVzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiBhbiBhdHRyaWJ1dGUgZXhpc3RcbiAgICAgKlxuICAgICAqIEBwYXJhbSBhdHRyaWJ1dGVJZFxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAgICovXG4gICAgaGFzQXR0cmlidXRlOiBmdW5jdGlvbiBkb2N1bWVudENvbnRyb2xsZXJfaGFzQXR0cmlidXRlKGF0dHJpYnV0ZUlkKSB7XG4gICAgICB0aGlzLl9jaGVja0luaXRpYWxpc2VkTW9kZWwoKTtcbiAgICAgIHZhciBhdHRyaWJ1dGUgPSB0aGlzLl9tb2RlbC5nZXQoXCJhdHRyaWJ1dGVzXCIpLmdldChhdHRyaWJ1dGVJZCk7XG4gICAgICByZXR1cm4gISFhdHRyaWJ1dGU7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgYXR0cmlidXRlIGludGVyZmFjZSBvYmplY3RcbiAgICAgKiBSZXR1cm4gbnVsbCBpZiBhdHRyaWJ1dGUgbm90IGZvdW5kXG4gICAgICogQHBhcmFtIGF0dHJpYnV0ZUlkXG4gICAgICogQHJldHVybnMgQXR0cmlidXRlSW50ZXJmYWNlfG51bGxcbiAgICAgKi9cbiAgICBnZXRBdHRyaWJ1dGU6IGZ1bmN0aW9uIGRvY3VtZW50Q29udHJvbGxlckdldEF0dHJpYnV0ZShhdHRyaWJ1dGVJZCkge1xuICAgICAgdGhpcy5fY2hlY2tJbml0aWFsaXNlZE1vZGVsKCk7XG4gICAgICB2YXIgYXR0cmlidXRlTW9kZWwgPSB0aGlzLl9nZXRBdHRyaWJ1dGVNb2RlbChhdHRyaWJ1dGVJZCk7XG4gICAgICBpZiAoIWF0dHJpYnV0ZU1vZGVsKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5ldyBBdHRyaWJ1dGVJbnRlcmZhY2UodGhpcy5fZ2V0QXR0cmlidXRlTW9kZWwoYXR0cmlidXRlSWQpKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogR2V0IGFsbCB0aGUgYXR0cmlidXRlcyBvZiB0aGUgY3VycmVudCBkb2N1bWVudFxuICAgICAqXG4gICAgICogQHJldHVybnMgW0F0dHJpYnV0ZUludGVyZmFjZV1cbiAgICAgKi9cbiAgICBnZXRBdHRyaWJ1dGVzOiBmdW5jdGlvbiBkb2N1bWVudENvbnRyb2xsZXJHZXRBdHRyaWJ1dGVzKCkge1xuICAgICAgdGhpcy5fY2hlY2tJbml0aWFsaXNlZE1vZGVsKCk7XG4gICAgICByZXR1cm4gdGhpcy5fbW9kZWxcbiAgICAgICAgLmdldChcImF0dHJpYnV0ZXNcIilcbiAgICAgICAgLm1hcChmdW5jdGlvbiBkb2N1bWVudENvbnRyb2xsZXJfbWFwQXR0cmlidXRlKGN1cnJlbnRBdHRyaWJ1dGUpIHtcbiAgICAgICAgICByZXR1cm4gbmV3IEF0dHJpYnV0ZUludGVyZmFjZShjdXJyZW50QXR0cmlidXRlKTtcbiAgICAgICAgfSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIGEgbWVudSBleGlzdFxuICAgICAqXG4gICAgICogQHBhcmFtIG1lbnVJZFxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAgICovXG4gICAgaGFzTWVudTogZnVuY3Rpb24gZG9jdW1lbnRDb250cm9sbGVyX2hhc01lbnUobWVudUlkKSB7XG4gICAgICB0aGlzLl9jaGVja0luaXRpYWxpc2VkTW9kZWwoKTtcbiAgICAgIHZhciBtZW51ID0gdGhpcy5fZ2V0TWVudU1vZGVsKG1lbnVJZCk7XG4gICAgICByZXR1cm4gISFtZW51O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIG1lbnUgaW50ZXJmYWNlIG9iamVjdFxuICAgICAqXG4gICAgICogQHBhcmFtIG1lbnVJZFxuICAgICAqIEByZXR1cm5zIE1lbnVJbnRlcmZhY2VcbiAgICAgKi9cbiAgICBnZXRNZW51OiBmdW5jdGlvbiBkb2N1bWVudENvbnRyb2xsZXJHZXRNZW51KG1lbnVJZCkge1xuICAgICAgdGhpcy5fY2hlY2tJbml0aWFsaXNlZE1vZGVsKCk7XG4gICAgICB2YXIgbWVudSA9IHRoaXMuX2dldE1lbnVNb2RlbChtZW51SWQpO1xuICAgICAgaWYgKCFtZW51KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5ldyBNZW51SW50ZXJmYWNlKG1lbnUpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBHZXQgYWxsIHRoZSBtZW51IG9mIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBbTWVudUludGVyZmFjZV1cbiAgICAgKi9cbiAgICBnZXRNZW51czogZnVuY3Rpb24gZG9jdW1lbnRDb250cm9sbGVyR2V0TWVudXMoKSB7XG4gICAgICB0aGlzLl9jaGVja0luaXRpYWxpc2VkTW9kZWwoKTtcbiAgICAgIHJldHVybiB0aGlzLl9tb2RlbFxuICAgICAgICAuZ2V0KFwibWVudXNcIilcbiAgICAgICAgLm1hcChmdW5jdGlvbiBkb2N1bWVudENvbnRyb2xsZXJfbWFwTWVudShjdXJyZW50TWVudSkge1xuICAgICAgICAgIHJldHVybiBuZXcgTWVudUludGVyZmFjZShjdXJyZW50TWVudSk7XG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTZWxlY3QgYSB0YWJcbiAgICAgKlxuICAgICAqIEBwYXJhbSB0YWJJZFxuICAgICAqIEByZXR1cm5zIHZvaWRcbiAgICAgKi9cbiAgICBzZWxlY3RUYWI6IGZ1bmN0aW9uIGRvY3VtZW50Q29udHJvbGxlclNlbGVjdFRhYih0YWJJZCkge1xuICAgICAgdGhpcy5fY2hlY2tJbml0aWFsaXNlZE1vZGVsKCk7XG4gICAgICB2YXIgYXR0cmlidXRlTW9kZWwgPSB0aGlzLl9nZXRBdHRyaWJ1dGVNb2RlbCh0YWJJZCk7XG4gICAgICBpZiAoIWF0dHJpYnV0ZU1vZGVsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIGF0dHJpYnV0ZSBcIicgKyB0YWJJZCArICdcIiBjYW5ub3QgYmUgZm91bmQuJyk7XG4gICAgICB9XG4gICAgICBpZiAoYXR0cmlidXRlTW9kZWwuZ2V0KFwidHlwZVwiKSAhPT0gXCJ0YWJcIikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBhdHRyaWJ1dGUgXCInICsgdGFiSWQgKyAnXCIgaXMgbm90IGEgdGFiLicpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9tb2RlbC50cmlnZ2VyKFwiZG9TZWxlY3RUYWJcIiwgdGFiSWQpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBEcmF3IHRhYiBjb250ZW50XG4gICAgICpcbiAgICAgKiBAcGFyYW0gdGFiSWRcbiAgICAgKiBAcmV0dXJucyB2b2lkXG4gICAgICovXG4gICAgZHJhd1RhYjogZnVuY3Rpb24gZG9jdW1lbnRDb250cm9sbGVyRHJhd1RhYih0YWJJZCkge1xuICAgICAgdGhpcy5fY2hlY2tJbml0aWFsaXNlZE1vZGVsKCk7XG4gICAgICB2YXIgYXR0cmlidXRlTW9kZWwgPSB0aGlzLl9nZXRBdHRyaWJ1dGVNb2RlbCh0YWJJZCk7XG4gICAgICBpZiAoIWF0dHJpYnV0ZU1vZGVsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIGF0dHJpYnV0ZSBcIicgKyB0YWJJZCArICdcIiBjYW5ub3QgYmUgZm91bmQuJyk7XG4gICAgICB9XG4gICAgICBpZiAoYXR0cmlidXRlTW9kZWwuZ2V0KFwidHlwZVwiKSAhPT0gXCJ0YWJcIikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBhdHRyaWJ1dGUgXCInICsgdGFiSWQgKyAnXCIgaXMgbm90IGEgdGFiLicpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9tb2RlbC50cmlnZ2VyKFwiZG9EcmF3VGFiXCIsIHRhYklkKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogR2V0IGFuIGF0dHJpYnV0ZSB2YWx1ZVxuICAgICAqXG4gICAgICogQHBhcmFtIGF0dHJpYnV0ZUlkXG4gICAgICogQHBhcmFtIHR5cGUgc3RyaW5nIChjdXJyZW50fHByZXZpb3VzfGluaXRpYWx8YWxsKSB3aGF0IGtpbmQgb2YgdmFsdWUgKGRlZmF1bHQgOiBjdXJyZW50KVxuICAgICAqIEByZXR1cm5zIHsqfVxuICAgICAqL1xuICAgIGdldFZhbHVlOiBmdW5jdGlvbiBkb2N1bWVudENvbnRyb2xsZXJHZXRWYWx1ZShhdHRyaWJ1dGVJZCwgdHlwZSkge1xuICAgICAgdmFyIGF0dHJpYnV0ZTtcbiAgICAgIHRoaXMuX2NoZWNrSW5pdGlhbGlzZWRNb2RlbCgpO1xuICAgICAgdmFyIGF0dHJpYnV0ZU1vZGVsID0gdGhpcy5fZ2V0QXR0cmlidXRlTW9kZWwoYXR0cmlidXRlSWQpO1xuICAgICAgaWYgKCFhdHRyaWJ1dGVNb2RlbCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIGF0dHJpYnV0ZSA9IG5ldyBBdHRyaWJ1dGVJbnRlcmZhY2UoYXR0cmlidXRlTW9kZWwpO1xuICAgICAgcmV0dXJuIF8uY2xvbmUoYXR0cmlidXRlLmdldFZhbHVlKHR5cGUpKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogR2V0IGFsbCB0aGUgdmFsdWVzXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7Knx7fX1cbiAgICAgKi9cbiAgICBnZXRWYWx1ZXM6IGZ1bmN0aW9uIGRvY3VtZW50Q29udHJvbGxlckdldFZhbHVlcygpIHtcbiAgICAgIHRoaXMuX2NoZWNrSW5pdGlhbGlzZWRNb2RlbCgpO1xuICAgICAgcmV0dXJuIHRoaXMuX21vZGVsLmdldFZhbHVlcygpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBHZXQgY3VzdG9tRGF0YSBmcm9tIHJlbmRlciB2aWV3IG1vZGVsXG4gICAgICogQHJldHVybnMgeyp9XG4gICAgICovXG4gICAgZ2V0Q3VzdG9tU2VydmVyRGF0YTogZnVuY3Rpb24gZG9jdW1lbnRDb250cm9sbGVyR2V0U2VydmVyQ3VzdG9tRGF0YSgpIHtcbiAgICAgIHRoaXMuX2NoZWNrSW5pdGlhbGlzZWRNb2RlbCgpO1xuICAgICAgcmV0dXJuIHRoaXMuX21vZGVsLmdldChcImN1c3RvbVNlcnZlckRhdGFcIik7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBBZGQgY3VzdG9tRGF0YSBmcm9tIHJlbmRlciB2aWV3IG1vZGVsXG4gICAgICogQHJldHVybnMgeyp9XG4gICAgICovXG4gICAgYWRkQ3VzdG9tQ2xpZW50RGF0YTogZnVuY3Rpb24gZG9jdW1lbnRDb250cm9sbGVyQWRkQ3VzdG9tQ2xpZW50RGF0YShcbiAgICAgIGRvY3VtZW50Q2hlY2ssXG4gICAgICB2YWx1ZVxuICAgICkge1xuICAgICAgdmFyIGN1cnJlbnRXaWRnZXQgPSB0aGlzO1xuICAgICAgdGhpcy5fY2hlY2tJbml0aWFsaXNlZE1vZGVsKCk7XG4gICAgICAvL0ZpcnN0IGNhc2Ugbm8gZGF0YSwgc28gZG9jdW1lbnRDaGVjayBpcyBkYXRhXG4gICAgICBpZiAoXy5pc1VuZGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgICAgdmFsdWUgPSBkb2N1bWVudENoZWNrO1xuICAgICAgICBkb2N1bWVudENoZWNrID0ge307XG4gICAgICB9XG4gICAgICAvL1NlY29uZCBjYXNlIGRvY3VtZW50Q2hlY2sgaXMgYSBmdW5jdGlvbiBhbmQgZGF0YSBpcyBvYmplY3RcbiAgICAgIGlmIChfLmlzRnVuY3Rpb24oZG9jdW1lbnRDaGVjaykgJiYgXy5pc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgZG9jdW1lbnRDaGVjayA9IHsgZG9jdW1lbnRDaGVjazogZG9jdW1lbnRDaGVjayB9O1xuICAgICAgfVxuICAgICAgLy9UaGlyZCBjYXNlIGRvY3VtZW50Q2hlY2sgaXMgYW4gb2JqZWN0IGFuZCBkYXRhIGlzIG9iamVjdCA9PiBjaGVjayBpZiBkb2N1bWVudENoZWNrIHByb3BlcnR5IGV4aXN0XG4gICAgICBpZiAoXy5pc09iamVjdCh2YWx1ZSkgJiYgXy5pc09iamVjdChkb2N1bWVudENoZWNrKSkge1xuICAgICAgICBkb2N1bWVudENoZWNrID0gXy5kZWZhdWx0cyhkb2N1bWVudENoZWNrLCB7XG4gICAgICAgICAgZG9jdW1lbnRDaGVjazogZnVuY3Rpb24gY2xpZW50Q3VzdG9tT0soKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIG9uY2U6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgXCJDb25zdHJhaW50IG11c3QgYmUgYW4gdmFsdWUgb3IgYSBmdW5jdGlvbiBhbmQgYSB2YWx1ZVwiXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICAvL1JlZ2lzdGVyIHRoZSBjdXN0b21DbGllbnREYXRhXG4gICAgICBfLmVhY2godmFsdWUsIGZ1bmN0aW9uIGRvY3VtZW50Q29udHJvbGxlckFkZEN1c3RvbUNsaWVudERhdGFFYWNoKFxuICAgICAgICBjdXJyZW50VmFsdWUsXG4gICAgICAgIGN1cnJlbnRLZXlcbiAgICAgICkge1xuICAgICAgICBjdXJyZW50V2lkZ2V0Ll9jdXN0b21DbGllbnREYXRhW2N1cnJlbnRLZXldID0ge1xuICAgICAgICAgIHZhbHVlOiBjdXJyZW50VmFsdWUsXG4gICAgICAgICAgZG9jdW1lbnRDaGVjazogZG9jdW1lbnRDaGVjay5kb2N1bWVudENoZWNrLFxuICAgICAgICAgIG9uY2U6IGRvY3VtZW50Q2hlY2sub25jZVxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBHZXQgY3VzdG9tRGF0YSBmcm9tIHJlbmRlciB2aWV3IG1vZGVsXG4gICAgICogQHJldHVybnMgeyp9XG4gICAgICovXG4gICAgc2V0Q3VzdG9tQ2xpZW50RGF0YTogZnVuY3Rpb24gZG9jdW1lbnRDb250cm9sbGVyU2V0Q3VzdG9tQ2xpZW50RGF0YShcbiAgICAgIGRvY3VtZW50Q2hlY2ssXG4gICAgICB2YWx1ZVxuICAgICkge1xuICAgICAgY29uc29sZS5lcnJvcihcInRoaXMgZnVuY3Rpb24gKHNldEN1c3RvbUNsaWVudERhdGEpIGlzIGRlcHJlY2F0ZWRcIik7XG4gICAgICByZXR1cm4gdGhpcy5hZGRDdXN0b21DbGllbnREYXRhKGRvY3VtZW50Q2hlY2ssIHZhbHVlKTtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIEdldCBjdXN0b21EYXRhIGZyb20gcmVuZGVyIHZpZXcgbW9kZWxcbiAgICAgKiBAcmV0dXJucyB7Kn1cbiAgICAgKi9cbiAgICBnZXRDdXN0b21DbGllbnREYXRhOiBmdW5jdGlvbiBkb2N1bWVudENvbnRyb2xsZXJTZXRDdXN0b21DbGllbnREYXRhKFxuICAgICAgZGVsZXRlT25jZVxuICAgICkge1xuICAgICAgdmFyIHZhbHVlcyA9IHt9LFxuICAgICAgICBjdXJyZW50V2lkZ2V0ID0gdGhpcyxcbiAgICAgICAgJGVsZW1lbnQsXG4gICAgICAgIHByb3BlcnRpZXMsXG4gICAgICAgIG5ld0N1c3RvbURhdGEgPSB7fTtcbiAgICAgIHRoaXMuX2NoZWNrSW5pdGlhbGlzZWRNb2RlbCgpO1xuICAgICAgcHJvcGVydGllcyA9IHRoaXMuZ2V0UHJvcGVydGllcygpO1xuICAgICAgJGVsZW1lbnQgPSAkKGN1cnJlbnRXaWRnZXQuZWxlbWVudCk7XG4gICAgICBfLmVhY2goY3VycmVudFdpZGdldC5fY3VzdG9tQ2xpZW50RGF0YSwgZnVuY3Rpb24gYW5hbHl6ZUN1c3RvbUNsaWVudChcbiAgICAgICAgY3VycmVudEN1c3RvbSxcbiAgICAgICAga2V5XG4gICAgICApIHtcbiAgICAgICAgaWYgKGN1cnJlbnRDdXN0b20uZG9jdW1lbnRDaGVjay5jYWxsKCRlbGVtZW50LCBwcm9wZXJ0aWVzKSkge1xuICAgICAgICAgIHZhbHVlc1trZXldID0gY3VycmVudEN1c3RvbS52YWx1ZTtcbiAgICAgICAgICBpZiAoZGVsZXRlT25jZSA9PT0gdHJ1ZSAmJiAhY3VycmVudEN1c3RvbS5vbmNlKSB7XG4gICAgICAgICAgICBuZXdDdXN0b21EYXRhW2tleV0gPSBjdXJyZW50Q3VzdG9tO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoZGVsZXRlT25jZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgbmV3Q3VzdG9tRGF0YVtrZXldID0gY3VycmVudEN1c3RvbTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaWYgKGRlbGV0ZU9uY2UgPT09IHRydWUpIHtcbiAgICAgICAgY3VycmVudFdpZGdldC5fY3VzdG9tQ2xpZW50RGF0YSA9IG5ld0N1c3RvbURhdGE7XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsdWVzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBEZWxldGUgYSBjdXN0b20gZGF0YVxuICAgICAqIEByZXR1cm5zIHsqfVxuICAgICAqL1xuICAgIHJlbW92ZUN1c3RvbUNsaWVudERhdGE6IGZ1bmN0aW9uIGRvY3VtZW50Q29udHJvbGxlclJlbW92ZUN1c3RvbUNsaWVudERhdGEoXG4gICAgICBrZXlcbiAgICApIHtcbiAgICAgIGlmICh0aGlzLl9jdXN0b21DbGllbnREYXRhW2tleV0pIHtcbiAgICAgICAgZGVsZXRlIHRoaXMuX2N1c3RvbUNsaWVudERhdGFba2V5XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogU2V0IGEgdmFsdWVcbiAgICAgKiBUcmlnZ2VyIGEgY2hhbmdlIGV2ZW50XG4gICAgICpcbiAgICAgKiBAcGFyYW0gYXR0cmlidXRlSWQgc3RyaW5nIGF0dHJpYnV0ZSBpZGVudGlmaWVyXG4gICAgICogQHBhcmFtIHZhbHVlIG9iamVjdCB7IFwidmFsdWVcIiA6ICosIFwiZGlzcGxheVZhbHVlXCIgOiAqfVxuICAgICAqIEByZXR1cm5zIHsqfVxuICAgICAqL1xuICAgIHNldFZhbHVlOiBmdW5jdGlvbiBkb2N1bWVudENvbnRyb2xsZXJTZXRWYWx1ZShhdHRyaWJ1dGVJZCwgdmFsdWUpIHtcbiAgICAgIHRoaXMuX2NoZWNrSW5pdGlhbGlzZWRNb2RlbCgpO1xuICAgICAgdmFyIGF0dHJpYnV0ZU1vZGVsID0gdGhpcy5fZ2V0QXR0cmlidXRlTW9kZWwoYXR0cmlidXRlSWQpO1xuICAgICAgaWYgKCFhdHRyaWJ1dGVNb2RlbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmFibGUgdG8gZmluZCBhdHRyaWJ1dGUgXCIgKyBhdHRyaWJ1dGVJZCk7XG4gICAgICB9XG4gICAgICB2YXIgYXR0cmlidXRlSW50ZXJmYWNlID0gbmV3IEF0dHJpYnV0ZUludGVyZmFjZShhdHRyaWJ1dGVNb2RlbCk7XG4gICAgICB2YXIgaW5kZXg7XG4gICAgICB2YXIgY3VycmVudFZhbHVlTGVuZ3RoO1xuICAgICAgdmFyIGk7XG5cbiAgICAgIGlmIChhdHRyaWJ1dGVNb2RlbC5nZXRQYXJlbnQoKS5nZXQoXCJ0eXBlXCIpID09PSBcImFycmF5XCIpIHtcbiAgICAgICAgYXR0cmlidXRlSW50ZXJmYWNlLnNldFZhbHVlKHZhbHVlLCB0cnVlKTsgLy8gSnVzdCB2ZXJpZnkgdmFsdWUgY29uZGl0aW9uc1xuICAgICAgICBpZiAoIV8uaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICBpbmRleCA9IHZhbHVlLmluZGV4O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGluZGV4ID0gdmFsdWUubGVuZ3RoIC0gMTtcbiAgICAgICAgfVxuICAgICAgICBjdXJyZW50VmFsdWVMZW5ndGggPSBhdHRyaWJ1dGVJbnRlcmZhY2UuZ2V0VmFsdWUoKS5sZW5ndGg7XG4gICAgICAgIGF0dHJpYnV0ZUludGVyZmFjZS5zZXRWYWx1ZSh2YWx1ZSk7XG5cbiAgICAgICAgLy8gUGFkIHZhbHVlcyBvZiBjb21wbGV0ZSBhcnJheSB3aXRoIGRlZmF1bHQgdmFsdWVzXG4gICAgICAgIHZhciBhcnJheU1vZGVsID0gYXR0cmlidXRlTW9kZWwuZ2V0UGFyZW50KCk7XG4gICAgICAgIHZhciBtb2RpZmllZENvbHVtbnMgPSB7fTtcbiAgICAgICAgYXJyYXlNb2RlbC5nZXQoXCJjb250ZW50XCIpLmVhY2goZnVuY3Rpb24oYU1vZGVsKSB7XG4gICAgICAgICAgdmFyIGFWYWx1ZSA9IF8uY2xvbmUoYU1vZGVsLmdldChcImF0dHJpYnV0ZVZhbHVlXCIpKTtcbiAgICAgICAgICB2YXIgZGVmYXVsdFZhbHVlID0gYU1vZGVsLmdldChcImRlZmF1bHRWYWx1ZVwiKTtcblxuICAgICAgICAgIGlmICghZGVmYXVsdFZhbHVlKSB7XG4gICAgICAgICAgICBkZWZhdWx0VmFsdWUgPSBhTW9kZWwuaGFzTXVsdGlwbGVPcHRpb24oKVxuICAgICAgICAgICAgICA/IFtdXG4gICAgICAgICAgICAgIDogeyB2YWx1ZTogbnVsbCwgZGlzcGxheVZhbHVlOiBcIlwiIH07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZm9yIChpID0gY3VycmVudFZhbHVlTGVuZ3RoOyBpIDw9IGluZGV4OyBpKyspIHtcbiAgICAgICAgICAgIGlmIChfLmlzVW5kZWZpbmVkKGFWYWx1ZVtpXSkpIHtcbiAgICAgICAgICAgICAgYVZhbHVlW2ldID0gZGVmYXVsdFZhbHVlO1xuICAgICAgICAgICAgICBtb2RpZmllZENvbHVtbnNbYU1vZGVsLmlkXSA9IHsgbW9kZWw6IGFNb2RlbCwgdmFsdWVzOiBhVmFsdWUgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIF8uZWFjaChtb2RpZmllZENvbHVtbnMsIGZ1bmN0aW9uIGRvY3VtZW50Q29udHJvbGxlclBhZFZhbHVlcyhtb2REYXRhKSB7XG4gICAgICAgICAgXy5kZWZlcihmdW5jdGlvbiBkb2N1bWVudENvbnRyb2xsZXJQYWRWYWx1ZSgpIHtcbiAgICAgICAgICAgIG1vZERhdGEubW9kZWwuc2V0KFwiYXR0cmlidXRlVmFsdWVcIiwgbW9kRGF0YS52YWx1ZXMpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICByZXR1cm4gYXR0cmlidXRlSW50ZXJmYWNlLnNldFZhbHVlKHZhbHVlKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQWRkIGEgcm93IHRvIGFuIGFycmF5XG4gICAgICpcbiAgICAgKiBAcGFyYW0gYXR0cmlidXRlSWQgc3RyaW5nIGF0dHJpYnV0ZSBhcnJheVxuICAgICAqIEBwYXJhbSB2YWx1ZXMgb2JqZWN0IHsgXCJhdHRyaWJ1dGVJZFwiIDogeyBcInZhbHVlXCIgOiAqLCBcImRpc3BsYXlWYWx1ZVwiIDogKiB9LCAuLi59XG4gICAgICovXG4gICAgYXBwZW5kQXJyYXlSb3c6IGZ1bmN0aW9uIGRvY3VtZW50Q29udHJvbGxlckFkZEFycmF5Um93KFxuICAgICAgYXR0cmlidXRlSWQsXG4gICAgICB2YWx1ZXNcbiAgICApIHtcbiAgICAgIHRoaXMuX2NoZWNrSW5pdGlhbGlzZWRNb2RlbCgpO1xuICAgICAgdmFyIGF0dHJpYnV0ZSA9IHRoaXMuX2dldEF0dHJpYnV0ZU1vZGVsKGF0dHJpYnV0ZUlkKTtcblxuICAgICAgaWYgKCFhdHRyaWJ1dGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5hYmxlIHRvIGZpbmQgYXR0cmlidXRlIFwiICsgYXR0cmlidXRlSWQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoYXR0cmlidXRlLmdldChcInR5cGVcIikgIT09IFwiYXJyYXlcIikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgXCJBdHRyaWJ1dGUgXCIgKyBhdHRyaWJ1dGVJZCArIFwiIG11c3QgYmUgYW4gYXR0cmlidXRlIG9mIHR5cGUgYXJyYXlcIlxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKCFfLmlzT2JqZWN0KHZhbHVlcykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIFwiVmFsdWVzIG11c3QgYmUgYW4gb2JqZWN0IHdoZXJlIGVhY2ggcHJvcGVydGllcyBpcyBhbiBhdHRyaWJ1dGUgb2YgdGhlIGFycmF5IGZvciBcIiArXG4gICAgICAgICAgICBhdHRyaWJ1dGVJZFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgYXR0cmlidXRlXG4gICAgICAgIC5nZXQoXCJjb250ZW50XCIpXG4gICAgICAgIC5lYWNoKGZ1bmN0aW9uIGRvY3VtZW50Q29udHJvbGxlcl9hZGRBQ2VsbChjdXJyZW50QXR0cmlidXRlKSB7XG4gICAgICAgICAgdmFyIG5ld1ZhbHVlID0gdmFsdWVzW2N1cnJlbnRBdHRyaWJ1dGUuaWRdO1xuICAgICAgICAgIHZhciBjdXJyZW50VmFsdWUgPSBjdXJyZW50QXR0cmlidXRlLmdldFZhbHVlKCk7XG4gICAgICAgICAgaWYgKF8uaXNVbmRlZmluZWQobmV3VmFsdWUpKSB7XG4gICAgICAgICAgICAvLyBTZXQgZGVmYXVsdCB2YWx1ZSBpZiBubyB2YWx1ZSBkZWZpbmVkXG4gICAgICAgICAgICBjdXJyZW50QXR0cmlidXRlLmNyZWF0ZUluZGV4ZWRWYWx1ZShcbiAgICAgICAgICAgICAgY3VycmVudFZhbHVlLmxlbmd0aCxcbiAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgIF8uaXNFbXB0eSh2YWx1ZXMpXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IF8uZGVmYXVsdHMobmV3VmFsdWUsIHtcbiAgICAgICAgICAgICAgdmFsdWU6IFwiXCIsXG4gICAgICAgICAgICAgIGRpc3BsYXlWYWx1ZTogbmV3VmFsdWUudmFsdWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY3VycmVudEF0dHJpYnV0ZS5hZGRWYWx1ZShuZXdWYWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQWRkIGEgcm93IGJlZm9yZSBhbm90aGVyIHJvd1xuICAgICAqXG4gICAgICogQHBhcmFtIGF0dHJpYnV0ZUlkIHN0cmluZyBhdHRyaWJ1dGUgYXJyYXlcbiAgICAgKiBAcGFyYW0gdmFsdWVzIG9iamVjdCB7IFwiYXR0cmlidXRlSWRcIiA6IHsgXCJ2YWx1ZVwiIDogKiwgXCJkaXNwbGF5VmFsdWVcIiA6ICogfSwgLi4ufVxuICAgICAqIEBwYXJhbSBpbmRleCBpbnQgaW5kZXggb2YgdGhlIHJvd1xuICAgICAqL1xuICAgIGluc2VydEJlZm9yZUFycmF5Um93OiBmdW5jdGlvbiBkb2N1bWVudENvbnRyb2xsZXJJbnNlcnRCZWZvcmVBcnJheVJvdyhcbiAgICAgIGF0dHJpYnV0ZUlkLFxuICAgICAgdmFsdWVzLFxuICAgICAgaW5kZXhcbiAgICApIHtcbiAgICAgIHRoaXMuX2NoZWNrSW5pdGlhbGlzZWRNb2RlbCgpO1xuICAgICAgdmFyIGF0dHJpYnV0ZSA9IHRoaXMuX2dldEF0dHJpYnV0ZU1vZGVsKGF0dHJpYnV0ZUlkKSxcbiAgICAgICAgbWF4VmFsdWU7XG4gICAgICBpZiAoIWF0dHJpYnV0ZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmFibGUgdG8gZmluZCBhdHRyaWJ1dGUgXCIgKyBhdHRyaWJ1dGVJZCk7XG4gICAgICB9XG4gICAgICBpZiAoYXR0cmlidXRlLmdldChcInR5cGVcIikgIT09IFwiYXJyYXlcIikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgXCJBdHRyaWJ1dGUgXCIgKyBhdHRyaWJ1dGVJZCArIFwiIG11c3QgYmUgYW4gYXR0cmlidXRlIG9mIHR5cGUgYXJyYXlcIlxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKCFfLmlzT2JqZWN0KHZhbHVlcykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIFwiVmFsdWVzIG11c3QgYmUgYW4gb2JqZWN0IHdoZXJlIGVhY2ggcHJvcGVydGllcyBpcyBhbiBhdHRyaWJ1dGUgb2YgdGhlIGFycmF5IGZvciBcIiArXG4gICAgICAgICAgICBhdHRyaWJ1dGVJZFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgbWF4VmFsdWUgPSB0aGlzLl9nZXRNYXhJbmRleChhdHRyaWJ1dGUpO1xuICAgICAgaWYgKGluZGV4IDwgMCB8fCBpbmRleCA+IG1heFZhbHVlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkluZGV4IG11c3QgYmUgYmV0d2VlbiAwIGFuZCBcIiArIG1heFZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGF0dHJpYnV0ZVxuICAgICAgICAuZ2V0KFwiY29udGVudFwiKVxuICAgICAgICAuZWFjaChmdW5jdGlvbiBkb2N1bWVudENvbnRyb2xsZXJfYWRkQUNlbGwoY3VycmVudEF0dHJpYnV0ZSkge1xuICAgICAgICAgIHZhciBjdXJyZW50VmFsdWUgPSB2YWx1ZXNbY3VycmVudEF0dHJpYnV0ZS5pZF07XG4gICAgICAgICAgaWYgKCFfLmlzVW5kZWZpbmVkKGN1cnJlbnRWYWx1ZSkpIHtcbiAgICAgICAgICAgIGN1cnJlbnRWYWx1ZSA9IF8uZGVmYXVsdHMoY3VycmVudFZhbHVlLCB7XG4gICAgICAgICAgICAgIHZhbHVlOiBcIlwiLFxuICAgICAgICAgICAgICBkaXNwbGF5VmFsdWU6IGN1cnJlbnRWYWx1ZS52YWx1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGN1cnJlbnRWYWx1ZSA9IGN1cnJlbnRBdHRyaWJ1dGUuYXR0cmlidXRlcy5kZWZhdWx0VmFsdWU7XG4gICAgICAgICAgICBpZiAoIWN1cnJlbnRWYWx1ZSkge1xuICAgICAgICAgICAgICBjdXJyZW50VmFsdWUgPSB7IHZhbHVlOiBcIlwiLCBkaXNwbGF5VmFsdWU6IFwiXCIgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgY3VycmVudEF0dHJpYnV0ZS5hZGRJbmRleGVkVmFsdWUoY3VycmVudFZhbHVlLCBpbmRleCk7XG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYW4gYXJyYXkgcm93XG4gICAgICogQHBhcmFtIGF0dHJpYnV0ZUlkIHN0cmluZyBhdHRyaWJ1dGUgYXJyYXlcbiAgICAgKiBAcGFyYW0gaW5kZXggaW50IGluZGV4IG9mIHRoZSByb3dcbiAgICAgKi9cbiAgICByZW1vdmVBcnJheVJvdzogZnVuY3Rpb24gZG9jdW1lbnRDb250cm9sbGVyUmVtb3ZlQXJyYXlSb3coXG4gICAgICBhdHRyaWJ1dGVJZCxcbiAgICAgIGluZGV4XG4gICAgKSB7XG4gICAgICB0aGlzLl9jaGVja0luaXRpYWxpc2VkTW9kZWwoKTtcbiAgICAgIHZhciBhdHRyaWJ1dGUgPSB0aGlzLl9nZXRBdHRyaWJ1dGVNb2RlbChhdHRyaWJ1dGVJZCksXG4gICAgICAgIG1heEluZGV4O1xuICAgICAgaWYgKCFhdHRyaWJ1dGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5hYmxlIHRvIGZpbmQgYXR0cmlidXRlIFwiICsgYXR0cmlidXRlSWQpO1xuICAgICAgfVxuICAgICAgaWYgKGF0dHJpYnV0ZS5nZXQoXCJ0eXBlXCIpICE9PSBcImFycmF5XCIpIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoXG4gICAgICAgICAgXCJBdHRyaWJ1dGUgXCIgKyBhdHRyaWJ1dGVJZCArIFwiIG11c3QgYmUgYW4gYXR0cmlidXRlIG9mIHR5cGUgYXJyYXlcIlxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgbWF4SW5kZXggPSB0aGlzLl9nZXRNYXhJbmRleChhdHRyaWJ1dGUpIC0gMTtcbiAgICAgIGlmIChpbmRleCA8IDAgfHwgaW5kZXggPiBtYXhJbmRleCkge1xuICAgICAgICB0aHJvdyBFcnJvcihcbiAgICAgICAgICBcIkluZGV4IG11c3QgYmUgYmV0d2VlbiAwIGFuZCBcIiArIG1heEluZGV4ICsgXCIgZm9yIFwiICsgYXR0cmlidXRlSWRcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGF0dHJpYnV0ZVxuICAgICAgICAuZ2V0KFwiY29udGVudFwiKVxuICAgICAgICAuZWFjaChmdW5jdGlvbiBkb2N1bWVudENvbnRyb2xsZXJfcmVtb3ZlQUNlbGwoY3VycmVudEF0dHJpYnV0ZSkge1xuICAgICAgICAgIGN1cnJlbnRBdHRyaWJ1dGUucmVtb3ZlSW5kZXhWYWx1ZShpbmRleCk7XG4gICAgICAgIH0pO1xuICAgICAgYXR0cmlidXRlLnJlbW92ZUluZGV4ZWRMaW5lKGluZGV4KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQWRkIGEgY29uc3RyYWludCB0byB0aGUgd2lkZ2V0XG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBvYmplY3QgeyBcIm5hbWVcIiA6IHN0cmluZywgXCJkb2N1bWVudENoZWNrXCI6IGZ1bmN0aW9ufVxuICAgICAqIEBwYXJhbSBjYWxsYmFjayBmdW5jdGlvbiBjYWxsYmFjayBjYWxsZWQgd2hlbiB0aGUgZXZlbnQgaXMgdHJpZ2dlcmVkXG4gICAgICogQHJldHVybnMgeyp9XG4gICAgICovXG4gICAgYWRkQ29uc3RyYWludDogZnVuY3Rpb24gZG9jdW1lbnRDb250cm9sbGVyYWRkQ29uc3RyYWludChvcHRpb25zLCBjYWxsYmFjaykge1xuICAgICAgdmFyIGN1cnJlbnRDb25zdHJhaW50LFxuICAgICAgICBjdXJyZW50V2lkZ2V0ID0gdGhpcyxcbiAgICAgICAgdW5pcXVlTmFtZTtcbiAgICAgIGlmIChfLmlzVW5kZWZpbmVkKGNhbGxiYWNrKSAmJiBfLmlzRnVuY3Rpb24ob3B0aW9ucykpIHtcbiAgICAgICAgY2FsbGJhY2sgPSBvcHRpb25zO1xuICAgICAgICBvcHRpb25zID0ge307XG4gICAgICB9XG4gICAgICBpZiAoXy5pc09iamVjdChvcHRpb25zKSAmJiBfLmlzVW5kZWZpbmVkKGNhbGxiYWNrKSkge1xuICAgICAgICBpZiAoIW9wdGlvbnMubmFtZSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgIFwiV2hlbiBhIGNvbnN0cmFpbnQgaXMgaW5pdGlhdGVkIHdpdGggYSBzaW5nbGUgb2JqZWN0LCB0aGlzIG9iamVjdCBuZWVkcyB0byBoYXZlIHRoZSBuYW1lIHByb3BlcnR5IFwiLkpTT04uc3RyaW5naWZ5KFxuICAgICAgICAgICAgICBvcHRpb25zXG4gICAgICAgICAgICApXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgXy5kZWZhdWx0cyhvcHRpb25zLCB7XG4gICAgICAgICAgZG9jdW1lbnRDaGVjazogZnVuY3Rpb24gZG9jdW1lbnRDb250cm9sbGVyX2RlZmF1bHREb2N1bWVudENoZWNrKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBhdHRyaWJ1dGVDaGVjazogZnVuY3Rpb24gZG9jdW1lbnRDb250cm9sbGVyX2RlZmF1bHRBdHRyaWJ1dGVDaGVjaygpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgY29uc3RyYWludENoZWNrOiBjYWxsYmFjayxcbiAgICAgICAgICBuYW1lOiBfLnVuaXF1ZUlkKFwiY29uc3RyYWludFwiKSxcbiAgICAgICAgICBleHRlcm5hbENvbnN0cmFpbnQ6IGZhbHNlLFxuICAgICAgICAgIG9uY2U6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgY3VycmVudENvbnN0cmFpbnQgPSBvcHRpb25zO1xuICAgICAgaWYgKCFfLmlzRnVuY3Rpb24oY3VycmVudENvbnN0cmFpbnQuY29uc3RyYWludENoZWNrKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBbiBldmVudCBuZWVkIGEgY2FsbGJhY2tcIik7XG4gICAgICB9XG4gICAgICAvL0lmIGNvbnN0cmFpbnQgaXMgb25jZSA6IHdyYXAgaXQgYW4gY2FsbGJhY2sgdGhhdCBleGVjdXRlIGNhbGxiYWNrIGFuZCBkZWxldGUgaXRcbiAgICAgIGlmIChjdXJyZW50Q29uc3RyYWludC5vbmNlID09PSB0cnVlKSB7XG4gICAgICAgIGN1cnJlbnRDb25zdHJhaW50LmV2ZW50Q2FsbGJhY2sgPSBfLndyYXAoXG4gICAgICAgICAgY3VycmVudENvbnN0cmFpbnQuY29uc3RyYWludENoZWNrLFxuICAgICAgICAgIGZ1bmN0aW9uIGRvY3VtZW50Q29udHJvbGxlcl9vbmNlV3JhcHBlcihjYWxsYmFjaykge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgY2FsbGJhY2suYXBwbHkodGhpcywgXy5yZXN0KGFyZ3VtZW50cykpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3VycmVudFdpZGdldC5yZW1vdmVDb25zdHJhaW50KFxuICAgICAgICAgICAgICBjdXJyZW50Q29uc3RyYWludC5uYW1lLFxuICAgICAgICAgICAgICBjdXJyZW50Q29uc3RyYWludC5leHRlcm5hbENvbnN0cmFpbnRcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgdW5pcXVlTmFtZSA9XG4gICAgICAgIChjdXJyZW50Q29uc3RyYWludC5leHRlcm5hbENvbnN0cmFpbnQgPyBcImV4dGVybmFsX1wiIDogXCJpbnRlcm5hbF9cIikgK1xuICAgICAgICBjdXJyZW50Q29uc3RyYWludC5uYW1lO1xuICAgICAgdGhpcy5vcHRpb25zLmNvbnN0cmFpbnRMaXN0W3VuaXF1ZU5hbWVdID0gY3VycmVudENvbnN0cmFpbnQ7XG4gICAgICB0aGlzLl9pbml0QWN0aXZhdGVkQ29uc3RyYWludCgpO1xuICAgICAgcmV0dXJuIGN1cnJlbnRDb25zdHJhaW50Lm5hbWU7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIExpc3QgdGhlIGNvbnN0cmFpbnQgb2YgdGhlIHdpZGdldFxuICAgICAqXG4gICAgICogQHJldHVybnMgeyp9XG4gICAgICovXG4gICAgbGlzdENvbnN0cmFpbnRzOiBmdW5jdGlvbiBkb2N1bWVudENvbnRyb2xsZXJMaXN0Q29uc3RyYWludCgpIHtcbiAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMuY29uc3RyYWludExpc3Q7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBhIGNvbnN0cmFpbnQgb2YgdGhlIHdpZGdldFxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbnN0cmFpbnROYW1lXG4gICAgICogQHBhcmFtIGFsbEtpbmRcbiAgICAgKiBAcmV0dXJucyB7Kn1cbiAgICAgKi9cbiAgICByZW1vdmVDb25zdHJhaW50OiBmdW5jdGlvbiBkb2N1bWVudENvbnRyb2xsZXJSZW1vdmVDb25zdHJhaW50KFxuICAgICAgY29uc3RyYWludE5hbWUsXG4gICAgICBhbGxLaW5kXG4gICAgKSB7XG4gICAgICB2YXIgcmVtb3ZlZCA9IFtdLFxuICAgICAgICBuZXdDb25zdHJhaW50TGlzdCxcbiAgICAgICAgY29uc3RyYWludExpc3QsXG4gICAgICAgIHRlc3RSZWdFeHAgPSBuZXcgUmVnRXhwKFwiXFxcXFwiICsgY29uc3RyYWludE5hbWUgKyBcIiRcIik7XG4gICAgICAvLyBqc2NzOmRpc2FibGUgZGlzYWxsb3dJbXBsaWNpdFR5cGVDb252ZXJzaW9uXG4gICAgICBhbGxLaW5kID0gISFhbGxLaW5kO1xuICAgICAgLy8ganNjczplbmFibGUgZGlzYWxsb3dJbXBsaWNpdFR5cGVDb252ZXJzaW9uXG4gICAgICBuZXdDb25zdHJhaW50TGlzdCA9IF8uZmlsdGVyKFxuICAgICAgICB0aGlzLm9wdGlvbnMuY29uc3RyYWludExpc3QsXG4gICAgICAgIGZ1bmN0aW9uIGRvY3VtZW50Q29udHJvbGxlcl9yZW1vdmVDb25zdHJhaW50KGN1cnJlbnRDb25zdHJhaXQpIHtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAoYWxsS2luZCB8fCAhY3VycmVudENvbnN0cmFpdC5leHRlcm5hbENvbnN0cmFpbnQpICYmXG4gICAgICAgICAgICAoY3VycmVudENvbnN0cmFpdC5uYW1lID09PSBjb25zdHJhaW50TmFtZSB8fFxuICAgICAgICAgICAgICB0ZXN0UmVnRXhwLnRlc3QoY3VycmVudENvbnN0cmFpdC5uYW1lKSlcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHJlbW92ZWQucHVzaChjdXJyZW50Q29uc3RyYWl0KTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgICBjb25zdHJhaW50TGlzdCA9IHt9O1xuICAgICAgXy5lYWNoKFxuICAgICAgICBuZXdDb25zdHJhaW50TGlzdCxcbiAgICAgICAgZnVuY3Rpb24gZG9jdW1lbnRDb250cm9sbGVyX3JlYnVpbGRDb25zdHJhaW50TGlzdChjdXJyZW50Q29uc3RyYWludCkge1xuICAgICAgICAgIHZhciB1bmlxdWVOYW1lID1cbiAgICAgICAgICAgIChjdXJyZW50Q29uc3RyYWludC5leHRlcm5hbENvbnN0cmFpbnQgPyBcImV4dGVybmFsX1wiIDogXCJpbnRlcm5hbF9cIikgK1xuICAgICAgICAgICAgY3VycmVudENvbnN0cmFpbnQubmFtZTtcbiAgICAgICAgICBjb25zdHJhaW50TGlzdFt1bmlxdWVOYW1lXSA9IGN1cnJlbnRDb25zdHJhaW50O1xuICAgICAgICB9XG4gICAgICApO1xuICAgICAgdGhpcy5vcHRpb25zLmNvbnN0cmFpbnRMaXN0ID0gY29uc3RyYWludExpc3Q7XG4gICAgICB0aGlzLl9pbml0QWN0aXZhdGVkQ29uc3RyYWludCgpO1xuICAgICAgcmV0dXJuIHJlbW92ZWQ7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEFkZCBhbiBldmVudCB0byB0aGUgd2lkZ2V0XG4gICAgICpcbiAgICAgKiBAcGFyYW0gZXZlbnRUeXBlIHN0cmluZyBraW5kIG9mIGV2ZW50XG4gICAgICogQHBhcmFtIG9wdGlvbnMgb2JqZWN0IHsgXCJuYW1lXCIgOiBzdHJpbmcsIFwiZG9jdW1lbnRDaGVja1wiOiBmdW5jdGlvbn1cbiAgICAgKiBAcGFyYW0gY2FsbGJhY2sgZnVuY3Rpb24gY2FsbGJhY2sgY2FsbGVkIHdoZW4gdGhlIGV2ZW50IGlzIHRyaWdnZXJlZFxuICAgICAqIEByZXR1cm5zIHsqfFdpbmRvdy5vcHRpb25zLm5hbWV9XG4gICAgICovXG4gICAgYWRkRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24gZG9jdW1lbnRDb250cm9sbGVyQWRkRXZlbnQoXG4gICAgICBldmVudFR5cGUsXG4gICAgICBvcHRpb25zLFxuICAgICAgY2FsbGJhY2tcbiAgICApIHtcbiAgICAgIHZhciBjdXJyZW50RXZlbnQsXG4gICAgICAgIGN1cnJlbnRXaWRnZXQgPSB0aGlzO1xuICAgICAgLy9vcHRpb25zIGlzIG5vdCBtYW5kYXRvcnkgYW5kIHRoZSBjYWxsYmFjayBjYW4gYmUgdGhlIHNlY29uZCBwYXJhbWV0ZXJzXG4gICAgICBpZiAoXy5pc1VuZGVmaW5lZChjYWxsYmFjaykgJiYgXy5pc0Z1bmN0aW9uKG9wdGlvbnMpKSB7XG4gICAgICAgIGNhbGxiYWNrID0gb3B0aW9ucztcbiAgICAgICAgb3B0aW9ucyA9IHt9O1xuICAgICAgfVxuICAgICAgLy8gdGhlIGZpcnN0IHBhcmFtZXRlcnMgY2FuIGJlIHRoZSBmaW5hbCBvYmplY3QgKGNoYWluIHJlbW92ZUV2ZW50IGFuZCBhZGRFdmVudClcbiAgICAgIGlmIChcbiAgICAgICAgXy5pc09iamVjdChldmVudFR5cGUpICYmXG4gICAgICAgIF8uaXNVbmRlZmluZWQob3B0aW9ucykgJiZcbiAgICAgICAgXy5pc1VuZGVmaW5lZChjYWxsYmFjaylcbiAgICAgICkge1xuICAgICAgICBjdXJyZW50RXZlbnQgPSBldmVudFR5cGU7XG4gICAgICAgIGlmICghY3VycmVudEV2ZW50Lm5hbWUpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICBcIldoZW4gYW4gZXZlbnQgaXMgaW5pdGlhdGVkIHdpdGggYSBzaW5nbGUgb2JqZWN0LCB0aGlzIG9iamVjdCBuZWVkcyB0byBoYXZlIHRoZSBuYW1lIHByb3BlcnR5IFwiICtcbiAgICAgICAgICAgICAgSlNPTi5zdHJpbmdpZnkoY3VycmVudEV2ZW50KVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGN1cnJlbnRFdmVudCA9IF8uZGVmYXVsdHMob3B0aW9ucywge1xuICAgICAgICAgIG5hbWU6IF8udW5pcXVlSWQoXCJldmVudF9cIiArIGV2ZW50VHlwZSksXG4gICAgICAgICAgZXZlbnRUeXBlOiBldmVudFR5cGUsXG4gICAgICAgICAgZXZlbnRDYWxsYmFjazogY2FsbGJhY2ssXG4gICAgICAgICAgZXh0ZXJuYWxFdmVudDogZmFsc2UsXG4gICAgICAgICAgb25jZTogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICAvLyB0aGUgZXZlbnRUeXBlIG11c3QgYmUgb25lIHRoZSBsaXN0XG4gICAgICB0aGlzLl9jaGVja0V2ZW50TmFtZShjdXJyZW50RXZlbnQuZXZlbnRUeXBlKTtcbiAgICAgIC8vIGNhbGxiYWNrIGlzIG1hbmRhdG9yeSBhbmQgbXVzdCBiZSBhIGZ1bmN0aW9uXG4gICAgICBpZiAoIV8uaXNGdW5jdGlvbihjdXJyZW50RXZlbnQuZXZlbnRDYWxsYmFjaykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQW4gZXZlbnQgbmVlZHMgYSBjYWxsYmFjayB0aGF0IGlzIGEgZnVuY3Rpb25cIik7XG4gICAgICB9XG4gICAgICAvL0lmIGV2ZW50IGlzIG9uY2UgOiB3cmFwIGl0IGFuIGNhbGxiYWNrIHRoYXQgZXhlY3V0ZSBldmVudCBhbmQgZGVsZXRlIGl0XG4gICAgICBpZiAoY3VycmVudEV2ZW50Lm9uY2UgPT09IHRydWUpIHtcbiAgICAgICAgY3VycmVudEV2ZW50LmV2ZW50Q2FsbGJhY2sgPSBfLndyYXAoXG4gICAgICAgICAgY3VycmVudEV2ZW50LmV2ZW50Q2FsbGJhY2ssXG4gICAgICAgICAgZnVuY3Rpb24gZG9jdW1lbnRDb250cm9sbGVyX29uY2VXcmFwcGVyKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBjdXJyZW50V2lkZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoXG4gICAgICAgICAgICAgIGN1cnJlbnRFdmVudC5uYW1lLFxuICAgICAgICAgICAgICBjdXJyZW50RXZlbnQuZXh0ZXJuYWxFdmVudFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGNhbGxiYWNrLmFwcGx5KHRoaXMsIF8ucmVzdChhcmd1bWVudHMpKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICB0aGlzLl9hZGRBbmRJbml0TmV3RXZlbnRzKGN1cnJlbnRFdmVudCk7XG4gICAgICAvLyByZXR1cm4gdGhlIG5hbWUgb2YgdGhlIGV2ZW50XG4gICAgICByZXR1cm4gY3VycmVudEV2ZW50Lm5hbWU7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIExpc3Qgb2YgdGhlIGV2ZW50cyBvZiB0aGUgY3VycmVudCB3aWRnZXRcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHsqfVxuICAgICAqL1xuICAgIGxpc3RFdmVudExpc3RlbmVyczogZnVuY3Rpb24gZG9jdW1lbnRDb250cm9sbGVyTGlzdEV2ZW50cygpIHtcbiAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMuZXZlbnRMaXN0ZW5lcjtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGFuIGV2ZW50IG9mIHRoZSBjdXJyZW50IHdpZGdldFxuICAgICAqXG4gICAgICogQHBhcmFtIGV2ZW50TmFtZSBzdHJpbmcgY2FuIGJlIGFuIGV2ZW50IG5hbWUgb3IgYSBuYW1lc3BhY2VcbiAgICAgKiBAcGFyYW0gYWxsS2luZCByZW1vdmUgaW50ZXJuYWwvZXh0ZXJuYWwgZXZlbnRzXG4gICAgICogQHJldHVybnMgeyp9XG4gICAgICovXG4gICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24gZG9jdW1lbnRDb250cm9sbGVyUmVtb3ZlRXZlbnQoXG4gICAgICBldmVudE5hbWUsXG4gICAgICBhbGxLaW5kXG4gICAgKSB7XG4gICAgICB2YXIgcmVtb3ZlZCA9IFtdLFxuICAgICAgICB0ZXN0UmVnRXhwID0gbmV3IFJlZ0V4cChcIlxcXFxcIiArIGV2ZW50TmFtZSArIFwiJFwiKSxcbiAgICAgICAgbmV3TGlzdCxcbiAgICAgICAgZXZlbnRMaXN0O1xuICAgICAgLy8ganNjczpkaXNhYmxlXG4gICAgICBhbGxLaW5kID0gISFhbGxLaW5kO1xuICAgICAgLy8ganNjczplbmFibGVcbiAgICAgIG5ld0xpc3QgPSBfLmZpbHRlcihcbiAgICAgICAgdGhpcy5vcHRpb25zLmV2ZW50TGlzdGVuZXIsXG4gICAgICAgIGZ1bmN0aW9uIGRvY3VtZW50Q29udHJvbGxlcl9yZW1vdmVDdXJyZW50RXZlbnQoY3VycmVudEV2ZW50KSB7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgKGFsbEtpbmQgfHwgIWN1cnJlbnRFdmVudC5leHRlcm5hbEV2ZW50KSAmJlxuICAgICAgICAgICAgKGN1cnJlbnRFdmVudC5uYW1lID09PSBldmVudE5hbWUgfHxcbiAgICAgICAgICAgICAgdGVzdFJlZ0V4cC50ZXN0KGN1cnJlbnRFdmVudC5uYW1lKSlcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHJlbW92ZWQucHVzaChjdXJyZW50RXZlbnQpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgKTtcbiAgICAgIGV2ZW50TGlzdCA9IHt9O1xuICAgICAgXy5lYWNoKG5ld0xpc3QsIGZ1bmN0aW9uIGRvY3VtZW50Q29udHJvbGxlcl9fcmVidWlsZEV2ZW50TGlzdChcbiAgICAgICAgY3VycmVudEV2ZW50XG4gICAgICApIHtcbiAgICAgICAgdmFyIHVuaXF1ZU5hbWUgPVxuICAgICAgICAgIChjdXJyZW50RXZlbnQuZXh0ZXJuYWxFdmVudCA/IFwiZXh0ZXJuYWxfXCIgOiBcImludGVybmFsX1wiKSArXG4gICAgICAgICAgY3VycmVudEV2ZW50Lm5hbWU7XG4gICAgICAgIGV2ZW50TGlzdFt1bmlxdWVOYW1lXSA9IGN1cnJlbnRFdmVudDtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5vcHRpb25zLmV2ZW50TGlzdGVuZXIgPSBldmVudExpc3Q7XG4gICAgICB0aGlzLl9pbml0QWN0aXZhdGVkRXZlbnRMaXN0ZW5lcnMoeyBsYXVuY2hSZWFkeTogZmFsc2UgfSk7XG4gICAgICByZXR1cm4gcmVtb3ZlZDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlciBhbiBldmVudFxuICAgICAqXG4gICAgICogQHBhcmFtIGV2ZW50TmFtZVxuICAgICAqL1xuICAgIHRyaWdnZXJFdmVudDogZnVuY3Rpb24gZG9jdW1lbnRDb250cm9sbGVyX3RyaWdnZXJFdmVudChldmVudE5hbWUpIHtcbiAgICAgIHZhciBhcmdzID0gXy50b0FycmF5KGFyZ3VtZW50cyk7XG4gICAgICB0aGlzLl9jaGVja0luaXRpYWxpc2VkTW9kZWwoKTtcbiAgICAgIHRoaXMuX2NoZWNrRXZlbnROYW1lKGV2ZW50TmFtZSk7XG5cbiAgICAgIGFyZ3Muc3BsaWNlKDEsIDAsIG51bGwpOyAvLyBBZGQgbnVsbCBvcmlnaW5hbEV2ZW50XG4gICAgICByZXR1cm4gdGhpcy5fdHJpZ2dlckNvbnRyb2xsZXJFdmVudC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogSGlkZSBhIHZpc2libGUgYXR0cmlidXRlXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYXR0cmlidXRlSWRcbiAgICAgKi9cbiAgICBoaWRlQXR0cmlidXRlOiBmdW5jdGlvbiBkb2N1bWVudENvbnRyb2xsZXJIaWRlQXR0cmlidXRlKGF0dHJpYnV0ZUlkKSB7XG4gICAgICB0aGlzLl9jaGVja0luaXRpYWxpc2VkVmlldygpO1xuICAgICAgdmFyIGF0dHJpYnV0ZU1vZGVsID0gdGhpcy5fZ2V0QXR0cmlidXRlTW9kZWwoYXR0cmlidXRlSWQpO1xuICAgICAgaWYgKCFhdHRyaWJ1dGVNb2RlbCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiVW5hYmxlIGZpbmQgYW5kIGhpZGUgdGhlIGF0dHJpYnV0ZSBcIiArIGF0dHJpYnV0ZUlkKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYXR0cmlidXRlTW9kZWwudHJpZ2dlcihcImhpZGVcIik7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBzaG93IGEgdmlzaWJsZSBhdHRyaWJ1dGUgKHByZXZpb3VzbHkgaGlkZGVuKVxuICAgICAqXG4gICAgICogQHBhcmFtIGF0dHJpYnV0ZUlkXG4gICAgICovXG4gICAgc2hvd0F0dHJpYnV0ZTogZnVuY3Rpb24gZG9jdW1lbnRDb250cm9sbGVyU2hvd0F0dHJpYnV0ZShhdHRyaWJ1dGVJZCkge1xuICAgICAgdGhpcy5fY2hlY2tJbml0aWFsaXNlZFZpZXcoKTtcbiAgICAgIHZhciBhdHRyaWJ1dGVNb2RlbCA9IHRoaXMuX2dldEF0dHJpYnV0ZU1vZGVsKGF0dHJpYnV0ZUlkKTtcbiAgICAgIGlmICghYXR0cmlidXRlTW9kZWwpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIlVuYWJsZSBmaW5kIGFuZCBzaG93IHRoZSBhdHRyaWJ1dGUgXCIgKyBhdHRyaWJ1dGVJZCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGF0dHJpYnV0ZU1vZGVsLnRyaWdnZXIoXCJzaG93XCIpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBEaXNwbGF5IGEgbWVzc2FnZSB0byB0aGUgdXNlclxuICAgICAqXG4gICAgICogQHBhcmFtIG1lc3NhZ2VcbiAgICAgKi9cbiAgICBzaG93TWVzc2FnZTogZnVuY3Rpb24gZG9jdW1lbnRDb250cm9sbGVyU2hvd01lc3NhZ2UobWVzc2FnZSkge1xuICAgICAgdGhpcy5fY2hlY2tJbml0aWFsaXNlZFZpZXcoKTtcbiAgICAgIGlmIChfLmlzU3RyaW5nKG1lc3NhZ2UpKSB7XG4gICAgICAgIG1lc3NhZ2UgPSB7XG4gICAgICAgICAgdHlwZTogXCJpbmZvXCIsXG4gICAgICAgICAgbWVzc2FnZTogbWVzc2FnZVxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgaWYgKF8uaXNPYmplY3QobWVzc2FnZSkpIHtcbiAgICAgICAgbWVzc2FnZSA9IF8uZGVmYXVsdHMobWVzc2FnZSwge1xuICAgICAgICAgIHR5cGU6IFwiaW5mb1wiXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgdGhpcy4kbm90aWZpY2F0aW9uLmRjcE5vdGlmaWNhdGlvbihcInNob3dcIiwgbWVzc2FnZS50eXBlLCBtZXNzYWdlKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRGlzcGxheSBsb2FkaW5nIGJhclxuICAgICAqXG4gICAgICogQHBhcmFtIG1lc3NhZ2VcbiAgICAgKiBAcGFyYW0gcHhcbiAgICAgKi9cbiAgICBtYXNrRG9jdW1lbnQ6IGZ1bmN0aW9uIGRvY3VtZW50Q29udHJvbGxlcihtZXNzYWdlLCBweCkge1xuICAgICAgdGhpcy4kbG9hZGluZy5kY3BMb2FkaW5nKFwic2hvd1wiKTtcbiAgICAgIGlmIChtZXNzYWdlKSB7XG4gICAgICAgIHRoaXMuJGxvYWRpbmcuZGNwTG9hZGluZyhcInNldFRpdGxlXCIsIG1lc3NhZ2UpO1xuICAgICAgfVxuICAgICAgaWYgKHB4KSB7XG4gICAgICAgIHRoaXMuJGxvYWRpbmcuZGNwTG9hZGluZyhcInNldFBlcmNlbnRcIiwgcHgpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBIaWRlIGxvYWRpbmcgYmFyXG4gICAgICovXG4gICAgdW5tYXNrRG9jdW1lbnQ6IGZ1bmN0aW9uIGRvY3VtZW50Q29udHJvbGxlcl91bm1hc2tEb2N1bWVudChmb3JjZSkge1xuICAgICAgdGhpcy4kbG9hZGluZy5kY3BMb2FkaW5nKFwiaGlkZVwiLCBmb3JjZSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEFkZCBhbiBlcnJvciBtZXNzYWdlIHRvIGFuIGF0dHJpYnV0ZVxuICAgICAqXG4gICAgICogQHBhcmFtIGF0dHJpYnV0ZUlkXG4gICAgICogQHBhcmFtIG1lc3NhZ2VcbiAgICAgKiBAcGFyYW0gaW5kZXhcbiAgICAgKi9cbiAgICBzZXRBdHRyaWJ1dGVFcnJvck1lc3NhZ2U6IGZ1bmN0aW9uIGRvY3VtZW50Q29udHJvbGxlcnNldEF0dHJpYnV0ZUVycm9yTWVzc2FnZShcbiAgICAgIGF0dHJpYnV0ZUlkLFxuICAgICAgbWVzc2FnZSxcbiAgICAgIGluZGV4XG4gICAgKSB7XG4gICAgICB0aGlzLl9jaGVja0luaXRpYWxpc2VkVmlldygpO1xuICAgICAgdmFyIGF0dHJpYnV0ZU1vZGVsID0gdGhpcy5fZ2V0QXR0cmlidXRlTW9kZWwoYXR0cmlidXRlSWQpO1xuICAgICAgaWYgKCFhdHRyaWJ1dGVNb2RlbCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiVW5hYmxlIGZpbmQgYW5kIHNob3cgdGhlIGF0dHJpYnV0ZSBcIiArIGF0dHJpYnV0ZUlkKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYXR0cmlidXRlTW9kZWwuc2V0RXJyb3JNZXNzYWdlKG1lc3NhZ2UsIGluZGV4KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ2xlYW4gdGhlIGVycm9yIG1lc3NhZ2Ugb2YgYW4gYXR0cmlidXRlXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYXR0cmlidXRlSWRcbiAgICAgKiBAcGFyYW0gaW5kZXhcbiAgICAgKi9cbiAgICBjbGVhbkF0dHJpYnV0ZUVycm9yTWVzc2FnZTogZnVuY3Rpb24gZG9jdW1lbnRDb250cm9sbGVyY2xlYW5BdHRyaWJ1dGVFcnJvck1lc3NhZ2UoXG4gICAgICBhdHRyaWJ1dGVJZCxcbiAgICAgIGluZGV4XG4gICAgKSB7XG4gICAgICB0aGlzLl9jaGVja0luaXRpYWxpc2VkVmlldygpO1xuICAgICAgdmFyIGF0dHJpYnV0ZU1vZGVsID0gdGhpcy5fZ2V0QXR0cmlidXRlTW9kZWwoYXR0cmlidXRlSWQpO1xuICAgICAgaWYgKCFhdHRyaWJ1dGVNb2RlbCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiVW5hYmxlIGZpbmQgYW5kIHNob3cgdGhlIGF0dHJpYnV0ZSBcIiArIGF0dHJpYnV0ZUlkKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYXR0cmlidXRlTW9kZWwuc2V0RXJyb3JNZXNzYWdlKG51bGwsIGluZGV4KTtcbiAgICB9LFxuXG4gICAgaW5qZWN0Q1NTOiBmdW5jdGlvbiBkb2N1bWVudENvbnRyb2xsZXJfaW5qZWN0Q1NTKGNzc1RvSW5qZWN0KSB7XG4gICAgICB0aGlzLl9jaGVja0luaXRpYWxpc2VkVmlldygpO1xuICAgICAgaWYgKCFfLmlzQXJyYXkoY3NzVG9JbmplY3QpICYmICFfLmlzU3RyaW5nKGNzc1RvSW5qZWN0KSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgXCJUaGUgY3NzIHRvIGluamVjdCBtdXN0IGJlIGFuIGFycmF5IHN0cmluZyBvciBhIHN0cmluZ1wiXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoXy5pc1N0cmluZyhjc3NUb0luamVjdCkpIHtcbiAgICAgICAgY3NzVG9JbmplY3QgPSBbY3NzVG9JbmplY3RdO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9tb2RlbC5pbmplY3RDU1MoY3NzVG9JbmplY3QpO1xuICAgIH0sXG5cbiAgICBpbmplY3RKUzogZnVuY3Rpb24gZG9jdW1lbnRDb250cm9sbGVyX2luamVjdENTUyhqc1RvSW5qZWN0KSB7XG4gICAgICB0aGlzLl9jaGVja0luaXRpYWxpc2VkVmlldygpO1xuICAgICAgaWYgKCFfLmlzQXJyYXkoanNUb0luamVjdCkgJiYgIV8uaXNTdHJpbmcoanNUb0luamVjdCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlIGpzIHRvIGluamVjdCBtdXN0IGJlIGFuIGFycmF5IHN0cmluZyBvciBhIHN0cmluZ1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChfLmlzU3RyaW5nKGpzVG9JbmplY3QpKSB7XG4gICAgICAgIGpzVG9JbmplY3QgPSBbanNUb0luamVjdF07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLl9tb2RlbC5pbmplY3RKUyhqc1RvSW5qZWN0KTtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIHRyeVRvRGVzdHJveSB0aGUgd2lkZ2V0XG4gICAgICpcbiAgICAgKiBAcmV0dXJuIFByb21pc2VcbiAgICAgKi9cbiAgICB0cnlUb0Rlc3Ryb3k6IGZ1bmN0aW9uIGRvY3VtZW50Q29udHJvbGxlcl90cnlUb0Rlc3Ryb3koKSB7XG4gICAgICB2YXIgY3VycmVudFdpZGdldCA9IHRoaXM7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gZG9jdW1lbnRDb250cm9sbGVyX3Byb21pc2VEZXN0cm95KFxuICAgICAgICByZXNvbHZlLFxuICAgICAgICByZWplY3RcbiAgICAgICkge1xuICAgICAgICB2YXIgZXZlbnQgPSB7IHByZXZlbnQ6IGZhbHNlIH07XG4gICAgICAgIGlmICghY3VycmVudFdpZGdldC5fbW9kZWwpIHtcbiAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChcbiAgICAgICAgICBjdXJyZW50V2lkZ2V0Ll9tb2RlbCAmJlxuICAgICAgICAgIGN1cnJlbnRXaWRnZXQuX21vZGVsLmlzTW9kaWZpZWQoKSAmJlxuICAgICAgICAgICF3aW5kb3cuY29uZmlybShcbiAgICAgICAgICAgIGN1cnJlbnRXaWRnZXQuX21vZGVsLmdldChcInByb3BlcnRpZXNcIikuZ2V0KFwidGl0bGVcIikgK1xuICAgICAgICAgICAgICBcIlxcblwiICtcbiAgICAgICAgICAgICAgaTE4bi5fX18oXG4gICAgICAgICAgICAgICAgXCJUaGUgZm9ybSBoYXMgYmVlbiBtb2RpZmllZCB3aXRob3V0IHNhdmluZywgZG8geW91IHdhbnQgdG8gY2xvc2UgaXQgP1wiLFxuICAgICAgICAgICAgICAgIFwiZGR1aVwiXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICApXG4gICAgICAgICkge1xuICAgICAgICAgIHJlamVjdChcIlVuYWJsZSB0byBkZXN0cm95IGJlY2F1c2UgdXNlciByZWZ1c2VzIGl0XCIpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBldmVudC5wcmV2ZW50ID0gIWN1cnJlbnRXaWRnZXQuX3RyaWdnZXJDb250cm9sbGVyRXZlbnQoXG4gICAgICAgICAgXCJiZWZvcmVDbG9zZVwiLFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICAgY3VycmVudFdpZGdldC5fbW9kZWwuZ2V0U2VydmVyUHJvcGVydGllcygpXG4gICAgICAgICk7XG4gICAgICAgIGlmIChldmVudC5wcmV2ZW50KSB7XG4gICAgICAgICAgcmVqZWN0KFwiVW5hYmxlIHRvIGRlc3Ryb3kgYmVjYXVzZSBiZWZvcmUgY2xvc2UgcmVmdXNlcyBpdFwiKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgfSk7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gJC5mbi5kb2N1bWVudENvbnRyb2xsZXI7XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///cd42c09cb5294e18cda8\n");

/***/ }),

/***/ "d14214e551a3765c7e84":
/*!**********************************************************************************!*\
  !*** ./src/vendor/Anakeen/DOCUMENT/IHM/widgets/attributes/password/wPassword.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*global define*/\n(function umdRequire(root, factory) {\n  \"use strict\";\n\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ \"127c8cf59f228bb01a21\"), __webpack_require__(/*! dcpDocument/widgets/attributes/text/wText */ \"f54cd12cb65078ca4c4a\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(window, function wPassword($) {\n  \"use strict\";\n\n  $.widget(\"dcp.dcpPassword\", $.dcp.dcpText, {\n    options: {\n      type: \"password\",\n\n      renderOptions: {\n        hideValue: \"*****\"\n      },\n      labels: {}\n    },\n\n    _initDom: function wasswordInitDom() {\n      if (this.options.attributeValue.value) {\n        this.options.attributeValue.displayValue = this.options.renderOptions.hideValue;\n      }\n\n      this._super();\n      if (this.getMode() === \"write\") {\n        this._getFocusInput().attr(\"type\", \"password\");\n      }\n    },\n    /**\n     * Hide password to displayValue\n     * @param value\n     */\n    setValue: function wpasswordSetValue(value) {\n      if (value.value) {\n        value.displayValue = this.options.renderOptions.hideValue;\n      }\n\n      this._super(value);\n    },\n    getType: function wIntGetType() {\n      return \"password\";\n    }\n  });\n\n  return $.fn.dcpPassword;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZDE0MjE0ZTU1MWEzNzY1YzdlODQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdmVuZG9yL0FuYWtlZW4vRE9DVU1FTlQvSUhNL3dpZGdldHMvYXR0cmlidXRlcy9wYXNzd29yZC93UGFzc3dvcmQuanM/NmNiZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKmdsb2JhbCBkZWZpbmUqL1xuKGZ1bmN0aW9uIHVtZFJlcXVpcmUocm9vdCwgZmFjdG9yeSkge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoW1wianF1ZXJ5XCIsIFwiZGNwRG9jdW1lbnQvd2lkZ2V0cy9hdHRyaWJ1dGVzL3RleHQvd1RleHRcIl0sIGZhY3RvcnkpO1xuICB9IGVsc2Uge1xuICAgIC8vbm9pbnNwZWN0aW9uIEpTVW5yZXNvbHZlZFZhcmlhYmxlXG4gICAgZmFjdG9yeSh3aW5kb3cualF1ZXJ5KTtcbiAgfVxufSkod2luZG93LCBmdW5jdGlvbiB3UGFzc3dvcmQoJCkge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICAkLndpZGdldChcImRjcC5kY3BQYXNzd29yZFwiLCAkLmRjcC5kY3BUZXh0LCB7XG4gICAgb3B0aW9uczoge1xuICAgICAgdHlwZTogXCJwYXNzd29yZFwiLFxuXG4gICAgICByZW5kZXJPcHRpb25zOiB7XG4gICAgICAgIGhpZGVWYWx1ZTogXCIqKioqKlwiXG4gICAgICB9LFxuICAgICAgbGFiZWxzOiB7fVxuICAgIH0sXG5cbiAgICBfaW5pdERvbTogZnVuY3Rpb24gd2Fzc3dvcmRJbml0RG9tKCkge1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5hdHRyaWJ1dGVWYWx1ZS52YWx1ZSkge1xuICAgICAgICB0aGlzLm9wdGlvbnMuYXR0cmlidXRlVmFsdWUuZGlzcGxheVZhbHVlID0gdGhpcy5vcHRpb25zLnJlbmRlck9wdGlvbnMuaGlkZVZhbHVlO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9zdXBlcigpO1xuICAgICAgaWYgKHRoaXMuZ2V0TW9kZSgpID09PSBcIndyaXRlXCIpIHtcbiAgICAgICAgdGhpcy5fZ2V0Rm9jdXNJbnB1dCgpLmF0dHIoXCJ0eXBlXCIsIFwicGFzc3dvcmRcIik7XG4gICAgICB9XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBIaWRlIHBhc3N3b3JkIHRvIGRpc3BsYXlWYWx1ZVxuICAgICAqIEBwYXJhbSB2YWx1ZVxuICAgICAqL1xuICAgIHNldFZhbHVlOiBmdW5jdGlvbiB3cGFzc3dvcmRTZXRWYWx1ZSh2YWx1ZSkge1xuICAgICAgaWYgKHZhbHVlLnZhbHVlKSB7XG4gICAgICAgIHZhbHVlLmRpc3BsYXlWYWx1ZSA9IHRoaXMub3B0aW9ucy5yZW5kZXJPcHRpb25zLmhpZGVWYWx1ZTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fc3VwZXIodmFsdWUpO1xuICAgIH0sXG4gICAgZ2V0VHlwZTogZnVuY3Rpb24gd0ludEdldFR5cGUoKSB7XG4gICAgICByZXR1cm4gXCJwYXNzd29yZFwiO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuICQuZm4uZGNwUGFzc3dvcmQ7XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0EsV0FHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///d14214e551a3765c7e84\n");

/***/ }),

/***/ "d756e10b1ea30dea6265":
/*!**************************************************************************!*\
  !*** ./src/vendor/Anakeen/DOCUMENT/IHM/widgets/attributes/file/wFile.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*global define*/\n(function umdRequire(root, factory) {\n  \"use strict\";\n\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n      __webpack_require__(/*! jquery */ \"127c8cf59f228bb01a21\"),\n      __webpack_require__(/*! underscore */ \"8e08e542008e4aef1f58\"),\n      __webpack_require__(/*! dcpDocument/widgets/attributes/text/wText */ \"f54cd12cb65078ca4c4a\")\n    ], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(window, function wFileWidget($, _) {\n  \"use strict\";\n\n  //noinspection JSUnusedLocalSymbols\n  $.widget(\"dcp.dcpFile\", $.dcp.dcpText, {\n    uploadingFiles: 0, // file upload in progress\n    options: {\n      type: \"file\",\n      renderOptions: {\n        contentDisposition: false,\n        htmlLink: {},\n        placeHolder: \"Click to upload file\"\n      },\n      labels: {\n        dropFileHere: \"Drop file here\",\n        tooltipLabel: \"Choose file\",\n        downloadLabel: \"Download file\",\n        recording: \"Recording\",\n        transferring: \"Transferring\",\n        kiloByte: \"kB\",\n        byte: \"B\"\n      }\n    },\n\n    _initDom: function wFileInitDom() {\n      var visibleInput;\n      if (this.getMode() === \"read\") {\n        var urlSep = \"?\";\n        if (this.options.attributeValue.url) {\n          if (!this.options.renderOptions.htmlLink.url) {\n            if (this.options.attributeValue.url) {\n              urlSep =\n                this.options.attributeValue.url.indexOf(\"?\") >= 0 ? \"&\" : \"?\";\n              if (this.options.renderOptions.contentDisposition === \"inline\") {\n                this.options.attributeValue.url = this.options.attributeValue.url.replace(\n                  \"&inline=no\",\n                  \"\"\n                );\n                this.options.attributeValue.url += urlSep + \"inline=yes\";\n              } else {\n                this.options.attributeValue.url = this.options.attributeValue.url.replace(\n                  \"&inline=yes\",\n                  \"\"\n                );\n                this.options.attributeValue.url += urlSep + \"inline=no\";\n              }\n            }\n            this.options.renderOptions.htmlLink.url = this.options.attributeValue.url;\n\n            if (!this.options.renderOptions.htmlLink.title) {\n              this.options.renderOptions.htmlLink.title = this.options.attributeValue.displayValue;\n              if (this.options.attributeValue.size >= 1024) {\n                this.options.renderOptions.htmlLink.title +=\n                  \"<br/>(\" +\n                  Math.round(this.options.attributeValue.size / 1024) +\n                  \" \" +\n                  this.options.labels.kiloByte +\n                  \")\";\n              } else {\n                this.options.renderOptions.htmlLink.title +=\n                  \"<br/>(\" +\n                  this.options.attributeValue.size +\n                  \" \" +\n                  this.options.labels.byte +\n                  \")\";\n              }\n            }\n          }\n        }\n      }\n      if (this.options.renderOptions.mimeIconSize) {\n        if (\n          [\"0\", \"0x0\", \"x0\"].indexOf(\n            this.options.renderOptions.mimeIconSize\n          ) !== -1\n        ) {\n          this.options.attributeValue.icon = null;\n        } else {\n          var reSize = /sizes\\/([^/]+)/;\n          this.options.attributeValue.icon = this.options.attributeValue.icon.replace(\n            reSize,\n            \"sizes/\" + this.options.renderOptions.mimeIconSize\n          );\n        }\n      }\n      this._super();\n      if (this.getMode() === \"write\") {\n        visibleInput = this.element.find(\"input[type=text]\");\n        visibleInput.attr(\"title\", this.options.labels.tooltipLabel);\n        visibleInput.attr(\n          \"placeholder\",\n          this.options.renderOptions.placeHolder\n        );\n        this.element\n          .find(\".dcpAttribute__content__button--file\")\n          .attr(\"title\", this.options.labels.downloadLabel);\n\n        visibleInput.tooltip({\n          trigger: \"hover\",\n          placement: \"bottom\",\n          container: \".dcpDocument\"\n        });\n        this.element\n          .find(\"input[type=file]\")\n          .attr(\"fileValue\", this.options.attributeValue.value || null);\n      }\n    },\n\n    _initEvent: function wFileInitEvent() {\n      var currentWidget = this;\n      if (this.getMode() === \"write\") {\n        this._initUploadEvent();\n      }\n\n      // Add trigger when try to download file\n      this.element.on(\n        \"click.\" + this.eventNamespace,\n        \".dcpAttribute__content__link\",\n        function wFileClickDownload(event) {\n          currentWidget._trigger(\"downloadFile\", event, {\n            $el: currentWidget.element,\n            index: currentWidget._getIndex()\n          });\n        }\n      );\n\n      this._super();\n    },\n\n    _initChangeEvent: function wFileInitChangeEvent() {\n      // set by widget if no autocomplete\n      if (this.options.hasAutocomplete) {\n        this._super();\n      }\n    },\n\n    _initUploadEvent: function wFileInitUploadEvent() {\n      var currentWidget = this;\n      var inputFile = this.element.find(\"input[type=file]\");\n      var inputText = this.element.find(\".dcpAttribute__value\");\n      var fileUrl = this.options.attributeValue.url;\n\n      if (fileUrl) {\n        this.element.on(\n          \"click\" + this.eventNamespace,\n          \".dcpAttribute__content__button--file\",\n          function wFileOnButtonClickr(event) {\n            var isNotPrevented = currentWidget._trigger(\"downloadFile\", event, {\n              $el: currentWidget.element,\n              index: currentWidget._getIndex()\n            });\n            if (isNotPrevented) {\n              var url = fileUrl,\n                $base = $(\"base\");\n\n              if (isNotPrevented) {\n                if ($base.length > 0) {\n                  // For IE : Not honor base href in this case\n                  url = $base.attr(\"href\") + url;\n                }\n                window.open(url);\n              }\n            }\n          }\n        );\n      } else {\n        this.element\n          .find(\".dcpAttribute__content__button--file\")\n          .attr(\"disabled\", \"disabled\");\n      }\n\n      if (!_.isUndefined(window.FormData)) {\n        this.element.on(\n          \"dragenter\" + this.eventNamespace,\n          \".dcpAttribute__dragTarget\",\n          function wFileOnDragEnter(event) {\n            inputText.val(currentWidget.options.attributeValue.displayValue);\n            event.stopPropagation();\n            event.preventDefault();\n          }\n        );\n        this.element.on(\n          \"dragover\" + this.eventNamespace,\n          \".dcpAttribute__dragTarget\",\n          function wFileOnDragOver(event) {\n            inputText.val(currentWidget.options.labels.dropFileHere);\n            event.stopPropagation();\n            event.preventDefault();\n            currentWidget.element.addClass(\"dcpAttribute__value--dropzone\");\n          }\n        );\n        this.element.on(\n          \"dragleave\" + this.eventNamespace,\n          \".dcpAttribute__dragTarget\",\n          function wFileOnLeave(event) {\n            inputText.val(currentWidget.options.attributeValue.displayValue);\n            event.stopPropagation();\n            event.preventDefault();\n            currentWidget.element.removeClass(\"dcpAttribute__value--dropzone\");\n          }\n        );\n\n        this.element.on(\n          \"drop\" + this.eventNamespace,\n          \".dcpAttribute__dragTarget\",\n          function wFileOnDrop(event) {\n            inputText.val(currentWidget.options.attributeValue.displayValue);\n            currentWidget.element.removeClass(\"dcpAttribute__value--dropzone\");\n            event.stopPropagation();\n            event.preventDefault();\n\n            var dt = event.originalEvent.dataTransfer;\n            var files = dt.files;\n            if (files.length > 0) {\n              currentWidget.uploadFile(files[0]);\n            }\n          }\n        );\n\n        this.element.on(\n          \"click\" + this.eventNamespace,\n          \".dcpAttribute__value\",\n          function wFileOnClick() {\n            inputFile.trigger(\"click\");\n          }\n        );\n\n        this.element.on(\n          \"keydown\" + this.eventNamespace,\n          \".dcpAttribute__value\",\n          function wFileFilterKeys(event) {\n            if (\n              event.keyCode !== 9 &&\n              event.keyCode !== 32 &&\n              event.keyCode !== 13\n            ) {\n              event.preventDefault();\n            }\n          }\n        );\n        this.element.on(\n          \"keyup\" + this.eventNamespace,\n          \".dcpAttribute__value\",\n          function wFileSelectKeys(event) {\n            if (event.keyCode !== 9) {\n              event.preventDefault();\n              if (event.keyCode === 32 || event.keyCode === 13) {\n                inputFile.trigger(\"click\");\n              }\n            }\n          }\n        );\n\n        this.element.on(\n          \"change\" + this.eventNamespace,\n          \"input[type=file]\",\n          function wFileChange(/*event*/) {\n            if (this.files && this.files.length > 0) {\n              currentWidget.uploadFile(this.files[0]);\n            }\n          }\n        );\n      } else {\n        alert(\"Your browser not support FormData\");\n      }\n    },\n\n    getWidgetValue: function wFilegetWidgetValue() {\n      var $inputFile = this.element.find(\"input[type=file]\");\n      return $inputFile.attr(\"fileValue\") || null;\n    },\n\n    /**\n     * Condition before upload file\n     * @returns {boolean}\n     */\n    uploadCondition: function wFileUploadCondition() {\n      return true;\n    },\n\n    uploadFileForm: function wFileUploadFileForm() {\n      var inputText = this.element.find(\".dcpAttribute__value\");\n\n      var inputFile = this.element.find(\"input[type=file]\");\n      this._setVisibilitySavingMenu(\"disabled\");\n\n      inputText.addClass(\"dcpAttribute__value--transferring\");\n      inputText.val(\n        this.options.labels.transferring +\n          \" \" +\n          inputFile\n            .val()\n            .split(/[\\\\/]/)\n            .pop()\n      );\n      this.element.find(\"form\").submit();\n    },\n\n    uploadFile: function wFileUploadFile(firstFile) {\n      var inputText = this.element.find(\".dcpAttribute__value\");\n      var formData = new FormData();\n      var newFileName = firstFile.name;\n      var originalText = inputText.val();\n      var originalBgColor = inputText.css(\"background-color\");\n      var currentWidget = this;\n      var event = { prevent: false };\n      var $inputFile = this.element.find(\"input[type=file]\");\n\n      if (!this.uploadCondition(firstFile)) {\n        return;\n      }\n\n      var isNotPrevented = currentWidget._trigger(\"uploadfile\", event, {\n        $el: currentWidget.element,\n        index: currentWidget._getIndex(),\n        file: firstFile\n      });\n      if (!isNotPrevented) {\n        return;\n      }\n      //currentWidget.setValue(currentFileValue);\n      currentWidget.uploadingFiles++;\n      formData.append(\"dcpFile\", firstFile);\n      $inputFile.prop(\"disabled\", true);\n\n      inputText.addClass(\"dcpAttribute__value--transferring\");\n      var infoBgColor = inputText.css(\"background-color\");\n      $.ajax({\n        type: \"POST\",\n        url: \"api/v2/temporaryFiles/\",\n        processData: false,\n        contentType: false,\n        cache: false,\n        data: formData,\n\n        xhr: function wFileXhrAddProgress() {\n          var xhrObject = $.ajaxSettings.xhr();\n          if (xhrObject.upload) {\n            xhrObject.upload.addEventListener(\n              \"progress\",\n              function wFileProgress(event) {\n                var percent = 0;\n                var position = event.loaded || event.position;\n                var total = event.total;\n                if (event.lengthComputable) {\n                  percent = Math.ceil((position / total) * 100);\n                }\n                if (percent >= 100) {\n                  inputText.val(\n                    currentWidget.options.labels.recording + \" \" + newFileName\n                  );\n                  inputText.removeClass(\"dcpAttribute__value--transferring\");\n                  inputText.addClass(\n                    \"dcpAttribute__value--recording progress-bar active progress-bar-striped\"\n                  );\n                  inputText.css(\"background\", \"\");\n                  inputText.css(\"background-image\", \"\");\n                } else {\n                  inputText.addClass(\"dcpAttribute__value--transferring\");\n                  inputText.val(\n                    currentWidget.options.labels.transferring +\n                      \" \" +\n                      newFileName\n                  );\n                  inputText.css(\"background-color\", \"red\");\n                  inputText.css(\n                    \"background\",\n                    \"linear-gradient(to right,\" +\n                      infoBgColor +\n                      \" 0%,\" +\n                      infoBgColor +\n                      \" \" +\n                      percent +\n                      \"%,\" +\n                      originalBgColor +\n                      (percent + 1) +\n                      \"%,\" +\n                      originalBgColor +\n                      \" 100%) \"\n                  );\n                }\n              },\n              false\n            );\n          }\n          return xhrObject;\n        }\n      })\n        .done(function wFileUploadDone(data) {\n          var dataFile = data.data.file;\n          var event = { prevent: false };\n          var fileValue = {\n            value: dataFile.reference,\n            size: dataFile.size,\n            fileName: dataFile.fileName,\n            displayValue: dataFile.fileName,\n            creationDate: dataFile.cdate,\n            thumbnail: dataFile.thumbnailUrl,\n            url: dataFile.downloadUrl,\n            icon: dataFile.iconUrl\n          };\n\n          currentWidget.uploadingFiles--;\n\n          currentWidget.setValue(fileValue);\n          currentWidget._trigger(\"uploadfiledone\", event, {\n            $el: currentWidget.element,\n            index: currentWidget._getIndex(),\n            file: fileValue\n          });\n        })\n        .fail(function wFileUploadFail(data) {\n          currentWidget.uploadingFiles--;\n          currentWidget._trigger(\"uploadfiledone\", event, {\n            $el: currentWidget.element,\n            index: currentWidget._getIndex(),\n            file: null\n          });\n          inputText.css(\n            \"background-image\",\n            \"url(\" + currentWidget.options.attributeValue.icon + \")\"\n          );\n          var result = JSON.parse(data.responseText);\n          if (result) {\n            _.each(result.messages, function wFileErrorMessages(errorMessage) {\n              $(\"body\").trigger(\"notification\", {\n                htmlMessage: errorMessage.contentHtml,\n                message: errorMessage.contentText,\n\n                type: errorMessage.type\n              });\n            });\n          } else {\n            inputText.css(\"background\", \"\");\n            $(\"body\").trigger(\"notification\", {\n              htmlMessage:\n                \"File <b>\" + firstFile.name + \"</b> cannot be uploaded\",\n              message: event.statusText,\n              type: \"error\"\n            });\n          }\n        })\n        .always(function wFileUploadEnd() {\n          $inputFile.prop(\"disabled\", false);\n          inputText.val(originalText);\n          inputText.css(\"background\", \"\");\n          inputText.removeClass(\n            \"progress-bar active progress-bar-striped dcpAttribute__value--transferring dcpAttribute__value--recording\"\n          );\n        });\n    },\n\n    /**\n     * Modify value to widget and send notification to the view\n     * @param value\n     */\n    setValue: function wFileSetValue(value) {\n      var $inputFile = this.element.find(\"input[type=file]\");\n      // call wAttribute:::setValue() :send notification\n      this._super(value);\n\n      if (this.getMode() === \"write\" && this.uploadingFiles === 0) {\n        this.redraw();\n      }\n\n      $inputFile.attr(\"fileValue\", value ? value.value : null);\n    },\n\n    /**\n     * Return the url of common link\n     * @returns {*}\n     */\n    getLink: function wFileGetLink() {\n      var link = this._super();\n      if (this.options.attributeValue.url && (!link || !link.url)) {\n        link.url = this.options.attributeValue.url;\n      }\n\n      return link;\n    },\n\n    getType: function wFileGetType() {\n      return \"file\";\n    }\n  });\n\n  return $.fn.dcpFile;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///d756e10b1ea30dea6265\n");

/***/ }),

/***/ "e3999333438b4df733cd":
/*!*******************************************************************!*\
  !*** ./src/vendor/Anakeen/DOCUMENT/IHM/i18n/translatorFactory.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*global define*/\n// use \"text!dcpContextRoot/api/v2/i18n/DOCUMENT\" to get only DDUI translation\n\nwindow.dcp = window.dcp || {};\n\n(function umdRequire(root, requireFunction) {\n  \"use strict\";\n\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (requireFunction),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  }\n  root.dcp.translatorFactory = requireFunction([]);\n})(window, function require_translatorFactory() {\n  \"use strict\";\n\n  var isString = function isString(obj) {\n    return typeof obj === \"string\";\n  };\n\n  return function catalog(translation) {\n    if (isString(translation)) {\n      try {\n        translation = JSON.parse(translation);\n      } catch (e) {\n        translation = { data: { catalog: {} } };\n        console.error(\"Locale catalog error : \" + e.message);\n      }\n    }\n\n    return {\n      _catalog: translation.data.catalog,\n      _locale: translation.data.locale,\n\n      /**\n       * Return key translation\n       * @param key text to translate\n       * @returns string\n       */\n      _: function i18n_gettext(key) {\n        if (key && this._catalog[key]) {\n          return this._catalog[key];\n        }\n        return key;\n      },\n      /**\n       * Return key translation in context\n       * @param key text to translate\n       * @param ctxt context\n       * @returns {*}\n       */\n      ___: function i18n_pgettext(key, ctxt) {\n        if (\n          key &&\n          this._catalog &&\n          this._catalog._msgctxt_ &&\n          this._catalog._msgctxt_[ctxt] &&\n          this._catalog._msgctxt_[ctxt][key]\n        ) {\n          return this._catalog._msgctxt_[ctxt][key];\n        }\n        return key;\n      },\n      /**\n       * Return some info on the current locale\n       *\n       * @returns {locale|{culture}|*|string|string}\n       */\n      getLocale: function i18n_getLocale() {\n        return this._locale;\n      }\n    };\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZTM5OTkzMzM0MzhiNGRmNzMzY2QuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdmVuZG9yL0FuYWtlZW4vRE9DVU1FTlQvSUhNL2kxOG4vdHJhbnNsYXRvckZhY3RvcnkuanM/MWE4MCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKmdsb2JhbCBkZWZpbmUqL1xuLy8gdXNlIFwidGV4dCFkY3BDb250ZXh0Um9vdC9hcGkvdjIvaTE4bi9ET0NVTUVOVFwiIHRvIGdldCBvbmx5IEREVUkgdHJhbnNsYXRpb25cblxud2luZG93LmRjcCA9IHdpbmRvdy5kY3AgfHwge307XG5cbihmdW5jdGlvbiB1bWRSZXF1aXJlKHJvb3QsIHJlcXVpcmVGdW5jdGlvbikge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoW10sIHJlcXVpcmVGdW5jdGlvbik7XG4gIH1cbiAgcm9vdC5kY3AudHJhbnNsYXRvckZhY3RvcnkgPSByZXF1aXJlRnVuY3Rpb24oW10pO1xufSkod2luZG93LCBmdW5jdGlvbiByZXF1aXJlX3RyYW5zbGF0b3JGYWN0b3J5KCkge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgaXNTdHJpbmcgPSBmdW5jdGlvbiBpc1N0cmluZyhvYmopIHtcbiAgICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJzdHJpbmdcIjtcbiAgfTtcblxuICByZXR1cm4gZnVuY3Rpb24gY2F0YWxvZyh0cmFuc2xhdGlvbikge1xuICAgIGlmIChpc1N0cmluZyh0cmFuc2xhdGlvbikpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHRyYW5zbGF0aW9uID0gSlNPTi5wYXJzZSh0cmFuc2xhdGlvbik7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHRyYW5zbGF0aW9uID0geyBkYXRhOiB7IGNhdGFsb2c6IHt9IH0gfTtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkxvY2FsZSBjYXRhbG9nIGVycm9yIDogXCIgKyBlLm1lc3NhZ2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBfY2F0YWxvZzogdHJhbnNsYXRpb24uZGF0YS5jYXRhbG9nLFxuICAgICAgX2xvY2FsZTogdHJhbnNsYXRpb24uZGF0YS5sb2NhbGUsXG5cbiAgICAgIC8qKlxuICAgICAgICogUmV0dXJuIGtleSB0cmFuc2xhdGlvblxuICAgICAgICogQHBhcmFtIGtleSB0ZXh0IHRvIHRyYW5zbGF0ZVxuICAgICAgICogQHJldHVybnMgc3RyaW5nXG4gICAgICAgKi9cbiAgICAgIF86IGZ1bmN0aW9uIGkxOG5fZ2V0dGV4dChrZXkpIHtcbiAgICAgICAgaWYgKGtleSAmJiB0aGlzLl9jYXRhbG9nW2tleV0pIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5fY2F0YWxvZ1trZXldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBrZXk7XG4gICAgICB9LFxuICAgICAgLyoqXG4gICAgICAgKiBSZXR1cm4ga2V5IHRyYW5zbGF0aW9uIGluIGNvbnRleHRcbiAgICAgICAqIEBwYXJhbSBrZXkgdGV4dCB0byB0cmFuc2xhdGVcbiAgICAgICAqIEBwYXJhbSBjdHh0IGNvbnRleHRcbiAgICAgICAqIEByZXR1cm5zIHsqfVxuICAgICAgICovXG4gICAgICBfX186IGZ1bmN0aW9uIGkxOG5fcGdldHRleHQoa2V5LCBjdHh0KSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBrZXkgJiZcbiAgICAgICAgICB0aGlzLl9jYXRhbG9nICYmXG4gICAgICAgICAgdGhpcy5fY2F0YWxvZy5fbXNnY3R4dF8gJiZcbiAgICAgICAgICB0aGlzLl9jYXRhbG9nLl9tc2djdHh0X1tjdHh0XSAmJlxuICAgICAgICAgIHRoaXMuX2NhdGFsb2cuX21zZ2N0eHRfW2N0eHRdW2tleV1cbiAgICAgICAgKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX2NhdGFsb2cuX21zZ2N0eHRfW2N0eHRdW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGtleTtcbiAgICAgIH0sXG4gICAgICAvKipcbiAgICAgICAqIFJldHVybiBzb21lIGluZm8gb24gdGhlIGN1cnJlbnQgbG9jYWxlXG4gICAgICAgKlxuICAgICAgICogQHJldHVybnMge2xvY2FsZXx7Y3VsdHVyZX18KnxzdHJpbmd8c3RyaW5nfVxuICAgICAgICovXG4gICAgICBnZXRMb2NhbGU6IGZ1bmN0aW9uIGkxOG5fZ2V0TG9jYWxlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbG9jYWxlO1xuICAgICAgfVxuICAgIH07XG4gIH07XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///e3999333438b4df733cd\n");

/***/ }),

/***/ "e6be0392327aaf29201b":
/*!**************************************************************************!*\
  !*** ./src/vendor/Anakeen/DOCUMENT/IHM/views/attributes/array/vArray.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*global define, console*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n  __webpack_require__(/*! jquery */ \"127c8cf59f228bb01a21\"),\n  __webpack_require__(/*! underscore */ \"8e08e542008e4aef1f58\"),\n  __webpack_require__(/*! backbone */ \"1858b45bf48591489d06\"),\n  __webpack_require__(/*! mustache */ \"bcd31d01884fc294fd69\"),\n  __webpack_require__(/*! dcpDocument/views/attributes/vAttribute */ \"37002e519de305be82e6\"),\n  __webpack_require__(/*! dcpDocument/views/attributes/array/vColumn */ \"52a46e9f0cafec0a3802\"),\n  __webpack_require__(/*! dcpDocument/views/document/attributeTemplate */ \"7873a0bfc996b28836c2\"),\n  __webpack_require__(/*! dcpDocument/widgets/attributes/array/wArray */ \"71c536497138046fbd5e\")\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function vArray(\n  $,\n  _,\n  Backbone,\n  Mustache,\n  ViewAttribute,\n  ViewColumn,\n  attributeTemplate\n) {\n  \"use strict\";\n\n  return Backbone.View.extend({\n    className: \"row dcpArray\",\n    displayLabel: true,\n    customView: false,\n    customRowView: false,\n    events: {\n      dcparraylineadded: \"addLine\",\n      dcparraylineremoved: \"removeLine\",\n      dcparraylinemoved: \"moveLine\",\n      dcparrayexternallinkselected: \"externalLinkSelected\",\n      \"dcpattributechange .dcpArray__content__cell\": \"updateValue\"\n    },\n\n    columnViews: {},\n\n    initialize: function vArray_initialize(options) {\n      if (\n        options.displayLabel === false ||\n        this.model.getOption(\"labelPosition\") === \"none\"\n      ) {\n        this.displayLabel = false;\n      }\n      this.listenTo(this.model, \"change:label\", this.updateLabel);\n      this.listenTo(this.model, \"destroy\", this.remove);\n      this.listenTo(this.model, \"cleanView\", this.remove);\n      this.listenTo(this.model, \"change:errorMessage\", this.setArrayError);\n      this.listenTo(this.model, \"errorMessage\", this.setError);\n      this.listenTo(this.model, \"hide\", this.hide);\n      this.listenTo(this.model, \"show\", this.show);\n      this.listenTo(this.model, \"removeWidgetLine\", this.removeWidgetLine);\n      this.listenTo(this.model, \"addWidgetLine\", this.addWidgetLine);\n      this.listenTo(this.model, \"haveView\", this._identifyView);\n      this.options = options;\n    },\n\n    render: function vArray_render() {\n      var currentView = this;\n      return new Promise(\n        _.bind(function vArray_renderPromise(resolve, reject) {\n          try {\n            var customRender,\n              data = currentView.model.toData(null, true),\n              event = { prevent: false },\n              promisesColumn = [];\n\n            //Trigger the beforeRender event, and cancel display if asked\n            currentView.model.trigger(\"beforeRender\", event, {\n              model: currentView.model,\n              $el: currentView.$el\n            });\n            if (event.prevent) {\n              resolve(currentView);\n              return currentView;\n            }\n\n            if (currentView.options.originalView !== true) {\n              if (currentView.model.getOption(\"template\")) {\n                customRender = attributeTemplate.renderCustomView(\n                  currentView.model\n                );\n                currentView.customView = customRender.$el;\n                customRender.promise.then(resolve);\n                if (\n                  currentView.model\n                    .getOption(\"template\")\n                    .match(\"dcpArray__table\")\n                ) {\n                  // Two case of custom : custom line or global custom array\n                  currentView.customRowView = true;\n                }\n              }\n            }\n\n            //Extract only the displayable lines\n            data.content = _.filter(\n              data.content,\n              function vArray_filterCurrentElement(currentContent) {\n                return currentContent.isDisplayable;\n              }\n            );\n            data.nbLines = currentView.getNbLines();\n            currentView.padValues(data.nbLines);\n            data.renderOptions = currentView.model.getOptions();\n            data.templates = {};\n            data.displayLabel = currentView.displayLabel;\n            if (\n              currentView.model.getTemplates().attribute[\n                currentView.model.get(\"type\")\n              ]\n            ) {\n              data.templates = currentView.model.getTemplates().attribute[\n                currentView.model.get(\"type\")\n              ];\n            }\n            if (data.nbLines === 0 && data.mode === \"read\") {\n              data.showEmpty = currentView.model.getOption(\"showEmptyContent\");\n            } else {\n              if (!currentView.customView || currentView.customRowView) {\n                currentView.columnViews = [];\n                currentView.model\n                  .get(\"content\")\n                  .each(function vArray_analyzeContent(currentAttr) {\n                    if (!currentAttr.isDisplayable()) {\n                      return;\n                    }\n                    try {\n                      if (currentAttr.getOption(\"attributeLabel\")) {\n                        data.content = _.map(\n                          data.content,\n                          function vArray_changeLabelCurrentElement(\n                            currentContent\n                          ) {\n                            if (currentContent.id === currentAttr.id) {\n                              currentContent.label = currentAttr.getOption(\n                                \"attributeLabel\"\n                              );\n                            }\n                            return currentContent;\n                          }\n                        );\n                      }\n                      if (currentAttr.get(\"isValueAttribute\")) {\n                        currentView.columnViews[\n                          currentAttr.id\n                        ] = new ViewColumn({\n                          el: currentView.el,\n                          els: function vArray_findScope() {\n                            return currentView.$el.find(\n                              '.dcpArray__cell[data-attrid=\"' +\n                                currentAttr.id +\n                                '\"],' +\n                                '.dcpCustomTemplate--row[data-attrid=\"' +\n                                currentAttr.id +\n                                '\"]'\n                            );\n                          },\n                          originalView: true,\n                          model: currentAttr,\n                          parentElement: currentView.$el\n                        });\n                        promisesColumn.push(\n                          currentView.columnViews[currentAttr.id].render()\n                        );\n                      }\n                    } catch (e) {\n                      if (window.dcp.logger) {\n                        window.dcp.logger(e);\n                      } else {\n                        console.error(e);\n                      }\n                    }\n                  });\n              }\n            }\n          } catch (e) {\n            reject(e);\n          }\n\n          if (currentView.customView) {\n            data.customTemplate = currentView.customView;\n            data.customLineCallback = function vArray_callCustomLine(index) {\n              return attributeTemplate.customArrayRowView(\n                index,\n                currentView.model,\n                currentView\n              );\n            };\n          }\n\n          try {\n            promisesColumn.push(\n              new Promise(\n                _.bind(function onArrayReady(resolve, reject) {\n                  try {\n                    currentView.$el\n                      .dcpArray(data)\n                      .one(\"dcparraywidgetready\", resolve);\n                    attributeTemplate.insertDescription(currentView);\n                  } catch (e) {\n                    reject(e);\n                  }\n                }, this)\n              )\n            );\n          } catch (e) {\n            if (window.dcp.logger) {\n              window.dcp.logger(e);\n            } else {\n              console.error(e);\n            }\n          }\n\n          Promise.all(promisesColumn).then(function renderDone() {\n            currentView.$el.attr(\"data-attrid\", currentView.model.id);\n            currentView.model.trigger(\"renderDone\", {\n              model: currentView.model,\n              $el: currentView.$el\n            });\n            if (\n              currentView.$el.find(\n                '.dcpCustomTemplate[data-attrid=\"' +\n                  currentView.model.id +\n                  '\"] .dcpCustomTemplate--content[data-attrid=\"' +\n                  currentView.model.id +\n                  '\"]'\n              ).length > 0\n            ) {\n              // it's a fake array view because template declare itself inside\n              currentView.stopListening(currentView.model, \"addWidgetLine\");\n              currentView.stopListening(currentView.model, \"removeWidgetLine\");\n              currentView.undelegateEvents();\n            }\n            resolve(currentView);\n          });\n\n          return this;\n        }, this)\n      );\n    },\n\n    getNbLines: function vArraygetNbLines() {\n      var nbLigne = this.nbLines || 0;\n      this.model\n        .get(\"content\")\n        .each(function vArray_getCurrentLine(currentAttr) {\n          if (\n            currentAttr.get(\"attributeValue\") &&\n            nbLigne < _.size(currentAttr.get(\"attributeValue\"))\n          ) {\n            nbLigne = _.size(currentAttr.get(\"attributeValue\"));\n          }\n        });\n      return nbLigne;\n    },\n\n    padValues: function vArrayPadValues(lineNumber) {\n      if (lineNumber > 0) {\n        this.model\n          .get(\"content\")\n          .each(function vArray_padCurrentLine(currentAttr) {\n            var currentValue = currentAttr.get(\"attributeValue\");\n            if (\n              currentValue !== null &&\n              currentValue !== undefined &&\n              _.size(currentValue) < lineNumber\n            ) {\n              for (var idx = currentValue.length; idx < lineNumber; idx++) {\n                currentValue.push({ value: null, displayValue: \"\" });\n              }\n            }\n          });\n      }\n    },\n\n    updateLabel: function vArrayupdateLabel() {\n      this.$el.find(\".dcpArray__label\").text(this.model.get(\"label\"));\n    },\n\n    updateValue: function vArray_UpdateValue(event, options) {\n      var attributeModel = this.model.get(\"content\").get(options.id);\n      if (!attributeModel) {\n        throw new Error(\"Unknown attribute \" + options.id);\n      }\n      if (options.index >= 0) {\n        var currentValues = attributeModel.get(\"attributeValue\");\n        var currentValue = currentValues[options.index];\n\n        if (!_.isEqual(currentValue, options.value)) {\n          // Update model only if a change is detected\n          if (\n            !currentValue.value ||\n            !options.value ||\n            !options.value.value ||\n            currentValue.value !== options.value.value\n          ) {\n            attributeModel.setValue(options.value, options.index);\n          }\n        }\n      } else {\n        attributeModel.setValue(options.value, options.index);\n      }\n    },\n\n    refresh: function vArray_Refresh() {\n      this.nbLines = this.$el.dcpArray(\"option\", \"nbLines\");\n      this.$el.dcpArray(\"destroy\");\n      this.render();\n    },\n\n    removeLine: function vArray_removeLine(event, options) {\n      this.model\n        .get(\"content\")\n        .each(function vArray_removeLine(currentContent) {\n          currentContent.removeIndexValue(options.line);\n        });\n      this.model.trigger(\"array\", \"removeLine\", this.model, options.line);\n    },\n\n    removeWidgetLine: function vArray_RemoveWidgetLine(options) {\n      this.$el.dcpArray(\"removeLine\", options.index, { silent: true });\n    },\n\n    addWidgetLine: function vArray_addWidgetLine(options) {\n      this.$el.dcpArray(\"addLine\", options.index);\n    },\n\n    addLine: function vArray_AddLine(event, options) {\n      var currentArrayView = this,\n        customView = null;\n      var allPromiseAttributes = [];\n      this.model\n        .get(\"content\")\n        .each(function vArray_addLineGetContent(currentContent) {\n          var currentViewColumn;\n          if (options.needAddValue || options.copyValue) {\n            currentContent.createIndexedValue(options.line, options.copyValue);\n          }\n          currentViewColumn = currentArrayView.columnViews[currentContent.id];\n          if (currentViewColumn) {\n            customView = null;\n            if (currentContent.getOption(\"template\")) {\n              customView = attributeTemplate.renderCustomView(\n                currentContent,\n                function vArray_customViewInit() {\n                  var $this = $(this),\n                    currentWidgetOption = currentViewColumn.getData(\n                      options.line\n                    );\n                  //Check if the asked attribute is the current attribute\n                  if ($this.data(\"attrid\") !== currentContent.id) {\n                    throw Error(\n                      \"An attribute template in an array cannot asked\" +\n                        \" for another attribute than the current (\" +\n                        $this.data(\"attrid\") +\n                        \" asked instead of \" +\n                        currentContent.id +\n                        \")\"\n                    );\n                  }\n                  currentWidgetOption.viewCid = _.uniqueId(\n                    currentWidgetOption.viewCid\n                  );\n                  currentViewColumn.widgetInit($this, currentWidgetOption);\n                  currentViewColumn.moveValueIndex({});\n                },\n                { index: options.line }\n              );\n              allPromiseAttributes.push(customView.promise);\n            }\n            if (customView && customView.$el) {\n              allPromiseAttributes.push(\n                currentViewColumn.addNewWidget(options.line, customView.$el)\n              );\n            } else {\n              allPromiseAttributes.push(\n                currentViewColumn.addNewWidget(options.line)\n              );\n            }\n          }\n        });\n      Promise.all(allPromiseAttributes)\n        .then(\n          _.bind(function addlinePromiseAllDone() {\n            this.model.trigger(\"array\", \"addLine\", this.model, options.line);\n            options.resolve();\n          }, this)\n        )\n        .catch(options.reject);\n    },\n\n    moveLine: function vArray_moveLine(event, options) {\n      this.model\n        .get(\"content\")\n        .each(function vArray_getMoveLineContent(currentContent) {\n          currentContent.moveIndexValue(options.fromLine, options.toLine);\n        });\n      this.model.trigger(\"array\", \"moveLine\", this.model, options);\n    },\n    getAttributeModel: function vArray_getAttributeModel(attributeId) {\n      var docModel = this.model.getDocumentModel();\n      return docModel.get(\"attributes\").get(attributeId);\n    },\n\n    setError: function vArray_setError(event, message) {\n      var parentId = this.model.get(\"parent\");\n\n      if (message) {\n        this.$el.find(\".dcpArray__label\").addClass(\"has-error\");\n      } else {\n        this.$el.find(\".dcpArray__label\").removeClass(\"has-error\");\n      }\n\n      if (parentId) {\n        var parentModel = this.getAttributeModel(parentId);\n        if (parentModel) {\n          parentModel.trigger(\"errorMessage\", event, message);\n        }\n      }\n    },\n    setArrayError: function vArray_setArrayError(event, message) {\n      this.setError(event, message);\n      // global error on array itself\n      this.$el.dcpArray(\"setError\", message);\n    },\n\n    hide: function vArray_hide() {\n      this.$el.hide();\n    },\n\n    show: function vArray_show() {\n      this.$el.show();\n    },\n\n    _identifyView: function vArray_identifyView(event) {\n      event.haveView = true;\n      //Add the pointer to the current jquery element to a list passed by the event\n      event.elements = event.elements.add(this.$el);\n    },\n    externalLinkSelected: function vArrayExternalLinkSelected(event, options) {\n      var documentModel = this.model.getDocumentModel();\n      options.attrid = this.model.id;\n      this.model.trigger(\"internalLinkSelected\", event, options);\n      if (event.prevent) {\n        return this;\n      }\n      documentModel.trigger(\"actionAttributeLink\", event, options);\n    }\n  });\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///e6be0392327aaf29201b\n");

/***/ }),

/***/ "e7767778f9e43c100e9b":
/*!***************************************************************************!*\
  !*** ./src/vendor/Anakeen/DOCUMENT/IHM/widgets/properties/wProperties.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n  __webpack_require__(/*! jquery */ \"127c8cf59f228bb01a21\"),\n  __webpack_require__(/*! underscore */ \"8e08e542008e4aef1f58\"),\n  __webpack_require__(/*! mustache */ \"bcd31d01884fc294fd69\"),\n  __webpack_require__(/*! dcpDocument/widgets/widget */ \"a903b12ace80b5b4ecce\"),\n  __webpack_require__(/*! dcpDocument/widgets/window/wDialog */ \"3120d707f7fb455e9bc0\")\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function require_wProperties($, _, Mustache) {\n  \"use strict\";\n\n  $.widget(\"dcp.dcpDocumentProperties\", $.dcp.dcpDialog, {\n    options: {\n      documentId: 0,\n      window: {\n        modal: true,\n        title: \"Document properties\"\n      },\n      labels: {\n        identifier: \"Identifier\",\n        title: \"Title\",\n        logicalName: \"Logical name\",\n        revision: \"Revision number\",\n        version: \"Version\",\n        family: \"Family\",\n        lockedBy: \"Locked by\",\n        createdBy: \"Created by\",\n        notLocked: \"Not locked\",\n        confidential: \"Confidential\",\n        notConfidential: \"Not confidential\",\n        creationDate: \"Creation date\",\n        lastModificationDate: \"Last modification date\",\n        profil: \"Profil\",\n        profilReference: \"Profil reference\",\n        fieldAccess: \"Field access\",\n        viewController: \"View controller\",\n        propertiesTitle: \"Properties of {{title}}\",\n        property: \"Property\",\n        propertyValue: \"Value\",\n        workflow: \"Workflow\",\n        activity: \"Activity\"\n      }\n    },\n    documentProperties: null,\n    htmlCaneva: function wProperties_htmlCaneva() {\n      return (\n        '<table class=\"properties-main table table-condensed table-hover\"><thead>' +\n        '<tr class=\"properties-header\">' +\n        '<th class=\"properties-header--description\">{{labels.property}}</th>' +\n        '<th class=\"properties-header--value\">{{labels.propertyValue}}</th>' +\n        \"</tr></thead>\" +\n        \"<tbody>\" +\n        '<tr><td class=\"properties-description\">{{labels.title}}</td><td class=\"properties-value\">{{title}}</td></tr>' +\n        '<tr><td class=\"properties-description\">{{labels.identifier}}</td><td class=\"properties-value\">{{initid}}</td></tr>' +\n        '<tr><td class=\"properties-description\">{{labels.logicalName}}</td><td class=\"properties-value\">{{name}}</td></tr>' +\n        '<tr><td class=\"properties-description\">{{labels.revision}}</td><td class=\"properties-value\">{{revision}}</td></tr>' +\n        '<tr><td class=\"properties-description\">{{labels.version}}</td><td class=\"properties-value\">{{version}}</td></tr>' +\n        '<tr><td class=\"properties-separator\" colspan=\"2\"></td></tr>' +\n        '<tr><td class=\"properties-description\">{{labels.workflow}}</td><td class=\"properties-value\"><a  data-document-id=\"{{workflow.id}}\" href=\"api/v2/documents/{{workflow.id}}.html\">{{#workflow.icon}}<img src=\"{{workflow.icon}}\"/>{{/workflow.icon}}{{workflow.title}}</a></td></tr>' +\n        '<tr><td class=\"properties-description\">{{labels.activity}}</td><td class=\"properties-value\">{{#state.reference}}<div class=\"properties-value-statecolor\" style=\"background-color:{{state.color}}\"/>{{state.displayValue}}{{/state.reference}}</td></tr>' +\n        '<tr><td class=\"properties-description\">{{labels.family}}</td><td class=\"properties-value\"><a data-document-id=\"{{family.id}}\" href=\"api/v2/documents/{{family.id}}.html\"><img src=\"{{family.icon}}\"/>{{family.title}}</a><br/><div class=\"properties-value--famname\">{{family.name}}</div></td></tr>' +\n        '<tr><td class=\"properties-separator\" colspan=\"2\"></td></tr>' +\n        '<tr><td class=\"properties-description\">{{labels.createdBy}}</td><td class=\"properties-value\"><a data-document-id=\"{{createdBy.id}}\" href=\"api/v2/documents/{{createdBy.id}}.html\"><img src=\"{{createdBy.icon}}\"/>{{createdBy.title}}</a></td></tr>' +\n        '<tr><td class=\"properties-description\">{{labels.lockedBy}}</td><td class=\"properties-value\">' +\n        \"{{#security.lock.lockedBy.id}}\" +\n        '<a data-document-id=\"{{security.lock.lockedBy.id}}\" href=\"api/v2/documents/{{security.lock.lockedBy.id}}.html\"><img src=\"{{security.lock.lockedBy.icon}}\"/>{{security.lock.lockedBy.title}}</a>' +\n        \"{{/security.lock.lockedBy.id}}\" +\n        \"{{^security.lock.lockedBy.id}}{{labels.notLocked}}{{/security.lock.lockedBy.id}}\" +\n        \"</td></tr>\" +\n        '<tr><td class=\"properties-description\">{{labels.confidential}}</td><td class=\"properties-value\">' +\n        \"{{#confidential}}\" +\n        \"{{labels.confidential}}\" +\n        \"{{/confidential}}\" +\n        \"{{^confidential}}{{labels.notConfidential}}{{/confidential}}\" +\n        \"</td></tr>\" +\n        '<tr><td class=\"properties-separator\" colspan=\"2\"></td></tr>' +\n        '<tr><td class=\"properties-description\">{{labels.creationDate}}</td><td class=\"properties-value\">{{#formatDate}}{{creationDate}}{{/formatDate}}</td></tr>' +\n        '<tr><td class=\"properties-description\">{{labels.lastModificationDate}}</td><td class=\"properties-value\">{{#formatDate}}{{lastModificationDate}}{{/formatDate}}</td></tr>' +\n        '<tr><td class=\"properties-separator\" colspan=\"2\"></td></tr>' +\n        '<tr><td class=\"properties-description\">{{labels.profil}}</td><td class=\"properties-value\"><a data-document-id=\"{{security.profil.id}}\" href=\"api/v2/documents/{{security.profil.id}}.html\">{{#security.profil.icon}}<img src=\"{{security.profil.icon}}\"/>{{/security.profil.icon}}{{security.profil.title}}</a></td></tr>' +\n        '<tr><td class=\"properties-description\">{{labels.profilReference}}</td><td class=\"properties-value\"><a data-document-id=\"{{security.profil.reference.id}}\" href=\"api/v2/documents/{{security.profil.reference.id}}.html\">{{#security.profil.reference.icon}}<img src=\"{{security.profil.reference.icon}}\"/>{{/security.profil.reference.icon}}{{security.profil.reference.title}}</a></td></tr>' +\n        '<tr><td class=\"properties-description\">{{labels.fieldAccess}}</td><td class=\"properties-value\"><a data-document-id=\"{{security.fieldAccess.id}}\" href=\"api/v2/documents/{{security.fieldAccess.id}}.html\">{{#security.fieldAccess.icon}}<img src=\"{{security.fieldAccess.icon}}\"/>{{/security.fieldAccess.icon}}{{security.fieldAccess.title}}</a></td></tr>' +\n        '<tr><td class=\"properties-description\">{{labels.viewController}}</td><td class=\"properties-value\"><a data-document-id=\"{{viewController.id}}\" href=\"api/v2/documents/{{viewController.id}}.html\">{{#viewController.icon}}<img src=\"{{viewController.icon}}\"/>{{/viewController.icon}}{{viewController.title}}</a></td></tr>' +\n        \"</tbody></table>\"\n      );\n    },\n\n    _create: function wProperties__create() {\n      var scope = this;\n\n      this._displayProperties();\n\n      this._super();\n\n      this.element.data(\"dcpDocumentProperties\", this);\n      this.element.on(\n        \"click\" + this.eventNamespace,\n        \"a[data-document-id]\",\n        function wProperties_bindClick(event) {\n          var docid = $(this).data(\"document-id\");\n          if (docid) {\n            event.preventDefault();\n            scope.element.trigger(\"viewDocument\", docid);\n          }\n        }\n      );\n    },\n\n    _displayProperties: function wPropertiesGetProperties() {\n      var scope = this;\n      $.getJSON(\n        \"api/v2/documents/\" +\n          this.options.documentId +\n          \".json?fields=document.properties.all&useTrash=true\"\n      )\n        .done(function wProperties_done(data) {\n          var info;\n          scope.documentProperties = data.data.document.properties;\n          info = _.extend(scope.documentProperties, {\n            labels: scope.options.labels\n          });\n          info.formatDate = function wProperties_formatDate() {\n            return function wProperties_formatDate2(text, render) {\n              return kendo.toString(\n                new Date(render(text).replace(\" \", \"T\")),\n                \"G\"\n              );\n            };\n          };\n          scope.element.html(Mustache.render(scope.htmlCaneva() || \"\", info));\n          //scope.dialogWindow.center();\n\n          scope.dialogWindow.setOptions({\n            title: Mustache.render(\n              scope.options.labels.propertiesTitle,\n              data.data.document.properties\n            )\n          });\n        })\n        .fail(function wProperties_fail(xhr) {\n          var result = JSON.parse(xhr.responseText);\n          window.alert(result.exceptionMessage);\n        });\n    }\n  });\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///e7767778f9e43c100e9b\n");

/***/ }),

/***/ "e7818e853c5e4b7cf56e":
/*!*******************************************************************!*\
  !*** ./src/vendor/Anakeen/DOCUMENT/IHM/collections/attributes.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*global define*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n  __webpack_require__(/*! underscore */ \"8e08e542008e4aef1f58\"),\n  __webpack_require__(/*! backbone */ \"1858b45bf48591489d06\"),\n  __webpack_require__(/*! dcpDocument/models/mAttributeData */ \"1ed0eaa94f3fca308d51\"),\n  __webpack_require__(/*! dcpDocument/models/mAttributeStructural */ \"687c2558a18abb757c14\"),\n  __webpack_require__(/*! dcpDocument/models/mAttributeArray */ \"64f8c3da02958f1cbdb3\")\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function(\n  _,\n  Backbone,\n  ModelAttributeData,\n  ModelAttributeStructural,\n  ModelAttributeArray\n) {\n  \"use strict\";\n\n  return Backbone.Collection.extend({\n    comparator: \"logicalOrder\",\n\n    model: function CollectionAttributesSelectModel(attributes, options) {\n      if (attributes.type === \"array\") {\n        return new ModelAttributeArray(attributes, options);\n      }\n      if (attributes.type === \"tab\" || attributes.type === \"frame\") {\n        return new ModelAttributeStructural(attributes, options);\n      }\n      return new ModelAttributeData(attributes, options);\n    },\n\n    initialize: function CollectionAttributes_initialize(values, options) {\n      this.documentModel = options.documentModel;\n      this.renderOptions = options.renderOptions;\n      this.renderMode = options.renderMode;\n    },\n\n    destroy: function CollectionAttributes_destroy() {\n      var model;\n      while ((model = this.first())) {\n        // jshint ignore:line\n        model.destroy();\n      }\n      delete this.documentModel;\n      delete this.renderOptions;\n      delete this.renderMode;\n    }\n  });\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZTc4MThlODUzYzVlNGI3Y2Y1NmUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdmVuZG9yL0FuYWtlZW4vRE9DVU1FTlQvSUhNL2NvbGxlY3Rpb25zL2F0dHJpYnV0ZXMuanM/OTQwMSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKmdsb2JhbCBkZWZpbmUqL1xuZGVmaW5lKFtcbiAgXCJ1bmRlcnNjb3JlXCIsXG4gIFwiYmFja2JvbmVcIixcbiAgXCJkY3BEb2N1bWVudC9tb2RlbHMvbUF0dHJpYnV0ZURhdGFcIixcbiAgXCJkY3BEb2N1bWVudC9tb2RlbHMvbUF0dHJpYnV0ZVN0cnVjdHVyYWxcIixcbiAgXCJkY3BEb2N1bWVudC9tb2RlbHMvbUF0dHJpYnV0ZUFycmF5XCJcbl0sIGZ1bmN0aW9uKFxuICBfLFxuICBCYWNrYm9uZSxcbiAgTW9kZWxBdHRyaWJ1dGVEYXRhLFxuICBNb2RlbEF0dHJpYnV0ZVN0cnVjdHVyYWwsXG4gIE1vZGVsQXR0cmlidXRlQXJyYXlcbikge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICByZXR1cm4gQmFja2JvbmUuQ29sbGVjdGlvbi5leHRlbmQoe1xuICAgIGNvbXBhcmF0b3I6IFwibG9naWNhbE9yZGVyXCIsXG5cbiAgICBtb2RlbDogZnVuY3Rpb24gQ29sbGVjdGlvbkF0dHJpYnV0ZXNTZWxlY3RNb2RlbChhdHRyaWJ1dGVzLCBvcHRpb25zKSB7XG4gICAgICBpZiAoYXR0cmlidXRlcy50eXBlID09PSBcImFycmF5XCIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBNb2RlbEF0dHJpYnV0ZUFycmF5KGF0dHJpYnV0ZXMsIG9wdGlvbnMpO1xuICAgICAgfVxuICAgICAgaWYgKGF0dHJpYnV0ZXMudHlwZSA9PT0gXCJ0YWJcIiB8fCBhdHRyaWJ1dGVzLnR5cGUgPT09IFwiZnJhbWVcIikge1xuICAgICAgICByZXR1cm4gbmV3IE1vZGVsQXR0cmlidXRlU3RydWN0dXJhbChhdHRyaWJ1dGVzLCBvcHRpb25zKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXcgTW9kZWxBdHRyaWJ1dGVEYXRhKGF0dHJpYnV0ZXMsIG9wdGlvbnMpO1xuICAgIH0sXG5cbiAgICBpbml0aWFsaXplOiBmdW5jdGlvbiBDb2xsZWN0aW9uQXR0cmlidXRlc19pbml0aWFsaXplKHZhbHVlcywgb3B0aW9ucykge1xuICAgICAgdGhpcy5kb2N1bWVudE1vZGVsID0gb3B0aW9ucy5kb2N1bWVudE1vZGVsO1xuICAgICAgdGhpcy5yZW5kZXJPcHRpb25zID0gb3B0aW9ucy5yZW5kZXJPcHRpb25zO1xuICAgICAgdGhpcy5yZW5kZXJNb2RlID0gb3B0aW9ucy5yZW5kZXJNb2RlO1xuICAgIH0sXG5cbiAgICBkZXN0cm95OiBmdW5jdGlvbiBDb2xsZWN0aW9uQXR0cmlidXRlc19kZXN0cm95KCkge1xuICAgICAgdmFyIG1vZGVsO1xuICAgICAgd2hpbGUgKChtb2RlbCA9IHRoaXMuZmlyc3QoKSkpIHtcbiAgICAgICAgLy8ganNoaW50IGlnbm9yZTpsaW5lXG4gICAgICAgIG1vZGVsLmRlc3Ryb3koKTtcbiAgICAgIH1cbiAgICAgIGRlbGV0ZSB0aGlzLmRvY3VtZW50TW9kZWw7XG4gICAgICBkZWxldGUgdGhpcy5yZW5kZXJPcHRpb25zO1xuICAgICAgZGVsZXRlIHRoaXMucmVuZGVyTW9kZTtcbiAgICB9XG4gIH0pO1xufSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///e7818e853c5e4b7cf56e\n");

/***/ }),

/***/ "e7cc2b18eb5701706e84":
/*!************************************************************************************!*\
  !*** ./src/vendor/Anakeen/DOCUMENT/IHM/widgets/attributes/timestamp/wTimestamp.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function umdRequire(root, factory) {\n  \"use strict\";\n\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ \"127c8cf59f228bb01a21\"), __webpack_require__(/*! dcpDocument/widgets/attributes/date/wDate */ \"7e54fcb56e1bb81a7fb8\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(window, function requireTimestamp($) {\n  \"use strict\";\n\n  $.widget(\"dcp.dcpTimestamp\", $.dcp.dcpDate, {\n    options: {\n      type: \"timestamp\",\n      minDate: new Date(1700, 0, 1),\n      renderOptions: {\n        kendoDateConfiguration: {\n          timeFormat: \"HH:mm\", //24 hours format\n          parseFormats: [\n            \"yyyy-MM-dd HH:mm:ss\",\n            \"yyyy-MM-ddTHH:mm:ss\",\n            \"yyyy-MM-ddTHH:mm\"\n          ],\n          format: null\n        }\n      }\n    },\n\n    kendoWidgetClass: \"kendoDateTimePicker\",\n\n    _initDom: function wTimeStampInitDom() {\n      if (this.options.attributeValue.value) {\n        // Add T (iso date) if not set\n\n        this.options.attributeValue.value = this.replaceAt(\n          this.options.attributeValue.value,\n          10,\n          \"T\"\n        );\n      }\n      this._super();\n    },\n\n    replaceAt: function wTimeStampReplaceAt(s, n, t) {\n      return s.substring(0, n) + t + s.substring(n + 1);\n    },\n\n    setValue: function wTimeStampSetValue(value) {\n      if (value.value) {\n        // Add T (iso date) if not set\n        value.value = this.replaceAt(value.value, 10, \"T\");\n      }\n      this._super(value);\n    },\n\n    _activateDate: function wTimeStamp_activateDate(inputValue) {\n      var currentWidget = this;\n      var kendoOptions = this.getKendoOptions();\n      kendoOptions.change = function wTimeStamp_onChange() {\n        if (this.value() !== null) {\n          // only valid date are setted\n          // wrong date are set by blur event\n          var isoDate = currentWidget.convertDateToPseudoIsoString(\n            this.value()\n          );\n          // Need to set by widget to use raw date\n          currentWidget.setValue({\n            value: isoDate,\n            displayValue: inputValue.val()\n          });\n        }\n      };\n      inputValue.kendoDateTimePicker(kendoOptions);\n\n      this._controlDate(inputValue);\n    },\n\n    convertDateToPseudoIsoString: function wTimeStamp_convertDateToPseudoIsoString(\n      dateObject\n    ) {\n      if (dateObject && typeof dateObject === \"object\") {\n        return (\n          dateObject.getFullYear() +\n          \"-\" +\n          this.padNumber(dateObject.getMonth() + 1) +\n          \"-\" +\n          this.padNumber(dateObject.getDate()) +\n          \"T\" +\n          this.padNumber(dateObject.getHours()) +\n          \":\" +\n          this.padNumber(dateObject.getMinutes()) +\n          \":\" +\n          this.padNumber(dateObject.getSeconds())\n        );\n      }\n      return \"\";\n    },\n\n    formatDate: function wTimeStamp_formatDate(value) {\n      if (this.options.renderOptions.kendoDateConfiguration.format) {\n        return kendo.toString(\n          value,\n          this.options.renderOptions.kendoDateConfiguration.format\n        );\n      }\n      return kendo.toString(value, \"g\");\n    },\n\n    getType: function wTimeStamp_getType() {\n      return \"timestamp\";\n    }\n  });\n\n  return $.fn.dcpTimestamp;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZTdjYzJiMThlYjU3MDE3MDZlODQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdmVuZG9yL0FuYWtlZW4vRE9DVU1FTlQvSUhNL3dpZGdldHMvYXR0cmlidXRlcy90aW1lc3RhbXAvd1RpbWVzdGFtcC5qcz8zMGFiIl0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB1bWRSZXF1aXJlKHJvb3QsIGZhY3RvcnkpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKFtcImpxdWVyeVwiLCBcImRjcERvY3VtZW50L3dpZGdldHMvYXR0cmlidXRlcy9kYXRlL3dEYXRlXCJdLCBmYWN0b3J5KTtcbiAgfSBlbHNlIHtcbiAgICAvL25vaW5zcGVjdGlvbiBKU1VucmVzb2x2ZWRWYXJpYWJsZVxuICAgIGZhY3Rvcnkod2luZG93LmpRdWVyeSk7XG4gIH1cbn0pKHdpbmRvdywgZnVuY3Rpb24gcmVxdWlyZVRpbWVzdGFtcCgkKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gICQud2lkZ2V0KFwiZGNwLmRjcFRpbWVzdGFtcFwiLCAkLmRjcC5kY3BEYXRlLCB7XG4gICAgb3B0aW9uczoge1xuICAgICAgdHlwZTogXCJ0aW1lc3RhbXBcIixcbiAgICAgIG1pbkRhdGU6IG5ldyBEYXRlKDE3MDAsIDAsIDEpLFxuICAgICAgcmVuZGVyT3B0aW9uczoge1xuICAgICAgICBrZW5kb0RhdGVDb25maWd1cmF0aW9uOiB7XG4gICAgICAgICAgdGltZUZvcm1hdDogXCJISDptbVwiLCAvLzI0IGhvdXJzIGZvcm1hdFxuICAgICAgICAgIHBhcnNlRm9ybWF0czogW1xuICAgICAgICAgICAgXCJ5eXl5LU1NLWRkIEhIOm1tOnNzXCIsXG4gICAgICAgICAgICBcInl5eXktTU0tZGRUSEg6bW06c3NcIixcbiAgICAgICAgICAgIFwieXl5eS1NTS1kZFRISDptbVwiXG4gICAgICAgICAgXSxcbiAgICAgICAgICBmb3JtYXQ6IG51bGxcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBrZW5kb1dpZGdldENsYXNzOiBcImtlbmRvRGF0ZVRpbWVQaWNrZXJcIixcblxuICAgIF9pbml0RG9tOiBmdW5jdGlvbiB3VGltZVN0YW1wSW5pdERvbSgpIHtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuYXR0cmlidXRlVmFsdWUudmFsdWUpIHtcbiAgICAgICAgLy8gQWRkIFQgKGlzbyBkYXRlKSBpZiBub3Qgc2V0XG5cbiAgICAgICAgdGhpcy5vcHRpb25zLmF0dHJpYnV0ZVZhbHVlLnZhbHVlID0gdGhpcy5yZXBsYWNlQXQoXG4gICAgICAgICAgdGhpcy5vcHRpb25zLmF0dHJpYnV0ZVZhbHVlLnZhbHVlLFxuICAgICAgICAgIDEwLFxuICAgICAgICAgIFwiVFwiXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICB0aGlzLl9zdXBlcigpO1xuICAgIH0sXG5cbiAgICByZXBsYWNlQXQ6IGZ1bmN0aW9uIHdUaW1lU3RhbXBSZXBsYWNlQXQocywgbiwgdCkge1xuICAgICAgcmV0dXJuIHMuc3Vic3RyaW5nKDAsIG4pICsgdCArIHMuc3Vic3RyaW5nKG4gKyAxKTtcbiAgICB9LFxuXG4gICAgc2V0VmFsdWU6IGZ1bmN0aW9uIHdUaW1lU3RhbXBTZXRWYWx1ZSh2YWx1ZSkge1xuICAgICAgaWYgKHZhbHVlLnZhbHVlKSB7XG4gICAgICAgIC8vIEFkZCBUIChpc28gZGF0ZSkgaWYgbm90IHNldFxuICAgICAgICB2YWx1ZS52YWx1ZSA9IHRoaXMucmVwbGFjZUF0KHZhbHVlLnZhbHVlLCAxMCwgXCJUXCIpO1xuICAgICAgfVxuICAgICAgdGhpcy5fc3VwZXIodmFsdWUpO1xuICAgIH0sXG5cbiAgICBfYWN0aXZhdGVEYXRlOiBmdW5jdGlvbiB3VGltZVN0YW1wX2FjdGl2YXRlRGF0ZShpbnB1dFZhbHVlKSB7XG4gICAgICB2YXIgY3VycmVudFdpZGdldCA9IHRoaXM7XG4gICAgICB2YXIga2VuZG9PcHRpb25zID0gdGhpcy5nZXRLZW5kb09wdGlvbnMoKTtcbiAgICAgIGtlbmRvT3B0aW9ucy5jaGFuZ2UgPSBmdW5jdGlvbiB3VGltZVN0YW1wX29uQ2hhbmdlKCkge1xuICAgICAgICBpZiAodGhpcy52YWx1ZSgpICE9PSBudWxsKSB7XG4gICAgICAgICAgLy8gb25seSB2YWxpZCBkYXRlIGFyZSBzZXR0ZWRcbiAgICAgICAgICAvLyB3cm9uZyBkYXRlIGFyZSBzZXQgYnkgYmx1ciBldmVudFxuICAgICAgICAgIHZhciBpc29EYXRlID0gY3VycmVudFdpZGdldC5jb252ZXJ0RGF0ZVRvUHNldWRvSXNvU3RyaW5nKFxuICAgICAgICAgICAgdGhpcy52YWx1ZSgpXG4gICAgICAgICAgKTtcbiAgICAgICAgICAvLyBOZWVkIHRvIHNldCBieSB3aWRnZXQgdG8gdXNlIHJhdyBkYXRlXG4gICAgICAgICAgY3VycmVudFdpZGdldC5zZXRWYWx1ZSh7XG4gICAgICAgICAgICB2YWx1ZTogaXNvRGF0ZSxcbiAgICAgICAgICAgIGRpc3BsYXlWYWx1ZTogaW5wdXRWYWx1ZS52YWwoKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgaW5wdXRWYWx1ZS5rZW5kb0RhdGVUaW1lUGlja2VyKGtlbmRvT3B0aW9ucyk7XG5cbiAgICAgIHRoaXMuX2NvbnRyb2xEYXRlKGlucHV0VmFsdWUpO1xuICAgIH0sXG5cbiAgICBjb252ZXJ0RGF0ZVRvUHNldWRvSXNvU3RyaW5nOiBmdW5jdGlvbiB3VGltZVN0YW1wX2NvbnZlcnREYXRlVG9Qc2V1ZG9Jc29TdHJpbmcoXG4gICAgICBkYXRlT2JqZWN0XG4gICAgKSB7XG4gICAgICBpZiAoZGF0ZU9iamVjdCAmJiB0eXBlb2YgZGF0ZU9iamVjdCA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIGRhdGVPYmplY3QuZ2V0RnVsbFllYXIoKSArXG4gICAgICAgICAgXCItXCIgK1xuICAgICAgICAgIHRoaXMucGFkTnVtYmVyKGRhdGVPYmplY3QuZ2V0TW9udGgoKSArIDEpICtcbiAgICAgICAgICBcIi1cIiArXG4gICAgICAgICAgdGhpcy5wYWROdW1iZXIoZGF0ZU9iamVjdC5nZXREYXRlKCkpICtcbiAgICAgICAgICBcIlRcIiArXG4gICAgICAgICAgdGhpcy5wYWROdW1iZXIoZGF0ZU9iamVjdC5nZXRIb3VycygpKSArXG4gICAgICAgICAgXCI6XCIgK1xuICAgICAgICAgIHRoaXMucGFkTnVtYmVyKGRhdGVPYmplY3QuZ2V0TWludXRlcygpKSArXG4gICAgICAgICAgXCI6XCIgK1xuICAgICAgICAgIHRoaXMucGFkTnVtYmVyKGRhdGVPYmplY3QuZ2V0U2Vjb25kcygpKVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFwiXCI7XG4gICAgfSxcblxuICAgIGZvcm1hdERhdGU6IGZ1bmN0aW9uIHdUaW1lU3RhbXBfZm9ybWF0RGF0ZSh2YWx1ZSkge1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5yZW5kZXJPcHRpb25zLmtlbmRvRGF0ZUNvbmZpZ3VyYXRpb24uZm9ybWF0KSB7XG4gICAgICAgIHJldHVybiBrZW5kby50b1N0cmluZyhcbiAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICB0aGlzLm9wdGlvbnMucmVuZGVyT3B0aW9ucy5rZW5kb0RhdGVDb25maWd1cmF0aW9uLmZvcm1hdFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGtlbmRvLnRvU3RyaW5nKHZhbHVlLCBcImdcIik7XG4gICAgfSxcblxuICAgIGdldFR5cGU6IGZ1bmN0aW9uIHdUaW1lU3RhbXBfZ2V0VHlwZSgpIHtcbiAgICAgIHJldHVybiBcInRpbWVzdGFtcFwiO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuICQuZm4uZGNwVGltZXN0YW1wO1xufSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQSxXQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///e7cc2b18eb5701706e84\n");

/***/ }),

/***/ "ed21042eaa5cecfef3e0":
/*!********************************************************************!*\
  !*** ./src/vendor/Anakeen/DOCUMENT/IHM/models/mTransitionGraph.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*global define*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! underscore */ \"8e08e542008e4aef1f58\"), __webpack_require__(/*! backbone */ \"1858b45bf48591489d06\"), __webpack_require__(/*! dcpDocument/models/mDocument */ \"9d899764b00e608fd289\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function(\n  _,\n  Backbone\n) {\n  \"use strict\";\n\n  return Backbone.Model.extend({\n    typeModel: \"ddui:transitionGraph\",\n    defaults: {\n      documentId: undefined,\n      state: undefined\n    },\n\n    /**\n     * Compute the REST URL for the current document\n     *\n     * Used internaly by backbone in fetch, save, destroy\n     *\n     * @returns {string}\n     */\n    url: function mTransition_url() {\n      var urlData =\n        \"api/v2/documents/<%= documentId %>/workflows/states/?allStates=1\";\n\n      urlData = urlData.replace(\n        \"<%= documentId %>\",\n        encodeURIComponent(this.get(\"documentId\"))\n      );\n\n      return urlData;\n    },\n    /**\n     * Parse the return of the REST API\n     * @param response\n     * @returns {{properties: (*|properties|exports.defaults.properties|exports.parse.properties|.createObjectExpression.properties), menus: (app.views.shared.menu|*), locale: *, renderMode: string, attributes: Array, templates: *, renderOptions: *}}\n     */\n    parse: function mTransition_Parse(response) {\n      var values;\n      if (response.success === false) {\n        throw new Error(\"Unable to get the data from change state\");\n      }\n\n      values = {\n        state: this.get(\"state\"),\n        messages: response.messages,\n        workflowStates: response.data.states\n      };\n      return values;\n    }\n  });\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWQyMTA0MmVhYTVjZWNmZWYzZTAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdmVuZG9yL0FuYWtlZW4vRE9DVU1FTlQvSUhNL21vZGVscy9tVHJhbnNpdGlvbkdyYXBoLmpzPzAxNGMiXSwic291cmNlc0NvbnRlbnQiOlsiLypnbG9iYWwgZGVmaW5lKi9cbmRlZmluZShbXCJ1bmRlcnNjb3JlXCIsIFwiYmFja2JvbmVcIiwgXCJkY3BEb2N1bWVudC9tb2RlbHMvbURvY3VtZW50XCJdLCBmdW5jdGlvbihcbiAgXyxcbiAgQmFja2JvbmVcbikge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICByZXR1cm4gQmFja2JvbmUuTW9kZWwuZXh0ZW5kKHtcbiAgICB0eXBlTW9kZWw6IFwiZGR1aTp0cmFuc2l0aW9uR3JhcGhcIixcbiAgICBkZWZhdWx0czoge1xuICAgICAgZG9jdW1lbnRJZDogdW5kZWZpbmVkLFxuICAgICAgc3RhdGU6IHVuZGVmaW5lZFxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlIHRoZSBSRVNUIFVSTCBmb3IgdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAgICAgKlxuICAgICAqIFVzZWQgaW50ZXJuYWx5IGJ5IGJhY2tib25lIGluIGZldGNoLCBzYXZlLCBkZXN0cm95XG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgICAqL1xuICAgIHVybDogZnVuY3Rpb24gbVRyYW5zaXRpb25fdXJsKCkge1xuICAgICAgdmFyIHVybERhdGEgPVxuICAgICAgICBcImFwaS92Mi9kb2N1bWVudHMvPCU9IGRvY3VtZW50SWQgJT4vd29ya2Zsb3dzL3N0YXRlcy8/YWxsU3RhdGVzPTFcIjtcblxuICAgICAgdXJsRGF0YSA9IHVybERhdGEucmVwbGFjZShcbiAgICAgICAgXCI8JT0gZG9jdW1lbnRJZCAlPlwiLFxuICAgICAgICBlbmNvZGVVUklDb21wb25lbnQodGhpcy5nZXQoXCJkb2N1bWVudElkXCIpKVxuICAgICAgKTtcblxuICAgICAgcmV0dXJuIHVybERhdGE7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBQYXJzZSB0aGUgcmV0dXJuIG9mIHRoZSBSRVNUIEFQSVxuICAgICAqIEBwYXJhbSByZXNwb25zZVxuICAgICAqIEByZXR1cm5zIHt7cHJvcGVydGllczogKCp8cHJvcGVydGllc3xleHBvcnRzLmRlZmF1bHRzLnByb3BlcnRpZXN8ZXhwb3J0cy5wYXJzZS5wcm9wZXJ0aWVzfC5jcmVhdGVPYmplY3RFeHByZXNzaW9uLnByb3BlcnRpZXMpLCBtZW51czogKGFwcC52aWV3cy5zaGFyZWQubWVudXwqKSwgbG9jYWxlOiAqLCByZW5kZXJNb2RlOiBzdHJpbmcsIGF0dHJpYnV0ZXM6IEFycmF5LCB0ZW1wbGF0ZXM6ICosIHJlbmRlck9wdGlvbnM6ICp9fVxuICAgICAqL1xuICAgIHBhcnNlOiBmdW5jdGlvbiBtVHJhbnNpdGlvbl9QYXJzZShyZXNwb25zZSkge1xuICAgICAgdmFyIHZhbHVlcztcbiAgICAgIGlmIChyZXNwb25zZS5zdWNjZXNzID09PSBmYWxzZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmFibGUgdG8gZ2V0IHRoZSBkYXRhIGZyb20gY2hhbmdlIHN0YXRlXCIpO1xuICAgICAgfVxuXG4gICAgICB2YWx1ZXMgPSB7XG4gICAgICAgIHN0YXRlOiB0aGlzLmdldChcInN0YXRlXCIpLFxuICAgICAgICBtZXNzYWdlczogcmVzcG9uc2UubWVzc2FnZXMsXG4gICAgICAgIHdvcmtmbG93U3RhdGVzOiByZXNwb25zZS5kYXRhLnN0YXRlc1xuICAgICAgfTtcbiAgICAgIHJldHVybiB2YWx1ZXM7XG4gICAgfVxuICB9KTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///ed21042eaa5cecfef3e0\n");

/***/ }),

/***/ "f1fbc4361c0154bb70ac":
/*!*********************************************************************************!*\
  !*** ./src/vendor/Anakeen/DOCUMENT/IHM/controllerObjects/attributeInterface.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*global define*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! underscore */ \"8e08e542008e4aef1f58\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function attributeInterface(_) {\n  \"use strict\";\n\n  var AttributPrototype = function AttributePrototype() {\n    this.id = this._attributeModel.id;\n  };\n  /**\n   * Get the property of the current attribute\n   *\n   * @returns {*}\n   */\n  AttributPrototype.prototype.getProperties = function AttributeInterfaceGetProperties() {\n    var properties = _.clone(this._attributeModel.attributes),\n      content = properties.content;\n    properties = _.omit(\n      properties,\n      \"isValueAttribute\",\n      \"title\",\n      \"attributeValue\",\n      \"content\"\n    );\n    properties.content = [];\n    if (content && content.length) {\n      properties.content = content.map(function attributeInterface_convertChild(\n        currentAttribute\n      ) {\n        return new AttributeInterface(currentAttribute);\n      });\n    }\n    return properties;\n  };\n\n  /**\n   * Change the label of an attribute\n   *\n   * @returns {*}\n   */\n  AttributPrototype.prototype.setLabel = function AttributeInterfaceSetLabel(\n    label\n  ) {\n    this._attributeModel.set(\"label\", label);\n  };\n\n  /**\n   * Get the data to build a widget\n   *\n   * @returns {*}\n   */\n  AttributPrototype.prototype.getWidgetData = function AttributeInterfaceGetWidgetData(\n    index\n  ) {\n    return _.clone(this._attributeModel.toData(index, true));\n  };\n\n  /**\n   * Get the attribute label\n   *\n   * @returns string\n   */\n  AttributPrototype.prototype.getLabel = function AttributeInterfaceGetLabel() {\n    return this._attributeModel.get(\"label\");\n  };\n\n  /**\n   * Get the options of the current attribute\n   * @returns {*}\n   */\n  AttributPrototype.prototype.getOptions = function AttributeInterfaceGetOptions() {\n    var options = this._attributeModel.getOptions();\n    return _.clone(options);\n  };\n\n  /**\n   * Get an option of the current attribute\n   *\n   * @param name\n   * @returns {*}\n   */\n  AttributPrototype.prototype.getOption = function AttributeInterfaceGetOption(\n    name\n  ) {\n    return this._attributeModel.getOption(name);\n  };\n\n  /**\n   * Return true if attribute value is changed since last record\n   *\n   * @returns bool\n   */\n  AttributPrototype.prototype.isModified = function AttributeInterfaceisModified() {\n    return this._attributeModel.hasValueChanged();\n  };\n\n  /**\n   * Set an option of the current\n   * Add an effect only on beforeRender\n   * @param name\n   * @param value\n   * @constructor\n   */\n  AttributPrototype.prototype.setOption = function AttributeInterfaceSetOption(\n    name,\n    value\n  ) {\n    this._attributeModel.setOption(name, value);\n  };\n\n  AttributPrototype.prototype.getValue = function AttributeInterfaceGetValue(\n    type\n  ) {\n    if (_.isUndefined(type) || type === \"current\") {\n      return this._attributeModel.get(\"attributeValue\");\n    }\n    if (type === \"previous\") {\n      return this._attributeModel.previous(\"attributeValue\");\n    }\n    if (type === \"initial\") {\n      return this._attributeModel._initialAttributeValue;\n    }\n    if (type === \"all\") {\n      return {\n        current: this._attributeModel.get(\"attributeValue\"),\n        previous: this._attributeModel.previous(\"attributeValue\"),\n        initial: this._attributeModel._initialAttributeValue\n      };\n    }\n    throw new Error(\n      \"Unknown type of getValue (current, previous, initial, all\"\n    );\n  };\n\n  AttributPrototype.prototype.setValue = function AttributeInterfaceSetValue(\n    value,\n    dryRun\n  ) {\n    var index;\n    var currentValue;\n    if (this._attributeModel.get(\"multiple\")) {\n      if (_.isArray(value)) {\n        _.each(value, function AttributeInterfaceSetValueVerify(singleValue) {\n          if (!_.isObject(singleValue) || _.isUndefined(singleValue.value)) {\n            throw new Error(\n              \"Each values must be an object with at least value properties\"\n            );\n          }\n          if (_.isUndefined(singleValue.displayValue)) {\n            singleValue.displayValue =\n              singleValue.value !== null ? String(singleValue.value) : \"\";\n          }\n        });\n      } else {\n        if (\n          !_.isObject(value) ||\n          _.isUndefined(value.value) ||\n          _.isUndefined(value.index) ||\n          value.index === null\n        ) {\n          throw new Error(\n            \"Value must be an object with at least value and index properties\"\n          );\n        }\n\n        index = parseInt(value.index);\n        if (index < 0) {\n          throw new Error(\"Index value must be positive or null\");\n        }\n\n        if (this._attributeModel.isDoubleMultiple()) {\n          if (!_.isArray(value.value)) {\n            throw new Error(\"Value must be an array for multiple in arrays\");\n          }\n          value = value.value;\n        } else {\n          value = _.defaults(value, {\n            displayValue: value.value !== null ? String(value.value) : \"\"\n          });\n        }\n\n        currentValue = this._attributeModel.get(\"attributeValue\").slice();\n        currentValue[index] = _.clone(value);\n        value = currentValue;\n      }\n    } else {\n      if (!_.isObject(value) || _.isUndefined(value.value)) {\n        throw new Error(\n          \"Value must be an object with at least value properties\"\n        );\n      }\n\n      value = _.defaults(value, {\n        displayValue: value.value !== null ? String(value.value) : \"\"\n      });\n    }\n    if (!dryRun) {\n      this._attributeModel.set(\"attributeValue\", value);\n    }\n  };\n\n  AttributPrototype.prototype.toJSON = function AttributeInterfacetoJSON() {\n    return {\n      id: this._attributeModel.id,\n      properties: _.omit(\n        this._attributeModel.attributes,\n        \"isValueAttribute\",\n        \"title\",\n        \"options\",\n        \"attributeValue\"\n      ),\n      options: this._attributeModel.getOptions()\n    };\n  };\n\n  var AttributeInterface = function AttributeInterface(attributeModel) {\n    this._attributeModel = attributeModel;\n    AttributPrototype.call(this);\n  };\n\n  AttributeInterface.prototype = Object.create(AttributPrototype.prototype);\n  AttributeInterface.prototype.constructor = AttributPrototype;\n\n  return AttributeInterface;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///f1fbc4361c0154bb70ac\n");

/***/ }),

/***/ "f2946d36ec572764f0f8":
/*!**************************************************************!*\
  !*** ./src/vendor/Anakeen/DOCUMENT/IHM/collections/menus.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*global define*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! underscore */ \"8e08e542008e4aef1f58\"), __webpack_require__(/*! backbone */ \"1858b45bf48591489d06\"), __webpack_require__(/*! dcpDocument/models/mMenu */ \"265a1acc550f361c7884\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function(\n  _,\n  Backbone,\n  ModelMenu\n) {\n  \"use strict\";\n\n  return Backbone.Collection.extend({\n    model: ModelMenu,\n\n    destroy: function CollectionMenu_destroy() {\n      var model;\n      while ((model = this.first())) {\n        // jshint ignore:line\n        model.destroy();\n      }\n    },\n\n    _deepSearchMenu: function CollectionMenu__deepSearchMenu(\n      contents,\n      id,\n      key,\n      value\n    ) {\n      var scope = this,\n        subMenu,\n        i,\n        subSubMenu;\n      if (contents) {\n        for (i = 0; i < contents.length; i++) {\n          subMenu = contents[i];\n          if (subMenu.id === id) {\n            if (key) {\n              subMenu[key] = value;\n            }\n            return subMenu;\n          } else {\n            subSubMenu = scope._deepSearchMenu(subMenu.content, id, key, value);\n            if (subSubMenu) {\n              return subSubMenu;\n            }\n          }\n        }\n      }\n      return null;\n    },\n\n    getMenu: function CollectionMenu_getMenu(id) {\n      var menuInfo = null,\n        menuInfoItem = null,\n        scope = this;\n\n      if (this.get(id)) {\n        return this.get(id).attributes;\n      } else {\n        this.each(function(oneMenu) {\n          if (oneMenu.get(\"content\")) {\n            menuInfoItem = scope._deepSearchMenu(oneMenu.get(\"content\"), id);\n            if (menuInfoItem) {\n              menuInfo = menuInfoItem;\n            }\n          }\n        });\n        return menuInfo;\n      }\n    },\n\n    setMenu: function CollectionMenu_setMenu(id, key, value) {\n      var menuInfo = null,\n        menuInfoItem = null,\n        scope = this,\n        menuModel = null,\n        newContent = {};\n\n      if (this.get(id)) {\n        menuModel = this.get(id);\n        menuModel.set(key, value);\n        return menuModel.attributes;\n      } else {\n        this.each(function(oneMenu) {\n          if (oneMenu.get(\"content\")) {\n            menuInfoItem = scope._deepSearchMenu(\n              oneMenu.get(\"content\"),\n              id,\n              key,\n              value\n            );\n            if (menuInfoItem) {\n              newContent = oneMenu.get(\"content\");\n              oneMenu.set(\"content\", newContent);\n              menuInfo = newContent;\n              oneMenu.trigger(\"change\");\n            }\n          }\n        });\n        return menuInfo;\n      }\n    }\n  });\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZjI5NDZkMzZlYzU3Mjc2NGYwZjguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdmVuZG9yL0FuYWtlZW4vRE9DVU1FTlQvSUhNL2NvbGxlY3Rpb25zL21lbnVzLmpzP2QyY2IiXSwic291cmNlc0NvbnRlbnQiOlsiLypnbG9iYWwgZGVmaW5lKi9cbmRlZmluZShbXCJ1bmRlcnNjb3JlXCIsIFwiYmFja2JvbmVcIiwgXCJkY3BEb2N1bWVudC9tb2RlbHMvbU1lbnVcIl0sIGZ1bmN0aW9uKFxuICBfLFxuICBCYWNrYm9uZSxcbiAgTW9kZWxNZW51XG4pIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgcmV0dXJuIEJhY2tib25lLkNvbGxlY3Rpb24uZXh0ZW5kKHtcbiAgICBtb2RlbDogTW9kZWxNZW51LFxuXG4gICAgZGVzdHJveTogZnVuY3Rpb24gQ29sbGVjdGlvbk1lbnVfZGVzdHJveSgpIHtcbiAgICAgIHZhciBtb2RlbDtcbiAgICAgIHdoaWxlICgobW9kZWwgPSB0aGlzLmZpcnN0KCkpKSB7XG4gICAgICAgIC8vIGpzaGludCBpZ25vcmU6bGluZVxuICAgICAgICBtb2RlbC5kZXN0cm95KCk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIF9kZWVwU2VhcmNoTWVudTogZnVuY3Rpb24gQ29sbGVjdGlvbk1lbnVfX2RlZXBTZWFyY2hNZW51KFxuICAgICAgY29udGVudHMsXG4gICAgICBpZCxcbiAgICAgIGtleSxcbiAgICAgIHZhbHVlXG4gICAgKSB7XG4gICAgICB2YXIgc2NvcGUgPSB0aGlzLFxuICAgICAgICBzdWJNZW51LFxuICAgICAgICBpLFxuICAgICAgICBzdWJTdWJNZW51O1xuICAgICAgaWYgKGNvbnRlbnRzKSB7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBjb250ZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHN1Yk1lbnUgPSBjb250ZW50c1tpXTtcbiAgICAgICAgICBpZiAoc3ViTWVudS5pZCA9PT0gaWQpIHtcbiAgICAgICAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgICAgICAgc3ViTWVudVtrZXldID0gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc3ViTWVudTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3ViU3ViTWVudSA9IHNjb3BlLl9kZWVwU2VhcmNoTWVudShzdWJNZW51LmNvbnRlbnQsIGlkLCBrZXksIHZhbHVlKTtcbiAgICAgICAgICAgIGlmIChzdWJTdWJNZW51KSB7XG4gICAgICAgICAgICAgIHJldHVybiBzdWJTdWJNZW51O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSxcblxuICAgIGdldE1lbnU6IGZ1bmN0aW9uIENvbGxlY3Rpb25NZW51X2dldE1lbnUoaWQpIHtcbiAgICAgIHZhciBtZW51SW5mbyA9IG51bGwsXG4gICAgICAgIG1lbnVJbmZvSXRlbSA9IG51bGwsXG4gICAgICAgIHNjb3BlID0gdGhpcztcblxuICAgICAgaWYgKHRoaXMuZ2V0KGlkKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXQoaWQpLmF0dHJpYnV0ZXM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmVhY2goZnVuY3Rpb24ob25lTWVudSkge1xuICAgICAgICAgIGlmIChvbmVNZW51LmdldChcImNvbnRlbnRcIikpIHtcbiAgICAgICAgICAgIG1lbnVJbmZvSXRlbSA9IHNjb3BlLl9kZWVwU2VhcmNoTWVudShvbmVNZW51LmdldChcImNvbnRlbnRcIiksIGlkKTtcbiAgICAgICAgICAgIGlmIChtZW51SW5mb0l0ZW0pIHtcbiAgICAgICAgICAgICAgbWVudUluZm8gPSBtZW51SW5mb0l0ZW07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG1lbnVJbmZvO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBzZXRNZW51OiBmdW5jdGlvbiBDb2xsZWN0aW9uTWVudV9zZXRNZW51KGlkLCBrZXksIHZhbHVlKSB7XG4gICAgICB2YXIgbWVudUluZm8gPSBudWxsLFxuICAgICAgICBtZW51SW5mb0l0ZW0gPSBudWxsLFxuICAgICAgICBzY29wZSA9IHRoaXMsXG4gICAgICAgIG1lbnVNb2RlbCA9IG51bGwsXG4gICAgICAgIG5ld0NvbnRlbnQgPSB7fTtcblxuICAgICAgaWYgKHRoaXMuZ2V0KGlkKSkge1xuICAgICAgICBtZW51TW9kZWwgPSB0aGlzLmdldChpZCk7XG4gICAgICAgIG1lbnVNb2RlbC5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgIHJldHVybiBtZW51TW9kZWwuYXR0cmlidXRlcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZWFjaChmdW5jdGlvbihvbmVNZW51KSB7XG4gICAgICAgICAgaWYgKG9uZU1lbnUuZ2V0KFwiY29udGVudFwiKSkge1xuICAgICAgICAgICAgbWVudUluZm9JdGVtID0gc2NvcGUuX2RlZXBTZWFyY2hNZW51KFxuICAgICAgICAgICAgICBvbmVNZW51LmdldChcImNvbnRlbnRcIiksXG4gICAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgICBrZXksXG4gICAgICAgICAgICAgIHZhbHVlXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKG1lbnVJbmZvSXRlbSkge1xuICAgICAgICAgICAgICBuZXdDb250ZW50ID0gb25lTWVudS5nZXQoXCJjb250ZW50XCIpO1xuICAgICAgICAgICAgICBvbmVNZW51LnNldChcImNvbnRlbnRcIiwgbmV3Q29udGVudCk7XG4gICAgICAgICAgICAgIG1lbnVJbmZvID0gbmV3Q29udGVudDtcbiAgICAgICAgICAgICAgb25lTWVudS50cmlnZ2VyKFwiY2hhbmdlXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBtZW51SW5mbztcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///f2946d36ec572764f0f8\n");

/***/ }),

/***/ "f45c9571cf0ee225b94c":
/*!**************************************************************************!*\
  !*** ./src/vendor/Anakeen/DOCUMENT/IHM/collections/contentAttributes.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*global define*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! underscore */ \"8e08e542008e4aef1f58\"), __webpack_require__(/*! backbone */ \"1858b45bf48591489d06\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function(_, Backbone) {\n  \"use strict\";\n\n  return Backbone.Collection.extend({\n    comparator: \"logicalOrder\",\n\n    toData: function(index, extended) {\n      var elements = [];\n      this.each(function(currentAttribute) {\n        elements.push(currentAttribute.toData(index, extended));\n      });\n      return elements;\n    },\n\n    destroy: function() {\n      var model;\n      while ((model = this.first())) {\n        // jshint ignore:line\n        model.destroy();\n      }\n    },\n\n    propageEvent: function(eventName) {\n      this.each(function(currentModel) {\n        currentModel.trigger(eventName);\n        if (currentModel.get(\"content\")) {\n          currentModel.get(\"content\").propageEvent(eventName);\n        }\n      });\n    }\n  });\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZjQ1Yzk1NzFjZjBlZTIyNWI5NGMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdmVuZG9yL0FuYWtlZW4vRE9DVU1FTlQvSUhNL2NvbGxlY3Rpb25zL2NvbnRlbnRBdHRyaWJ1dGVzLmpzP2M5YjMiXSwic291cmNlc0NvbnRlbnQiOlsiLypnbG9iYWwgZGVmaW5lKi9cbmRlZmluZShbXCJ1bmRlcnNjb3JlXCIsIFwiYmFja2JvbmVcIl0sIGZ1bmN0aW9uKF8sIEJhY2tib25lKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHJldHVybiBCYWNrYm9uZS5Db2xsZWN0aW9uLmV4dGVuZCh7XG4gICAgY29tcGFyYXRvcjogXCJsb2dpY2FsT3JkZXJcIixcblxuICAgIHRvRGF0YTogZnVuY3Rpb24oaW5kZXgsIGV4dGVuZGVkKSB7XG4gICAgICB2YXIgZWxlbWVudHMgPSBbXTtcbiAgICAgIHRoaXMuZWFjaChmdW5jdGlvbihjdXJyZW50QXR0cmlidXRlKSB7XG4gICAgICAgIGVsZW1lbnRzLnB1c2goY3VycmVudEF0dHJpYnV0ZS50b0RhdGEoaW5kZXgsIGV4dGVuZGVkKSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBlbGVtZW50cztcbiAgICB9LFxuXG4gICAgZGVzdHJveTogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgbW9kZWw7XG4gICAgICB3aGlsZSAoKG1vZGVsID0gdGhpcy5maXJzdCgpKSkge1xuICAgICAgICAvLyBqc2hpbnQgaWdub3JlOmxpbmVcbiAgICAgICAgbW9kZWwuZGVzdHJveSgpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBwcm9wYWdlRXZlbnQ6IGZ1bmN0aW9uKGV2ZW50TmFtZSkge1xuICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uKGN1cnJlbnRNb2RlbCkge1xuICAgICAgICBjdXJyZW50TW9kZWwudHJpZ2dlcihldmVudE5hbWUpO1xuICAgICAgICBpZiAoY3VycmVudE1vZGVsLmdldChcImNvbnRlbnRcIikpIHtcbiAgICAgICAgICBjdXJyZW50TW9kZWwuZ2V0KFwiY29udGVudFwiKS5wcm9wYWdlRXZlbnQoZXZlbnROYW1lKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///f45c9571cf0ee225b94c\n");

/***/ }),

/***/ "f54cd12cb65078ca4c4a":
/*!**************************************************************************!*\
  !*** ./src/vendor/Anakeen/DOCUMENT/IHM/widgets/attributes/text/wText.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function umdRequire(root, factory) {\n  \"use strict\";\n\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n      __webpack_require__(/*! jquery */ \"127c8cf59f228bb01a21\"),\n      __webpack_require__(/*! underscore */ \"8e08e542008e4aef1f58\"),\n      __webpack_require__(/*! mustache */ \"bcd31d01884fc294fd69\"),\n      __webpack_require__(/*! dcpDocument/widgets/attributes/wAttribute */ \"bd2b448fa3670797b988\")\n    ], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(window, function wText($, _, Mustache) {\n  \"use strict\";\n\n  $.widget(\"dcp.dcpText\", $.dcp.dcpAttribute, {\n    options: {\n      type: \"text\",\n      renderOptions: {\n        maxLength: 0, // char max length\n        placeHolder: \"\",\n        format: \"\",\n        kendoAutoCompleteConfiguration: {\n          filter: \"contains\",\n          clearButton: false,\n          minLength: 1,\n          template:\n            '<div class=\"dcpAutocomplete\"><span class=\"k-state-default\">#= data.title#</span>' +\n            \"#if (data.message) {#\" +\n            '<div class=\"dcpAutocomplete--#= data.message.type#\">#: data.message.contentText# #= data.message.contentHtml#</div>' +\n            \"#}# </div>\"\n        }\n      }\n    },\n\n    kendoWidget: null,\n\n    _initDom: function wTextInitDom() {\n      if (this.getMode() === \"read\") {\n        if (this.options.renderOptions.format) {\n          this.options.attributeValue.formatValue = Mustache.render(\n            this.options.renderOptions.format || \"\",\n            this.options.attributeValue\n          );\n        }\n      }\n\n      this._super();\n      this.kendoWidget = this.element.find(\".dcpAttribute__value--edit\");\n      if (this.kendoWidget && this.options.hasAutocomplete) {\n        this.activateAutocomplete(this.kendoWidget);\n      } else {\n        if (this.getType() === \"text\") {\n          this.kendoWidget.addClass(\"k-textbox\");\n        }\n      }\n    },\n\n    _initEvent: function wTextInitEvent() {\n      if (this.getMode() === \"write\") {\n        this._initChangeEvent();\n      }\n      this._super();\n    },\n\n    _initChangeEvent: function wTextInitChangeEvent() {\n      var currentWidget = this;\n      if (this.getMode() === \"write\") {\n        this.getContentElements().on(\n          \"change\" + this.eventNamespace,\n          function wTextChangeElement() {\n            var newValue = _.clone(currentWidget.options.attributeValue);\n            newValue.value = $(this).val();\n            newValue.displayValue = newValue.value;\n            currentWidget.setValue(newValue);\n          }\n        );\n      }\n    },\n\n    /**\n     * Just to be apply in normal input help\n     * @param inputValue\n     */\n    activateAutocomplete: function activateAutocomplete(inputValue) {\n      var currentWidget = this;\n      var systemOption = {\n        dataTextField: \"title\",\n        dataSource: {\n          // type: \"json\",\n\n          serverFiltering: true,\n          transport: {\n            read: function mapAutoActivated(options) {\n              options.data.index = currentWidget._getIndex();\n              return currentWidget.options.autocompleteRequest.call(\n                null,\n                options\n              );\n            }\n          }\n        },\n        filtering: function wTextFiltering(e) {\n          // space search is used to force new search\n          if (e.filter.value === \" \") {\n            e.filter.value = \"\";\n          }\n        },\n        select: function kendoAutocompleteSelect(event) {\n          var valueIndex = currentWidget._getIndex();\n          var dataItem = this.dataSource.at(event.item.index());\n          //The object returned by dataSource.at are internal kendo object so I clean it with toJSON\n          if (dataItem.toJSON) {\n            dataItem = dataItem.toJSON();\n          }\n          event.preventDefault(); // no fire change event\n          currentWidget._trigger(\"changeattrsvalue\", event, {\n            dataItem: dataItem,\n            valueIndex: valueIndex\n          });\n        }\n      };\n\n      inputValue.kendoAutoComplete(\n        _.extend(\n          {},\n          this.options.renderOptions.kendoAutoCompleteConfiguration,\n          systemOption\n        )\n      );\n      this.element.on(\n        \"click\" + this.eventNamespace,\n        \".dcpAttribute__value--autocomplete--button\",\n        function wTextClickAutoComplete(event) {\n          event.preventDefault();\n          inputValue.data(\"kendoAutoComplete\").search(\" \"); // use space search\n        }\n      );\n      this.element\n        .find(\".dcpAttribute__value--autocomplete--button[title]\")\n        .tooltip({\n          html: true,\n          container: this.element\n        })\n        .each(function wTextInitLinkTooltip() {\n          $(this)\n            .data(\"bs.tooltip\")\n            .tip()\n            .addClass(\"dcpAttribute__autocomplete\");\n        });\n    },\n\n    /**\n     * Modify value to widget and send notification to the view\n     * @param value\n     */\n    setValue: function wTextSetValue(value) {\n      var originalValue;\n\n      value = _.clone(value);\n\n      if (_.has(value, \"value\") && !_.has(value, \"displayValue\")) {\n        value.displayValue = value.value;\n      }\n      this._super(value);\n\n      originalValue = this.getWidgetValue();\n\n      if (this.getMode() === \"write\") {\n        // : explicit lazy equal\n        if (value.value === null && originalValue === \"\") {\n          originalValue = null;\n        }\n        if (originalValue !== value.value) {\n          // Modify value only if different\n          this.getContentElements().val(value.value);\n          this.flashElement();\n        }\n      } else if (this.getMode() === \"read\") {\n        this.redraw();\n      } else {\n        throw new Error(\n          \"Attribute \" + this.options.id + \" unkown mode \" + this.getMode()\n        );\n      }\n    },\n\n    getType: function getType() {\n      return \"text\";\n    },\n\n    _destroy: function _destroy() {\n      //Destroy autocomplete if activated\n      if (this.kendoWidget && this.kendoWidget.data(\"kendoAutoComplete\")) {\n        this.kendoWidget.data(\"kendoAutoComplete\").destroy();\n      }\n      this._super();\n    }\n  });\n\n  return $.fn.dcpText;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///f54cd12cb65078ca4c4a\n");

/***/ }),

/***/ "f586cf5b9f4b7719b2c1":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZjU4NmNmNWI5ZjRiNzcxOWIyYzEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzP2NlZDIiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtb2R1bGUpIHtcblx0aWYgKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0bW9kdWxlLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKCkge307XG5cdFx0bW9kdWxlLnBhdGhzID0gW107XG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHR9XG5cdHJldHVybiBtb2R1bGU7XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///f586cf5b9f4b7719b2c1\n");

/***/ })

/******/ });