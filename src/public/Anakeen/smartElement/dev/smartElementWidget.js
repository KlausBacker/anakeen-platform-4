/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/Anakeen/smartElement/dev/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ({

/***/ "0b2f2c4ba8a17326d5a7":
/*!*****************************************************!*\
  !*** ./src/vendor/Anakeen/DOCUMENT/IHM/document.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*global define, console*/\n(function umdRequire(root, factory) {\n  \"use strict\";\n\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ \"127c8cf59f228bb01a21\"), __webpack_require__(/*! underscore */ \"8e08e542008e4aef1f58\"), __webpack_require__(/*! dcpDocument/widgets/widget */ \"a903b12ace80b5b4ecce\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(window, function require_document($, _) {\n  \"use strict\";\n\n  var eventList = [\n    \"beforeRender\",\n    \"ready\",\n    \"change\",\n    \"displayMessage\",\n    \"displayError\",\n    \"validate\",\n    \"attributeBeforeRender\",\n    \"attributeReady\",\n    \"attributeHelperSearch\",\n    \"attributeHelperResponse\",\n    \"attributeHelperSelect\",\n    \"attributeArrayChange\",\n    \"actionClick\",\n    \"attributeAnchorClick\",\n    \"beforeClose\",\n    \"close\",\n    \"beforeSave\",\n    \"afterSave\",\n    \"attributeDownloadFile\",\n    \"attributeUploadFile\",\n    \"attributeUploadFileDone\",\n    \"beforeDelete\",\n    \"afterDelete\",\n    \"beforeRestore\",\n    \"afterRestore\",\n    \"attributeBeforeTabSelect\",\n    \"attributeAfterTabSelect\",\n    \"attributeTabChange\",\n    \"failTransition\",\n    \"successTransition\",\n    \"beforeDisplayTransition\",\n    \"afterDisplayTransition\",\n    \"beforeTransition\",\n    \"beforeTransitionClose\",\n    \"destroy\",\n    \"attributeCreateDialogDocumentBeforeSetFormValues\",\n    \"attributeCreateDialogDocumentBeforeSetTargetValue\",\n    \"attributeCreateDialogDocumentReady\",\n    \"attributeCreateDialogDocumentBeforeClose\",\n    \"attributeCreateDialogDocumentBeforeDestroy\"\n  ];\n\n  //Create a new kind of event\n  var ErrorNotLoaded = function dcpDocument_ErrorNotLoaded(message) {\n    this.name = \"WidgetDocumentNotLoaded\";\n    this.message =\n      message ||\n      \"The document widget is not loaded, wait for the documentloaded event\";\n  };\n  ErrorNotLoaded.prototype = Object.create(Error.prototype);\n  ErrorNotLoaded.prototype.constructor = ErrorNotLoaded;\n\n  $.widget(\"dcp.document\", {\n    _template: _.template(\n      '<iframe class=\"dcpDocumentWrapper\" name=\"<%- options.iframeName %>\" style=\"border : 0;\" data-src=\"<%- base %>api/v2/documents/0.html#widgetValue<%- options.json_encode %>\"></iframe>'\n    ),\n\n    defaults: {\n      resizeMarginHeight: 3,\n      resizeMarginWidth: 0,\n      resizeDebounceTime: 50,\n      withoutResize: false,\n      iframeName: _.uniqueId(\"documentFrame\"),\n      noRouter: true,\n      eventPrefix: \"document\"\n    },\n\n    /**\n     * Create the widget\n     *\n     * Check if initid is present\n     */\n    _create: function dcpDocument_create() {\n      this.options = _.extend({}, this.defaults, this.options);\n      this.options.eventListener = {};\n      this.options.constraintList = {};\n      this.options.cssToInject = [];\n      this.options.jsToInject = [];\n      this._render();\n      this._bindEvents();\n    },\n\n    /**\n     * Create the iframe with the content and register to load event\n     */\n    _render: function dcpDocument_render() {\n      var $iframe,\n        currentWidget = this,\n        documentWindow,\n        options_encode;\n      //inject the iframe\n      options_encode = JSON.stringify(\n        _.omit(\n          this.options,\n          \"resizeMarginHeight\",\n          \"resizeMarginWidth\",\n          \"resizeDebounceTime\",\n          \"withoutResize\",\n          \"iframeName\",\n          \"eventPrefix\",\n          \"eventListener\",\n          \"constraintList\"\n        )\n      );\n      this.element.empty().append(\n        this._template({\n          options: {\n            iframeName: this.options.iframeName,\n            json_encode: options_encode\n          },\n          base: $(\"base\").attr(\"href\") || \"\"\n        })\n      );\n      //bind the internal controller to the documentWidget\n      $iframe = this.element.find(\".dcpDocumentWrapper\");\n      //Listen the load to the iframe (initial JS added and page loaded)\n\n      if ($iframe.length > 0) {\n        documentWindow = $iframe[0].contentWindow;\n        //Use this way to set url for firefox (when the document is in iframe in another document)\n        documentWindow.location.href = $iframe.data(\"src\");\n        // This event is used when use a hard link (aka href anchor) to change document\n        // It is load also the first time\n        $iframe.on(\"load\", function dcpDocument_setReadyEvent() {\n          documentWindow.documentLoaded = function dcpDocument_loadedCallback(\n            domNode,\n            viewData\n          ) {\n            // Re Bind the internalController function to the current widget\n            currentWidget._bindInternalWidget.call(\n              currentWidget,\n              domNode.data(\"dcpDocumentController\"),\n              viewData\n            );\n            // voidLoaded is true when document 0 is loaded\n            currentWidget.element.data(\n              \"voidLoaded\",\n              !viewData || !viewData.initid\n            );\n          };\n\n          $(documentWindow).on(\"unload\", function dcpDocument_setUnloadEvent() {\n            currentWidget._unbindInternalWidget.call(currentWidget);\n          });\n          if (\n            documentWindow.dcp &&\n            documentWindow.dcp.triggerReload &&\n            documentWindow.dcp.documentReady === false\n          ) {\n            documentWindow.dcp.triggerReload();\n          }\n        });\n      }\n      this._resize();\n    },\n\n    /**\n     * Suppress internal widget reference\n     */\n    _unbindInternalWidget: function dcpDocument_unbindInternalWidget() {\n      this.element.data(\"internalWidgetInitialised\", false);\n      this.element.data(\"internalWidget\", false);\n      this._trigger(\"internalWidgetUnloaded\");\n      this._trigger(\"unloaded\");\n    },\n\n    rebindEvents: function dcpDocument_rebindEvents() {\n      var internalController = this.element.data(\"internalWidget\");\n      if (internalController) {\n        //Rebind event\n        _.each(this.options.eventListener, function dcpDocument_bindEvent(\n          currentEvent\n        ) {\n          internalController.addEventListener(currentEvent);\n        });\n        //Rebind constraint\n        _.each(this.options.constraintList, function dcpDocument_bindEvent(\n          currentConstaint\n        ) {\n          internalController.addConstraint(currentConstaint);\n        });\n      }\n    },\n\n    reinjectCSSAndJS: function dcpDocument_reinjectCSSAndJS() {\n      var internalController = this.element.data(\"internalWidget\");\n      if (internalController) {\n        try {\n          internalController.injectCSS(this.options.cssToInject);\n          internalController.injectJS(this.options.jsToInject);\n        } catch (e) {\n          console.error(e);\n        }\n      }\n    },\n\n    /**\n     * Bind the internal controller to the current widget\n     * Reinit the constraint and the event\n     *\n     * @param internalController\n     * @param voidLoaded\n     */\n    _bindInternalWidget: function dcpDocument_bindInternalWidget(\n      internalController,\n      voidLoaded\n    ) {\n      this.element.data(\"internalWidget\", internalController);\n      if (!voidLoaded) {\n        this.rebindEvents();\n        this.reinjectCSSAndJS();\n      }\n      this.element.data(\"internalWidgetInitialised\", true);\n      if (voidLoaded) {\n        this._trigger(\"loaded\", {}, { isEmpty: true });\n        return this;\n      }\n      this._trigger(\"loaded\");\n      return this;\n    },\n\n    /**\n     * Add resize event\n     */\n    _bindEvents: function dcpDocument_bindEvents() {\n      if (!this.options.withoutResize) {\n        $(window).on(\n          \"resize\" + this.eventNamespace,\n          _.debounce(\n            _.bind(this._resize, this),\n            parseInt(this.options.resizeDebounceTime, 10)\n          )\n        );\n        this._resize();\n      }\n    },\n\n    /**\n     * Compute the size of the widget\n     */\n    _resize: function dcpDocument_resize() {\n      var event = this._trigger(\"autoresize\"),\n        $documentWrapper = this.element.find(\".dcpDocumentWrapper\"),\n        currentWidget = this,\n        element = this.element;\n      //the computation can be done by an external function and default prevented\n      if (!this.options.withoutResize && event) {\n        //compute two times height (one for disapear horizontal scrollbar, two to get the actual size)\n        //noinspection JSValidateTypes\n        $documentWrapper.height(\n          element.innerHeight() -\n            parseInt(currentWidget.options.resizeMarginHeight, 10)\n        );\n        //noinspection JSValidateTypes\n        $documentWrapper.width(\n          element.innerWidth() -\n            parseInt(currentWidget.options.resizeMarginWidth, 10)\n        );\n        //defer height computation to let the time to scrollbar disapear\n        _.defer(function dcpDocument_computeHeight() {\n          //noinspection JSValidateTypes\n          $documentWrapper.height(\n            element.innerHeight() -\n              parseInt(currentWidget.options.resizeMarginHeight, 10)\n          );\n        });\n      }\n    },\n\n    tryToDestroy: function dcpDocument_tryToDestroy() {\n      var currentWidget = this;\n      return new Promise(function dcpDocument_tryToDestroy_promise(\n        resolve,\n        reject\n      ) {\n        var internalWidget;\n        if (currentWidget.isLoaded()) {\n          internalWidget = currentWidget.element.data(\"internalWidget\");\n          internalWidget\n            .tryToDestroy()\n            .then(function dcpDocument_destroy_then() {\n              resolve();\n              currentWidget._destroy();\n            })\n            .catch(function dcpDocument_destroy_catch(errorMessage) {\n              reject(errorMessage);\n            });\n          return;\n        }\n        resolve();\n        currentWidget._destroy();\n      });\n    },\n\n    /**\n     * Destroy the widget\n     */\n    _destroy: function dcpDocument_destroy() {\n      $(window).off(this.eventNamespace);\n      this.element.empty();\n      this._unbindInternalWidget();\n      this._trigger(\"destroy\");\n      this._super();\n    },\n\n    /**\n     * Check if event name is valid\n     *\n     * @param eventName string\n     * @private\n     */\n    _checkEventName: function documentController_checkEventName(eventName) {\n      if (\n        _.isString(eventName) &&\n        (eventName.indexOf(\"custom:\") === 0 ||\n          _.find(eventList, function documentController_CheckEventType(\n            currentEventType\n          ) {\n            return currentEventType === eventName;\n          }))\n      ) {\n        return true;\n      }\n      throw new Error(\n        \"The event type \" +\n          eventName +\n          \" is not known. It must be one of \" +\n          eventList.join(\" ,\")\n      );\n    },\n\n    /**\n     * Update options\n     */\n    options: function dcpDocument_options() {\n      throw new Error(\n        \"You cannot modify the options, you need to suppress the widget\"\n      );\n    },\n\n    /**\n     * Fetch a new document\n     *\n     * Use internal controller if ready\n     * Re-render the widget if internal is not ready\n     *\n     * @param values\n     * @param options\n     */\n    fetchDocument: function dcpDocument_fetchDocument(values, options) {\n      var internalWidget,\n        currentWidget = this,\n        fetchPromise = null,\n        initWidget = function dpcDocument_successWidget() {\n          currentWidget.rebindEvents.call(currentWidget);\n          currentWidget.element.data(\"voidLoaded\", false);\n        };\n      options = options || {};\n\n      if (!values.initid) {\n        throw new Error(\"You need to set the initid to fetch the document\");\n      }\n      _.each(\n        _.pick(values, \"initid\", \"revision\", \"viewId\", \"customClientData\"),\n        function dcpDocument_setNewOptions(value, key) {\n          currentWidget.options[key] = value;\n        }\n      );\n\n      if (this.element.data(\"internalWidgetInitialised\")) {\n        internalWidget = this.element.data(\"internalWidget\");\n\n        if (options.success) {\n          // @deprecated : use promise instead\n          options.success = _.wrap(\n            options.success,\n            function dcpDocument_success(success) {\n              initWidget.apply(this, _.rest(arguments));\n              return success.apply(this, _.rest(arguments));\n            }\n          );\n        }\n        if (options.error) {\n          // @deprecated : use promise instead\n          options.error = _.wrap(options.error, function dcpDocument_error(\n            error\n          ) {\n            initWidget.apply(this, _.rest(arguments));\n            return error.apply(this, _.rest(arguments));\n          });\n        }\n        fetchPromise = internalWidget.fetchDocument.call(\n          internalWidget,\n          values,\n          options\n        );\n\n        if (!options.success) {\n          fetchPromise.then(initWidget);\n        }\n        if (!options.error) {\n          fetchPromise.catch(initWidget);\n        }\n        return fetchPromise;\n      } else {\n        this._render();\n      }\n    },\n\n    /**\n     * Add a new external event\n     * The event is added in the widget and is auto-rebinded when the internal widget is reloaded\n     *\n     * @param eventType string|object type of the widget or an object event\n     * @param options object|function conf of the event or callback\n     * @param callback function callback\n     * @returns {*}\n     */\n    addEventListener: function dcpDocument_addEventListener(\n      eventType,\n      options,\n      callback\n    ) {\n      var currentEvent,\n        currentWidget = this;\n      if (_.isUndefined(callback) && _.isFunction(options)) {\n        callback = options;\n        options = {};\n      }\n      // the first parameters can be the final object (chain removeEvent and addEvent)\n      if (\n        _.isObject(eventType) &&\n        _.isUndefined(options) &&\n        _.isUndefined(callback)\n      ) {\n        currentEvent = eventType;\n        if (!currentEvent.name) {\n          throw new Error(\n            \"When an event is initiated with a single object, this object needs to have the name property \".JSON.stringify(\n              currentEvent\n            )\n          );\n        }\n      } else {\n        currentEvent = _.defaults(options, {\n          name: _.uniqueId(\"event_\" + eventType),\n          eventType: eventType,\n          eventCallback: callback,\n          externalEvent: true,\n          once: false\n        });\n      }\n      // the eventType must be one the list\n      this._checkEventName(currentEvent.eventType);\n      if (currentEvent.once === true) {\n        currentEvent.eventCallback = _.wrap(\n          currentEvent.eventCallback,\n          function dcpDocument_onceWrapper(callback) {\n            try {\n              callback.apply(this, _.rest(arguments));\n            } catch (e) {\n              console.error(e);\n            }\n            currentWidget.removeEventListener(currentEvent.name);\n          }\n        );\n      }\n      //Remove once property because already wrapped\n      currentEvent.once = false;\n      this.options.eventListener[currentEvent.name] = currentEvent;\n      if (\n        this.element.data(\"internalWidgetInitialised\") &&\n        !this.element.data(\"voidLoaded\")\n      ) {\n        this.element.data(\"internalWidget\").addEventListener(currentEvent);\n      }\n      return currentEvent.name;\n    },\n\n    /**\n     * List of the events of the current widget\n     *\n     * @returns {*}\n     */\n    listEventListeners: function documentControllerListEvents() {\n      if (\n        this.element.data(\"internalWidgetInitialised\") &&\n        !this.element.data(\"voidLoaded\")\n      ) {\n        return this.element.data(\"internalWidget\").listEventListeners();\n      } else {\n        return this.options.eventListener;\n      }\n    },\n\n    /**\n     * Remove the event of the widget list and the internal list (if internal is ready)\n     *\n     * @param eventName\n     * @returns {Array}\n     */\n    removeEventListener: function dcpDocument_removeEventListener(eventName) {\n      var removed = [],\n        testRegExp = new RegExp(\"\\\\\" + eventName + \"$\"),\n        newList,\n        eventList;\n      newList = _.filter(\n        this.options.eventListener,\n        function dcpDocument_removeCurrentEvent(currentEvent) {\n          if (\n            currentEvent.name === eventName ||\n            testRegExp.test(currentEvent.name)\n          ) {\n            removed.push(currentEvent);\n            return false;\n          }\n          return true;\n        }\n      );\n      eventList = {};\n      _.each(newList, function dcp_documentIterateEach(currentEvent) {\n        eventList[currentEvent.name] = currentEvent;\n      });\n      this.options.eventListener = eventList;\n      if (\n        this.element.data(\"internalWidgetInitialised\") &&\n        !this.element.data(\"voidLoaded\")\n      ) {\n        this.element\n          .data(\"internalWidget\")\n          .removeEventListener(eventName, true);\n      }\n      return removed;\n    },\n\n    /**\n     * Add a constraint\n     * The constraint is added in the widget and is auto-rebinded when the internal widget is reloaded\n     *\n     * @param options\n     * @param callback\n     * @returns {*}\n     */\n    addConstraint: function dcpDocument_addConstraint(options, callback) {\n      var parameters,\n        currentWidget = this;\n      if (_.isUndefined(callback) && _.isFunction(options)) {\n        callback = options;\n        options = {};\n      }\n      if (_.isObject(options) && _.isUndefined(callback)) {\n        if (!options.name) {\n          throw new Error(\n            \"When a constraint is initiated with a single object, this object needs to have the name property \".JSON.stringify(\n              options\n            )\n          );\n        }\n      } else {\n        parameters = _.defaults(options, {\n          documentCheck: function dcpDocument_defaultDocumentCheck() {\n            return true;\n          },\n          attributeCheck: function dcpDocument_defaultAttributeCheck() {\n            return true;\n          },\n          constraintCheck: callback,\n          name: _.uniqueId(\"constraint\"),\n          externalConstraint: false,\n          once: false\n        });\n      }\n      if (!_.isFunction(parameters.constraintCheck)) {\n        throw new Error(\"An event need a callback\");\n      }\n      if (parameters.once === true) {\n        parameters.eventCallback = _.wrap(\n          parameters.constraintCheck,\n          function dcpDocument_onceWrapper(callback) {\n            try {\n              callback.apply(this, _.rest(arguments));\n            } catch (e) {\n              console.error(e);\n            }\n            currentWidget.removeConstraint(\n              parameters.name,\n              parameters.externalConstraint\n            );\n          }\n        );\n      }\n      this.options.constraintList[parameters.name] = parameters;\n      if (\n        this.element.data(\"internalWidgetInitialised\") &&\n        !this.element.data(\"voidLoaded\")\n      ) {\n        this.element.data(\"internalWidget\").addConstraint(parameters);\n      }\n      return parameters.name;\n    },\n    /**\n     * List the constraint of the widget\n     *\n     * @returns {*}\n     */\n    listConstraints: function documentControllerListConstraint() {\n      if (\n        this.element.data(\"internalWidgetInitialised\") &&\n        !this.element.data(\"voidLoaded\")\n      ) {\n        return this.element.data(\"internalWidget\").listConstraints();\n      } else {\n        return this.options.constraintList;\n      }\n    },\n    /**\n     * Remove the constraint of the widget\n     *\n     * @param constraintName\n     * @returns {Array}\n     */\n    removeConstraint: function dcpDocument_removeConstraint(constraintName) {\n      var removed = [],\n        newConstraintList,\n        constraintList,\n        testRegExp = new RegExp(\"\\\\\" + constraintName + \"$\");\n      newConstraintList = _.filter(\n        this.options.constraintList,\n        function dcpDocument_removeConstraint(currentConstraint) {\n          if (\n            currentConstraint.name === constraintName ||\n            testRegExp.test(currentConstraint.name)\n          ) {\n            removed.push(currentConstraint);\n            return false;\n          }\n          return true;\n        }\n      );\n      constraintList = {};\n      _.each(newConstraintList, function dcpDocument_reinitConstraint(\n        currentConstraint\n      ) {\n        constraintList[currentConstraint.name] = currentConstraint;\n      });\n      this.options.constraintList = constraintList;\n      if (\n        this.element.data(\"internalWidgetInitialised\") &&\n        !this.element.data(\"voidLoaded\")\n      ) {\n        this.element\n          .data(\"internalWidget\")\n          .removeConstraint(constraintName, true);\n      }\n      return removed;\n    },\n\n    isLoaded: function dcpDocument_isLoaded() {\n      return (\n        this.element.data(\"internalWidgetInitialised\") &&\n        !this.element.data(\"voidLoaded\")\n      );\n    },\n\n    injectCSS: function documentController_injectCSS(cssToInject) {\n      if (!_.isArray(cssToInject) && !_.isString(cssToInject)) {\n        throw new Error(\n          \"The css to inject must be an array string or a string\"\n        );\n      }\n      if (_.isString(cssToInject)) {\n        cssToInject = [cssToInject];\n      }\n\n      this.options.cssToInject = _.union(this.options.cssToInject, cssToInject);\n\n      if (\n        this.element.data(\"internalWidgetInitialised\") &&\n        !this.element.data(\"voidLoaded\")\n      ) {\n        this.element.data(\"internalWidget\").injectCSS(cssToInject);\n      }\n    },\n\n    injectJS: function documentController_injectCSS(jsToInject) {\n      if (!_.isArray(jsToInject) && !_.isString(jsToInject)) {\n        throw new Error(\"The js to inject must be an array string or a string\");\n      }\n      if (_.isString(jsToInject)) {\n        jsToInject = [jsToInject];\n      }\n\n      this.options.jsToInject = _.union(this.options.jsToInject, jsToInject);\n\n      if (\n        this.element.data(\"internalWidgetInitialised\") &&\n        !this.element.data(\"voidLoaded\")\n      ) {\n        this.element.data(\"internalWidget\").injectJS(jsToInject);\n      }\n    }\n  });\n\n  //noinspection JSValidateJSDoc\n  /**\n   * Wrap the bridge that find the function to be executed\n   * Search in the current widget if the function is here\n   * Search in the internal widget (if ready to find the widget)\n   *\n   * @type {Function|function(): Function|function(): _Chain<T>|*}\n   */\n  //noinspection JSUnresolvedVariable\n  $.fn.document = _.wrap($.fn.document, function dcpDocument_wrap(\n    initialDocumentBridge,\n    methodName\n  ) {\n    // jshint ignore:line\n    var isMethodCall, internalWidget;\n    try {\n      return initialDocumentBridge.apply(this, _.rest(arguments));\n    } catch (error) {\n      if (error.name === \"noSuchMethodError\") {\n        isMethodCall = typeof methodName === \"string\";\n        if (isMethodCall && !this.data(\"internalWidgetInitialised\")) {\n          throw new ErrorNotLoaded();\n        }\n        internalWidget = this.data(\"internalWidget\");\n        if (\n          _.isFunction(internalWidget[methodName]) &&\n          methodName.charAt(0) !== \"_\"\n        ) {\n          return internalWidget[methodName].apply(\n            internalWidget,\n            _.rest(arguments, 2)\n          );\n        }\n      }\n      throw error;\n    }\n  });\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0b2f2c4ba8a17326d5a7\n");

/***/ }),

/***/ 1:
/*!***************************************************************!*\
  !*** multi ./src/vendor/Anakeen/DOCUMENT/IHM/smartElement.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! /home/charles/git/user-interfaces/src/vendor/Anakeen/DOCUMENT/IHM/smartElement.js */"a068bc6bc2489ee11341");


/***/ }),

/***/ "127c8cf59f228bb01a21":
/*!*************************!*\
  !*** external "jQuery" ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = jQuery;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTI3YzhjZjU5ZjIyOGJiMDFhMjEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJqUXVlcnlcIj9jZDBjIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0galF1ZXJ5OyJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///127c8cf59f228bb01a21\n");

/***/ }),

/***/ "698d75b157f24ae829cc":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjk4ZDc1YjE1N2YyNGFlODI5Y2MuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzP2NkMDAiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCkgfHwgKDEsIGV2YWwpKFwidGhpc1wiKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///698d75b157f24ae829cc\n");

/***/ }),

/***/ "8e08e542008e4aef1f58":
/*!***********************************************!*\
  !*** ./node_modules/underscore/underscore.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, module) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;//     Underscore.js 1.9.1\n//     http://underscorejs.org\n//     (c) 2009-2018 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n//     Underscore may be freely distributed under the MIT license.\n\n(function() {\n\n  // Baseline setup\n  // --------------\n\n  // Establish the root object, `window` (`self`) in the browser, `global`\n  // on the server, or `this` in some virtual machines. We use `self`\n  // instead of `window` for `WebWorker` support.\n  var root = typeof self == 'object' && self.self === self && self ||\n            typeof global == 'object' && global.global === global && global ||\n            this ||\n            {};\n\n  // Save the previous value of the `_` variable.\n  var previousUnderscore = root._;\n\n  // Save bytes in the minified (but not gzipped) version:\n  var ArrayProto = Array.prototype, ObjProto = Object.prototype;\n  var SymbolProto = typeof Symbol !== 'undefined' ? Symbol.prototype : null;\n\n  // Create quick reference variables for speed access to core prototypes.\n  var push = ArrayProto.push,\n      slice = ArrayProto.slice,\n      toString = ObjProto.toString,\n      hasOwnProperty = ObjProto.hasOwnProperty;\n\n  // All **ECMAScript 5** native function implementations that we hope to use\n  // are declared here.\n  var nativeIsArray = Array.isArray,\n      nativeKeys = Object.keys,\n      nativeCreate = Object.create;\n\n  // Naked function reference for surrogate-prototype-swapping.\n  var Ctor = function(){};\n\n  // Create a safe reference to the Underscore object for use below.\n  var _ = function(obj) {\n    if (obj instanceof _) return obj;\n    if (!(this instanceof _)) return new _(obj);\n    this._wrapped = obj;\n  };\n\n  // Export the Underscore object for **Node.js**, with\n  // backwards-compatibility for their old module API. If we're in\n  // the browser, add `_` as a global object.\n  // (`nodeType` is checked to ensure that `module`\n  // and `exports` are not HTML elements.)\n  if ( true && !exports.nodeType) {\n    if ( true && !module.nodeType && module.exports) {\n      exports = module.exports = _;\n    }\n    exports._ = _;\n  } else {\n    root._ = _;\n  }\n\n  // Current version.\n  _.VERSION = '1.9.1';\n\n  // Internal function that returns an efficient (for current engines) version\n  // of the passed-in callback, to be repeatedly applied in other Underscore\n  // functions.\n  var optimizeCb = function(func, context, argCount) {\n    if (context === void 0) return func;\n    switch (argCount == null ? 3 : argCount) {\n      case 1: return function(value) {\n        return func.call(context, value);\n      };\n      // The 2-argument case is omitted because we’re not using it.\n      case 3: return function(value, index, collection) {\n        return func.call(context, value, index, collection);\n      };\n      case 4: return function(accumulator, value, index, collection) {\n        return func.call(context, accumulator, value, index, collection);\n      };\n    }\n    return function() {\n      return func.apply(context, arguments);\n    };\n  };\n\n  var builtinIteratee;\n\n  // An internal function to generate callbacks that can be applied to each\n  // element in a collection, returning the desired result — either `identity`,\n  // an arbitrary callback, a property matcher, or a property accessor.\n  var cb = function(value, context, argCount) {\n    if (_.iteratee !== builtinIteratee) return _.iteratee(value, context);\n    if (value == null) return _.identity;\n    if (_.isFunction(value)) return optimizeCb(value, context, argCount);\n    if (_.isObject(value) && !_.isArray(value)) return _.matcher(value);\n    return _.property(value);\n  };\n\n  // External wrapper for our callback generator. Users may customize\n  // `_.iteratee` if they want additional predicate/iteratee shorthand styles.\n  // This abstraction hides the internal-only argCount argument.\n  _.iteratee = builtinIteratee = function(value, context) {\n    return cb(value, context, Infinity);\n  };\n\n  // Some functions take a variable number of arguments, or a few expected\n  // arguments at the beginning and then a variable number of values to operate\n  // on. This helper accumulates all remaining arguments past the function’s\n  // argument length (or an explicit `startIndex`), into an array that becomes\n  // the last argument. Similar to ES6’s \"rest parameter\".\n  var restArguments = function(func, startIndex) {\n    startIndex = startIndex == null ? func.length - 1 : +startIndex;\n    return function() {\n      var length = Math.max(arguments.length - startIndex, 0),\n          rest = Array(length),\n          index = 0;\n      for (; index < length; index++) {\n        rest[index] = arguments[index + startIndex];\n      }\n      switch (startIndex) {\n        case 0: return func.call(this, rest);\n        case 1: return func.call(this, arguments[0], rest);\n        case 2: return func.call(this, arguments[0], arguments[1], rest);\n      }\n      var args = Array(startIndex + 1);\n      for (index = 0; index < startIndex; index++) {\n        args[index] = arguments[index];\n      }\n      args[startIndex] = rest;\n      return func.apply(this, args);\n    };\n  };\n\n  // An internal function for creating a new object that inherits from another.\n  var baseCreate = function(prototype) {\n    if (!_.isObject(prototype)) return {};\n    if (nativeCreate) return nativeCreate(prototype);\n    Ctor.prototype = prototype;\n    var result = new Ctor;\n    Ctor.prototype = null;\n    return result;\n  };\n\n  var shallowProperty = function(key) {\n    return function(obj) {\n      return obj == null ? void 0 : obj[key];\n    };\n  };\n\n  var has = function(obj, path) {\n    return obj != null && hasOwnProperty.call(obj, path);\n  }\n\n  var deepGet = function(obj, path) {\n    var length = path.length;\n    for (var i = 0; i < length; i++) {\n      if (obj == null) return void 0;\n      obj = obj[path[i]];\n    }\n    return length ? obj : void 0;\n  };\n\n  // Helper for collection methods to determine whether a collection\n  // should be iterated as an array or as an object.\n  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength\n  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094\n  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;\n  var getLength = shallowProperty('length');\n  var isArrayLike = function(collection) {\n    var length = getLength(collection);\n    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;\n  };\n\n  // Collection Functions\n  // --------------------\n\n  // The cornerstone, an `each` implementation, aka `forEach`.\n  // Handles raw objects in addition to array-likes. Treats all\n  // sparse array-likes as if they were dense.\n  _.each = _.forEach = function(obj, iteratee, context) {\n    iteratee = optimizeCb(iteratee, context);\n    var i, length;\n    if (isArrayLike(obj)) {\n      for (i = 0, length = obj.length; i < length; i++) {\n        iteratee(obj[i], i, obj);\n      }\n    } else {\n      var keys = _.keys(obj);\n      for (i = 0, length = keys.length; i < length; i++) {\n        iteratee(obj[keys[i]], keys[i], obj);\n      }\n    }\n    return obj;\n  };\n\n  // Return the results of applying the iteratee to each element.\n  _.map = _.collect = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length,\n        results = Array(length);\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      results[index] = iteratee(obj[currentKey], currentKey, obj);\n    }\n    return results;\n  };\n\n  // Create a reducing function iterating left or right.\n  var createReduce = function(dir) {\n    // Wrap code that reassigns argument variables in a separate function than\n    // the one that accesses `arguments.length` to avoid a perf hit. (#1991)\n    var reducer = function(obj, iteratee, memo, initial) {\n      var keys = !isArrayLike(obj) && _.keys(obj),\n          length = (keys || obj).length,\n          index = dir > 0 ? 0 : length - 1;\n      if (!initial) {\n        memo = obj[keys ? keys[index] : index];\n        index += dir;\n      }\n      for (; index >= 0 && index < length; index += dir) {\n        var currentKey = keys ? keys[index] : index;\n        memo = iteratee(memo, obj[currentKey], currentKey, obj);\n      }\n      return memo;\n    };\n\n    return function(obj, iteratee, memo, context) {\n      var initial = arguments.length >= 3;\n      return reducer(obj, optimizeCb(iteratee, context, 4), memo, initial);\n    };\n  };\n\n  // **Reduce** builds up a single result from a list of values, aka `inject`,\n  // or `foldl`.\n  _.reduce = _.foldl = _.inject = createReduce(1);\n\n  // The right-associative version of reduce, also known as `foldr`.\n  _.reduceRight = _.foldr = createReduce(-1);\n\n  // Return the first value which passes a truth test. Aliased as `detect`.\n  _.find = _.detect = function(obj, predicate, context) {\n    var keyFinder = isArrayLike(obj) ? _.findIndex : _.findKey;\n    var key = keyFinder(obj, predicate, context);\n    if (key !== void 0 && key !== -1) return obj[key];\n  };\n\n  // Return all the elements that pass a truth test.\n  // Aliased as `select`.\n  _.filter = _.select = function(obj, predicate, context) {\n    var results = [];\n    predicate = cb(predicate, context);\n    _.each(obj, function(value, index, list) {\n      if (predicate(value, index, list)) results.push(value);\n    });\n    return results;\n  };\n\n  // Return all the elements for which a truth test fails.\n  _.reject = function(obj, predicate, context) {\n    return _.filter(obj, _.negate(cb(predicate)), context);\n  };\n\n  // Determine whether all of the elements match a truth test.\n  // Aliased as `all`.\n  _.every = _.all = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length;\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      if (!predicate(obj[currentKey], currentKey, obj)) return false;\n    }\n    return true;\n  };\n\n  // Determine if at least one element in the object matches a truth test.\n  // Aliased as `any`.\n  _.some = _.any = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length;\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      if (predicate(obj[currentKey], currentKey, obj)) return true;\n    }\n    return false;\n  };\n\n  // Determine if the array or object contains a given item (using `===`).\n  // Aliased as `includes` and `include`.\n  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {\n    if (!isArrayLike(obj)) obj = _.values(obj);\n    if (typeof fromIndex != 'number' || guard) fromIndex = 0;\n    return _.indexOf(obj, item, fromIndex) >= 0;\n  };\n\n  // Invoke a method (with arguments) on every item in a collection.\n  _.invoke = restArguments(function(obj, path, args) {\n    var contextPath, func;\n    if (_.isFunction(path)) {\n      func = path;\n    } else if (_.isArray(path)) {\n      contextPath = path.slice(0, -1);\n      path = path[path.length - 1];\n    }\n    return _.map(obj, function(context) {\n      var method = func;\n      if (!method) {\n        if (contextPath && contextPath.length) {\n          context = deepGet(context, contextPath);\n        }\n        if (context == null) return void 0;\n        method = context[path];\n      }\n      return method == null ? method : method.apply(context, args);\n    });\n  });\n\n  // Convenience version of a common use case of `map`: fetching a property.\n  _.pluck = function(obj, key) {\n    return _.map(obj, _.property(key));\n  };\n\n  // Convenience version of a common use case of `filter`: selecting only objects\n  // containing specific `key:value` pairs.\n  _.where = function(obj, attrs) {\n    return _.filter(obj, _.matcher(attrs));\n  };\n\n  // Convenience version of a common use case of `find`: getting the first object\n  // containing specific `key:value` pairs.\n  _.findWhere = function(obj, attrs) {\n    return _.find(obj, _.matcher(attrs));\n  };\n\n  // Return the maximum element (or element-based computation).\n  _.max = function(obj, iteratee, context) {\n    var result = -Infinity, lastComputed = -Infinity,\n        value, computed;\n    if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {\n      obj = isArrayLike(obj) ? obj : _.values(obj);\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n        if (value != null && value > result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(v, index, list) {\n        computed = iteratee(v, index, list);\n        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {\n          result = v;\n          lastComputed = computed;\n        }\n      });\n    }\n    return result;\n  };\n\n  // Return the minimum element (or element-based computation).\n  _.min = function(obj, iteratee, context) {\n    var result = Infinity, lastComputed = Infinity,\n        value, computed;\n    if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {\n      obj = isArrayLike(obj) ? obj : _.values(obj);\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n        if (value != null && value < result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(v, index, list) {\n        computed = iteratee(v, index, list);\n        if (computed < lastComputed || computed === Infinity && result === Infinity) {\n          result = v;\n          lastComputed = computed;\n        }\n      });\n    }\n    return result;\n  };\n\n  // Shuffle a collection.\n  _.shuffle = function(obj) {\n    return _.sample(obj, Infinity);\n  };\n\n  // Sample **n** random values from a collection using the modern version of the\n  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).\n  // If **n** is not specified, returns a single random element.\n  // The internal `guard` argument allows it to work with `map`.\n  _.sample = function(obj, n, guard) {\n    if (n == null || guard) {\n      if (!isArrayLike(obj)) obj = _.values(obj);\n      return obj[_.random(obj.length - 1)];\n    }\n    var sample = isArrayLike(obj) ? _.clone(obj) : _.values(obj);\n    var length = getLength(sample);\n    n = Math.max(Math.min(n, length), 0);\n    var last = length - 1;\n    for (var index = 0; index < n; index++) {\n      var rand = _.random(index, last);\n      var temp = sample[index];\n      sample[index] = sample[rand];\n      sample[rand] = temp;\n    }\n    return sample.slice(0, n);\n  };\n\n  // Sort the object's values by a criterion produced by an iteratee.\n  _.sortBy = function(obj, iteratee, context) {\n    var index = 0;\n    iteratee = cb(iteratee, context);\n    return _.pluck(_.map(obj, function(value, key, list) {\n      return {\n        value: value,\n        index: index++,\n        criteria: iteratee(value, key, list)\n      };\n    }).sort(function(left, right) {\n      var a = left.criteria;\n      var b = right.criteria;\n      if (a !== b) {\n        if (a > b || a === void 0) return 1;\n        if (a < b || b === void 0) return -1;\n      }\n      return left.index - right.index;\n    }), 'value');\n  };\n\n  // An internal function used for aggregate \"group by\" operations.\n  var group = function(behavior, partition) {\n    return function(obj, iteratee, context) {\n      var result = partition ? [[], []] : {};\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(value, index) {\n        var key = iteratee(value, index, obj);\n        behavior(result, value, key);\n      });\n      return result;\n    };\n  };\n\n  // Groups the object's values by a criterion. Pass either a string attribute\n  // to group by, or a function that returns the criterion.\n  _.groupBy = group(function(result, value, key) {\n    if (has(result, key)) result[key].push(value); else result[key] = [value];\n  });\n\n  // Indexes the object's values by a criterion, similar to `groupBy`, but for\n  // when you know that your index values will be unique.\n  _.indexBy = group(function(result, value, key) {\n    result[key] = value;\n  });\n\n  // Counts instances of an object that group by a certain criterion. Pass\n  // either a string attribute to count by, or a function that returns the\n  // criterion.\n  _.countBy = group(function(result, value, key) {\n    if (has(result, key)) result[key]++; else result[key] = 1;\n  });\n\n  var reStrSymbol = /[^\\ud800-\\udfff]|[\\ud800-\\udbff][\\udc00-\\udfff]|[\\ud800-\\udfff]/g;\n  // Safely create a real, live array from anything iterable.\n  _.toArray = function(obj) {\n    if (!obj) return [];\n    if (_.isArray(obj)) return slice.call(obj);\n    if (_.isString(obj)) {\n      // Keep surrogate pair characters together\n      return obj.match(reStrSymbol);\n    }\n    if (isArrayLike(obj)) return _.map(obj, _.identity);\n    return _.values(obj);\n  };\n\n  // Return the number of elements in an object.\n  _.size = function(obj) {\n    if (obj == null) return 0;\n    return isArrayLike(obj) ? obj.length : _.keys(obj).length;\n  };\n\n  // Split a collection into two arrays: one whose elements all satisfy the given\n  // predicate, and one whose elements all do not satisfy the predicate.\n  _.partition = group(function(result, value, pass) {\n    result[pass ? 0 : 1].push(value);\n  }, true);\n\n  // Array Functions\n  // ---------------\n\n  // Get the first element of an array. Passing **n** will return the first N\n  // values in the array. Aliased as `head` and `take`. The **guard** check\n  // allows it to work with `_.map`.\n  _.first = _.head = _.take = function(array, n, guard) {\n    if (array == null || array.length < 1) return n == null ? void 0 : [];\n    if (n == null || guard) return array[0];\n    return _.initial(array, array.length - n);\n  };\n\n  // Returns everything but the last entry of the array. Especially useful on\n  // the arguments object. Passing **n** will return all the values in\n  // the array, excluding the last N.\n  _.initial = function(array, n, guard) {\n    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));\n  };\n\n  // Get the last element of an array. Passing **n** will return the last N\n  // values in the array.\n  _.last = function(array, n, guard) {\n    if (array == null || array.length < 1) return n == null ? void 0 : [];\n    if (n == null || guard) return array[array.length - 1];\n    return _.rest(array, Math.max(0, array.length - n));\n  };\n\n  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.\n  // Especially useful on the arguments object. Passing an **n** will return\n  // the rest N values in the array.\n  _.rest = _.tail = _.drop = function(array, n, guard) {\n    return slice.call(array, n == null || guard ? 1 : n);\n  };\n\n  // Trim out all falsy values from an array.\n  _.compact = function(array) {\n    return _.filter(array, Boolean);\n  };\n\n  // Internal implementation of a recursive `flatten` function.\n  var flatten = function(input, shallow, strict, output) {\n    output = output || [];\n    var idx = output.length;\n    for (var i = 0, length = getLength(input); i < length; i++) {\n      var value = input[i];\n      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {\n        // Flatten current level of array or arguments object.\n        if (shallow) {\n          var j = 0, len = value.length;\n          while (j < len) output[idx++] = value[j++];\n        } else {\n          flatten(value, shallow, strict, output);\n          idx = output.length;\n        }\n      } else if (!strict) {\n        output[idx++] = value;\n      }\n    }\n    return output;\n  };\n\n  // Flatten out an array, either recursively (by default), or just one level.\n  _.flatten = function(array, shallow) {\n    return flatten(array, shallow, false);\n  };\n\n  // Return a version of the array that does not contain the specified value(s).\n  _.without = restArguments(function(array, otherArrays) {\n    return _.difference(array, otherArrays);\n  });\n\n  // Produce a duplicate-free version of the array. If the array has already\n  // been sorted, you have the option of using a faster algorithm.\n  // The faster algorithm will not work with an iteratee if the iteratee\n  // is not a one-to-one function, so providing an iteratee will disable\n  // the faster algorithm.\n  // Aliased as `unique`.\n  _.uniq = _.unique = function(array, isSorted, iteratee, context) {\n    if (!_.isBoolean(isSorted)) {\n      context = iteratee;\n      iteratee = isSorted;\n      isSorted = false;\n    }\n    if (iteratee != null) iteratee = cb(iteratee, context);\n    var result = [];\n    var seen = [];\n    for (var i = 0, length = getLength(array); i < length; i++) {\n      var value = array[i],\n          computed = iteratee ? iteratee(value, i, array) : value;\n      if (isSorted && !iteratee) {\n        if (!i || seen !== computed) result.push(value);\n        seen = computed;\n      } else if (iteratee) {\n        if (!_.contains(seen, computed)) {\n          seen.push(computed);\n          result.push(value);\n        }\n      } else if (!_.contains(result, value)) {\n        result.push(value);\n      }\n    }\n    return result;\n  };\n\n  // Produce an array that contains the union: each distinct element from all of\n  // the passed-in arrays.\n  _.union = restArguments(function(arrays) {\n    return _.uniq(flatten(arrays, true, true));\n  });\n\n  // Produce an array that contains every item shared between all the\n  // passed-in arrays.\n  _.intersection = function(array) {\n    var result = [];\n    var argsLength = arguments.length;\n    for (var i = 0, length = getLength(array); i < length; i++) {\n      var item = array[i];\n      if (_.contains(result, item)) continue;\n      var j;\n      for (j = 1; j < argsLength; j++) {\n        if (!_.contains(arguments[j], item)) break;\n      }\n      if (j === argsLength) result.push(item);\n    }\n    return result;\n  };\n\n  // Take the difference between one array and a number of other arrays.\n  // Only the elements present in just the first array will remain.\n  _.difference = restArguments(function(array, rest) {\n    rest = flatten(rest, true, true);\n    return _.filter(array, function(value){\n      return !_.contains(rest, value);\n    });\n  });\n\n  // Complement of _.zip. Unzip accepts an array of arrays and groups\n  // each array's elements on shared indices.\n  _.unzip = function(array) {\n    var length = array && _.max(array, getLength).length || 0;\n    var result = Array(length);\n\n    for (var index = 0; index < length; index++) {\n      result[index] = _.pluck(array, index);\n    }\n    return result;\n  };\n\n  // Zip together multiple lists into a single array -- elements that share\n  // an index go together.\n  _.zip = restArguments(_.unzip);\n\n  // Converts lists into objects. Pass either a single array of `[key, value]`\n  // pairs, or two parallel arrays of the same length -- one of keys, and one of\n  // the corresponding values. Passing by pairs is the reverse of _.pairs.\n  _.object = function(list, values) {\n    var result = {};\n    for (var i = 0, length = getLength(list); i < length; i++) {\n      if (values) {\n        result[list[i]] = values[i];\n      } else {\n        result[list[i][0]] = list[i][1];\n      }\n    }\n    return result;\n  };\n\n  // Generator function to create the findIndex and findLastIndex functions.\n  var createPredicateIndexFinder = function(dir) {\n    return function(array, predicate, context) {\n      predicate = cb(predicate, context);\n      var length = getLength(array);\n      var index = dir > 0 ? 0 : length - 1;\n      for (; index >= 0 && index < length; index += dir) {\n        if (predicate(array[index], index, array)) return index;\n      }\n      return -1;\n    };\n  };\n\n  // Returns the first index on an array-like that passes a predicate test.\n  _.findIndex = createPredicateIndexFinder(1);\n  _.findLastIndex = createPredicateIndexFinder(-1);\n\n  // Use a comparator function to figure out the smallest index at which\n  // an object should be inserted so as to maintain order. Uses binary search.\n  _.sortedIndex = function(array, obj, iteratee, context) {\n    iteratee = cb(iteratee, context, 1);\n    var value = iteratee(obj);\n    var low = 0, high = getLength(array);\n    while (low < high) {\n      var mid = Math.floor((low + high) / 2);\n      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;\n    }\n    return low;\n  };\n\n  // Generator function to create the indexOf and lastIndexOf functions.\n  var createIndexFinder = function(dir, predicateFind, sortedIndex) {\n    return function(array, item, idx) {\n      var i = 0, length = getLength(array);\n      if (typeof idx == 'number') {\n        if (dir > 0) {\n          i = idx >= 0 ? idx : Math.max(idx + length, i);\n        } else {\n          length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;\n        }\n      } else if (sortedIndex && idx && length) {\n        idx = sortedIndex(array, item);\n        return array[idx] === item ? idx : -1;\n      }\n      if (item !== item) {\n        idx = predicateFind(slice.call(array, i, length), _.isNaN);\n        return idx >= 0 ? idx + i : -1;\n      }\n      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {\n        if (array[idx] === item) return idx;\n      }\n      return -1;\n    };\n  };\n\n  // Return the position of the first occurrence of an item in an array,\n  // or -1 if the item is not included in the array.\n  // If the array is large and already in sort order, pass `true`\n  // for **isSorted** to use binary search.\n  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);\n  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);\n\n  // Generate an integer Array containing an arithmetic progression. A port of\n  // the native Python `range()` function. See\n  // [the Python documentation](http://docs.python.org/library/functions.html#range).\n  _.range = function(start, stop, step) {\n    if (stop == null) {\n      stop = start || 0;\n      start = 0;\n    }\n    if (!step) {\n      step = stop < start ? -1 : 1;\n    }\n\n    var length = Math.max(Math.ceil((stop - start) / step), 0);\n    var range = Array(length);\n\n    for (var idx = 0; idx < length; idx++, start += step) {\n      range[idx] = start;\n    }\n\n    return range;\n  };\n\n  // Chunk a single array into multiple arrays, each containing `count` or fewer\n  // items.\n  _.chunk = function(array, count) {\n    if (count == null || count < 1) return [];\n    var result = [];\n    var i = 0, length = array.length;\n    while (i < length) {\n      result.push(slice.call(array, i, i += count));\n    }\n    return result;\n  };\n\n  // Function (ahem) Functions\n  // ------------------\n\n  // Determines whether to execute a function as a constructor\n  // or a normal function with the provided arguments.\n  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {\n    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);\n    var self = baseCreate(sourceFunc.prototype);\n    var result = sourceFunc.apply(self, args);\n    if (_.isObject(result)) return result;\n    return self;\n  };\n\n  // Create a function bound to a given object (assigning `this`, and arguments,\n  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if\n  // available.\n  _.bind = restArguments(function(func, context, args) {\n    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');\n    var bound = restArguments(function(callArgs) {\n      return executeBound(func, bound, context, this, args.concat(callArgs));\n    });\n    return bound;\n  });\n\n  // Partially apply a function by creating a version that has had some of its\n  // arguments pre-filled, without changing its dynamic `this` context. _ acts\n  // as a placeholder by default, allowing any combination of arguments to be\n  // pre-filled. Set `_.partial.placeholder` for a custom placeholder argument.\n  _.partial = restArguments(function(func, boundArgs) {\n    var placeholder = _.partial.placeholder;\n    var bound = function() {\n      var position = 0, length = boundArgs.length;\n      var args = Array(length);\n      for (var i = 0; i < length; i++) {\n        args[i] = boundArgs[i] === placeholder ? arguments[position++] : boundArgs[i];\n      }\n      while (position < arguments.length) args.push(arguments[position++]);\n      return executeBound(func, bound, this, this, args);\n    };\n    return bound;\n  });\n\n  _.partial.placeholder = _;\n\n  // Bind a number of an object's methods to that object. Remaining arguments\n  // are the method names to be bound. Useful for ensuring that all callbacks\n  // defined on an object belong to it.\n  _.bindAll = restArguments(function(obj, keys) {\n    keys = flatten(keys, false, false);\n    var index = keys.length;\n    if (index < 1) throw new Error('bindAll must be passed function names');\n    while (index--) {\n      var key = keys[index];\n      obj[key] = _.bind(obj[key], obj);\n    }\n  });\n\n  // Memoize an expensive function by storing its results.\n  _.memoize = function(func, hasher) {\n    var memoize = function(key) {\n      var cache = memoize.cache;\n      var address = '' + (hasher ? hasher.apply(this, arguments) : key);\n      if (!has(cache, address)) cache[address] = func.apply(this, arguments);\n      return cache[address];\n    };\n    memoize.cache = {};\n    return memoize;\n  };\n\n  // Delays a function for the given number of milliseconds, and then calls\n  // it with the arguments supplied.\n  _.delay = restArguments(function(func, wait, args) {\n    return setTimeout(function() {\n      return func.apply(null, args);\n    }, wait);\n  });\n\n  // Defers a function, scheduling it to run after the current call stack has\n  // cleared.\n  _.defer = _.partial(_.delay, _, 1);\n\n  // Returns a function, that, when invoked, will only be triggered at most once\n  // during a given window of time. Normally, the throttled function will run\n  // as much as it can, without ever going more than once per `wait` duration;\n  // but if you'd like to disable the execution on the leading edge, pass\n  // `{leading: false}`. To disable execution on the trailing edge, ditto.\n  _.throttle = function(func, wait, options) {\n    var timeout, context, args, result;\n    var previous = 0;\n    if (!options) options = {};\n\n    var later = function() {\n      previous = options.leading === false ? 0 : _.now();\n      timeout = null;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    };\n\n    var throttled = function() {\n      var now = _.now();\n      if (!previous && options.leading === false) previous = now;\n      var remaining = wait - (now - previous);\n      context = this;\n      args = arguments;\n      if (remaining <= 0 || remaining > wait) {\n        if (timeout) {\n          clearTimeout(timeout);\n          timeout = null;\n        }\n        previous = now;\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      } else if (!timeout && options.trailing !== false) {\n        timeout = setTimeout(later, remaining);\n      }\n      return result;\n    };\n\n    throttled.cancel = function() {\n      clearTimeout(timeout);\n      previous = 0;\n      timeout = context = args = null;\n    };\n\n    return throttled;\n  };\n\n  // Returns a function, that, as long as it continues to be invoked, will not\n  // be triggered. The function will be called after it stops being called for\n  // N milliseconds. If `immediate` is passed, trigger the function on the\n  // leading edge, instead of the trailing.\n  _.debounce = function(func, wait, immediate) {\n    var timeout, result;\n\n    var later = function(context, args) {\n      timeout = null;\n      if (args) result = func.apply(context, args);\n    };\n\n    var debounced = restArguments(function(args) {\n      if (timeout) clearTimeout(timeout);\n      if (immediate) {\n        var callNow = !timeout;\n        timeout = setTimeout(later, wait);\n        if (callNow) result = func.apply(this, args);\n      } else {\n        timeout = _.delay(later, wait, this, args);\n      }\n\n      return result;\n    });\n\n    debounced.cancel = function() {\n      clearTimeout(timeout);\n      timeout = null;\n    };\n\n    return debounced;\n  };\n\n  // Returns the first function passed as an argument to the second,\n  // allowing you to adjust arguments, run code before and after, and\n  // conditionally execute the original function.\n  _.wrap = function(func, wrapper) {\n    return _.partial(wrapper, func);\n  };\n\n  // Returns a negated version of the passed-in predicate.\n  _.negate = function(predicate) {\n    return function() {\n      return !predicate.apply(this, arguments);\n    };\n  };\n\n  // Returns a function that is the composition of a list of functions, each\n  // consuming the return value of the function that follows.\n  _.compose = function() {\n    var args = arguments;\n    var start = args.length - 1;\n    return function() {\n      var i = start;\n      var result = args[start].apply(this, arguments);\n      while (i--) result = args[i].call(this, result);\n      return result;\n    };\n  };\n\n  // Returns a function that will only be executed on and after the Nth call.\n  _.after = function(times, func) {\n    return function() {\n      if (--times < 1) {\n        return func.apply(this, arguments);\n      }\n    };\n  };\n\n  // Returns a function that will only be executed up to (but not including) the Nth call.\n  _.before = function(times, func) {\n    var memo;\n    return function() {\n      if (--times > 0) {\n        memo = func.apply(this, arguments);\n      }\n      if (times <= 1) func = null;\n      return memo;\n    };\n  };\n\n  // Returns a function that will be executed at most one time, no matter how\n  // often you call it. Useful for lazy initialization.\n  _.once = _.partial(_.before, 2);\n\n  _.restArguments = restArguments;\n\n  // Object Functions\n  // ----------------\n\n  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.\n  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');\n  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',\n    'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];\n\n  var collectNonEnumProps = function(obj, keys) {\n    var nonEnumIdx = nonEnumerableProps.length;\n    var constructor = obj.constructor;\n    var proto = _.isFunction(constructor) && constructor.prototype || ObjProto;\n\n    // Constructor is a special case.\n    var prop = 'constructor';\n    if (has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);\n\n    while (nonEnumIdx--) {\n      prop = nonEnumerableProps[nonEnumIdx];\n      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {\n        keys.push(prop);\n      }\n    }\n  };\n\n  // Retrieve the names of an object's own properties.\n  // Delegates to **ECMAScript 5**'s native `Object.keys`.\n  _.keys = function(obj) {\n    if (!_.isObject(obj)) return [];\n    if (nativeKeys) return nativeKeys(obj);\n    var keys = [];\n    for (var key in obj) if (has(obj, key)) keys.push(key);\n    // Ahem, IE < 9.\n    if (hasEnumBug) collectNonEnumProps(obj, keys);\n    return keys;\n  };\n\n  // Retrieve all the property names of an object.\n  _.allKeys = function(obj) {\n    if (!_.isObject(obj)) return [];\n    var keys = [];\n    for (var key in obj) keys.push(key);\n    // Ahem, IE < 9.\n    if (hasEnumBug) collectNonEnumProps(obj, keys);\n    return keys;\n  };\n\n  // Retrieve the values of an object's properties.\n  _.values = function(obj) {\n    var keys = _.keys(obj);\n    var length = keys.length;\n    var values = Array(length);\n    for (var i = 0; i < length; i++) {\n      values[i] = obj[keys[i]];\n    }\n    return values;\n  };\n\n  // Returns the results of applying the iteratee to each element of the object.\n  // In contrast to _.map it returns an object.\n  _.mapObject = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    var keys = _.keys(obj),\n        length = keys.length,\n        results = {};\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys[index];\n      results[currentKey] = iteratee(obj[currentKey], currentKey, obj);\n    }\n    return results;\n  };\n\n  // Convert an object into a list of `[key, value]` pairs.\n  // The opposite of _.object.\n  _.pairs = function(obj) {\n    var keys = _.keys(obj);\n    var length = keys.length;\n    var pairs = Array(length);\n    for (var i = 0; i < length; i++) {\n      pairs[i] = [keys[i], obj[keys[i]]];\n    }\n    return pairs;\n  };\n\n  // Invert the keys and values of an object. The values must be serializable.\n  _.invert = function(obj) {\n    var result = {};\n    var keys = _.keys(obj);\n    for (var i = 0, length = keys.length; i < length; i++) {\n      result[obj[keys[i]]] = keys[i];\n    }\n    return result;\n  };\n\n  // Return a sorted list of the function names available on the object.\n  // Aliased as `methods`.\n  _.functions = _.methods = function(obj) {\n    var names = [];\n    for (var key in obj) {\n      if (_.isFunction(obj[key])) names.push(key);\n    }\n    return names.sort();\n  };\n\n  // An internal function for creating assigner functions.\n  var createAssigner = function(keysFunc, defaults) {\n    return function(obj) {\n      var length = arguments.length;\n      if (defaults) obj = Object(obj);\n      if (length < 2 || obj == null) return obj;\n      for (var index = 1; index < length; index++) {\n        var source = arguments[index],\n            keys = keysFunc(source),\n            l = keys.length;\n        for (var i = 0; i < l; i++) {\n          var key = keys[i];\n          if (!defaults || obj[key] === void 0) obj[key] = source[key];\n        }\n      }\n      return obj;\n    };\n  };\n\n  // Extend a given object with all the properties in passed-in object(s).\n  _.extend = createAssigner(_.allKeys);\n\n  // Assigns a given object with all the own properties in the passed-in object(s).\n  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)\n  _.extendOwn = _.assign = createAssigner(_.keys);\n\n  // Returns the first key on an object that passes a predicate test.\n  _.findKey = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = _.keys(obj), key;\n    for (var i = 0, length = keys.length; i < length; i++) {\n      key = keys[i];\n      if (predicate(obj[key], key, obj)) return key;\n    }\n  };\n\n  // Internal pick helper function to determine if `obj` has key `key`.\n  var keyInObj = function(value, key, obj) {\n    return key in obj;\n  };\n\n  // Return a copy of the object only containing the whitelisted properties.\n  _.pick = restArguments(function(obj, keys) {\n    var result = {}, iteratee = keys[0];\n    if (obj == null) return result;\n    if (_.isFunction(iteratee)) {\n      if (keys.length > 1) iteratee = optimizeCb(iteratee, keys[1]);\n      keys = _.allKeys(obj);\n    } else {\n      iteratee = keyInObj;\n      keys = flatten(keys, false, false);\n      obj = Object(obj);\n    }\n    for (var i = 0, length = keys.length; i < length; i++) {\n      var key = keys[i];\n      var value = obj[key];\n      if (iteratee(value, key, obj)) result[key] = value;\n    }\n    return result;\n  });\n\n  // Return a copy of the object without the blacklisted properties.\n  _.omit = restArguments(function(obj, keys) {\n    var iteratee = keys[0], context;\n    if (_.isFunction(iteratee)) {\n      iteratee = _.negate(iteratee);\n      if (keys.length > 1) context = keys[1];\n    } else {\n      keys = _.map(flatten(keys, false, false), String);\n      iteratee = function(value, key) {\n        return !_.contains(keys, key);\n      };\n    }\n    return _.pick(obj, iteratee, context);\n  });\n\n  // Fill in a given object with default properties.\n  _.defaults = createAssigner(_.allKeys, true);\n\n  // Creates an object that inherits from the given prototype object.\n  // If additional properties are provided then they will be added to the\n  // created object.\n  _.create = function(prototype, props) {\n    var result = baseCreate(prototype);\n    if (props) _.extendOwn(result, props);\n    return result;\n  };\n\n  // Create a (shallow-cloned) duplicate of an object.\n  _.clone = function(obj) {\n    if (!_.isObject(obj)) return obj;\n    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);\n  };\n\n  // Invokes interceptor with the obj, and then returns obj.\n  // The primary purpose of this method is to \"tap into\" a method chain, in\n  // order to perform operations on intermediate results within the chain.\n  _.tap = function(obj, interceptor) {\n    interceptor(obj);\n    return obj;\n  };\n\n  // Returns whether an object has a given set of `key:value` pairs.\n  _.isMatch = function(object, attrs) {\n    var keys = _.keys(attrs), length = keys.length;\n    if (object == null) return !length;\n    var obj = Object(object);\n    for (var i = 0; i < length; i++) {\n      var key = keys[i];\n      if (attrs[key] !== obj[key] || !(key in obj)) return false;\n    }\n    return true;\n  };\n\n\n  // Internal recursive comparison function for `isEqual`.\n  var eq, deepEq;\n  eq = function(a, b, aStack, bStack) {\n    // Identical objects are equal. `0 === -0`, but they aren't identical.\n    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).\n    if (a === b) return a !== 0 || 1 / a === 1 / b;\n    // `null` or `undefined` only equal to itself (strict comparison).\n    if (a == null || b == null) return false;\n    // `NaN`s are equivalent, but non-reflexive.\n    if (a !== a) return b !== b;\n    // Exhaust primitive checks\n    var type = typeof a;\n    if (type !== 'function' && type !== 'object' && typeof b != 'object') return false;\n    return deepEq(a, b, aStack, bStack);\n  };\n\n  // Internal recursive comparison function for `isEqual`.\n  deepEq = function(a, b, aStack, bStack) {\n    // Unwrap any wrapped objects.\n    if (a instanceof _) a = a._wrapped;\n    if (b instanceof _) b = b._wrapped;\n    // Compare `[[Class]]` names.\n    var className = toString.call(a);\n    if (className !== toString.call(b)) return false;\n    switch (className) {\n      // Strings, numbers, regular expressions, dates, and booleans are compared by value.\n      case '[object RegExp]':\n      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')\n      case '[object String]':\n        // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n        // equivalent to `new String(\"5\")`.\n        return '' + a === '' + b;\n      case '[object Number]':\n        // `NaN`s are equivalent, but non-reflexive.\n        // Object(NaN) is equivalent to NaN.\n        if (+a !== +a) return +b !== +b;\n        // An `egal` comparison is performed for other numeric values.\n        return +a === 0 ? 1 / +a === 1 / b : +a === +b;\n      case '[object Date]':\n      case '[object Boolean]':\n        // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n        // millisecond representations. Note that invalid dates with millisecond representations\n        // of `NaN` are not equivalent.\n        return +a === +b;\n      case '[object Symbol]':\n        return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);\n    }\n\n    var areArrays = className === '[object Array]';\n    if (!areArrays) {\n      if (typeof a != 'object' || typeof b != 'object') return false;\n\n      // Objects with different constructors are not equivalent, but `Object`s or `Array`s\n      // from different frames are.\n      var aCtor = a.constructor, bCtor = b.constructor;\n      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&\n                               _.isFunction(bCtor) && bCtor instanceof bCtor)\n                          && ('constructor' in a && 'constructor' in b)) {\n        return false;\n      }\n    }\n    // Assume equality for cyclic structures. The algorithm for detecting cyclic\n    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n\n    // Initializing stack of traversed objects.\n    // It's done here since we only need them for objects and arrays comparison.\n    aStack = aStack || [];\n    bStack = bStack || [];\n    var length = aStack.length;\n    while (length--) {\n      // Linear search. Performance is inversely proportional to the number of\n      // unique nested structures.\n      if (aStack[length] === a) return bStack[length] === b;\n    }\n\n    // Add the first object to the stack of traversed objects.\n    aStack.push(a);\n    bStack.push(b);\n\n    // Recursively compare objects and arrays.\n    if (areArrays) {\n      // Compare array lengths to determine if a deep comparison is necessary.\n      length = a.length;\n      if (length !== b.length) return false;\n      // Deep compare the contents, ignoring non-numeric properties.\n      while (length--) {\n        if (!eq(a[length], b[length], aStack, bStack)) return false;\n      }\n    } else {\n      // Deep compare objects.\n      var keys = _.keys(a), key;\n      length = keys.length;\n      // Ensure that both objects contain the same number of properties before comparing deep equality.\n      if (_.keys(b).length !== length) return false;\n      while (length--) {\n        // Deep compare each member\n        key = keys[length];\n        if (!(has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;\n      }\n    }\n    // Remove the first object from the stack of traversed objects.\n    aStack.pop();\n    bStack.pop();\n    return true;\n  };\n\n  // Perform a deep comparison to check if two objects are equal.\n  _.isEqual = function(a, b) {\n    return eq(a, b);\n  };\n\n  // Is a given array, string, or object empty?\n  // An \"empty\" object has no enumerable own-properties.\n  _.isEmpty = function(obj) {\n    if (obj == null) return true;\n    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;\n    return _.keys(obj).length === 0;\n  };\n\n  // Is a given value a DOM element?\n  _.isElement = function(obj) {\n    return !!(obj && obj.nodeType === 1);\n  };\n\n  // Is a given value an array?\n  // Delegates to ECMA5's native Array.isArray\n  _.isArray = nativeIsArray || function(obj) {\n    return toString.call(obj) === '[object Array]';\n  };\n\n  // Is a given variable an object?\n  _.isObject = function(obj) {\n    var type = typeof obj;\n    return type === 'function' || type === 'object' && !!obj;\n  };\n\n  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError, isMap, isWeakMap, isSet, isWeakSet.\n  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error', 'Symbol', 'Map', 'WeakMap', 'Set', 'WeakSet'], function(name) {\n    _['is' + name] = function(obj) {\n      return toString.call(obj) === '[object ' + name + ']';\n    };\n  });\n\n  // Define a fallback version of the method in browsers (ahem, IE < 9), where\n  // there isn't any inspectable \"Arguments\" type.\n  if (!_.isArguments(arguments)) {\n    _.isArguments = function(obj) {\n      return has(obj, 'callee');\n    };\n  }\n\n  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,\n  // IE 11 (#1621), Safari 8 (#1929), and PhantomJS (#2236).\n  var nodelist = root.document && root.document.childNodes;\n  if ( true && typeof Int8Array != 'object' && typeof nodelist != 'function') {\n    _.isFunction = function(obj) {\n      return typeof obj == 'function' || false;\n    };\n  }\n\n  // Is a given object a finite number?\n  _.isFinite = function(obj) {\n    return !_.isSymbol(obj) && isFinite(obj) && !isNaN(parseFloat(obj));\n  };\n\n  // Is the given value `NaN`?\n  _.isNaN = function(obj) {\n    return _.isNumber(obj) && isNaN(obj);\n  };\n\n  // Is a given value a boolean?\n  _.isBoolean = function(obj) {\n    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';\n  };\n\n  // Is a given value equal to null?\n  _.isNull = function(obj) {\n    return obj === null;\n  };\n\n  // Is a given variable undefined?\n  _.isUndefined = function(obj) {\n    return obj === void 0;\n  };\n\n  // Shortcut function for checking if an object has a given property directly\n  // on itself (in other words, not on a prototype).\n  _.has = function(obj, path) {\n    if (!_.isArray(path)) {\n      return has(obj, path);\n    }\n    var length = path.length;\n    for (var i = 0; i < length; i++) {\n      var key = path[i];\n      if (obj == null || !hasOwnProperty.call(obj, key)) {\n        return false;\n      }\n      obj = obj[key];\n    }\n    return !!length;\n  };\n\n  // Utility Functions\n  // -----------------\n\n  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its\n  // previous owner. Returns a reference to the Underscore object.\n  _.noConflict = function() {\n    root._ = previousUnderscore;\n    return this;\n  };\n\n  // Keep the identity function around for default iteratees.\n  _.identity = function(value) {\n    return value;\n  };\n\n  // Predicate-generating functions. Often useful outside of Underscore.\n  _.constant = function(value) {\n    return function() {\n      return value;\n    };\n  };\n\n  _.noop = function(){};\n\n  // Creates a function that, when passed an object, will traverse that object’s\n  // properties down the given `path`, specified as an array of keys or indexes.\n  _.property = function(path) {\n    if (!_.isArray(path)) {\n      return shallowProperty(path);\n    }\n    return function(obj) {\n      return deepGet(obj, path);\n    };\n  };\n\n  // Generates a function for a given object that returns a given property.\n  _.propertyOf = function(obj) {\n    if (obj == null) {\n      return function(){};\n    }\n    return function(path) {\n      return !_.isArray(path) ? obj[path] : deepGet(obj, path);\n    };\n  };\n\n  // Returns a predicate for checking whether an object has a given set of\n  // `key:value` pairs.\n  _.matcher = _.matches = function(attrs) {\n    attrs = _.extendOwn({}, attrs);\n    return function(obj) {\n      return _.isMatch(obj, attrs);\n    };\n  };\n\n  // Run a function **n** times.\n  _.times = function(n, iteratee, context) {\n    var accum = Array(Math.max(0, n));\n    iteratee = optimizeCb(iteratee, context, 1);\n    for (var i = 0; i < n; i++) accum[i] = iteratee(i);\n    return accum;\n  };\n\n  // Return a random integer between min and max (inclusive).\n  _.random = function(min, max) {\n    if (max == null) {\n      max = min;\n      min = 0;\n    }\n    return min + Math.floor(Math.random() * (max - min + 1));\n  };\n\n  // A (possibly faster) way to get the current timestamp as an integer.\n  _.now = Date.now || function() {\n    return new Date().getTime();\n  };\n\n  // List of HTML entities for escaping.\n  var escapeMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#x27;',\n    '`': '&#x60;'\n  };\n  var unescapeMap = _.invert(escapeMap);\n\n  // Functions for escaping and unescaping strings to/from HTML interpolation.\n  var createEscaper = function(map) {\n    var escaper = function(match) {\n      return map[match];\n    };\n    // Regexes for identifying a key that needs to be escaped.\n    var source = '(?:' + _.keys(map).join('|') + ')';\n    var testRegexp = RegExp(source);\n    var replaceRegexp = RegExp(source, 'g');\n    return function(string) {\n      string = string == null ? '' : '' + string;\n      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;\n    };\n  };\n  _.escape = createEscaper(escapeMap);\n  _.unescape = createEscaper(unescapeMap);\n\n  // Traverses the children of `obj` along `path`. If a child is a function, it\n  // is invoked with its parent as context. Returns the value of the final\n  // child, or `fallback` if any child is undefined.\n  _.result = function(obj, path, fallback) {\n    if (!_.isArray(path)) path = [path];\n    var length = path.length;\n    if (!length) {\n      return _.isFunction(fallback) ? fallback.call(obj) : fallback;\n    }\n    for (var i = 0; i < length; i++) {\n      var prop = obj == null ? void 0 : obj[path[i]];\n      if (prop === void 0) {\n        prop = fallback;\n        i = length; // Ensure we don't continue iterating.\n      }\n      obj = _.isFunction(prop) ? prop.call(obj) : prop;\n    }\n    return obj;\n  };\n\n  // Generate a unique integer id (unique within the entire client session).\n  // Useful for temporary DOM ids.\n  var idCounter = 0;\n  _.uniqueId = function(prefix) {\n    var id = ++idCounter + '';\n    return prefix ? prefix + id : id;\n  };\n\n  // By default, Underscore uses ERB-style template delimiters, change the\n  // following template settings to use alternative delimiters.\n  _.templateSettings = {\n    evaluate: /<%([\\s\\S]+?)%>/g,\n    interpolate: /<%=([\\s\\S]+?)%>/g,\n    escape: /<%-([\\s\\S]+?)%>/g\n  };\n\n  // When customizing `templateSettings`, if you don't want to define an\n  // interpolation, evaluation or escaping regex, we need one that is\n  // guaranteed not to match.\n  var noMatch = /(.)^/;\n\n  // Certain characters need to be escaped so that they can be put into a\n  // string literal.\n  var escapes = {\n    \"'\": \"'\",\n    '\\\\': '\\\\',\n    '\\r': 'r',\n    '\\n': 'n',\n    '\\u2028': 'u2028',\n    '\\u2029': 'u2029'\n  };\n\n  var escapeRegExp = /\\\\|'|\\r|\\n|\\u2028|\\u2029/g;\n\n  var escapeChar = function(match) {\n    return '\\\\' + escapes[match];\n  };\n\n  // JavaScript micro-templating, similar to John Resig's implementation.\n  // Underscore templating handles arbitrary delimiters, preserves whitespace,\n  // and correctly escapes quotes within interpolated code.\n  // NB: `oldSettings` only exists for backwards compatibility.\n  _.template = function(text, settings, oldSettings) {\n    if (!settings && oldSettings) settings = oldSettings;\n    settings = _.defaults({}, settings, _.templateSettings);\n\n    // Combine delimiters into one regular expression via alternation.\n    var matcher = RegExp([\n      (settings.escape || noMatch).source,\n      (settings.interpolate || noMatch).source,\n      (settings.evaluate || noMatch).source\n    ].join('|') + '|$', 'g');\n\n    // Compile the template source, escaping string literals appropriately.\n    var index = 0;\n    var source = \"__p+='\";\n    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {\n      source += text.slice(index, offset).replace(escapeRegExp, escapeChar);\n      index = offset + match.length;\n\n      if (escape) {\n        source += \"'+\\n((__t=(\" + escape + \"))==null?'':_.escape(__t))+\\n'\";\n      } else if (interpolate) {\n        source += \"'+\\n((__t=(\" + interpolate + \"))==null?'':__t)+\\n'\";\n      } else if (evaluate) {\n        source += \"';\\n\" + evaluate + \"\\n__p+='\";\n      }\n\n      // Adobe VMs need the match returned to produce the correct offset.\n      return match;\n    });\n    source += \"';\\n\";\n\n    // If a variable is not specified, place data values in local scope.\n    if (!settings.variable) source = 'with(obj||{}){\\n' + source + '}\\n';\n\n    source = \"var __t,__p='',__j=Array.prototype.join,\" +\n      \"print=function(){__p+=__j.call(arguments,'');};\\n\" +\n      source + 'return __p;\\n';\n\n    var render;\n    try {\n      render = new Function(settings.variable || 'obj', '_', source);\n    } catch (e) {\n      e.source = source;\n      throw e;\n    }\n\n    var template = function(data) {\n      return render.call(this, data, _);\n    };\n\n    // Provide the compiled source as a convenience for precompilation.\n    var argument = settings.variable || 'obj';\n    template.source = 'function(' + argument + '){\\n' + source + '}';\n\n    return template;\n  };\n\n  // Add a \"chain\" function. Start chaining a wrapped Underscore object.\n  _.chain = function(obj) {\n    var instance = _(obj);\n    instance._chain = true;\n    return instance;\n  };\n\n  // OOP\n  // ---------------\n  // If Underscore is called as a function, it returns a wrapped object that\n  // can be used OO-style. This wrapper holds altered versions of all the\n  // underscore functions. Wrapped objects may be chained.\n\n  // Helper function to continue chaining intermediate results.\n  var chainResult = function(instance, obj) {\n    return instance._chain ? _(obj).chain() : obj;\n  };\n\n  // Add your own custom functions to the Underscore object.\n  _.mixin = function(obj) {\n    _.each(_.functions(obj), function(name) {\n      var func = _[name] = obj[name];\n      _.prototype[name] = function() {\n        var args = [this._wrapped];\n        push.apply(args, arguments);\n        return chainResult(this, func.apply(_, args));\n      };\n    });\n    return _;\n  };\n\n  // Add all of the Underscore functions to the wrapper object.\n  _.mixin(_);\n\n  // Add all mutator Array functions to the wrapper.\n  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function() {\n      var obj = this._wrapped;\n      method.apply(obj, arguments);\n      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];\n      return chainResult(this, obj);\n    };\n  });\n\n  // Add all accessor Array functions to the wrapper.\n  _.each(['concat', 'join', 'slice'], function(name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function() {\n      return chainResult(this, method.apply(this._wrapped, arguments));\n    };\n  });\n\n  // Extracts the result from a wrapped and chained object.\n  _.prototype.value = function() {\n    return this._wrapped;\n  };\n\n  // Provide unwrapping proxy for some methods used in engine operations\n  // such as arithmetic and JSON stringification.\n  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;\n\n  _.prototype.toString = function() {\n    return String(this._wrapped);\n  };\n\n  // AMD registration happens at the end for compatibility with AMD loaders\n  // that may not enforce next-turn semantics on modules. Even though general\n  // practice for AMD registration is to be anonymous, underscore registers\n  // as a named module because, like jQuery, it is a base library that is\n  // popular enough to be bundled in a third party lib, but not be part of\n  // an AMD load request. Those cases could generate an error when an\n  // anonymous define() is called outside of a loader request.\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n      return _;\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  }\n}());\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"698d75b157f24ae829cc\"), __webpack_require__(/*! ./../webpack/buildin/module.js */ \"f586cf5b9f4b7719b2c1\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8e08e542008e4aef1f58\n");

/***/ }),

/***/ "a068bc6bc2489ee11341":
/*!*********************************************************!*\
  !*** ./src/vendor/Anakeen/DOCUMENT/IHM/smartElement.js ***!
  \*********************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var dcpDocument_document__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dcpDocument/document */ \"0b2f2c4ba8a17326d5a7\");\n/* harmony import */ var dcpDocument_document__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(dcpDocument_document__WEBPACK_IMPORTED_MODULE_0__);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYTA2OGJjNmJjMjQ4OWVlMTEzNDEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdmVuZG9yL0FuYWtlZW4vRE9DVU1FTlQvSUhNL3NtYXJ0RWxlbWVudC5qcz8xOGVjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBcImRjcERvY3VtZW50L2RvY3VtZW50XCI7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///a068bc6bc2489ee11341\n");

/***/ }),

/***/ "a903b12ace80b5b4ecce":
/*!***********************************************************!*\
  !*** ./src/vendor/Anakeen/DOCUMENT/IHM/widgets/widget.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*global define*/\n\n(function umdRequire(root, factory) {\n  \"use strict\";\n\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ \"127c8cf59f228bb01a21\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(window, function documentCatalog(jQuery) {\n  \"use strict\";\n\n  var ErrorNoSuchMethod = function widget_ErrorNoSuchMethod(message) {\n    this.name = \"noSuchMethodError\";\n    this.message = message || \"No such method for current widget instance\";\n  };\n\n  ErrorNoSuchMethod.prototype = Object.create(Error.prototype);\n  ErrorNoSuchMethod.prototype.constructor = ErrorNoSuchMethod;\n\n  (function widget_init($, undefined) {\n    var widgetUuid = 0,\n      slice = Array.prototype.slice,\n      _cleanData = $.cleanData;\n    $.cleanData = function widget_cleanData(elems) {\n      var events,\n        elem = null,\n        i;\n      for (i = 0, elem; (elem = elems[i]) != null; i++) {\n        // jshint ignore:line\n        try {\n          // Only trigger remove when necessary to save time\n          events = $._data(elem, \"events\");\n          if (events && events.remove) {\n            $(elem).triggerHandler(\"remove\");\n          }\n        } catch (e) {\n          //no test here\n        }\n      }\n      _cleanData(elems);\n    };\n\n    $.widget = function widget_initWidget(name, Base, prototype) {\n      var fullName,\n        existingConstructor,\n        Constructor,\n        basePrototype,\n        // proxiedPrototype allows the provided prototype to remain unmodified\n        // so that it can be used as a mixin for multiple widgets (#8876)\n        proxiedPrototype = {},\n        namespace = name.split(\".\")[0];\n\n      name = name.split(\".\")[1];\n      fullName = namespace + \"-\" + name;\n\n      if (!prototype) {\n        prototype = Base;\n        Base = $.Widget;\n      }\n\n      if ($.isArray(prototype)) {\n        prototype = $.extend.apply(null, [{}].concat(prototype));\n      }\n\n      // create selector for plugin\n      // $.expr[ \":\" ] is deprecated with jQuery 3.0.0+ in favor of $.expr.pseudos\n      // $.expr[ \":\" ][ fullName.toLowerCase() ] = function widget_createSelector(elem) {\n      //     return Boolean($(elem).data(fullName));\n      // };\n      $.expr.pseudos[fullName.toLowerCase()] = function widget_createSelector(\n        elem\n      ) {\n        return Boolean($(elem).data(fullName));\n      };\n\n      $[namespace] = $[namespace] || {};\n      existingConstructor = $[namespace][name];\n      Constructor = $[namespace][name] = function widget_Constructor(\n        options,\n        element\n      ) {\n        // allow instantiation without \"new\" keyword\n        if (!this._createWidget) {\n          return new Constructor(options, element);\n        }\n\n        // allow instantiation without initializing for simple inheritance\n        // must use \"new\" keyword (the code above always passes args)\n        if (arguments.length) {\n          this._createWidget(options, element);\n        }\n      };\n      // extend with the existing constructor to carry over any static properties\n      $.extend(Constructor, existingConstructor, {\n        version: prototype.version,\n        // copy the object used to create the prototype in case we need to\n        // redefine the widget later\n        _proto: $.extend({}, prototype),\n        // track widgets that inherit from this widget in case this widget is\n        // redefined after a widget inherits from it\n        _childConstructors: []\n      });\n\n      basePrototype = new Base();\n      // we need to make the options hash a property directly on the new instance\n      // otherwise we'll modify the options hash on the prototype that we're\n      // inheriting from\n      basePrototype.options = $.widget.extend({}, basePrototype.options);\n      $.each(prototype, function widget_proxiedElements(prop, value) {\n        if (!$.isFunction(value)) {\n          proxiedPrototype[prop] = value;\n          return;\n        }\n        proxiedPrototype[prop] = (function widget_proxiedProperties() {\n          var _super = function widget_super() {\n              return Base.prototype[prop].apply(this, arguments);\n            },\n            _superApply = function widget_superApply(args) {\n              return Base.prototype[prop].apply(this, args);\n            };\n          return function widget_proxied() {\n            var __super = this._super,\n              __superApply = this._superApply,\n              returnValue;\n\n            this._super = _super;\n            this._superApply = _superApply;\n\n            returnValue = value.apply(this, arguments);\n\n            this._super = __super;\n            this._superApply = __superApply;\n\n            return returnValue;\n          };\n        })();\n      });\n      Constructor.prototype = $.widget.extend(\n        basePrototype,\n        {},\n        proxiedPrototype,\n        {\n          constructor: Constructor,\n          namespace: namespace,\n          widgetName: name,\n          widgetFullName: fullName\n        }\n      );\n\n      // If this widget is being redefined then we need to find all widgets that\n      // are inheriting from it and redefine all of them so that they inherit from\n      // the new version of this widget. We're essentially trying to replace one\n      // level in the prototype chain.\n      if (existingConstructor) {\n        $.each(\n          existingConstructor._childConstructors,\n          function widget_existingConstructor(i, child) {\n            var childPrototype = child.prototype;\n\n            // redefine the child widget using the same prototype that was\n            // originally used, but inherit from the new version of the base\n            $.widget(\n              childPrototype.namespace + \".\" + childPrototype.widgetName,\n              Constructor,\n              child._proto\n            );\n          }\n        );\n        // remove the list of existing child constructors from the old constructor\n        // so the old child constructors can be garbage collected\n        delete existingConstructor._childConstructors;\n      } else {\n        Base._childConstructors.push(Constructor);\n      }\n\n      $.widget.bridge(name, Constructor);\n\n      return Constructor;\n    };\n\n    $.widget.extend = function widget_extend(target) {\n      var input = slice.call(arguments, 1),\n        inputIndex = 0,\n        inputLength = input.length,\n        key,\n        value;\n      for (; inputIndex < inputLength; inputIndex++) {\n        for (key in input[inputIndex]) {\n          // jshint ignore:line\n          //noinspection JSUnfilteredForInLoop\n          value = input[inputIndex][key];\n          if (input[inputIndex].hasOwnProperty(key) && value !== undefined) {\n            // Clone objects\n            if ($.isPlainObject(value)) {\n              target[key] = $.isPlainObject(target[key])\n                ? $.widget.extend({}, target[key], value)\n                : // Don't extend strings, arrays, etc. with objects\n                  $.widget.extend({}, value);\n              // Copy everything else by reference\n            } else {\n              target[key] = value;\n            }\n          }\n        }\n      }\n      return target;\n    };\n\n    $.widget.bridge = function widget_bridge(name, Object) {\n      var fullName = Object.prototype.widgetFullName || name;\n      $.fn[name] = function widget_callElement(options) {\n        var isMethodCall = typeof options === \"string\",\n          args = slice.call(arguments, 1),\n          returnValue = this;\n\n        // allow multiple hashes to be passed on init\n        options =\n          !isMethodCall && args.length\n            ? $.widget.extend.apply(null, [options].concat(args))\n            : options;\n\n        if (isMethodCall) {\n          this.each(function widget_eachMethodCall() {\n            var methodValue,\n              instance = $(this).data(fullName);\n            if (options === \"instance\") {\n              returnValue = instance;\n              return false;\n            }\n            if (!instance) {\n              return $.error(\n                \"cannot call methods on \" +\n                  name +\n                  \" prior to initialization; \" +\n                  \"attempted to call method '\" +\n                  options +\n                  \"'\"\n              );\n            }\n            if (!$.isFunction(instance[options]) || options.charAt(0) === \"_\") {\n              throw new ErrorNoSuchMethod(\n                \"no such method '\" +\n                  options +\n                  \"' for \" +\n                  name +\n                  \" widget instance\"\n              );\n            }\n            methodValue = instance[options].apply(instance, args);\n            if (methodValue !== instance && methodValue !== undefined) {\n              returnValue =\n                methodValue && methodValue.jquery\n                  ? returnValue.pushStack(methodValue.get())\n                  : methodValue;\n              return false;\n            }\n          });\n        } else {\n          // Allow multiple hashes to be passed on init\n          if (args.length) {\n            options = $.widget.extend.apply(null, [options].concat(args));\n          }\n\n          this.each(function widget_eachDataCall() {\n            var instance = $(this).data(fullName);\n            if (instance) {\n              instance.option(options || {})._init();\n            } else {\n              $(this).data(fullName, new Object(options, this));\n            }\n          });\n        }\n\n        return returnValue;\n      };\n    };\n\n    $.Widget = function widget_Widget(/* options, element */) {};\n    $.Widget._childConstructors = [];\n\n    $.Widget.prototype = {\n      widgetName: \"widget\",\n      defaultElement: \"<div>\",\n      options: {\n        classes: {},\n        disabled: false,\n        eventPrefix: null,\n        // callbacks\n        create: null\n      },\n      _createWidget: function widget_createWidget(options, element) {\n        element = $(element || this.defaultElement || this)[0];\n        this.element = $(element);\n        this.uuid = widgetUuid++;\n        this.eventNamespace = \".\" + this.widgetName + this.uuid;\n        this.options = $.widget.extend(\n          {},\n          this.options,\n          this._getCreateOptions(),\n          options\n        );\n\n        this.bindings = $();\n        this.classesElementLookup = {};\n        if (this.options.eventPrefix === null) {\n          this.options.eventPrefix = this.widgetName;\n        }\n\n        if (element !== this) {\n          $(element).data(this.widgetFullName, this);\n          this._on(true, this.element, {\n            remove: function widget_remove(event) {\n              if (event.target === element) {\n                this.destroy();\n              }\n            }\n          });\n          this.document = $(\n            element.style\n              ? // element within the document\n                element.ownerDocument\n              : // element is window or document\n                element.document || element\n          );\n          this.window = $(\n            this.document[0].defaultView || this.document[0].parentWindow\n          );\n        }\n        this.options = $.widget.extend(\n          {},\n          this.options,\n          this._getCreateOptions(),\n          options\n        );\n\n        this._create();\n\n        if (this.options.disabled) {\n          this._setOptionDisabled(this.options.disabled);\n        }\n\n        this._trigger(\"create\", null, this._getCreateEventData());\n        this._init();\n      },\n      _getCreateOptions: function widget_getCreateOptions() {\n        return {};\n      },\n      _getCreateEventData: $.noop,\n      _create: $.noop,\n      _init: $.noop,\n\n      destroy: function widget_destroy() {\n        var that = this;\n\n        this._destroy();\n        $.each(this.classesElementLookup, function widget_destroyClass(\n          key,\n          value\n        ) {\n          that._removeClass(value, key);\n        });\n\n        // We can probably remove the unbind calls in 2.0\n        // all event bindings should go through this._on()\n        this.element.off(this.eventNamespace).removeData(this.widgetFullName);\n        this.widget()\n          .off(this.eventNamespace)\n          .removeAttr(\"aria-disabled\");\n\n        // Clean up events and states\n        this.bindings.off(this.eventNamespace);\n      },\n      _destroy: $.noop,\n\n      widget: function widget_widget() {\n        return this.element;\n      },\n\n      option: function widget_option(key, value) {\n        var options = key,\n          parts,\n          curOption,\n          i;\n\n        if (arguments.length === 0) {\n          // don't return a reference to the internal hash\n          return $.widget.extend({}, this.options);\n        }\n\n        if (typeof key === \"string\") {\n          // handle nested keys, e.g., \"foo.bar\" => { foo: { bar: ___ } }\n          options = {};\n          parts = key.split(\".\");\n          key = parts.shift();\n          if (parts.length) {\n            curOption = options[key] = $.widget.extend({}, this.options[key]);\n            for (i = 0; i < parts.length - 1; i++) {\n              curOption[parts[i]] = curOption[parts[i]] || {};\n              curOption = curOption[parts[i]];\n            }\n            key = parts.pop();\n            if (arguments.length === 1) {\n              return curOption[key] === undefined ? null : curOption[key];\n            }\n            curOption[key] = value;\n          } else {\n            if (arguments.length === 1) {\n              return this.options[key] === undefined ? null : this.options[key];\n            }\n            options[key] = value;\n          }\n        }\n\n        this._setOptions(options);\n\n        return this;\n      },\n      _setOptions: function widget__setOptions(options) {\n        var key;\n\n        for (key in options) {\n          // jshint ignore:line\n          //noinspection JSUnfilteredForInLoop\n          this._setOption(key, options[key]);\n        }\n\n        return this;\n      },\n      _setOption: function widget__setOption(key, value) {\n        this.options[key] = value;\n\n        return this;\n      },\n\n      _setOptionClasses: function widget__setOptionClasses(value) {\n        var classKey, elements, currentElements;\n\n        for (classKey in value) {\n          // jshint ignore:line\n          //noinspection JSUnfilteredForInLoop\n          currentElements = this.classesElementLookup[classKey];\n          //noinspection JSUnfilteredForInLoop\n          if (\n            value[classKey] === this.options.classes[classKey] ||\n            !currentElements ||\n            !currentElements.length\n          ) {\n            continue;\n          }\n\n          // We are doing this to create a new jQuery object because the _removeClass() call\n          // on the next line is going to destroy the reference to the current elements being\n          // tracked. We need to save a copy of this collection so that we can add the new classes\n          // below.\n          elements = $(currentElements.get());\n          //noinspection JSUnfilteredForInLoop\n          this._removeClass(currentElements, classKey);\n\n          // We don't use _addClass() here, because that uses this.options.classes\n          // for generating the string of classes. We want to use the value passed in from\n          // _setOption(), this is the new value of the classes option which was passed to\n          // _setOption(). We pass this value directly to _classes().\n          //noinspection JSUnfilteredForInLoop\n          elements.addClass(\n            this._classes({\n              element: elements,\n              keys: classKey,\n              classes: value,\n              add: true\n            })\n          );\n        }\n      },\n\n      _classes: function widget__classes(options) {\n        var full = [];\n        var that = this,\n          processClassString;\n\n        options = $.extend(\n          {\n            element: this.element,\n            classes: this.options.classes || {}\n          },\n          options\n        );\n\n        processClassString = function widget_processClassString(\n          classes,\n          checkOption\n        ) {\n          var current, i;\n          for (i = 0; i < classes.length; i++) {\n            current = that.classesElementLookup[classes[i]] || $();\n            if (options.add) {\n              // unique is deprecated in jQuery 3.0.0+ renamed to uniqueSort\n              var jqueryVersion = +$().jquery.split(\".\")[0];\n              if (jqueryVersion >= 3) {\n                current = $(\n                  $.uniqueSort(current.get().concat(options.element.get()))\n                );\n              } else {\n                current = $(\n                  $.unique(current.get().concat(options.element.get()))\n                );\n              }\n            } else {\n              current = $(current.not(options.element).get());\n            }\n            that.classesElementLookup[classes[i]] = current;\n            full.push(classes[i]);\n            if (checkOption && options.classes[classes[i]]) {\n              full.push(options.classes[classes[i]]);\n            }\n          }\n        };\n\n        if (options.keys) {\n          processClassString(options.keys.match(/\\S+/g) || [], true);\n        }\n        if (options.extra) {\n          processClassString(options.extra.match(/\\S+/g) || []);\n        }\n\n        return full.join(\" \");\n      },\n\n      _removeClass: function widget__removeClass(element, keys, extra) {\n        return this._toggleClass(element, keys, extra, false);\n      },\n\n      _addClass: function widget__addClass(element, keys, extra) {\n        return this._toggleClass(element, keys, extra, true);\n      },\n\n      _toggleClass: function widget__toggleClass(element, keys, extra, add) {\n        add = typeof add === \"boolean\" ? add : extra;\n        var shift = typeof element === \"string\" || element === null,\n          options = {\n            extra: shift ? keys : extra,\n            keys: shift ? element : keys,\n            element: shift ? this.element : element,\n            add: add\n          };\n        options.element.toggleClass(this._classes(options), add);\n        return this;\n      },\n\n      _on: function widget__on(suppressDisabledCheck, element, handlers) {\n        var delegateElement,\n          instance = this;\n\n        // no suppressDisabledCheck flag, shuffle arguments\n        if (typeof suppressDisabledCheck !== \"boolean\") {\n          handlers = element;\n          element = suppressDisabledCheck;\n          //suppressDisabledCheck = false;\n        }\n\n        // no element argument, shuffle and use this.element\n        if (!handlers) {\n          handlers = element;\n          element = this.element;\n          delegateElement = this.widget();\n        } else {\n          // accept selectors, DOM elements\n          element = delegateElement = $(element);\n          this.bindings = this.bindings.add(element);\n        }\n\n        $.each(handlers, function widget_iterateHandler(event, handler) {\n          var handlerProxy = function handlerProxy() {\n            // allow widgets to customize the disabled handling\n            // - disabled as an array instead of boolean\n            // - disabled class as method for disabling individual parts\n            return (typeof handler === \"string\"\n              ? instance[handler]\n              : handler\n            ).apply(instance, arguments);\n          };\n\n          // copy the guid so direct unbinding works\n          if (typeof handler !== \"string\") {\n            handlerProxy.guid = handler.guid =\n              handler.guid || handlerProxy.guid || $.guid++;\n          }\n\n          var match = event.match(/^(\\w+)\\s*(.*)$/),\n            eventName = match[1] + instance.eventNamespace,\n            selector = match[2];\n          // delegate is deprecated in jQuery 3.0.0+ in favor of on method\n          var jqueryVersion = +$().jquery.split(\".\")[0];\n          if (selector) {\n            if (jqueryVersion >= 3) {\n              delegateElement.on(eventName, selector, handlerProxy);\n            } else {\n              delegateElement.delegate(selector, eventName, handlerProxy);\n            }\n          } else {\n            // bind is deprecated in jQuery 3.0.0+ in favor of on method\n            if (jqueryVersion >= 3) {\n              element.on(eventName, handlerProxy);\n            } else {\n              element.bind(eventName, handlerProxy);\n            }\n          }\n        });\n      },\n\n      _off: function widget__off(element, eventName) {\n        eventName =\n          (eventName || \"\").split(\" \").join(this.eventNamespace + \" \") +\n          this.eventNamespace;\n        element.unbind(eventName).undelegate(eventName);\n      },\n\n      _delay: function widget__delay(handler, delay) {\n        var handlerProxy = function handlerProxy() {\n          return (typeof handler === \"string\"\n            ? instance[handler]\n            : handler\n          ).apply(instance, arguments);\n        };\n\n        var instance = this;\n        return setTimeout(handlerProxy, delay || 0);\n      },\n\n      _trigger: function widget__trigger(type, event, data) {\n        var prop,\n          orig,\n          callback = this.options[type];\n\n        data = data || {};\n        event = $.Event(event);\n        event.type = this.options.eventPrefix\n          ? this.options.eventPrefix + type\n          : type;\n        event.type = event.type.toLocaleLowerCase();\n        // the original event may come from any element\n        // so we need to reset the target on the new event\n        event.target = this.element[0];\n\n        // copy original event properties over to the new event\n        orig = event.originalEvent;\n        if (orig) {\n          for (prop in orig) {\n            // jshint ignore:line\n            if (!(prop in event)) {\n              //noinspection JSUnfilteredForInLoop\n              event[prop] = orig[prop];\n            }\n          }\n        }\n\n        this.element.trigger(event, data);\n        return !(\n          ($.isFunction(callback) &&\n            callback.apply(this.element[0], [event].concat(data)) === false) ||\n          event.isDefaultPrevented()\n        );\n      }\n    };\n  })(jQuery);\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///a903b12ace80b5b4ecce\n");

/***/ }),

/***/ "f586cf5b9f4b7719b2c1":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZjU4NmNmNWI5ZjRiNzcxOWIyYzEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzP2NlZDIiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtb2R1bGUpIHtcblx0aWYgKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0bW9kdWxlLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKCkge307XG5cdFx0bW9kdWxlLnBhdGhzID0gW107XG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHR9XG5cdHJldHVybiBtb2R1bGU7XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///f586cf5b9f4b7719b2c1\n");

/***/ })

/******/ });