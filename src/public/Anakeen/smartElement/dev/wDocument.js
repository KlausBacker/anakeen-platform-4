(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["wDocument"],{

/***/ "0b2f2c4ba8a17326d5a7":
/*!*****************************************************!*\
  !*** ./src/vendor/Anakeen/DOCUMENT/IHM/document.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*global define, console*/\n(function umdRequire(root, factory) {\n  \"use strict\";\n\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ \"127c8cf59f228bb01a21\"), __webpack_require__(/*! underscore */ \"8e08e542008e4aef1f58\"), __webpack_require__(/*! dcpDocument/widgets/widget */ \"a903b12ace80b5b4ecce\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(window, function require_document($, _) {\n  \"use strict\";\n\n  var eventList = [\n    \"beforeRender\",\n    \"ready\",\n    \"change\",\n    \"displayMessage\",\n    \"displayError\",\n    \"validate\",\n    \"attributeBeforeRender\",\n    \"attributeReady\",\n    \"attributeHelperSearch\",\n    \"attributeHelperResponse\",\n    \"attributeHelperSelect\",\n    \"attributeArrayChange\",\n    \"actionClick\",\n    \"attributeAnchorClick\",\n    \"beforeClose\",\n    \"close\",\n    \"beforeSave\",\n    \"afterSave\",\n    \"attributeDownloadFile\",\n    \"attributeUploadFile\",\n    \"attributeUploadFileDone\",\n    \"beforeDelete\",\n    \"afterDelete\",\n    \"beforeRestore\",\n    \"afterRestore\",\n    \"attributeBeforeTabSelect\",\n    \"attributeAfterTabSelect\",\n    \"attributeTabChange\",\n    \"failTransition\",\n    \"successTransition\",\n    \"beforeDisplayTransition\",\n    \"afterDisplayTransition\",\n    \"beforeTransition\",\n    \"beforeTransitionClose\",\n    \"destroy\",\n    \"attributeCreateDialogDocumentBeforeSetFormValues\",\n    \"attributeCreateDialogDocumentBeforeSetTargetValue\",\n    \"attributeCreateDialogDocumentReady\",\n    \"attributeCreateDialogDocumentBeforeClose\",\n    \"attributeCreateDialogDocumentBeforeDestroy\"\n  ];\n\n  //Create a new kind of event\n  var ErrorNotLoaded = function dcpDocument_ErrorNotLoaded(message) {\n    this.name = \"WidgetDocumentNotLoaded\";\n    this.message =\n      message ||\n      \"The document widget is not loaded, wait for the documentloaded event\";\n  };\n  ErrorNotLoaded.prototype = Object.create(Error.prototype);\n  ErrorNotLoaded.prototype.constructor = ErrorNotLoaded;\n\n  $.widget(\"dcp.document\", {\n    _template: _.template(\n      '<iframe class=\"dcpDocumentWrapper\" name=\"<%- options.iframeName %>\" style=\"border : 0;\" data-src=\"<%- base %>api/v2/documents/0.html#widgetValue<%- options.json_encode %>\"></iframe>'\n    ),\n\n    defaults: {\n      resizeMarginHeight: 3,\n      resizeMarginWidth: 0,\n      resizeDebounceTime: 50,\n      withoutResize: false,\n      iframeName: _.uniqueId(\"documentFrame\"),\n      noRouter: true,\n      eventPrefix: \"document\"\n    },\n\n    /**\n     * Create the widget\n     *\n     * Check if initid is present\n     */\n    _create: function dcpDocument_create() {\n      this.options = _.extend({}, this.defaults, this.options);\n      this.options.eventListener = {};\n      this.options.constraintList = {};\n      this.options.cssToInject = [];\n      this.options.jsToInject = [];\n      this._render();\n      this._bindEvents();\n    },\n\n    /**\n     * Create the iframe with the content and register to load event\n     */\n    _render: function dcpDocument_render() {\n      var $iframe,\n        currentWidget = this,\n        documentWindow,\n        options_encode;\n      //inject the iframe\n      options_encode = JSON.stringify(\n        _.omit(\n          this.options,\n          \"resizeMarginHeight\",\n          \"resizeMarginWidth\",\n          \"resizeDebounceTime\",\n          \"withoutResize\",\n          \"iframeName\",\n          \"eventPrefix\",\n          \"eventListener\",\n          \"constraintList\"\n        )\n      );\n      this.element.empty().append(\n        this._template({\n          options: {\n            iframeName: this.options.iframeName,\n            json_encode: options_encode\n          },\n          base: $(\"base\").attr(\"href\") || \"\"\n        })\n      );\n      //bind the internal controller to the documentWidget\n      $iframe = this.element.find(\".dcpDocumentWrapper\");\n      //Listen the load to the iframe (initial JS added and page loaded)\n\n      if ($iframe.length > 0) {\n        documentWindow = $iframe[0].contentWindow;\n        //Use this way to set url for firefox (when the document is in iframe in another document)\n        documentWindow.location.href = $iframe.data(\"src\");\n        // This event is used when use a hard link (aka href anchor) to change document\n        // It is load also the first time\n        $iframe.on(\"load\", function dcpDocument_setReadyEvent() {\n          documentWindow.documentLoaded = function dcpDocument_loadedCallback(\n            domNode,\n            viewData\n          ) {\n            // Re Bind the internalController function to the current widget\n            currentWidget._bindInternalWidget.call(\n              currentWidget,\n              domNode.data(\"dcpDocumentController\"),\n              viewData\n            );\n            // voidLoaded is true when document 0 is loaded\n            currentWidget.element.data(\n              \"voidLoaded\",\n              !viewData || !viewData.initid\n            );\n          };\n\n          $(documentWindow).on(\"unload\", function dcpDocument_setUnloadEvent() {\n            currentWidget._unbindInternalWidget.call(currentWidget);\n          });\n          if (\n            documentWindow.dcp &&\n            documentWindow.dcp.triggerReload &&\n            documentWindow.dcp.documentReady === false\n          ) {\n            documentWindow.dcp.triggerReload();\n          }\n        });\n      }\n      this._resize();\n    },\n\n    /**\n     * Suppress internal widget reference\n     */\n    _unbindInternalWidget: function dcpDocument_unbindInternalWidget() {\n      this.element.data(\"internalWidgetInitialised\", false);\n      this.element.data(\"internalWidget\", false);\n      this._trigger(\"internalWidgetUnloaded\");\n      this._trigger(\"unloaded\");\n    },\n\n    rebindEvents: function dcpDocument_rebindEvents() {\n      var internalController = this.element.data(\"internalWidget\");\n      if (internalController) {\n        //Rebind event\n        _.each(this.options.eventListener, function dcpDocument_bindEvent(\n          currentEvent\n        ) {\n          internalController.addEventListener(currentEvent);\n        });\n        //Rebind constraint\n        _.each(this.options.constraintList, function dcpDocument_bindEvent(\n          currentConstaint\n        ) {\n          internalController.addConstraint(currentConstaint);\n        });\n      }\n    },\n\n    reinjectCSSAndJS: function dcpDocument_reinjectCSSAndJS() {\n      var internalController = this.element.data(\"internalWidget\");\n      if (internalController) {\n        try {\n          internalController.injectCSS(this.options.cssToInject);\n          internalController.injectJS(this.options.jsToInject);\n        } catch (e) {\n          console.error(e);\n        }\n      }\n    },\n\n    /**\n     * Bind the internal controller to the current widget\n     * Reinit the constraint and the event\n     *\n     * @param internalController\n     * @param voidLoaded\n     */\n    _bindInternalWidget: function dcpDocument_bindInternalWidget(\n      internalController,\n      voidLoaded\n    ) {\n      this.element.data(\"internalWidget\", internalController);\n      if (!voidLoaded) {\n        this.rebindEvents();\n        this.reinjectCSSAndJS();\n      }\n      this.element.data(\"internalWidgetInitialised\", true);\n      if (voidLoaded) {\n        this._trigger(\"loaded\", {}, { isEmpty: true });\n        return this;\n      }\n      this._trigger(\"loaded\");\n      return this;\n    },\n\n    /**\n     * Add resize event\n     */\n    _bindEvents: function dcpDocument_bindEvents() {\n      if (!this.options.withoutResize) {\n        $(window).on(\n          \"resize\" + this.eventNamespace,\n          _.debounce(\n            _.bind(this._resize, this),\n            parseInt(this.options.resizeDebounceTime, 10)\n          )\n        );\n        this._resize();\n      }\n    },\n\n    /**\n     * Compute the size of the widget\n     */\n    _resize: function dcpDocument_resize() {\n      var event = this._trigger(\"autoresize\"),\n        $documentWrapper = this.element.find(\".dcpDocumentWrapper\"),\n        currentWidget = this,\n        element = this.element;\n      //the computation can be done by an external function and default prevented\n      if (!this.options.withoutResize && event) {\n        //compute two times height (one for disapear horizontal scrollbar, two to get the actual size)\n        //noinspection JSValidateTypes\n        $documentWrapper.height(\n          element.innerHeight() -\n            parseInt(currentWidget.options.resizeMarginHeight, 10)\n        );\n        //noinspection JSValidateTypes\n        $documentWrapper.width(\n          element.innerWidth() -\n            parseInt(currentWidget.options.resizeMarginWidth, 10)\n        );\n        //defer height computation to let the time to scrollbar disapear\n        _.defer(function dcpDocument_computeHeight() {\n          //noinspection JSValidateTypes\n          $documentWrapper.height(\n            element.innerHeight() -\n              parseInt(currentWidget.options.resizeMarginHeight, 10)\n          );\n        });\n      }\n    },\n\n    tryToDestroy: function dcpDocument_tryToDestroy() {\n      var currentWidget = this;\n      return new Promise(function dcpDocument_tryToDestroy_promise(\n        resolve,\n        reject\n      ) {\n        var internalWidget;\n        if (currentWidget.isLoaded()) {\n          internalWidget = currentWidget.element.data(\"internalWidget\");\n          internalWidget\n            .tryToDestroy()\n            .then(function dcpDocument_destroy_then() {\n              resolve();\n              currentWidget._destroy();\n            })\n            .catch(function dcpDocument_destroy_catch(errorMessage) {\n              reject(errorMessage);\n            });\n          return;\n        }\n        resolve();\n        currentWidget._destroy();\n      });\n    },\n\n    /**\n     * Destroy the widget\n     */\n    _destroy: function dcpDocument_destroy() {\n      $(window).off(this.eventNamespace);\n      this.element.empty();\n      this._unbindInternalWidget();\n      this._trigger(\"destroy\");\n      this._super();\n    },\n\n    /**\n     * Check if event name is valid\n     *\n     * @param eventName string\n     * @private\n     */\n    _checkEventName: function documentController_checkEventName(eventName) {\n      if (\n        _.isString(eventName) &&\n        (eventName.indexOf(\"custom:\") === 0 ||\n          _.find(eventList, function documentController_CheckEventType(\n            currentEventType\n          ) {\n            return currentEventType === eventName;\n          }))\n      ) {\n        return true;\n      }\n      throw new Error(\n        \"The event type \" +\n          eventName +\n          \" is not known. It must be one of \" +\n          eventList.join(\" ,\")\n      );\n    },\n\n    /**\n     * Update options\n     */\n    options: function dcpDocument_options() {\n      throw new Error(\n        \"You cannot modify the options, you need to suppress the widget\"\n      );\n    },\n\n    /**\n     * Fetch a new document\n     *\n     * Use internal controller if ready\n     * Re-render the widget if internal is not ready\n     *\n     * @param values\n     * @param options\n     */\n    fetchDocument: function dcpDocument_fetchDocument(values, options) {\n      var internalWidget,\n        currentWidget = this,\n        fetchPromise = null,\n        initWidget = function dpcDocument_successWidget() {\n          currentWidget.rebindEvents.call(currentWidget);\n          currentWidget.element.data(\"voidLoaded\", false);\n        };\n      options = options || {};\n\n      if (!values.initid) {\n        throw new Error(\"You need to set the initid to fetch the document\");\n      }\n      _.each(\n        _.pick(values, \"initid\", \"revision\", \"viewId\", \"customClientData\"),\n        function dcpDocument_setNewOptions(value, key) {\n          currentWidget.options[key] = value;\n        }\n      );\n\n      if (this.element.data(\"internalWidgetInitialised\")) {\n        internalWidget = this.element.data(\"internalWidget\");\n\n        if (options.success) {\n          // @deprecated : use promise instead\n          options.success = _.wrap(\n            options.success,\n            function dcpDocument_success(success) {\n              initWidget.apply(this, _.rest(arguments));\n              return success.apply(this, _.rest(arguments));\n            }\n          );\n        }\n        if (options.error) {\n          // @deprecated : use promise instead\n          options.error = _.wrap(options.error, function dcpDocument_error(\n            error\n          ) {\n            initWidget.apply(this, _.rest(arguments));\n            return error.apply(this, _.rest(arguments));\n          });\n        }\n        fetchPromise = internalWidget.fetchDocument.call(\n          internalWidget,\n          values,\n          options\n        );\n\n        if (!options.success) {\n          fetchPromise.then(initWidget);\n        }\n        if (!options.error) {\n          fetchPromise.catch(initWidget);\n        }\n        return fetchPromise;\n      } else {\n        this._render();\n      }\n    },\n\n    /**\n     * Add a new external event\n     * The event is added in the widget and is auto-rebinded when the internal widget is reloaded\n     *\n     * @param eventType string|object type of the widget or an object event\n     * @param options object|function conf of the event or callback\n     * @param callback function callback\n     * @returns {*}\n     */\n    addEventListener: function dcpDocument_addEventListener(\n      eventType,\n      options,\n      callback\n    ) {\n      var currentEvent,\n        currentWidget = this;\n      if (_.isUndefined(callback) && _.isFunction(options)) {\n        callback = options;\n        options = {};\n      }\n      // the first parameters can be the final object (chain removeEvent and addEvent)\n      if (\n        _.isObject(eventType) &&\n        _.isUndefined(options) &&\n        _.isUndefined(callback)\n      ) {\n        currentEvent = eventType;\n        if (!currentEvent.name) {\n          throw new Error(\n            \"When an event is initiated with a single object, this object needs to have the name property \".JSON.stringify(\n              currentEvent\n            )\n          );\n        }\n      } else {\n        currentEvent = _.defaults(options, {\n          name: _.uniqueId(\"event_\" + eventType),\n          eventType: eventType,\n          eventCallback: callback,\n          externalEvent: true,\n          once: false\n        });\n      }\n      // the eventType must be one the list\n      this._checkEventName(currentEvent.eventType);\n      if (currentEvent.once === true) {\n        currentEvent.eventCallback = _.wrap(\n          currentEvent.eventCallback,\n          function dcpDocument_onceWrapper(callback) {\n            try {\n              callback.apply(this, _.rest(arguments));\n            } catch (e) {\n              console.error(e);\n            }\n            currentWidget.removeEventListener(currentEvent.name);\n          }\n        );\n      }\n      //Remove once property because already wrapped\n      currentEvent.once = false;\n      this.options.eventListener[currentEvent.name] = currentEvent;\n      if (\n        this.element.data(\"internalWidgetInitialised\") &&\n        !this.element.data(\"voidLoaded\")\n      ) {\n        this.element.data(\"internalWidget\").addEventListener(currentEvent);\n      }\n      return currentEvent.name;\n    },\n\n    /**\n     * List of the events of the current widget\n     *\n     * @returns {*}\n     */\n    listEventListeners: function documentControllerListEvents() {\n      if (\n        this.element.data(\"internalWidgetInitialised\") &&\n        !this.element.data(\"voidLoaded\")\n      ) {\n        return this.element.data(\"internalWidget\").listEventListeners();\n      } else {\n        return this.options.eventListener;\n      }\n    },\n\n    /**\n     * Remove the event of the widget list and the internal list (if internal is ready)\n     *\n     * @param eventName\n     * @returns {Array}\n     */\n    removeEventListener: function dcpDocument_removeEventListener(eventName) {\n      var removed = [],\n        testRegExp = new RegExp(\"\\\\\" + eventName + \"$\"),\n        newList,\n        eventList;\n      newList = _.filter(\n        this.options.eventListener,\n        function dcpDocument_removeCurrentEvent(currentEvent) {\n          if (\n            currentEvent.name === eventName ||\n            testRegExp.test(currentEvent.name)\n          ) {\n            removed.push(currentEvent);\n            return false;\n          }\n          return true;\n        }\n      );\n      eventList = {};\n      _.each(newList, function dcp_documentIterateEach(currentEvent) {\n        eventList[currentEvent.name] = currentEvent;\n      });\n      this.options.eventListener = eventList;\n      if (\n        this.element.data(\"internalWidgetInitialised\") &&\n        !this.element.data(\"voidLoaded\")\n      ) {\n        this.element\n          .data(\"internalWidget\")\n          .removeEventListener(eventName, true);\n      }\n      return removed;\n    },\n\n    /**\n     * Add a constraint\n     * The constraint is added in the widget and is auto-rebinded when the internal widget is reloaded\n     *\n     * @param options\n     * @param callback\n     * @returns {*}\n     */\n    addConstraint: function dcpDocument_addConstraint(options, callback) {\n      var parameters,\n        currentWidget = this;\n      if (_.isUndefined(callback) && _.isFunction(options)) {\n        callback = options;\n        options = {};\n      }\n      if (_.isObject(options) && _.isUndefined(callback)) {\n        if (!options.name) {\n          throw new Error(\n            \"When a constraint is initiated with a single object, this object needs to have the name property \".JSON.stringify(\n              options\n            )\n          );\n        }\n      } else {\n        parameters = _.defaults(options, {\n          documentCheck: function dcpDocument_defaultDocumentCheck() {\n            return true;\n          },\n          attributeCheck: function dcpDocument_defaultAttributeCheck() {\n            return true;\n          },\n          constraintCheck: callback,\n          name: _.uniqueId(\"constraint\"),\n          externalConstraint: false,\n          once: false\n        });\n      }\n      if (!_.isFunction(parameters.constraintCheck)) {\n        throw new Error(\"An event need a callback\");\n      }\n      if (parameters.once === true) {\n        parameters.eventCallback = _.wrap(\n          parameters.constraintCheck,\n          function dcpDocument_onceWrapper(callback) {\n            try {\n              callback.apply(this, _.rest(arguments));\n            } catch (e) {\n              console.error(e);\n            }\n            currentWidget.removeConstraint(\n              parameters.name,\n              parameters.externalConstraint\n            );\n          }\n        );\n      }\n      this.options.constraintList[parameters.name] = parameters;\n      if (\n        this.element.data(\"internalWidgetInitialised\") &&\n        !this.element.data(\"voidLoaded\")\n      ) {\n        this.element.data(\"internalWidget\").addConstraint(parameters);\n      }\n      return parameters.name;\n    },\n    /**\n     * List the constraint of the widget\n     *\n     * @returns {*}\n     */\n    listConstraints: function documentControllerListConstraint() {\n      if (\n        this.element.data(\"internalWidgetInitialised\") &&\n        !this.element.data(\"voidLoaded\")\n      ) {\n        return this.element.data(\"internalWidget\").listConstraints();\n      } else {\n        return this.options.constraintList;\n      }\n    },\n    /**\n     * Remove the constraint of the widget\n     *\n     * @param constraintName\n     * @returns {Array}\n     */\n    removeConstraint: function dcpDocument_removeConstraint(constraintName) {\n      var removed = [],\n        newConstraintList,\n        constraintList,\n        testRegExp = new RegExp(\"\\\\\" + constraintName + \"$\");\n      newConstraintList = _.filter(\n        this.options.constraintList,\n        function dcpDocument_removeConstraint(currentConstraint) {\n          if (\n            currentConstraint.name === constraintName ||\n            testRegExp.test(currentConstraint.name)\n          ) {\n            removed.push(currentConstraint);\n            return false;\n          }\n          return true;\n        }\n      );\n      constraintList = {};\n      _.each(newConstraintList, function dcpDocument_reinitConstraint(\n        currentConstraint\n      ) {\n        constraintList[currentConstraint.name] = currentConstraint;\n      });\n      this.options.constraintList = constraintList;\n      if (\n        this.element.data(\"internalWidgetInitialised\") &&\n        !this.element.data(\"voidLoaded\")\n      ) {\n        this.element\n          .data(\"internalWidget\")\n          .removeConstraint(constraintName, true);\n      }\n      return removed;\n    },\n\n    isLoaded: function dcpDocument_isLoaded() {\n      return (\n        this.element.data(\"internalWidgetInitialised\") &&\n        !this.element.data(\"voidLoaded\")\n      );\n    },\n\n    injectCSS: function documentController_injectCSS(cssToInject) {\n      if (!_.isArray(cssToInject) && !_.isString(cssToInject)) {\n        throw new Error(\n          \"The css to inject must be an array string or a string\"\n        );\n      }\n      if (_.isString(cssToInject)) {\n        cssToInject = [cssToInject];\n      }\n\n      this.options.cssToInject = _.union(this.options.cssToInject, cssToInject);\n\n      if (\n        this.element.data(\"internalWidgetInitialised\") &&\n        !this.element.data(\"voidLoaded\")\n      ) {\n        this.element.data(\"internalWidget\").injectCSS(cssToInject);\n      }\n    },\n\n    injectJS: function documentController_injectCSS(jsToInject) {\n      if (!_.isArray(jsToInject) && !_.isString(jsToInject)) {\n        throw new Error(\"The js to inject must be an array string or a string\");\n      }\n      if (_.isString(jsToInject)) {\n        jsToInject = [jsToInject];\n      }\n\n      this.options.jsToInject = _.union(this.options.jsToInject, jsToInject);\n\n      if (\n        this.element.data(\"internalWidgetInitialised\") &&\n        !this.element.data(\"voidLoaded\")\n      ) {\n        this.element.data(\"internalWidget\").injectJS(jsToInject);\n      }\n    }\n  });\n\n  //noinspection JSValidateJSDoc\n  /**\n   * Wrap the bridge that find the function to be executed\n   * Search in the current widget if the function is here\n   * Search in the internal widget (if ready to find the widget)\n   *\n   * @type {Function|function(): Function|function(): _Chain<T>|*}\n   */\n  //noinspection JSUnresolvedVariable\n  $.fn.document = _.wrap($.fn.document, function dcpDocument_wrap(\n    initialDocumentBridge,\n    methodName\n  ) {\n    // jshint ignore:line\n    var isMethodCall, internalWidget;\n    try {\n      return initialDocumentBridge.apply(this, _.rest(arguments));\n    } catch (error) {\n      if (error.name === \"noSuchMethodError\") {\n        isMethodCall = typeof methodName === \"string\";\n        if (isMethodCall && !this.data(\"internalWidgetInitialised\")) {\n          throw new ErrorNotLoaded();\n        }\n        internalWidget = this.data(\"internalWidget\");\n        if (\n          _.isFunction(internalWidget[methodName]) &&\n          methodName.charAt(0) !== \"_\"\n        ) {\n          return internalWidget[methodName].apply(\n            internalWidget,\n            _.rest(arguments, 2)\n          );\n        }\n      }\n      throw error;\n    }\n  });\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0b2f2c4ba8a17326d5a7\n");

/***/ })

}]);