/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/Anakeen/smartStructures/dev/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 3);
/******/ })
/************************************************************************/
/******/ ({

/***/ "04065e00ab361f322eef":
/*!**************************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/kendo.treeview.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1339);\n\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function() { throw new Error(\"define cannot be used indirect\"); };\r\n\n\n/***/ }),\n\n/***/ 1003:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! jquery */ \"127c8cf59f228bb01a21\");\n\n/***/ }),\n\n/***/ 1013:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.data */ \"f78db54954381e284430\");\n\n/***/ }),\n\n/***/ 1338:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.treeview.draganddrop */ \"52de5ccd30df4e157d32\");\n\n/***/ }),\n\n/***/ 1339:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(jQuery) {(function(f, define){\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(1013), __webpack_require__(1338) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t})(function(){\n\n\tvar __meta__ = { // jshint ignore:line\n\t    id: \"treeview\",\n\t    name: \"TreeView\",\n\t    category: \"web\",\n\t    description: \"The TreeView widget displays hierarchical data in a traditional tree structure,with support for interactive drag-and-drop operations.\",\n\t    depends: [ \"data\" ],\n\t    features: [{\n\t        id: \"treeview-dragging\",\n\t        name: \"Drag & Drop\",\n\t        description: \"Support for drag & drop\",\n\t        depends: [ \"treeview.draganddrop\" ]\n\t    }]\n\t};\n\n\t/*jshint eqnull: true */\n\t(function($, undefined){\n\t    var kendo = window.kendo,\n\t        ui = kendo.ui,\n\t        data = kendo.data,\n\t        extend = $.extend,\n\t        template = kendo.template,\n\t        isArray = $.isArray,\n\t        Widget = ui.Widget,\n\t        HierarchicalDataSource = data.HierarchicalDataSource,\n\t        proxy = $.proxy,\n\t        keys = kendo.keys,\n\t        NS = \".kendoTreeView\",\n\t        TEMP_NS = \".kendoTreeViewTemp\",\n\t        SELECT = \"select\",\n\t        CHECK = \"check\",\n\t        NAVIGATE = \"navigate\",\n\t        EXPAND = \"expand\",\n\t        CHANGE = \"change\",\n\t        ERROR = \"error\",\n\t        CHECKED = \"checked\",\n\t        INDETERMINATE = \"indeterminate\",\n\t        COLLAPSE = \"collapse\",\n\t        DRAGSTART = \"dragstart\",\n\t        DRAG = \"drag\",\n\t        DROP = \"drop\",\n\t        DRAGEND = \"dragend\",\n\t        DATABOUND = \"dataBound\",\n\t        CLICK = \"click\",\n\t        UNDEFINED = \"undefined\",\n\t        KSTATEHOVER = \"k-state-hover\",\n\t        KTREEVIEW = \"k-treeview\",\n\t        VISIBLE = \":visible\",\n\t        NODE = \".k-item\",\n\t        STRING = \"string\",\n\t        ARIACHECKED = \"aria-checked\",\n\t        ARIASELECTED = \"aria-selected\",\n\t        ARIADISABLED = \"aria-disabled\",\n\t        DISABLED = \"k-state-disabled\",\n\t        TreeView,\n\t        subGroup, nodeContents, nodeIcon,\n\t        spriteRe,\n\t        bindings = {\n\t            text: \"dataTextField\",\n\t            url: \"dataUrlField\",\n\t            spriteCssClass: \"dataSpriteCssClassField\",\n\t            imageUrl: \"dataImageUrlField\"\n\t        },\n\t        isJQueryInstance = function(obj) {\n\t            return (obj instanceof kendo.jQuery) || (obj instanceof window.jQuery);\n\t        },\n\t        isDomElement = function (o){\n\t            return (\n\t                typeof HTMLElement === \"object\" ? o instanceof HTMLElement : //DOM2\n\t                o && typeof o === \"object\" && o.nodeType === 1 && typeof o.nodeName === STRING\n\t            );\n\t        };\n\n\t    function contentChild(filter) {\n\t        return function(node) {\n\t            var result = node.children(\".k-animation-container\");\n\n\t            if (!result.length) {\n\t                result = node;\n\t            }\n\n\t            return result.children(filter);\n\t        };\n\t    }\n\n\t    function templateNoWith(code) {\n\t        return kendo.template(code, { useWithBlock: false });\n\t    }\n\n\t    subGroup = contentChild(\".k-group\");\n\t    nodeContents = contentChild(\".k-group,.k-content\");\n\t    nodeIcon = function(node) {\n\t        return node.children(\"div\").children(\".k-icon\");\n\t    };\n\n\t    function checkboxes(node) {\n\t        return node.find(\".k-checkbox-wrapper:first input[type=checkbox]\");\n\t    }\n\n\t    function insertAction(indexOffset) {\n\t        return function (nodeData, referenceNode) {\n\t            referenceNode = referenceNode.closest(NODE);\n\n\t            var group = referenceNode.parent(),\n\t                parentNode;\n\n\t            if (group.parent().is(\"li\")) {\n\t                parentNode = group.parent();\n\t            }\n\n\t            return this._dataSourceMove(nodeData, group, parentNode, function (dataSource, model) {\n\t                var referenceItem = this.dataItem(referenceNode);\n\t                var referenceNodeIndex = referenceItem ? referenceItem.parent().indexOf(referenceItem) : referenceNode.index();\n\n\t                return this._insert(dataSource.data(), model, referenceNodeIndex + indexOffset);\n\t            });\n\t        };\n\t    }\n\n\t    spriteRe = /k-sprite/;\n\n\t    function moveContents(node, container) {\n\t        var tmp;\n\n\t        while (node && node.nodeName.toLowerCase() != \"ul\") {\n\t            tmp = node;\n\t            node = node.nextSibling;\n\n\t            if (tmp.nodeType == 3) {\n\t                tmp.nodeValue = $.trim(tmp.nodeValue);\n\t            }\n\n\t            if (spriteRe.test(tmp.className)) {\n\t                container.insertBefore(tmp, container.firstChild);\n\t            } else {\n\t                container.appendChild(tmp);\n\t            }\n\t        }\n\t    }\n\n\t    function updateNodeHtml(node) {\n\t        var wrapper = node.children(\"div\"),\n\t            group = node.children(\"ul\"),\n\t            toggleButton = wrapper.children(\".k-icon\"),\n\t            checkbox = node.children(\"input[type=checkbox]\"),\n\t            innerWrapper = wrapper.children(\".k-in\");\n\n\t        if (node.hasClass(\"k-treeview\")) {\n\t            return;\n\t        }\n\n\t        if (!wrapper.length) {\n\t            wrapper = $(\"<div />\").prependTo(node);\n\t        }\n\n\t        if (!toggleButton.length && group.length) {\n\t            toggleButton = $(\"<span class='k-icon' />\").prependTo(wrapper);\n\t        } else if (!group.length || !group.children().length) {\n\t            toggleButton.remove();\n\t            group.remove();\n\t        }\n\n\t        if (checkbox.length) {\n\t            $(\"<span class='k-checkbox-wrapper' />\").appendTo(wrapper).append(checkbox);\n\t        }\n\n\t        if (!innerWrapper.length) {\n\t            innerWrapper = node.children(\"a\").eq(0).addClass(\"k-in k-link\");\n\n\t            if (!innerWrapper.length) {\n\t                innerWrapper = $(\"<span class='k-in' />\");\n\t            }\n\n\t            innerWrapper.appendTo(wrapper);\n\n\t            if (wrapper.length) {\n\t                moveContents(wrapper[0].nextSibling, innerWrapper[0]);\n\t            }\n\t        }\n\t    }\n\n\t    TreeView = kendo.ui.DataBoundWidget.extend({\n\t        init: function (element, options) {\n\t            var that = this,\n\t                inferred = false,\n\t                hasDataSource = options && !!options.dataSource,\n\t                list;\n\n\t            if (isArray(options)) {\n\t                options = { dataSource: options };\n\t            }\n\n\t            if (options && typeof options.loadOnDemand == UNDEFINED && isArray(options.dataSource)) {\n\t                options.loadOnDemand = false;\n\t            }\n\n\t            Widget.prototype.init.call(that, element, options);\n\n\t            element = that.element;\n\t            options = that.options;\n\n\t            that._dataSourceUids = {};\n\n\t            list = (element.is(\"ul\") && element) ||\n\t                   (element.hasClass(KTREEVIEW) && element.children(\"ul\"));\n\n\t            inferred = !hasDataSource && list.length;\n\n\t            if (inferred) {\n\t                options.dataSource.list = list;\n\t            }\n\n\t            that._animation();\n\n\t            that._accessors();\n\n\t            that._templates();\n\n\t            // render treeview if it's not already rendered\n\t            if (!element.hasClass(KTREEVIEW)) {\n\t                that._wrapper();\n\n\t                if (list) {\n\t                    that.root = element;\n\t                    that._group(that.wrapper);\n\t                }\n\t            } else {\n\t                // otherwise just initialize properties\n\t                that.wrapper = element;\n\t                that.root = element.children(\"ul\").eq(0);\n\t            }\n\n\t            that._tabindex();\n\n\t            that.wrapper.attr(\"role\", \"tree\");\n\n\t            that._dataSource(inferred);\n\n\t            that._attachEvents();\n\n\t            that._dragging();\n\n\t            if (!inferred) {\n\t                if (options.autoBind) {\n\t                    that._progress(true);\n\t                    that.dataSource.fetch();\n\t                }\n\t            } else {\n\t                that._syncHtmlAndDataSource();\n\t            }\n\n\t            if (options.checkboxes && options.checkboxes.checkChildren) {\n\t                that.updateIndeterminate();\n\t            }\n\n\t            if (that.element[0].id) {\n\t                that._ariaId = kendo.format(\"{0}_tv_active\", that.element[0].id);\n\t            }\n\n\t            kendo.notify(that);\n\t        },\n\n\t        _attachEvents: function() {\n\t            var that = this,\n\t                clickableItems = \".k-in:not(.k-state-selected,.k-state-disabled)\",\n\t                MOUSEENTER = \"mouseenter\";\n\n\t            that.wrapper\n\t                .on(MOUSEENTER + NS, \".k-in.k-state-selected\", function(e) { e.preventDefault(); })\n\t                .on(MOUSEENTER + NS, clickableItems, function () { $(this).addClass(KSTATEHOVER); })\n\t                .on(\"mouseleave\" + NS, clickableItems, function () { $(this).removeClass(KSTATEHOVER); })\n\t                .on(CLICK + NS, clickableItems, proxy(that._click, that))\n\t                .on(\"dblclick\" + NS, \".k-in:not(.k-state-disabled)\", proxy(that._toggleButtonClick, that))\n\t                .on(CLICK + NS, \".k-i-expand,.k-i-collapse\", proxy(that._toggleButtonClick, that))\n\t                .on(\"keydown\" + NS, proxy(that._keydown, that))\n\t                .on(\"keypress\" + NS, proxy(that._keypress, that))\n\t                .on(\"focus\" + NS, proxy(that._focus, that))\n\t                .on(\"blur\" + NS, proxy(that._blur, that))\n\t                .on(\"mousedown\" + NS, \".k-in,.k-checkbox-wrapper :checkbox,.k-i-expand,.k-i-collapse\", proxy(that._mousedown, that))\n\t                .on(\"change\" + NS, \".k-checkbox-wrapper :checkbox\", proxy(that._checkboxChange, that))\n\t                .on(\"click\" + NS, \".checkbox-span\", proxy(that._checkboxLabelClick, that))\n\t                .on(\"click\" + NS, \".k-request-retry\", proxy(that._retryRequest, that))\n\t                .on(\"click\" + NS, \".k-link.k-state-disabled\", function(e) { e.preventDefault(); })\n\t                .on(\"click\" + NS, function(e) {\n\t                    if (!$(e.target).is(\":kendoFocusable\")) {\n\t                        that.focus();\n\t                    }\n\t                });\n\t        },\n\n\t        _checkboxLabelClick: function(e) {\n\t            var checkbox = $(e.target.previousSibling);\n\n\t            if (checkbox.is(\"[disabled]\")) {\n\t                return;\n\t            }\n\n\t            checkbox.prop('checked', !checkbox.prop('checked'));\n\t            checkbox.trigger('change');\n\t        },\n\n\t        _syncHtmlAndDataSource: function (root, dataSource) {\n\t            root = root || this.root;\n\t            dataSource = dataSource || this.dataSource;\n\t            var data = dataSource.view(),\n\t                uidAttr = kendo.attr(\"uid\"),\n\t                expandedAttr = kendo.attr(\"expanded\"),\n\t                checkboxesEnabled = this.options.checkboxes,\n\t                items = root.children(\"li\"),\n\t                i,\n\t                item,\n\t                dataItem,\n\t                uid,\n\t                itemCheckbox;\n\n\t            for (i = 0; i < items.length; i++) {\n\t                dataItem = data[i];\n\t                uid = dataItem.uid;\n\t                item = items.eq(i);\n\t                item.attr(\"role\", \"treeitem\")\n\t                    .attr(uidAttr, uid)\n\t                    .attr(ARIASELECTED, item.hasClass(\"k-state-selected\"));\n\n\t                dataItem.expanded = item.attr(expandedAttr) === \"true\";\n\n\t                if (checkboxesEnabled) {\n\t                    itemCheckbox = checkboxes(item);\n\t                    dataItem.checked = itemCheckbox.prop(CHECKED);\n\t                    itemCheckbox.attr(\"id\", \"_\" + uid);\n\t                    itemCheckbox.next(\".k-checkbox-label\").attr(\"for\", \"_\" + uid);\n\t                }\n\n\t                this._syncHtmlAndDataSource(item.children(\"ul\"), dataItem.children);\n\t            }\n\t        },\n\n\t        _animation: function() {\n\t            var options = this.options,\n\t                animationOptions = options.animation,\n\t                hasCollapseAnimation = animationOptions.collapse && \"effects\" in animationOptions.collapse,\n\t                collapse = extend({}, animationOptions.expand, animationOptions.collapse);\n\n\t            if (!hasCollapseAnimation) {\n\t                collapse = extend(collapse, {reverse: true});\n\t            }\n\n\t            if (animationOptions === false) {\n\t                animationOptions = {\n\t                    expand: { effects: {} },\n\t                    collapse: { hide: true, effects: {} }\n\t                };\n\t            }\n\n\t            animationOptions.collapse = extend(collapse, {hide: true});\n\t            options.animation = animationOptions;\n\t        },\n\n\t        _dragging: function() {\n\t            var enabled = this.options.dragAndDrop;\n\t            var dragging = this.dragging;\n\n\t            if (enabled && !dragging) {\n\t                var widget = this;\n\n\t                this.dragging = new ui.HierarchicalDragAndDrop(this.element, {\n\t                    reorderable: true,\n\t                    $angular: this.options.$angular,\n\t                    autoScroll: this.options.autoScroll,\n\t                    filter: \"div:not(.k-state-disabled) .k-in\",\n\t                    allowedContainers: \".k-treeview\",\n\t                    itemSelector: \".k-treeview .k-item\",\n\t                    hintText: proxy(this._hintText, this),\n\t                    contains: function(source, destination) {\n\t                        return $.contains(source, destination);\n\t                    },\n\t                    dropHintContainer: function(item) {\n\t                        return item;\n\t                    },\n\t                    itemFromTarget: function(target) {\n\t                        var item = target.closest(\".k-top,.k-mid,.k-bot\");\n\t                        return {\n\t                            item: item,\n\t                            content: target.closest(\".k-in\"),\n\t                            first: item.hasClass(\"k-top\"),\n\t                            last: item.hasClass(\"k-bot\")\n\t                        };\n\t                    },\n\t                    dropPositionFrom: function(dropHint) {\n\t                        return dropHint.prevAll(\".k-in\").length > 0 ? \"after\" : \"before\";\n\t                    },\n\t                    dragstart: function(source) {\n\t                        return widget.trigger(DRAGSTART, { sourceNode: source[0] });\n\t                    },\n\t                    drag: function(options) {\n\t                        widget.trigger(DRAG, {\n\t                            originalEvent: options.originalEvent,\n\t                            sourceNode: options.source[0],\n\t                            dropTarget: options.target[0],\n\t                            pageY: options.pageY,\n\t                            pageX: options.pageX,\n\t                            statusClass: options.status,\n\t                            setStatusClass: options.setStatus\n\t                        });\n\t                    },\n\t                    drop: function(options) {\n\t                        var dropTarget = $(options.dropTarget);\n\t                        var navigationTarget = dropTarget.closest(\"a\");\n\n\t                        if(navigationTarget && navigationTarget.attr(\"href\")) {\n\t                            widget._tempPreventNavigation(navigationTarget);\n\t                        }\n\n\t                        return widget.trigger(DROP, {\n\t                            originalEvent: options.originalEvent,\n\t                            sourceNode: options.source,\n\t                            destinationNode: options.destination,\n\t                            valid: options.valid,\n\t                            setValid: function(state) {\n\t                                this.valid = state;\n\t                                options.setValid(state);\n\t                            },\n\t                            dropTarget: options.dropTarget,\n\t                            dropPosition: options.position\n\t                        });\n\t                    },\n\t                    dragend: function(options) {\n\t                        var source = options.source;\n\t                        var destination = options.destination;\n\t                        var position = options.position;\n\n\t                        function triggerDragEnd(source) {\n\t                            if (widget.options.checkboxes && widget.options.checkboxes.checkChildren) {\n\t                                widget.updateIndeterminate();\n\t                            }\n\n\t                            widget.trigger(DRAGEND, {\n\t                                originalEvent: options.originalEvent,\n\t                                sourceNode: source && source[0],\n\t                                destinationNode: destination[0],\n\t                                dropPosition: position\n\t                            });\n\t                        }\n\n\t                        // perform reorder / move\n\t                        // different handling is necessary because append might be async in remote bound tree\n\t                        if (position == \"over\") {\n\t                            widget.append(source, destination, triggerDragEnd);\n\t                        } else {\n\t                            if (position == \"before\") {\n\t                                source = widget.insertBefore(source, destination);\n\t                            } else if (position == \"after\") {\n\t                                source = widget.insertAfter(source, destination);\n\t                            }\n\n\t                            triggerDragEnd(source);\n\t                        }\n\t                    }\n\t                });\n\t            } else if (!enabled && dragging) {\n\t                dragging.destroy();\n\t                this.dragging = null;\n\t            }\n\t        },\n\n\t        _tempPreventNavigation: function(node) {\n\t            node.on(CLICK + NS + TEMP_NS, function (ev) {\n\t                ev.preventDefault();\n\t                node.off(CLICK + NS + TEMP_NS);\n\t            });\n\t        },\n\n\t        _hintText: function(node) {\n\t            return this.templates.dragClue({\n\t                item: this.dataItem(node),\n\t                treeview: this.options\n\t            });\n\t        },\n\n\t        _templates: function() {\n\t            var that = this,\n\t                options = that.options,\n\t                fieldAccessor = proxy(that._fieldAccessor, that);\n\n\t            if (options.template && typeof options.template == STRING) {\n\t                options.template = template(options.template);\n\t            } else if (!options.template) {\n\t                options.template = templateNoWith(\n\t                    \"# var text = \" + fieldAccessor(\"text\") + \"(data.item); #\" +\n\t                    \"# if (typeof data.item.encoded != 'undefined' && data.item.encoded === false) {#\" +\n\t                        \"#= text #\" +\n\t                    \"# } else { #\" +\n\t                        \"#: text #\" +\n\t                    \"# } #\"\n\t                );\n\t            }\n\n\t            that._checkboxes();\n\n\t            that.templates = {\n\t                wrapperCssClass: function (group, item) {\n\t                    var result = \"k-item\",\n\t                        index = item.index;\n\n\t                    if (group.firstLevel && index === 0) {\n\t                        result += \" k-first\";\n\t                    }\n\n\t                    if (index == group.length-1) {\n\t                        result += \" k-last\";\n\t                    }\n\n\t                    return result;\n\t                },\n\t                cssClass: function(group, item) {\n\t                    var result = \"\",\n\t                        index = item.index,\n\t                        groupLength = group.length - 1;\n\n\t                    if (group.firstLevel && index === 0) {\n\t                        result += \"k-top \";\n\t                    }\n\n\t                    if (index === 0 && index != groupLength) {\n\t                        result += \"k-top\";\n\t                    } else if (index == groupLength) {\n\t                        result += \"k-bot\";\n\t                    } else {\n\t                        result += \"k-mid\";\n\t                    }\n\n\t                    return result;\n\t                },\n\t                textClass: function(item, isLink) {\n\t                    var result = \"k-in\";\n\n\t                    if (isLink) {\n\t                        result += \" k-link\";\n\t                    }\n\n\t                    if (item.enabled === false) {\n\t                        result += \" k-state-disabled\";\n\t                    }\n\n\t                    if (item.selected === true) {\n\t                        result += \" k-state-selected\";\n\t                    }\n\n\t                    return result;\n\t                },\n\t                toggleButtonClass: function(item) {\n\t                    var result = \"k-icon\";\n\n\t                    if (item.expanded !== true) {\n\t                        result += \" k-i-expand\";\n\t                    } else {\n\t                        result += \" k-i-collapse\";\n\t                    }\n\n\t                    return result;\n\t                },\n\t                groupAttributes: function(group) {\n\t                    var attributes = \"\";\n\n\t                    if (!group.firstLevel) {\n\t                        attributes = \"role='group'\";\n\t                    }\n\n\t                    return attributes + (group.expanded !== true ? \" style='display:none'\" : \"\");\n\t                },\n\t                groupCssClass: function(group) {\n\t                    var cssClass = \"k-group\";\n\n\t                    if (group.firstLevel) {\n\t                        cssClass += \" k-treeview-lines\";\n\t                    }\n\n\t                    return cssClass;\n\t                },\n\t                dragClue: templateNoWith(\n\t                    \"#= data.treeview.template(data) #\"\n\t                ),\n\t                group: templateNoWith(\n\t                    \"<ul role='group' class='#= data.r.groupCssClass(data.group) #'#= data.r.groupAttributes(data.group) #>\" +\n\t                        \"#= data.renderItems(data) #\" +\n\t                    \"</ul>\"\n\t                ),\n\t                itemContent: templateNoWith(\n\t                    \"# var imageUrl = \" + fieldAccessor(\"imageUrl\") + \"(data.item); #\" +\n\t                    \"# var spriteCssClass = \" + fieldAccessor(\"spriteCssClass\") + \"(data.item); #\" +\n\t                    \"# if (imageUrl) { #\" +\n\t                        \"<img class='k-image' alt='' src='#= imageUrl #'>\" +\n\t                    \"# } #\" +\n\n\t                    \"# if (spriteCssClass) { #\" +\n\t                        \"<span class='k-sprite #= spriteCssClass #' />\" +\n\t                    \"# } #\" +\n\n\t                    \"#= data.treeview.template(data) #\"\n\t                ),\n\t                itemElement: templateNoWith(\n\t                    \"# var item = data.item, r = data.r; #\" +\n\t                    \"# var url = \" + fieldAccessor(\"url\") + \"(item); #\" +\n\t                    \"<div class='#= r.cssClass(data.group, item) #'>\" +\n\t                        \"# if (item.hasChildren) { #\" +\n\t                            \"<span class='#= r.toggleButtonClass(item) #'/>\" +\n\t                        \"# } #\" +\n\n\t                        \"# if (data.treeview.checkboxes) { #\" +\n\t                            \"<span class='k-checkbox-wrapper' role='presentation'>\" +\n\t                                \"#= data.treeview.checkboxes.template(data) #\" +\n\t                            \"</span>\" +\n\t                        \"# } #\" +\n\n\t                        \"# var tag = url ? 'a' : 'span'; #\" +\n\t                        \"# var textAttr = url ? ' href=\\\\'' + url + '\\\\'' : ''; #\" +\n\n\t                        \"<#=tag# class='#= r.textClass(item, !!url) #'#= textAttr #>\" +\n\t                            \"#= r.itemContent(data) #\" +\n\t                        \"</#=tag#>\" +\n\t                    \"</div>\"\n\t                ),\n\t                item: templateNoWith(\n\t                    \"# var item = data.item, r = data.r; #\" +\n\t                    \"<li role='treeitem' class='#= r.wrapperCssClass(data.group, item) #'\" +\n\t                        kendo.attr(\"uid\") + \"='#= item.uid #' \" +\n\t                        \"aria-checked='#= item.checked ? \\\"true\\\" : \\\"false\\\" #' \" +\n\t                        \"aria-selected='#= item.selected ? \\\"true\\\" : \\\"false\\\" #' \" +\n\t                        \"#=item.enabled === false ? \\\"aria-disabled='true'\\\" : ''#\" +\n\t                        \"aria-expanded='#= item.expanded ? \\\"true\\\" : \\\"false\\\" #' \" +\n\t                        \"data-expanded='#= item.expanded ? \\\"true\\\" : \\\"false\\\" #' \" +\n\t                    \">\" +\n\t                        \"#= r.itemElement(data) #\" +\n\t                    \"</li>\"\n\t                ),\n\t                loading: templateNoWith(\n\t                    \"<div class='k-icon k-i-loading' /> #: data.messages.loading #\"\n\t                ),\n\t                retry: templateNoWith(\n\t                    \"#: data.messages.requestFailed # \" +\n\t                    \"<button class='k-button k-request-retry'>#: data.messages.retry #</button>\"\n\t                )\n\t            };\n\t        },\n\n\t        items: function() {\n\t            return this.element.find(\".k-item > div:first-child\");\n\t        },\n\n\t        setDataSource: function(dataSource) {\n\t            var options = this.options;\n\n\t            options.dataSource = dataSource;\n\n\t            this._dataSourceUids = {};\n\n\t            this._dataSource();\n\n\t            if (options.checkboxes && options.checkboxes.checkChildren) {\n\t                this.dataSource.one(\"change\", $.proxy(this.updateIndeterminate, this, null));\n\t            }\n\n\t            if (this.options.autoBind) {\n\t                this.dataSource.fetch();\n\t            }\n\t        },\n\n\t        _bindDataSource: function() {\n\t            this._refreshHandler = proxy(this.refresh, this);\n\t            this._errorHandler = proxy(this._error, this);\n\n\t            this.dataSource.bind(CHANGE, this._refreshHandler);\n\t            this.dataSource.bind(ERROR, this._errorHandler);\n\t        },\n\n\t        _unbindDataSource: function() {\n\t            var dataSource = this.dataSource;\n\n\t            if (dataSource) {\n\t                dataSource.unbind(CHANGE, this._refreshHandler);\n\t                dataSource.unbind(ERROR, this._errorHandler);\n\t            }\n\t        },\n\n\t        _dataSource: function(silentRead) {\n\t            var that = this,\n\t                options = that.options,\n\t                dataSource = options.dataSource;\n\n\t            function recursiveRead(data) {\n\t                for (var i = 0; i < data.length; i++) {\n\t                    data[i]._initChildren();\n\n\t                    data[i].children.fetch();\n\n\t                    recursiveRead(data[i].children.view());\n\t                }\n\t            }\n\n\t            dataSource = isArray(dataSource) ? { data: dataSource } : dataSource;\n\n\t            that._unbindDataSource();\n\n\t            if (!dataSource.fields) {\n\t                dataSource.fields = [\n\t                    { field: \"text\" },\n\t                    { field: \"url\" },\n\t                    { field: \"spriteCssClass\" },\n\t                    { field: \"imageUrl\" }\n\t                ];\n\t            }\n\n\t            that.dataSource = dataSource = HierarchicalDataSource.create(dataSource);\n\n\t            if (silentRead) {\n\t                dataSource.fetch();\n\n\t                recursiveRead(dataSource.view());\n\t            }\n\n\t            that._bindDataSource();\n\t        },\n\n\t        events: [\n\t            DRAGSTART,\n\t            DRAG,\n\t            DROP,\n\t            DRAGEND,\n\n\t            DATABOUND,\n\n\t            EXPAND,\n\t            COLLAPSE,\n\t            SELECT,\n\t            CHANGE,\n\t            NAVIGATE,\n\t            CHECK\n\t        ],\n\n\t        options: {\n\t            name: \"TreeView\",\n\t            dataSource: {},\n\t            animation: {\n\t                expand: {\n\t                    effects: \"expand:vertical\",\n\t                    duration: 200\n\t                }, collapse: {\n\t                    duration: 100\n\t                }\n\t            },\n\t            messages: {\n\t                loading: \"Loading...\",\n\t                requestFailed: \"Request failed.\",\n\t                retry: \"Retry\"\n\t            },\n\t            dragAndDrop: false,\n\t            checkboxes: false,\n\t            autoBind: true,\n\t            autoScroll: false,\n\t            loadOnDemand: true,\n\t            template: \"\",\n\t            dataTextField: null\n\t        },\n\n\t        _accessors: function() {\n\t            var that = this,\n\t                options = that.options,\n\t                i, field, textField,\n\t                element = that.element;\n\n\t            for (i in bindings) {\n\t                field = options[bindings[i]];\n\t                textField = element.attr(kendo.attr(i + \"-field\"));\n\n\t                if (!field && textField) {\n\t                    field = textField;\n\t                }\n\n\t                if (!field) {\n\t                    field = i;\n\t                }\n\n\t                if (!isArray(field)) {\n\t                    field = [field];\n\t                }\n\n\t                options[bindings[i]] = field;\n\t            }\n\t        },\n\n\t        // generates accessor function for a given field name, honoring the data*Field arrays\n\t        _fieldAccessor: function(fieldName) {\n\t            var fieldBindings = this.options[bindings[fieldName]],\n\t                count = fieldBindings.length,\n\t                result = \"(function(item) {\";\n\n\t            if (count === 0) {\n\t                result += \"return item['\" + fieldName + \"'];\";\n\t            } else {\n\t                result += \"var levels = [\" +\n\t                            $.map(fieldBindings, function(x) {\n\t                                return \"function(d){ return \" + kendo.expr(x) + \"}\";\n\t                            }).join(\",\") + \"];\";\n\n\t                result += \"return levels[Math.min(item.level(), \" + count + \"-1)](item)\";\n\t            }\n\n\t            result += \"})\";\n\n\t            return result;\n\t        },\n\n\t        setOptions: function(options) {\n\t            Widget.fn.setOptions.call(this, options);\n\n\t            this._animation();\n\n\t            this._dragging();\n\n\t            this._templates();\n\t        },\n\n\t        _trigger: function (eventName, node) {\n\t            return this.trigger(eventName, {\n\t                node: node.closest(NODE)[0]\n\t            });\n\t        },\n\n\t        _setChecked: function(datasource, value) {\n\t            if (!datasource || !$.isFunction(datasource.view)) {\n\t                return;\n\t            }\n\n\t            for (var i = 0, nodes = datasource.view(); i < nodes.length; i++) {\n\t                if(nodes[i].enabled !== false){\n\t                    this._setCheckedValue(nodes[i], value);\n\t                }\n\n\t                if (nodes[i].children) {\n\t                    this._setChecked(nodes[i].children, value);\n\t                }\n\t            }\n\t        },\n\n\t        _setCheckedValue: function (node, value){\n\t            node[CHECKED] = value;\n\t        },\n\n\t        _setIndeterminate: function(node) {\n\t            var group = subGroup(node),\n\t                siblings, length,\n\t                all = true,\n\t                i;\n\n\t            if (!group.length) {\n\t                return;\n\t            }\n\n\t            siblings = checkboxes(group.children());\n\n\t            length = siblings.length;\n\n\t            if (!length) {\n\t                return;\n\t            } else if (length > 1) {\n\t                for (i = 1; i < length; i++) {\n\t                    if (siblings[i].checked != siblings[i-1].checked ||\n\t                        siblings[i].indeterminate || siblings[i-1].indeterminate) {\n\t                        all = false;\n\t                        break;\n\t                    }\n\t                }\n\t            } else {\n\t                all = !siblings[0].indeterminate;\n\t            }\n\n\t            node.attr(ARIACHECKED, all ? siblings[0].checked : \"mixed\");\n\n\t            return checkboxes(node)\n\t                .data(INDETERMINATE, !all)\n\t                .prop(INDETERMINATE, !all)\n\t                .prop(CHECKED, all && siblings[0].checked);\n\t        },\n\n\t        updateIndeterminate: function(node) {\n\t            // top-down update of inital indeterminate state for all nodes\n\t            node = node || this.wrapper;\n\n\t            var subnodes = subGroup(node).children();\n\t            var i;\n\t            var checkbox;\n\t            var dataItem;\n\n\t            if (subnodes.length) {\n\t                for (i = 0; i < subnodes.length; i++) {\n\t                    this.updateIndeterminate(subnodes.eq(i));\n\t                }\n\n\t                if (node.is(\".k-treeview\")) {\n\t                    return;\n\t                }\n\n\t                checkbox = this._setIndeterminate(node);\n\n\t                dataItem = this.dataItem(node);\n\n\t                if (checkbox && checkbox.prop(CHECKED)) {\n\t                    dataItem.checked = true;\n\t                } else {\n\t                    if (dataItem) {\n\t                        delete dataItem.checked;\n\t                    }\n\t                }\n\t            }\n\t        },\n\n\t        _bubbleIndeterminate: function(node, skipDownward) {\n\t            // bottom-up setting of indeterminate state of parent nodes\n\t            if (!node.length) {\n\t                return;\n\t            }\n\n\t            if (!skipDownward) {\n\t                //update the indeterminate state of the node itself\n\t                this.updateIndeterminate(node);\n\t            }\n\n\t            var parentNode = this.parent(node),\n\t                checkbox;\n\n\t            if (parentNode.length) {\n\t                this._setIndeterminate(parentNode);\n\n\t                checkbox = parentNode.children(\"div\").find(\".k-checkbox-wrapper input[type=checkbox]\");\n\n\t                this._skip = true;\n\t                if (checkbox.prop(INDETERMINATE) === false) {\n\t                    this.dataItem(parentNode).set(CHECKED, checkbox.prop(CHECKED));\n\t                } else {\n\t                    // delete this.dataItem(parentNode).checked;\n\t                    this.dataItem(parentNode).set(CHECKED, false);\n\t                }\n\n\t                this._skip = false;\n\n\t                this._bubbleIndeterminate(parentNode, true);\n\t            }\n\t        },\n\n\t        _checkboxChange: function(e) {\n\t            var checkbox = $(e.target);\n\t            var isChecked = checkbox.prop(CHECKED);\n\t            var node = checkbox.closest(NODE);\n\t            var dataItem = this.dataItem(node);\n\n\t            if (this._preventChange) {\n\t                return;\n\t            }\n\n\t            if (dataItem.checked != isChecked) {\n\t                dataItem.set(CHECKED, isChecked);\n\t                node.attr(ARIACHECKED, isChecked);\n\t                this._trigger(CHECK, node);\n\t            }\n\t        },\n\n\t        _toggleButtonClick: function (e) {\n\t            var node = $(e.currentTarget).closest(NODE);\n\n\t            if (node.is(\"[aria-disabled='true']\")) {\n\t                return;\n\t            }\n\n\t            this.toggle(node);\n\t        },\n\n\t        _mousedown: function(e) {\n\t            var that = this;\n\t            var currentTarget = $(e.currentTarget);\n\t            var node = $(e.currentTarget).closest(NODE);\n\t            var browser = kendo.support.browser;\n\n\t            if (node.is(\"[aria-disabled='true']\")) {\n\t                return;\n\t            }\n\n\t            //IE does not trigger change for indeterminate checkboxes\n\t            if ((browser.msie || browser.edge) && currentTarget.is(\":checkbox\")) {\n\t                if (currentTarget.prop(INDETERMINATE)) {\n\t                    that._preventChange = false;\n\n\t                    currentTarget.prop(CHECKED, !currentTarget.prop(CHECKED));\n\t                    currentTarget.trigger(CHANGE);\n\n\t                    currentTarget.on(CLICK + NS, function (e) {\n\t                        e.preventDefault();\n\t                    });\n\n\t                    that._preventChange = true;\n\t                } else {\n\t                    currentTarget.off(CLICK + NS);\n\t                    that._preventChange = false;\n\t                }\n\t            }\n\n\t            that._clickTarget = node;\n\t            that.current(node);\n\t        },\n\n\t        _focusable: function (node) {\n\t            return node && node.length && node.is(\":visible\") && !node.find(\".k-in:first\").hasClass(DISABLED);\n\t        },\n\n\t        _focus: function() {\n\t            var current = this.select(),\n\t                clickTarget = this._clickTarget;\n\n\t            // suppress initial focus state on touch devices (until keyboard is used)\n\t            if (kendo.support.touch) {\n\t                return;\n\t            }\n\n\t            if (clickTarget && clickTarget.length) {\n\t                current = clickTarget;\n\t            }\n\n\t            if (!this._focusable(current)) {\n\t                current = this.current();\n\t            }\n\n\t            if (!this._focusable(current)) {\n\t                current = this._nextVisible($());\n\t            }\n\n\t            this.current(current);\n\t        },\n\n\t        focus: function() {\n\t            var wrapper = this.wrapper,\n\t                scrollContainer = wrapper[0],\n\t                containers = [],\n\t                offsets = [],\n\t                documentElement = document.documentElement,\n\t                i;\n\n\t            do {\n\t                scrollContainer = scrollContainer.parentNode;\n\n\t                if (scrollContainer.scrollHeight > scrollContainer.clientHeight) {\n\t                    containers.push(scrollContainer);\n\t                    offsets.push(scrollContainer.scrollTop);\n\t                }\n\t            } while (scrollContainer != documentElement);\n\n\t            wrapper.focus();\n\n\t            for (i = 0; i < containers.length; i++) {\n\t                containers[i].scrollTop = offsets[i];\n\t            }\n\t        },\n\n\t        _blur: function() {\n\t            this.current().find(\".k-in:first\").removeClass(\"k-state-focused\");\n\t        },\n\n\t        _enabled: function(node) {\n\t            return !node.children(\"div\").children(\".k-in\").hasClass(DISABLED);\n\t        },\n\n\t        parent: function(node) {\n\t            var wrapperRe = /\\bk-treeview\\b/,\n\t                itemRe = /\\bk-item\\b/,\n\t                result,\n\t                skipSelf;\n\n\t            if (typeof node == STRING) {\n\t                node = this.element.find(node);\n\t            }\n\n\t            if (!isDomElement(node)) {\n\t                node = node[0];\n\t            }\n\n\t            skipSelf = itemRe.test(node.className);\n\n\t            do {\n\t                node = node.parentNode;\n\n\t                if (itemRe.test(node.className)) {\n\t                    if (skipSelf) {\n\t                        result = node;\n\t                    } else {\n\t                        skipSelf = true;\n\t                    }\n\t                }\n\t            } while (!wrapperRe.test(node.className) && !result);\n\n\t            return $(result);\n\t        },\n\n\t        _nextVisible: function(node) {\n\t            var that = this,\n\t                expanded = that._expanded(node),\n\t                result;\n\n\t            function nextParent(node) {\n\t                while (node.length && !node.next().length) {\n\t                    node = that.parent(node);\n\t                }\n\n\t                if (node.next().length) {\n\t                    return node.next();\n\t                } else {\n\t                    return node;\n\t                }\n\t            }\n\n\t            if (!node.length || !node.is(\":visible\")) {\n\t                result = that.root.children().eq(0);\n\t            } else if (expanded) {\n\t                result = subGroup(node).children().first();\n\n\t                // expanded node with no children\n\t                if (!result.length) {\n\t                    result = nextParent(node);\n\t                }\n\t            } else {\n\t                result = nextParent(node);\n\t            }\n\n\t            return result;\n\t        },\n\n\t        _previousVisible: function(node) {\n\t            var that = this,\n\t                lastChild,\n\t                result;\n\n\t            if (!node.length || node.prev().length) {\n\t                if (node.length) {\n\t                    result = node.prev();\n\t                } else {\n\t                    result = that.root.children().last();\n\t                }\n\n\t                while (that._expanded(result)) {\n\t                    lastChild = subGroup(result).children().last();\n\n\t                    if (!lastChild.length) {\n\t                        break;\n\t                    }\n\n\t                    result = lastChild;\n\t                }\n\t            } else {\n\t                result = that.parent(node) || node;\n\t            }\n\n\t            return result;\n\t        },\n\n\t        _keydown: function(e) {\n\t            var that = this,\n\t                key = e.keyCode,\n\t                target,\n\t                focused = that.current(),\n\t                expanded = that._expanded(focused),\n\t                checkbox = focused.find(\".k-checkbox-wrapper:first :checkbox\"),\n\t                rtl = kendo.support.isRtl(that.element);\n\n\t            if (e.target != e.currentTarget) {\n\t                return;\n\t            }\n\n\t            if ((!rtl && key == keys.RIGHT) || (rtl && key == keys.LEFT)) {\n\t                if (expanded) {\n\t                    target = that._nextVisible(focused);\n\t                } else if (!focused.find(\".k-in:first\").hasClass(DISABLED)) {\n\t                    that.expand(focused);\n\t                }\n\t            } else if ((!rtl && key == keys.LEFT) || (rtl && key == keys.RIGHT)) {\n\t                if (expanded && !focused.find(\".k-in:first\").hasClass(DISABLED)) {\n\t                    that.collapse(focused);\n\t                } else {\n\t                    target = that.parent(focused);\n\n\t                    if (!that._enabled(target)) {\n\t                        target = undefined;\n\t                    }\n\t                }\n\t            } else if (key == keys.DOWN) {\n\t                target = that._nextVisible(focused);\n\t            } else if (key == keys.UP) {\n\t                target = that._previousVisible(focused);\n\t            } else if (key == keys.HOME) {\n\t                target = that._nextVisible($());\n\t            } else if (key == keys.END) {\n\t                target = that._previousVisible($());\n\t            } else if (key == keys.ENTER && !focused.find(\".k-in:first\").hasClass(DISABLED)) {\n\t                if (!focused.find(\".k-in:first\").hasClass(\"k-state-selected\")) {\n\t                    if (!that._trigger(SELECT, focused)) {\n\t                        that.select(focused);\n\t                    }\n\t                }\n\t            } else if (key == keys.SPACEBAR && checkbox.length) {\n\t                if(!focused.find(\".k-in:first\").hasClass(DISABLED)){\n\t                    checkbox.prop(CHECKED, !checkbox.prop(CHECKED))\n\t                        .data(INDETERMINATE, false)\n\t                        .prop(INDETERMINATE, false);\n\n\t                    that._checkboxChange({ target: checkbox });\n\t                }\n\t                target = focused;\n\t            }\n\n\t            if (target) {\n\t                e.preventDefault();\n\n\t                if (focused[0] != target[0]) {\n\t                    that._trigger(NAVIGATE, target);\n\t                    that.current(target);\n\t                }\n\t            }\n\t        },\n\n\t        _keypress: function (e) {\n\t            var that = this;\n\t            var delay = 300;\n\t            var selectedNode = that._getSelectedNode();\n\t            var matchToSelect;\n\n\t            if (e.keyCode === keys.ENTER || e.keyCode === keys.SPACEBAR) {\n\t                return;\n\t            }\n\n\t            if (!that._match) {\n\t                that._match = \"\";\n\t            }\n\n\t            that._match += String.fromCharCode(e.keyCode);\n\t            clearTimeout(that._matchTimer);\n\t            that._matchTimer = setTimeout(function() {\n\t                that._match = \"\";\n\t            }, delay);\n\n\t            matchToSelect = selectedNode &&\n\t                            that._matchNextByText(\n\t                                Array.prototype.indexOf.call(this.element.find(\".k-item\"),\n\t                                selectedNode[0]), that._match\n\t                            );\n\n\t            if (!matchToSelect) {\n\t                matchToSelect = that._matchNextByText(-1, that._match);\n\t            }\n\t            that.select(matchToSelect);\n\t        },\n\n\t        _matchNextByText: function(startIndex, text) {\n\t            return $(this.element).find(\".k-in\").filter(function(i, element) {\n\t                return (i > startIndex &&\n\t                        $(element).is(\":visible\") &&\n\t                        !$(element).hasClass(DISABLED) &&\n\t                        $(element).text().toLowerCase().indexOf(text) === 0);\n\t            }).closest(NODE)[0];\n\t        },\n\n\t        _click: function (e) {\n\t            var that = this,\n\t                node = $(e.currentTarget),\n\t                contents = nodeContents(node.closest(NODE)),\n\t                href = node.attr(\"href\"),\n\t                shouldNavigate;\n\n\t            if (href) {\n\t                shouldNavigate = href == \"#\" || href.indexOf(\"#\" + this.element.id + \"-\") >= 0;\n\t            } else {\n\t                shouldNavigate = contents.length && !contents.children().length;\n\t            }\n\n\t            if (shouldNavigate) {\n\t                e.preventDefault();\n\t            }\n\n\t            if (!node.hasClass(\".k-state-selected\") && !that._trigger(SELECT, node)) {\n\t                that.select(node);\n\t            }\n\t        },\n\n\t        _wrapper: function() {\n\t            var that = this,\n\t                element = that.element,\n\t                wrapper, root,\n\t                wrapperClasses = \"k-widget k-treeview\";\n\n\t            if (element.is(\"ul\")) {\n\t                wrapper = element.wrap('<div />').parent();\n\t                root = element;\n\t            } else {\n\t                wrapper = element;\n\t                root = wrapper.children(\"ul\").eq(0);\n\t            }\n\n\t            that.wrapper = wrapper.addClass(wrapperClasses);\n\t            that.root = root;\n\t        },\n\n\t        _getSelectedNode: function() {\n\t            return this.element.find(\".k-state-selected\").closest(NODE);\n\t        },\n\n\t        _group: function(item) {\n\t            var that = this,\n\t                firstLevel = item.hasClass(KTREEVIEW),\n\t                group = {\n\t                    firstLevel: firstLevel,\n\t                    expanded: firstLevel || that._expanded(item)\n\t                },\n\t                groupElement = item.children(\"ul\");\n\n\t            groupElement\n\t                .addClass(that.templates.groupCssClass(group))\n\t                .css(\"display\", group.expanded ? \"\" : \"none\");\n\n\t            that._nodes(groupElement, group);\n\t        },\n\n\t        _nodes: function(groupElement, groupData) {\n\t            var that = this,\n\t                nodes = groupElement.children(\"li\"),\n\t                nodeData;\n\n\t            groupData = extend({ length: nodes.length }, groupData);\n\n\t            nodes.each(function(i, node) {\n\t                node = $(node);\n\n\t                nodeData = { index: i, expanded: that._expanded(node) };\n\n\t                updateNodeHtml(node);\n\n\t                that._updateNodeClasses(node, groupData, nodeData);\n\n\t                // iterate over child nodes\n\t                that._group(node);\n\t            });\n\t        },\n\n\t        _checkboxes: function() {\n\t            var options = this.options;\n\t            var checkboxes = options.checkboxes;\n\t            var defaultTemplate;\n\n\t            if (checkboxes) {\n\t                defaultTemplate = \"<input type='checkbox' tabindex='-1' #= (item.enabled === false) ? 'disabled' : '' # #= item.checked ? 'checked' : '' #\";\n\n\n\t                if (checkboxes.name) {\n\t                    defaultTemplate += \" name='\" + checkboxes.name + \"'\";\n\t                }\n\n\t                defaultTemplate += \" id='_#= item.uid #' class='k-checkbox' /><span class='k-checkbox-label checkbox-span'></span>\";\n\n\t                checkboxes = extend({\n\t                    template: defaultTemplate\n\t                }, options.checkboxes);\n\n\t                if (typeof checkboxes.template == STRING) {\n\t                    checkboxes.template = template(checkboxes.template);\n\t                }\n\n\t                options.checkboxes = checkboxes;\n\t            }\n\t        },\n\n\t        _updateNodeClasses: function (node, groupData, nodeData) {\n\t            var wrapper = node.children(\"div\"),\n\t                group = node.children(\"ul\"),\n\t                templates = this.templates;\n\n\t            if (node.hasClass(\"k-treeview\")) {\n\t                return;\n\t            }\n\n\t            nodeData = nodeData || {};\n\t            nodeData.expanded = typeof nodeData.expanded != UNDEFINED ? nodeData.expanded : this._expanded(node);\n\t            nodeData.index = typeof nodeData.index != UNDEFINED ? nodeData.index : node.index();\n\t            nodeData.enabled = typeof nodeData.enabled != UNDEFINED ? nodeData.enabled : !wrapper.children(\".k-in\").hasClass(\"k-state-disabled\");\n\n\t            groupData = groupData || {};\n\t            groupData.firstLevel = typeof groupData.firstLevel != UNDEFINED ? groupData.firstLevel : node.parent().parent().hasClass(KTREEVIEW);\n\t            groupData.length = typeof groupData.length != UNDEFINED ? groupData.length : node.parent().children().length;\n\n\t            // li\n\t            node.removeClass(\"k-first k-last\")\n\t                .addClass(templates.wrapperCssClass(groupData, nodeData));\n\n\t            // div\n\t            wrapper.removeClass(\"k-top k-mid k-bot\")\n\t                   .addClass(templates.cssClass(groupData, nodeData));\n\n\t            // span / a\n\t            var textWrap = wrapper.children(\".k-in\");\n\t            var isLink = textWrap[0] && textWrap[0].nodeName.toLowerCase() == \"a\";\n\t            textWrap.removeClass(\"k-in k-link k-state-default k-state-disabled\")\n\t                .addClass(templates.textClass(nodeData, isLink));\n\n\t            // toggle button\n\t            if (group.length || node.attr(\"data-hasChildren\") == \"true\") {\n\t                wrapper.children(\".k-icon\").removeClass(\"k-i-expand k-i-collapse\")\n\t                    .addClass(templates.toggleButtonClass(nodeData));\n\n\t                group.addClass(\"k-group\");\n\t            }\n\t        },\n\n\n\t        _processNodes: function(nodes, callback) {\n\t            var that = this;\n\t            var items = that.element.find(nodes);\n\t            for (var i = 0; i < items.length; i++) {\n\t                callback.call(that, i, $(items[i]).closest(NODE));\n\t            }\n\t        },\n\n\t        dataItem: function(node) {\n\t            var uid = $(node).closest(NODE).attr(kendo.attr(\"uid\")),\n\t                dataSource = this.dataSource;\n\n\t            return dataSource && dataSource.getByUid(uid);\n\t        },\n\n\t        _dataItem: function(node) {\n\t            var uid = $(node).closest(NODE).attr(kendo.attr(\"uid\")),\n\t                dataSource = this.dataSource;\n\n\t            return dataSource && this._dataSourceUids[uid];\n\t        },\n\n\t        _insertNode: function(nodeData, index, parentNode, insertCallback, collapsed) {\n\t            var that = this,\n\t                group = subGroup(parentNode),\n\t                updatedGroupLength = group.children().length + 1,\n\t                childrenData,\n\t                groupData = {\n\t                    firstLevel: parentNode.hasClass(KTREEVIEW),\n\t                    expanded: !collapsed,\n\t                    length: updatedGroupLength\n\t                }, node, i, item, nodeHtml = \"\", firstChild, lastChild,\n\t                append = function(item, group) {\n\t                    item.appendTo(group);\n\t                };\n\n\t            for (i = 0; i < nodeData.length; i++) {\n\t                item = nodeData[i];\n\n\t                item.index = index + i;\n\n\t                nodeHtml += that._renderItem({\n\t                    group: groupData,\n\t                    item: item\n\t                });\n\t            }\n\n\t            node = $(nodeHtml);\n\n\t            if (!node.length) {\n\t                return;\n\t            }\n\n\t            that.angular(\"compile\", function(){\n\t                return {\n\t                    elements: node.get(),\n\t                    data: nodeData.map(function(item){\n\t                        return { dataItem: item };\n\t                    })\n\t                };\n\t            });\n\n\t            if (!group.length) {\n\t                group = $(that._renderGroup({\n\t                    group: groupData\n\t                })).appendTo(parentNode);\n\t            }\n\n\t            insertCallback(node, group);\n\n\t            if (parentNode.hasClass(\"k-item\")) {\n\t                updateNodeHtml(parentNode);\n\t                that._updateNodeClasses(parentNode, groupData, {expanded: !collapsed});\n\t            }\n\n\t            firstChild = node.prev().first();\n\t            lastChild = node.next().last();\n\n\t            that._updateNodeClasses(firstChild, {}, {expanded: firstChild.attr(\"data-expanded\")});\n\t            that._updateNodeClasses(lastChild, {}, {expanded: lastChild.attr(\"data-expanded\")});\n\n\t            // render sub-nodes\n\t            for (i = 0; i < nodeData.length; i++) {\n\t                item = nodeData[i];\n\n\t                if (item.hasChildren) {\n\t                    childrenData = item.children.data();\n\n\t                    if (childrenData.length) {\n\t                        that._insertNode(childrenData, item.index, node.eq(i), append, !item.expanded);\n\t                    }\n\t                }\n\t            }\n\n\t            return node;\n\t        },\n\n\t        _updateNodes: function(items, field) {\n\t            var that = this;\n\t            var i, node, nodeWrapper, item, isChecked, isCollapsed;\n\t            var context = { treeview: that.options, item: item };\n\t            var render = field != \"expanded\" && field != \"checked\";\n\n\t            function setCheckedState(root, state) {\n\t                root.find(\".k-checkbox-wrapper input[type=checkbox]:not([disabled])\")\n\t                    .prop(CHECKED, state)\n\t                    .data(INDETERMINATE, false)\n\t                    .prop(INDETERMINATE, false);\n\t            }\n\n\t            if (field == \"selected\") {\n\t                item = items[0];\n\n\t                node = that.findByUid(item.uid).find(\".k-in:first\")\n\t                        .removeClass(\"k-state-hover\")\n\t                        .toggleClass(\"k-state-selected\", item[field])\n\t                        .end();\n\n\t                if (item[field]) {\n\t                    that.current(node);\n\t                }\n\n\t                node.attr(ARIASELECTED, !!item[field]);\n\t            } else {\n\t                var elements = $.map(items, function(item) {\n\t                    return that.findByUid(item.uid).children(\"div\");\n\t                });\n\n\t                if (render) {\n\t                    that.angular(\"cleanup\", function() { return { elements: elements }; });\n\t                }\n\n\t                for (i = 0; i < items.length; i++) {\n\t                    context.item = item = items[i];\n\t                    nodeWrapper = elements[i];\n\t                    node = nodeWrapper.parent();\n\n\t                    if (render) {\n\t                        nodeWrapper.children(\".k-in\")\n\t                            .html(that.templates.itemContent(context));\n\t                    }\n\n\t                    if (field == CHECKED) {\n\t                        isChecked = item[field];\n\n\t                        setCheckedState(nodeWrapper, isChecked);\n\n\t                        node.attr(ARIACHECKED, isChecked);\n\n\t                        if (that.options.checkboxes.checkChildren) {\n\t                            setCheckedState(node.children(\".k-group\"), isChecked);\n\n\t                            that._setChecked(item.children, isChecked);\n\n\t                            if (that.parent(node).length) {\n\t                                that._bubbleIndeterminate(node);\n\t                            }\n\t                        }\n\t                    } else if (field == \"expanded\") {\n\t                        that._toggle(node, item, item[field]);\n\t                    } else if (field == \"enabled\") {\n\t                        node.find(\".k-checkbox-wrapper input[type=checkbox]\").prop(\"disabled\", !item[field]);\n\n\t                        isCollapsed = !nodeContents(node).is(VISIBLE);\n\n\t                        node.removeAttr(ARIADISABLED);\n\n\t                        if (!item[field]) {\n\t                            if (item.selected) {\n\t                                item.set(\"selected\", false);\n\t                            }\n\n\t                            if (item.expanded) {\n\t                                item.set(\"expanded\", false);\n\t                            }\n\n\t                            isCollapsed = true;\n\t                            node.attr(ARIASELECTED, false)\n\t                                .attr(ARIADISABLED, true);\n\t                        }\n\n\t                        that._updateNodeClasses(node, {}, { enabled: item[field], expanded: !isCollapsed });\n\t                    }\n\n\t                    if (nodeWrapper.length) {\n\t                        this.trigger(\"itemChange\", { item: nodeWrapper, data: item, ns: ui });\n\t                    }\n\t                }\n\n\t                if (render) {\n\t                    that.angular(\"compile\", function(){\n\t                        return {\n\t                            elements: elements,\n\t                            data: $.map(items, function(item) {\n\t                                return [{ dataItem: item }];\n\t                            })\n\t                        };\n\t                    });\n\t                }\n\t            }\n\t        },\n\n\t        _appendItems: function(index, items, parentNode) {\n\t            var group = subGroup(parentNode);\n\t            var children = group.children();\n\t            var collapsed = !this._expanded(parentNode);\n\n\t            if(this.element === parentNode){\n\t                var dataItems = this.dataSource.data();\n\t                var viewItems = this.dataSource.view();\n\t                var rootItems = viewItems.length < dataItems.length ? viewItems : dataItems;\n\t                index = rootItems.indexOf(items[0]);\n\t            } else if (items.length){\n\t                index = items[0].parent().indexOf(items[0]);\n\t            }\n\n\t            if (typeof index == UNDEFINED) {\n\t                index = children.length;\n\t            }\n\n\t            this._insertNode(items, index, parentNode, function(item, group) {\n\t                // insert node into DOM\n\t                if (index >= children.length) {\n\t                    item.appendTo(group);\n\t                } else {\n\t                    item.insertBefore(children.eq(index));\n\t                }\n\t            }, collapsed);\n\n\t            if (!collapsed) {\n\t                this._updateNodeClasses(parentNode, {}, {expanded: !collapsed});\n\t                subGroup(parentNode).css(\"display\", \"block\");\n\t            }\n\t        },\n\n\t        _refreshChildren: function(parentNode, items, index) {\n\t            var i, children, child;\n\t            var options = this.options;\n\t            var loadOnDemand = options.loadOnDemand;\n\t            var checkChildren = options.checkboxes && options.checkboxes.checkChildren;\n\n\t            subGroup(parentNode).empty();\n\n\t            if (!items.length) {\n\t                updateNodeHtml(parentNode);\n\t            } else {\n\t                this._appendItems(index, items, parentNode);\n\n\t                children = subGroup(parentNode).children();\n\n\t                if (loadOnDemand && checkChildren) {\n\t                    this._bubbleIndeterminate(children.last());\n\t                }\n\n\t                for (i = 0; i < children.length; i++) {\n\t                    child = children.eq(i);\n\t                    this.trigger(\"itemChange\", {\n\t                        item: child.children(\"div\"),\n\t                        data: items[i],\n\t                        ns: ui\n\t                    });\n\t                }\n\t            }\n\t        },\n\n\t        _refreshRoot: function(items) {\n\t            var groupHtml = this._renderGroup({\n\t                    items: items,\n\t                    group: {\n\t                        firstLevel: true,\n\t                        expanded: true\n\t                    }\n\t                });\n\n\t            if (this.root.length) {\n\t                this._angularItems(\"cleanup\");\n\n\t                var group = $(groupHtml);\n\n\t                this.root\n\t                    .attr(\"class\", group.attr(\"class\"))\n\t                    .html(group.html());\n\t            } else {\n\t                this.root = this.wrapper.html(groupHtml).children(\"ul\");\n\t            }\n\n\t            var elements = this.root.children(\".k-item\");\n\t            for (var i = 0; i < items.length; i++) {\n\t                this.trigger(\"itemChange\", {\n\t                    item: elements.eq(i),\n\t                    data: items[i],\n\t                    ns: ui\n\t                });\n\t            }\n\t            this._angularItems(\"compile\");\n\t        },\n\n\t        refresh: function(e) {\n\t            var node = e.node;\n\t            var action = e.action;\n\t            var items = e.items;\n\t            var parentNode = this.wrapper;\n\t            var options = this.options;\n\t            var loadOnDemand = options.loadOnDemand;\n\t            var checkChildren = options.checkboxes && options.checkboxes.checkChildren;\n\t            var i;\n\n\t            if (this._skip) {\n\t                return;\n\t            }\n\n\t            for (i = 0; i < items.length; i++) {\n\t                this._dataSourceUids[items[i].uid] = items[i];\n\t            }\n\n\t            if (e.field) {\n\t                if (!items[0] || !items[0].level) {\n\t                    return;\n\t                }\n\n\t                return this._updateNodes(items, e.field);\n\t            }\n\n\t            if (node) {\n\t                parentNode = this.findByUid(node.uid);\n\t                this._progress(parentNode, false);\n\t            }\n\n\t            if (checkChildren && action != \"remove\") {\n\t                var bubble = false;\n\n\t                for (i = 0; i < items.length; i++) {\n\t                    if (\"checked\" in items[i]) {\n\t                        bubble = true;\n\t                        break;\n\t                    }\n\t                }\n\n\t                if (!bubble && node && node.checked) {\n\t                    for (i = 0; i < items.length; i++) {\n\t                        items[i].checked = true;\n\t                    }\n\t                }\n\t            }\n\n\t            if (action == \"add\") {\n\t                this._appendItems(e.index, items, parentNode);\n\t            } else if (action == \"remove\") {\n\t                this._remove(this.findByUid(items[0].uid), false);\n\t            } else if (action == \"itemchange\") {\n\t                this._updateNodes(items);\n\t            } else if (action == \"itemloaded\") {\n\t                this._refreshChildren(parentNode, items, e.index);\n\t            } else {\n\t                this._refreshRoot(items);\n\t            }\n\n\t            if (action != \"remove\") {\n\t                for (i = 0; i < items.length; i++) {\n\t                    if (!loadOnDemand || items[i].expanded || items[i]._loaded) {\n\t                        items[i].load();\n\t                    }\n\t                }\n\t            }\n\n\t            this.trigger(DATABOUND, { node: node ? parentNode : undefined });\n\t            if (this.dataSource.filter() && this.options.checkboxes.checkChildren) {\n\t                this.updateIndeterminate(parentNode);\n\t            }\n\t        },\n\n\t        _error: function(e) {\n\t            var node = e.node && this.findByUid(e.node.uid);\n\t            var retryHtml = this.templates.retry({ messages: this.options.messages });\n\n\t            if (node) {\n\t                this._progress(node, false);\n\t                this._expanded(node, false);\n\t                nodeIcon(node).addClass(\"k-i-reload\");\n\t                e.node.loaded(false);\n\t            } else {\n\t                this._progress(false);\n\t                this.element.html(retryHtml);\n\t            }\n\t        },\n\n\t        _retryRequest: function(e) {\n\t            e.preventDefault();\n\n\t            this.dataSource.fetch();\n\t        },\n\n\t        expand: function (nodes) {\n\t            this._processNodes(nodes, function (index, item) {\n\t                this.toggle(item, true);\n\t            });\n\t        },\n\n\t        collapse: function (nodes) {\n\t            this._processNodes(nodes, function (index, item) {\n\t                this.toggle(item, false);\n\t            });\n\t        },\n\n\t        enable: function (nodes, enable) {\n\t            if (typeof nodes === \"boolean\") {\n\t                enable = nodes;\n\t                nodes = this.items();\n\t            } else {\n\t                enable = arguments.length == 2 ? !!enable : true;\n\t            }\n\n\t            this._processNodes(nodes, function (index, item) {\n\t                this.dataItem(item).set(\"enabled\", enable);\n\t            });\n\t        },\n\n\t        current: function(node) {\n\t            var that = this,\n\t                current = that._current,\n\t                element = that.element,\n\t                id = that._ariaId;\n\n\t            if (arguments.length > 0 && node && node.length) {\n\t                if (current) {\n\t                    if (current[0].id === id) {\n\t                        current.removeAttr(\"id\");\n\t                    }\n\n\t                    current.find(\".k-in:first\").removeClass(\"k-state-focused\");\n\t                }\n\n\t                current = that._current = $(node, element).closest(NODE);\n\n\t                current.find(\".k-in:first\").addClass(\"k-state-focused\");\n\n\t                id = current[0].id || id;\n\n\t                if (id) {\n\t                    that.wrapper.removeAttr(\"aria-activedescendant\");\n\t                    current.attr(\"id\", id);\n\t                    that.wrapper.attr(\"aria-activedescendant\", id);\n\t                }\n\n\t                return;\n\t            }\n\n\t            if (!current) {\n\t                current = that._nextVisible($());\n\t            }\n\n\t            return current;\n\t        },\n\n\t        select: function (node) {\n\t            var that = this,\n\t                element = that.element;\n\n\t            if (!arguments.length) {\n\t                return element.find(\".k-state-selected\").closest(NODE);\n\t            }\n\n\t            node = $(node, element).closest(NODE);\n\n\t            element.find(\".k-state-selected\").each(function() {\n\t                var dataItem = that.dataItem(this);\n\t                if (dataItem) {\n\t                    dataItem.set(\"selected\", false);\n\t                    delete dataItem.selected;\n\t                } else {\n\t                    $(this).removeClass(\"k-state-selected\");\n\t                }\n\t            });\n\n\t            if (node.length) {\n\t                that.dataItem(node).set(\"selected\", true);\n\t                that._clickTarget = node;\n\t            }\n\n\t            that.trigger(CHANGE);\n\t        },\n\n\t        _toggle: function(node, dataItem, expand) {\n\t            var options = this.options;\n\t            var contents = nodeContents(node);\n\t            var direction = expand ? \"expand\" : \"collapse\";\n\t            var loaded;\n\n\t            if (contents.data(\"animating\")) {\n\t                return;\n\t            }\n\n\t            loaded = dataItem && dataItem.loaded();\n\n\t            if (expand && !loaded) {\n\t                if (options.loadOnDemand) {\n\t                    this._progress(node, true);\n\t                }\n\n\t                contents.remove();\n\t                dataItem.load();\n\t            } else {\n\t                this._updateNodeClasses(node, {}, { expanded: expand });\n\n\t                if (!expand) {\n\t                    contents.css(\"height\", contents.height()).css(\"height\");\n\t                }\n\n\t                contents\n\t                    .kendoStop(true, true)\n\t                    .kendoAnimate(extend(\n\t                        { reset: true },\n\t                        options.animation[direction],\n\t                        { complete: function() {\n\t                            if (expand) {\n\t                                contents.css(\"height\", \"\");\n\t                            }\n\t                        } }\n\t                    ));\n\t            }\n\n\t        },\n\n\t        toggle: function (node, expand) {\n\t            node = $(node);\n\n\t            if (!nodeIcon(node).is(\".k-i-expand, .k-i-collapse\")) {\n\t                return;\n\t            }\n\n\t            if (arguments.length == 1) {\n\t                expand = !this._expanded(node);\n\t            }\n\n\t            this._expanded(node, expand);\n\t        },\n\n\t        destroy: function() {\n\t            var that = this;\n\n\t            Widget.fn.destroy.call(that);\n\n\t            that.wrapper.off(NS);\n\t            that.wrapper.find(\".k-checkbox-wrapper :checkbox\").off(NS);\n\n\t            that._unbindDataSource();\n\n\t            if (that.dragging) {\n\t                that.dragging.destroy();\n\t            }\n\n\t            that._dataSourceUids = {};\n\n\t            kendo.destroy(that.element);\n\n\t            that.root = that.wrapper = that.element = null;\n\t        },\n\n\t        _expanded: function(node, value, force) {\n\t            var expandedAttr = kendo.attr(\"expanded\");\n\t            var dataItem;\n\t            var expanded = value;\n\t            var direction = expanded ? \"expand\" : \"collapse\";\n\n\t            if (arguments.length == 1) {\n\t                dataItem = this._dataItem(node);\n\t                return node.attr(expandedAttr) === \"true\" || (dataItem && dataItem.expanded);\n\t            }\n\n\t            dataItem = this.dataItem(node);\n\n\t            if (nodeContents(node).data(\"animating\")) {\n\t                return;\n\t            }\n\n\t            if (force || !this._trigger(direction, node)) {\n\t                if (expanded) {\n\t                    node.attr(expandedAttr, \"true\");\n\t                    node.attr(\"aria-expanded\", \"true\");\n\t                } else {\n\t                    node.removeAttr(expandedAttr);\n\t                    node.attr(\"aria-expanded\", \"false\");\n\t                }\n\n\t                if (dataItem) {\n\t                    dataItem.set(\"expanded\", expanded);\n\t                    // necessary when expanding an item yields an error and the item is not expanded as a result\n\t                    expanded = dataItem.expanded;\n\t                }\n\t            }\n\t        },\n\n\t        _progress: function(node, showProgress) {\n\t            var element = this.element;\n\t            var loadingText = this.templates.loading({ messages: this.options.messages });\n\n\t            if (arguments.length == 1) {\n\t                showProgress = node;\n\n\t                if (showProgress) {\n\t                    element.html(loadingText);\n\t                } else {\n\t                    element.empty();\n\t                }\n\t            } else {\n\t                nodeIcon(node).toggleClass(\"k-i-loading\", showProgress).removeClass(\"k-i-reload\");\n\t            }\n\t        },\n\n\t        text: function (node, text) {\n\t            var dataItem = this.dataItem(node),\n\t                fieldBindings = this.options[bindings.text],\n\t                level = dataItem.level(),\n\t                length = fieldBindings.length,\n\t                field = fieldBindings[Math.min(level, length-1)];\n\n\t            if (text) {\n\t                dataItem.set(field, text);\n\t            } else {\n\t                return dataItem[field];\n\t            }\n\t        },\n\n\t        _objectOrSelf: function (node) {\n\t            return $(node).closest(\"[data-role=treeview]\").data(\"kendoTreeView\") || this;\n\t        },\n\n\t        _dataSourceMove: function(nodeData, group, parentNode, callback) {\n\t            var referenceDataItem,\n\t                destTreeview = this._objectOrSelf(parentNode || group),\n\t                destDataSource = destTreeview.dataSource;\n\t            var loadPromise = $.Deferred().resolve().promise();\n\n\t            if (parentNode && parentNode[0] != destTreeview.element[0]) {\n\t                referenceDataItem = destTreeview.dataItem(parentNode);\n\n\t                if (!referenceDataItem.loaded()) {\n\t                    destTreeview._progress(parentNode, true);\n\t                    loadPromise = referenceDataItem.load();\n\t                }\n\n\t                if (parentNode != this.root) {\n\t                    destDataSource = referenceDataItem.children;\n\n\t                    if (!destDataSource || !(destDataSource instanceof HierarchicalDataSource)) {\n\t                        referenceDataItem._initChildren();\n\t                        referenceDataItem.loaded(true);\n\t                        destDataSource = referenceDataItem.children;\n\t                    }\n\t                }\n\t            }\n\n\t            nodeData = this._toObservableData(nodeData);\n\n\t            return callback.call(destTreeview, destDataSource, nodeData, loadPromise);\n\t        },\n\n\t        _toObservableData: function(node) {\n\t            var dataItem = node, dataSource, uid;\n\n\t            if (isJQueryInstance(node) || isDomElement(node)) {\n\t                dataSource = this._objectOrSelf(node).dataSource;\n\t                uid = $(node).attr(kendo.attr(\"uid\"));\n\t                dataItem = dataSource.getByUid(uid);\n\n\t                if (dataItem) {\n\t                    dataItem = dataSource.remove(dataItem);\n\t                }\n\t            }\n\n\t            return dataItem;\n\t        },\n\n\t        _insert: function(data, model, index) {\n\t            if (!(model instanceof kendo.data.ObservableArray)) {\n\t                if (!isArray(model)) {\n\t                    model = [model];\n\t                }\n\t            } else {\n\t                // items will be converted to new Node instances\n\t                model = model.toJSON();\n\t            }\n\n\t            var parentNode = data.parent();\n\n\t            if (parentNode && parentNode._initChildren) {\n\t                parentNode.hasChildren = true;\n\t                parentNode._initChildren();\n\t            }\n\n\t            data.splice.apply(data, [ index, 0 ].concat(model));\n\n\t            return this.findByUid(data[index].uid);\n\t        },\n\n\t        insertAfter: insertAction(1),\n\n\t        insertBefore: insertAction(0),\n\n\t        append: function (nodeData, parentNode, success) {\n\t            var group = this.root;\n\n\t            if(parentNode && nodeData instanceof jQuery && parentNode[0] === nodeData[0]){\n\t                return;\n\t            }\n\n\t            parentNode = parentNode && parentNode.length ? parentNode : null;\n\n\t            if (parentNode) {\n\t                group = subGroup(parentNode);\n\t            }\n\n\t            return this._dataSourceMove(nodeData, group, parentNode, function (dataSource, model, loadModel) {\n\t                var inserted;\n\t                var that = this;\n\n\t                function add() {\n\t                    if (parentNode) {\n\t                        that._expanded(parentNode, true, true);\n\t                    }\n\n\t                    var data = dataSource.data(),\n\t                        index = Math.max(data.length, 0);\n\n\t                    return that._insert(data, model, index);\n\t                }\n\n\t                loadModel.done(function() {\n\t                    inserted = add();\n\t                    success = success || $.noop;\n\t                    success(inserted);\n\t                });\n\n\t                return inserted || null;\n\t            });\n\t        },\n\n\t        _remove: function (node, keepData) {\n\t            var that = this,\n\t                parentNode,\n\t                prevSibling, nextSibling;\n\n\t            node = $(node, that.element);\n\n\t            this.angular(\"cleanup\", function(){\n\t                return { elements: node.get() };\n\t            });\n\n\t            parentNode = node.parent().parent();\n\t            prevSibling = node.prev();\n\t            nextSibling = node.next();\n\n\t            node[keepData ? \"detach\" : \"remove\"]();\n\n\t            if (parentNode.hasClass(\"k-item\")) {\n\t                updateNodeHtml(parentNode);\n\t                that._updateNodeClasses(parentNode);\n\t            }\n\n\t            that._updateNodeClasses(prevSibling);\n\t            that._updateNodeClasses(nextSibling);\n\n\t            return node;\n\t        },\n\n\t        remove: function (node) {\n\t            var dataItem = this.dataItem(node);\n\t            if (dataItem) {\n\t                this.dataSource.remove(dataItem);\n\t            }\n\t        },\n\n\t        detach: function (node) {\n\t            return this._remove(node, true);\n\t        },\n\n\t        findByText: function(text) {\n\t            return $(this.element).find(\".k-in\").filter(function(i, element) {\n\t                return $(element).text() == text;\n\t            }).closest(NODE);\n\t        },\n\n\t        findByUid: function(uid) {\n\t            var items = this.element.find(\".k-item\");\n\t            var uidAttr = kendo.attr(\"uid\");\n\t            var result;\n\n\t            for (var i = 0; i < items.length; i++) {\n\t                if (items[i].getAttribute(uidAttr) == uid) {\n\t                    result = items[i];\n\t                    break;\n\t                }\n\t            }\n\n\t            return $(result);\n\t        },\n\n\t        expandPath: function(path, complete) {\n\t            var treeview = this;\n\t            var nodeIds = path.slice(0);\n\t            var callback = complete || $.noop;\n\n\t            function proceed() {\n\t                nodeIds.shift();\n\n\t                if (nodeIds.length) {\n\t                    expand(nodeIds[0]).then(proceed);\n\t                } else {\n\t                    callback.call(treeview);\n\t                }\n\t            }\n\n\t            function expand(id) {\n\t                var result = $.Deferred();\n\t                var node = treeview.dataSource.get(id);\n\n\t                if (node) {\n\t                    if (node.loaded()) {\n\t                        node.set(\"expanded\", true);\n\t                        result.resolve();\n\t                    } else {\n\t                        // manually show progress of the node\n\t                        // should be moved to `refresh`\n\t                        // if the datasource starts triggering a `requestStart` event for nodes\n\t                        treeview._progress(treeview.findByUid(node.uid), true);\n\n\t                        node.load().then(function() {\n\t                            node.set(\"expanded\", true);\n\t                            result.resolve();\n\t                        });\n\t                    }\n\t                } else {\n\t                    result.resolve();\n\t                }\n\n\t                return result.promise();\n\t            }\n\n\t            // expand async nodes\n\t            expand(nodeIds[0]).then(proceed);\n\t        },\n\n\t        _parentIds: function(node) {\n\t            var parent = node && node.parentNode();\n\t            var parents = [];\n\t            while (parent && parent.parentNode) {\n\t                parents.unshift(parent.id);\n\t                parent = parent.parentNode();\n\t            }\n\n\t            return parents;\n\t        },\n\n\t        expandTo: function(node) {\n\t            if (!(node instanceof kendo.data.Node)) {\n\t                node = this.dataSource.get(node);\n\t            }\n\n\t            var parents = this._parentIds(node);\n\n\t            this.expandPath(parents);\n\t        },\n\n\t        _renderItem: function (options) {\n\t            if (!options.group) {\n\t                options.group = {};\n\t            }\n\n\t            options.treeview = this.options;\n\n\t            options.r = this.templates;\n\n\t            return this.templates.item(options);\n\t        },\n\n\t        _renderGroup: function (options) {\n\t            var that = this;\n\n\t            options.renderItems = function(options) {\n\t                    var html = \"\",\n\t                        i = 0,\n\t                        items = options.items,\n\t                        len = items ? items.length : 0,\n\t                        group = options.group;\n\n\t                    group.length = len;\n\n\t                    for (; i < len; i++) {\n\t                        options.group = group;\n\t                        options.item = items[i];\n\t                        options.item.index = i;\n\t                        html += that._renderItem(options);\n\t                    }\n\n\t                    return html;\n\t                };\n\n\t            options.r = that.templates;\n\n\t            return that.templates.group(options);\n\t        }\n\t    });\n\n\t    ui.plugin(TreeView);\n\t})(window.kendo.jQuery);\n\n\treturn window.kendo;\n\n\t}, __webpack_require__(3));\n\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1003)))\n\n/***/ })\n\n/******/ });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///04065e00ab361f322eef\n");

/***/ }),

/***/ "0aac488a388d7f2d0eea":
/*!***********************************************!*\
  !*** ./node_modules/style-loader/lib/urls.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\n/**\n * When source maps are enabled, `style-loader` uses a link element with a data-uri to\n * embed the css on the page. This breaks all relative urls because now they are relative to a\n * bundle instead of the current page.\n *\n * One solution is to only use full urls, but that may be impossible.\n *\n * Instead, this function \"fixes\" the relative urls to be absolute according to the current page location.\n *\n * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.\n *\n */\n\nmodule.exports = function (css) {\n  // get current location\n  var location = typeof window !== \"undefined\" && window.location;\n\n  if (!location) {\n    throw new Error(\"fixUrls requires window.location\");\n  }\n\n\t// blank or null?\n\tif (!css || typeof css !== \"string\") {\n\t  return css;\n  }\n\n  var baseUrl = location.protocol + \"//\" + location.host;\n  var currentDir = baseUrl + location.pathname.replace(/\\/[^\\/]*$/, \"/\");\n\n\t// convert each url(...)\n\t/*\n\tThis regular expression is just a way to recursively match brackets within\n\ta string.\n\n\t /url\\s*\\(  = Match on the word \"url\" with any whitespace after it and then a parens\n\t   (  = Start a capturing group\n\t     (?:  = Start a non-capturing group\n\t         [^)(]  = Match anything that isn't a parentheses\n\t         |  = OR\n\t         \\(  = Match a start parentheses\n\t             (?:  = Start another non-capturing groups\n\t                 [^)(]+  = Match anything that isn't a parentheses\n\t                 |  = OR\n\t                 \\(  = Match a start parentheses\n\t                     [^)(]*  = Match anything that isn't a parentheses\n\t                 \\)  = Match a end parentheses\n\t             )  = End Group\n              *\\) = Match anything and then a close parens\n          )  = Close non-capturing group\n          *  = Match anything\n       )  = Close capturing group\n\t \\)  = Match a close parens\n\n\t /gi  = Get all matches, not the first.  Be case insensitive.\n\t */\n\tvar fixedCss = css.replace(/url\\s*\\(((?:[^)(]|\\((?:[^)(]+|\\([^)(]*\\))*\\))*)\\)/gi, function(fullMatch, origUrl) {\n\t\t// strip quotes (if they exist)\n\t\tvar unquotedOrigUrl = origUrl\n\t\t\t.trim()\n\t\t\t.replace(/^\"(.*)\"$/, function(o, $1){ return $1; })\n\t\t\t.replace(/^'(.*)'$/, function(o, $1){ return $1; });\n\n\t\t// already a full url? no change\n\t\tif (/^(#|data:|http:\\/\\/|https:\\/\\/|file:\\/\\/\\/|\\s*$)/i.test(unquotedOrigUrl)) {\n\t\t  return fullMatch;\n\t\t}\n\n\t\t// convert the url to a full url\n\t\tvar newUrl;\n\n\t\tif (unquotedOrigUrl.indexOf(\"//\") === 0) {\n\t\t  \t//TODO: should we add protocol?\n\t\t\tnewUrl = unquotedOrigUrl;\n\t\t} else if (unquotedOrigUrl.indexOf(\"/\") === 0) {\n\t\t\t// path should be relative to the base url\n\t\t\tnewUrl = baseUrl + unquotedOrigUrl; // already starts with '/'\n\t\t} else {\n\t\t\t// path should be relative to current directory\n\t\t\tnewUrl = currentDir + unquotedOrigUrl.replace(/^\\.\\//, \"\"); // Strip leading './'\n\t\t}\n\n\t\t// send back the fixed url(...)\n\t\treturn \"url(\" + JSON.stringify(newUrl) + \")\";\n\t});\n\n\t// send back the fixed css\n\treturn fixedCss;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMGFhYzQ4OGEzODhkN2YyZDBlZWEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi91cmxzLmpzP2Y2ZDMiXSwic291cmNlc0NvbnRlbnQiOlsiXG4vKipcbiAqIFdoZW4gc291cmNlIG1hcHMgYXJlIGVuYWJsZWQsIGBzdHlsZS1sb2FkZXJgIHVzZXMgYSBsaW5rIGVsZW1lbnQgd2l0aCBhIGRhdGEtdXJpIHRvXG4gKiBlbWJlZCB0aGUgY3NzIG9uIHRoZSBwYWdlLiBUaGlzIGJyZWFrcyBhbGwgcmVsYXRpdmUgdXJscyBiZWNhdXNlIG5vdyB0aGV5IGFyZSByZWxhdGl2ZSB0byBhXG4gKiBidW5kbGUgaW5zdGVhZCBvZiB0aGUgY3VycmVudCBwYWdlLlxuICpcbiAqIE9uZSBzb2x1dGlvbiBpcyB0byBvbmx5IHVzZSBmdWxsIHVybHMsIGJ1dCB0aGF0IG1heSBiZSBpbXBvc3NpYmxlLlxuICpcbiAqIEluc3RlYWQsIHRoaXMgZnVuY3Rpb24gXCJmaXhlc1wiIHRoZSByZWxhdGl2ZSB1cmxzIHRvIGJlIGFic29sdXRlIGFjY29yZGluZyB0byB0aGUgY3VycmVudCBwYWdlIGxvY2F0aW9uLlxuICpcbiAqIEEgcnVkaW1lbnRhcnkgdGVzdCBzdWl0ZSBpcyBsb2NhdGVkIGF0IGB0ZXN0L2ZpeFVybHMuanNgIGFuZCBjYW4gYmUgcnVuIHZpYSB0aGUgYG5wbSB0ZXN0YCBjb21tYW5kLlxuICpcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3MpIHtcbiAgLy8gZ2V0IGN1cnJlbnQgbG9jYXRpb25cbiAgdmFyIGxvY2F0aW9uID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB3aW5kb3cubG9jYXRpb247XG5cbiAgaWYgKCFsb2NhdGlvbikge1xuICAgIHRocm93IG5ldyBFcnJvcihcImZpeFVybHMgcmVxdWlyZXMgd2luZG93LmxvY2F0aW9uXCIpO1xuICB9XG5cblx0Ly8gYmxhbmsgb3IgbnVsbD9cblx0aWYgKCFjc3MgfHwgdHlwZW9mIGNzcyAhPT0gXCJzdHJpbmdcIikge1xuXHQgIHJldHVybiBjc3M7XG4gIH1cblxuICB2YXIgYmFzZVVybCA9IGxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICsgbG9jYXRpb24uaG9zdDtcbiAgdmFyIGN1cnJlbnREaXIgPSBiYXNlVXJsICsgbG9jYXRpb24ucGF0aG5hbWUucmVwbGFjZSgvXFwvW15cXC9dKiQvLCBcIi9cIik7XG5cblx0Ly8gY29udmVydCBlYWNoIHVybCguLi4pXG5cdC8qXG5cdFRoaXMgcmVndWxhciBleHByZXNzaW9uIGlzIGp1c3QgYSB3YXkgdG8gcmVjdXJzaXZlbHkgbWF0Y2ggYnJhY2tldHMgd2l0aGluXG5cdGEgc3RyaW5nLlxuXG5cdCAvdXJsXFxzKlxcKCAgPSBNYXRjaCBvbiB0aGUgd29yZCBcInVybFwiIHdpdGggYW55IHdoaXRlc3BhY2UgYWZ0ZXIgaXQgYW5kIHRoZW4gYSBwYXJlbnNcblx0ICAgKCAgPSBTdGFydCBhIGNhcHR1cmluZyBncm91cFxuXHQgICAgICg/OiAgPSBTdGFydCBhIG5vbi1jYXB0dXJpbmcgZ3JvdXBcblx0ICAgICAgICAgW14pKF0gID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgIHwgID0gT1Jcblx0ICAgICAgICAgXFwoICA9IE1hdGNoIGEgc3RhcnQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICg/OiAgPSBTdGFydCBhbm90aGVyIG5vbi1jYXB0dXJpbmcgZ3JvdXBzXG5cdCAgICAgICAgICAgICAgICAgW14pKF0rICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgIHwgID0gT1Jcblx0ICAgICAgICAgICAgICAgICBcXCggID0gTWF0Y2ggYSBzdGFydCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgICAgICBbXikoXSogID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgXFwpICA9IE1hdGNoIGEgZW5kIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICApICA9IEVuZCBHcm91cFxuICAgICAgICAgICAgICAqXFwpID0gTWF0Y2ggYW55dGhpbmcgYW5kIHRoZW4gYSBjbG9zZSBwYXJlbnNcbiAgICAgICAgICApICA9IENsb3NlIG5vbi1jYXB0dXJpbmcgZ3JvdXBcbiAgICAgICAgICAqICA9IE1hdGNoIGFueXRoaW5nXG4gICAgICAgKSAgPSBDbG9zZSBjYXB0dXJpbmcgZ3JvdXBcblx0IFxcKSAgPSBNYXRjaCBhIGNsb3NlIHBhcmVuc1xuXG5cdCAvZ2kgID0gR2V0IGFsbCBtYXRjaGVzLCBub3QgdGhlIGZpcnN0LiAgQmUgY2FzZSBpbnNlbnNpdGl2ZS5cblx0ICovXG5cdHZhciBmaXhlZENzcyA9IGNzcy5yZXBsYWNlKC91cmxcXHMqXFwoKCg/OlteKShdfFxcKCg/OlteKShdK3xcXChbXikoXSpcXCkpKlxcKSkqKVxcKS9naSwgZnVuY3Rpb24oZnVsbE1hdGNoLCBvcmlnVXJsKSB7XG5cdFx0Ly8gc3RyaXAgcXVvdGVzIChpZiB0aGV5IGV4aXN0KVxuXHRcdHZhciB1bnF1b3RlZE9yaWdVcmwgPSBvcmlnVXJsXG5cdFx0XHQudHJpbSgpXG5cdFx0XHQucmVwbGFjZSgvXlwiKC4qKVwiJC8sIGZ1bmN0aW9uKG8sICQxKXsgcmV0dXJuICQxOyB9KVxuXHRcdFx0LnJlcGxhY2UoL14nKC4qKSckLywgZnVuY3Rpb24obywgJDEpeyByZXR1cm4gJDE7IH0pO1xuXG5cdFx0Ly8gYWxyZWFkeSBhIGZ1bGwgdXJsPyBubyBjaGFuZ2Vcblx0XHRpZiAoL14oI3xkYXRhOnxodHRwOlxcL1xcL3xodHRwczpcXC9cXC98ZmlsZTpcXC9cXC9cXC98XFxzKiQpL2kudGVzdCh1bnF1b3RlZE9yaWdVcmwpKSB7XG5cdFx0ICByZXR1cm4gZnVsbE1hdGNoO1xuXHRcdH1cblxuXHRcdC8vIGNvbnZlcnQgdGhlIHVybCB0byBhIGZ1bGwgdXJsXG5cdFx0dmFyIG5ld1VybDtcblxuXHRcdGlmICh1bnF1b3RlZE9yaWdVcmwuaW5kZXhPZihcIi8vXCIpID09PSAwKSB7XG5cdFx0ICBcdC8vVE9ETzogc2hvdWxkIHdlIGFkZCBwcm90b2NvbD9cblx0XHRcdG5ld1VybCA9IHVucXVvdGVkT3JpZ1VybDtcblx0XHR9IGVsc2UgaWYgKHVucXVvdGVkT3JpZ1VybC5pbmRleE9mKFwiL1wiKSA9PT0gMCkge1xuXHRcdFx0Ly8gcGF0aCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gdGhlIGJhc2UgdXJsXG5cdFx0XHRuZXdVcmwgPSBiYXNlVXJsICsgdW5xdW90ZWRPcmlnVXJsOyAvLyBhbHJlYWR5IHN0YXJ0cyB3aXRoICcvJ1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBwYXRoIHNob3VsZCBiZSByZWxhdGl2ZSB0byBjdXJyZW50IGRpcmVjdG9yeVxuXHRcdFx0bmV3VXJsID0gY3VycmVudERpciArIHVucXVvdGVkT3JpZ1VybC5yZXBsYWNlKC9eXFwuXFwvLywgXCJcIik7IC8vIFN0cmlwIGxlYWRpbmcgJy4vJ1xuXHRcdH1cblxuXHRcdC8vIHNlbmQgYmFjayB0aGUgZml4ZWQgdXJsKC4uLilcblx0XHRyZXR1cm4gXCJ1cmwoXCIgKyBKU09OLnN0cmluZ2lmeShuZXdVcmwpICsgXCIpXCI7XG5cdH0pO1xuXG5cdC8vIHNlbmQgYmFjayB0aGUgZml4ZWQgY3NzXG5cdHJldHVybiBmaXhlZENzcztcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///0aac488a388d7f2d0eea\n");

/***/ }),

/***/ "127c8cf59f228bb01a21":
/*!*************************!*\
  !*** external "jQuery" ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = jQuery;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTI3YzhjZjU5ZjIyOGJiMDFhMjEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJqUXVlcnlcIj9jZDBjIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0galF1ZXJ5OyJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///127c8cf59f228bb01a21\n");

/***/ }),

/***/ "1e4534d1d62a11482e97":
/*!****************************************************!*\
  !*** ./node_modules/style-loader/lib/addStyles.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\nvar stylesInDom = {};\n\nvar\tmemoize = function (fn) {\n\tvar memo;\n\n\treturn function () {\n\t\tif (typeof memo === \"undefined\") memo = fn.apply(this, arguments);\n\t\treturn memo;\n\t};\n};\n\nvar isOldIE = memoize(function () {\n\t// Test for IE <= 9 as proposed by Browserhacks\n\t// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\n\t// Tests for existence of standard globals is to allow style-loader\n\t// to operate correctly into non-standard environments\n\t// @see https://github.com/webpack-contrib/style-loader/issues/177\n\treturn window && document && document.all && !window.atob;\n});\n\nvar getTarget = function (target, parent) {\n  if (parent){\n    return parent.querySelector(target);\n  }\n  return document.querySelector(target);\n};\n\nvar getElement = (function (fn) {\n\tvar memo = {};\n\n\treturn function(target, parent) {\n                // If passing function in options, then use it for resolve \"head\" element.\n                // Useful for Shadow Root style i.e\n                // {\n                //   insertInto: function () { return document.querySelector(\"#foo\").shadowRoot }\n                // }\n                if (typeof target === 'function') {\n                        return target();\n                }\n                if (typeof memo[target] === \"undefined\") {\n\t\t\tvar styleTarget = getTarget.call(this, target, parent);\n\t\t\t// Special case to return head of iframe instead of iframe itself\n\t\t\tif (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n\t\t\t\ttry {\n\t\t\t\t\t// This will throw an exception if access to iframe is blocked\n\t\t\t\t\t// due to cross-origin restrictions\n\t\t\t\t\tstyleTarget = styleTarget.contentDocument.head;\n\t\t\t\t} catch(e) {\n\t\t\t\t\tstyleTarget = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\tmemo[target] = styleTarget;\n\t\t}\n\t\treturn memo[target]\n\t};\n})();\n\nvar singleton = null;\nvar\tsingletonCounter = 0;\nvar\tstylesInsertedAtTop = [];\n\nvar\tfixUrls = __webpack_require__(/*! ./urls */ \"0aac488a388d7f2d0eea\");\n\nmodule.exports = function(list, options) {\n\tif (typeof DEBUG !== \"undefined\" && DEBUG) {\n\t\tif (typeof document !== \"object\") throw new Error(\"The style-loader cannot be used in a non-browser environment\");\n\t}\n\n\toptions = options || {};\n\n\toptions.attrs = typeof options.attrs === \"object\" ? options.attrs : {};\n\n\t// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n\t// tags it will allow on a page\n\tif (!options.singleton && typeof options.singleton !== \"boolean\") options.singleton = isOldIE();\n\n\t// By default, add <style> tags to the <head> element\n        if (!options.insertInto) options.insertInto = \"head\";\n\n\t// By default, add <style> tags to the bottom of the target\n\tif (!options.insertAt) options.insertAt = \"bottom\";\n\n\tvar styles = listToStyles(list, options);\n\n\taddStylesToDom(styles, options);\n\n\treturn function update (newList) {\n\t\tvar mayRemove = [];\n\n\t\tfor (var i = 0; i < styles.length; i++) {\n\t\t\tvar item = styles[i];\n\t\t\tvar domStyle = stylesInDom[item.id];\n\n\t\t\tdomStyle.refs--;\n\t\t\tmayRemove.push(domStyle);\n\t\t}\n\n\t\tif(newList) {\n\t\t\tvar newStyles = listToStyles(newList, options);\n\t\t\taddStylesToDom(newStyles, options);\n\t\t}\n\n\t\tfor (var i = 0; i < mayRemove.length; i++) {\n\t\t\tvar domStyle = mayRemove[i];\n\n\t\t\tif(domStyle.refs === 0) {\n\t\t\t\tfor (var j = 0; j < domStyle.parts.length; j++) domStyle.parts[j]();\n\n\t\t\t\tdelete stylesInDom[domStyle.id];\n\t\t\t}\n\t\t}\n\t};\n};\n\nfunction addStylesToDom (styles, options) {\n\tfor (var i = 0; i < styles.length; i++) {\n\t\tvar item = styles[i];\n\t\tvar domStyle = stylesInDom[item.id];\n\n\t\tif(domStyle) {\n\t\t\tdomStyle.refs++;\n\n\t\t\tfor(var j = 0; j < domStyle.parts.length; j++) {\n\t\t\t\tdomStyle.parts[j](item.parts[j]);\n\t\t\t}\n\n\t\t\tfor(; j < item.parts.length; j++) {\n\t\t\t\tdomStyle.parts.push(addStyle(item.parts[j], options));\n\t\t\t}\n\t\t} else {\n\t\t\tvar parts = [];\n\n\t\t\tfor(var j = 0; j < item.parts.length; j++) {\n\t\t\t\tparts.push(addStyle(item.parts[j], options));\n\t\t\t}\n\n\t\t\tstylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};\n\t\t}\n\t}\n}\n\nfunction listToStyles (list, options) {\n\tvar styles = [];\n\tvar newStyles = {};\n\n\tfor (var i = 0; i < list.length; i++) {\n\t\tvar item = list[i];\n\t\tvar id = options.base ? item[0] + options.base : item[0];\n\t\tvar css = item[1];\n\t\tvar media = item[2];\n\t\tvar sourceMap = item[3];\n\t\tvar part = {css: css, media: media, sourceMap: sourceMap};\n\n\t\tif(!newStyles[id]) styles.push(newStyles[id] = {id: id, parts: [part]});\n\t\telse newStyles[id].parts.push(part);\n\t}\n\n\treturn styles;\n}\n\nfunction insertStyleElement (options, style) {\n\tvar target = getElement(options.insertInto)\n\n\tif (!target) {\n\t\tthrow new Error(\"Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.\");\n\t}\n\n\tvar lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];\n\n\tif (options.insertAt === \"top\") {\n\t\tif (!lastStyleElementInsertedAtTop) {\n\t\t\ttarget.insertBefore(style, target.firstChild);\n\t\t} else if (lastStyleElementInsertedAtTop.nextSibling) {\n\t\t\ttarget.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);\n\t\t} else {\n\t\t\ttarget.appendChild(style);\n\t\t}\n\t\tstylesInsertedAtTop.push(style);\n\t} else if (options.insertAt === \"bottom\") {\n\t\ttarget.appendChild(style);\n\t} else if (typeof options.insertAt === \"object\" && options.insertAt.before) {\n\t\tvar nextSibling = getElement(options.insertAt.before, target);\n\t\ttarget.insertBefore(style, nextSibling);\n\t} else {\n\t\tthrow new Error(\"[Style Loader]\\n\\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\\n Must be 'top', 'bottom', or Object.\\n (https://github.com/webpack-contrib/style-loader#insertat)\\n\");\n\t}\n}\n\nfunction removeStyleElement (style) {\n\tif (style.parentNode === null) return false;\n\tstyle.parentNode.removeChild(style);\n\n\tvar idx = stylesInsertedAtTop.indexOf(style);\n\tif(idx >= 0) {\n\t\tstylesInsertedAtTop.splice(idx, 1);\n\t}\n}\n\nfunction createStyleElement (options) {\n\tvar style = document.createElement(\"style\");\n\n\tif(options.attrs.type === undefined) {\n\t\toptions.attrs.type = \"text/css\";\n\t}\n\n\tif(options.attrs.nonce === undefined) {\n\t\tvar nonce = getNonce();\n\t\tif (nonce) {\n\t\t\toptions.attrs.nonce = nonce;\n\t\t}\n\t}\n\n\taddAttrs(style, options.attrs);\n\tinsertStyleElement(options, style);\n\n\treturn style;\n}\n\nfunction createLinkElement (options) {\n\tvar link = document.createElement(\"link\");\n\n\tif(options.attrs.type === undefined) {\n\t\toptions.attrs.type = \"text/css\";\n\t}\n\toptions.attrs.rel = \"stylesheet\";\n\n\taddAttrs(link, options.attrs);\n\tinsertStyleElement(options, link);\n\n\treturn link;\n}\n\nfunction addAttrs (el, attrs) {\n\tObject.keys(attrs).forEach(function (key) {\n\t\tel.setAttribute(key, attrs[key]);\n\t});\n}\n\nfunction getNonce() {\n\tif (false) {}\n\n\treturn __webpack_require__.nc;\n}\n\nfunction addStyle (obj, options) {\n\tvar style, update, remove, result;\n\n\t// If a transform function was defined, run it on the css\n\tif (options.transform && obj.css) {\n\t    result = typeof options.transform === 'function'\n\t\t ? options.transform(obj.css) \n\t\t : options.transform.default(obj.css);\n\n\t    if (result) {\n\t    \t// If transform returns a value, use that instead of the original css.\n\t    \t// This allows running runtime transformations on the css.\n\t    \tobj.css = result;\n\t    } else {\n\t    \t// If the transform function returns a falsy value, don't add this css.\n\t    \t// This allows conditional loading of css\n\t    \treturn function() {\n\t    \t\t// noop\n\t    \t};\n\t    }\n\t}\n\n\tif (options.singleton) {\n\t\tvar styleIndex = singletonCounter++;\n\n\t\tstyle = singleton || (singleton = createStyleElement(options));\n\n\t\tupdate = applyToSingletonTag.bind(null, style, styleIndex, false);\n\t\tremove = applyToSingletonTag.bind(null, style, styleIndex, true);\n\n\t} else if (\n\t\tobj.sourceMap &&\n\t\ttypeof URL === \"function\" &&\n\t\ttypeof URL.createObjectURL === \"function\" &&\n\t\ttypeof URL.revokeObjectURL === \"function\" &&\n\t\ttypeof Blob === \"function\" &&\n\t\ttypeof btoa === \"function\"\n\t) {\n\t\tstyle = createLinkElement(options);\n\t\tupdate = updateLink.bind(null, style, options);\n\t\tremove = function () {\n\t\t\tremoveStyleElement(style);\n\n\t\t\tif(style.href) URL.revokeObjectURL(style.href);\n\t\t};\n\t} else {\n\t\tstyle = createStyleElement(options);\n\t\tupdate = applyToTag.bind(null, style);\n\t\tremove = function () {\n\t\t\tremoveStyleElement(style);\n\t\t};\n\t}\n\n\tupdate(obj);\n\n\treturn function updateStyle (newObj) {\n\t\tif (newObj) {\n\t\t\tif (\n\t\t\t\tnewObj.css === obj.css &&\n\t\t\t\tnewObj.media === obj.media &&\n\t\t\t\tnewObj.sourceMap === obj.sourceMap\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tupdate(obj = newObj);\n\t\t} else {\n\t\t\tremove();\n\t\t}\n\t};\n}\n\nvar replaceText = (function () {\n\tvar textStore = [];\n\n\treturn function (index, replacement) {\n\t\ttextStore[index] = replacement;\n\n\t\treturn textStore.filter(Boolean).join('\\n');\n\t};\n})();\n\nfunction applyToSingletonTag (style, index, remove, obj) {\n\tvar css = remove ? \"\" : obj.css;\n\n\tif (style.styleSheet) {\n\t\tstyle.styleSheet.cssText = replaceText(index, css);\n\t} else {\n\t\tvar cssNode = document.createTextNode(css);\n\t\tvar childNodes = style.childNodes;\n\n\t\tif (childNodes[index]) style.removeChild(childNodes[index]);\n\n\t\tif (childNodes.length) {\n\t\t\tstyle.insertBefore(cssNode, childNodes[index]);\n\t\t} else {\n\t\t\tstyle.appendChild(cssNode);\n\t\t}\n\t}\n}\n\nfunction applyToTag (style, obj) {\n\tvar css = obj.css;\n\tvar media = obj.media;\n\n\tif(media) {\n\t\tstyle.setAttribute(\"media\", media)\n\t}\n\n\tif(style.styleSheet) {\n\t\tstyle.styleSheet.cssText = css;\n\t} else {\n\t\twhile(style.firstChild) {\n\t\t\tstyle.removeChild(style.firstChild);\n\t\t}\n\n\t\tstyle.appendChild(document.createTextNode(css));\n\t}\n}\n\nfunction updateLink (link, options, obj) {\n\tvar css = obj.css;\n\tvar sourceMap = obj.sourceMap;\n\n\t/*\n\t\tIf convertToAbsoluteUrls isn't defined, but sourcemaps are enabled\n\t\tand there is no publicPath defined then lets turn convertToAbsoluteUrls\n\t\ton by default.  Otherwise default to the convertToAbsoluteUrls option\n\t\tdirectly\n\t*/\n\tvar autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;\n\n\tif (options.convertToAbsoluteUrls || autoFixUrls) {\n\t\tcss = fixUrls(css);\n\t}\n\n\tif (sourceMap) {\n\t\t// http://stackoverflow.com/a/26603875\n\t\tcss += \"\\n/*# sourceMappingURL=data:application/json;base64,\" + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + \" */\";\n\t}\n\n\tvar blob = new Blob([css], { type: \"text/css\" });\n\n\tvar oldSrc = link.href;\n\n\tlink.href = URL.createObjectURL(blob);\n\n\tif(oldSrc) URL.revokeObjectURL(oldSrc);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1e4534d1d62a11482e97\n");

/***/ }),

/***/ 3:
/*!**********************************************************************************!*\
  !*** multi ./src/vendor/Anakeen/SmartStructures/Iuser/Render/changeGroupView.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! /home/charles/git/user-interfaces/src/vendor/Anakeen/SmartStructures/Iuser/Render/changeGroupView.js */"ed7ea6f7dc20380e2940");


/***/ }),

/***/ "46d3985e259824d97676":
/*!**********************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/kendo.core.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1045);\n\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function() { throw new Error(\"define cannot be used indirect\"); };\r\n\n\n/***/ }),\n\n/***/ 1003:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! jquery */ \"127c8cf59f228bb01a21\");\n\n/***/ }),\n\n/***/ 1045:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(jQuery) {(function(f, define){\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1003)], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t})(function(){\n\n\tvar __meta__ = { // jshint ignore:line\n\t    id: \"core\",\n\t    name: \"Core\",\n\t    category: \"framework\",\n\t    description: \"The core of the Kendo framework.\"\n\t};\n\n\t/*jshint eqnull: true, loopfunc: true, evil: true, boss: true, freeze: false*/\n\t(function($, window, undefined) {\n\t    var kendo = window.kendo = window.kendo || { cultures: {} },\n\t        extend = $.extend,\n\t        each = $.each,\n\t        isArray = $.isArray,\n\t        proxy = $.proxy,\n\t        noop = $.noop,\n\t        math = Math,\n\t        Template,\n\t        JSON = window.JSON || {},\n\t        support = {},\n\t        percentRegExp = /%/,\n\t        formatRegExp = /\\{(\\d+)(:[^\\}]+)?\\}/g,\n\t        boxShadowRegExp = /(\\d+(?:\\.?)\\d*)px\\s*(\\d+(?:\\.?)\\d*)px\\s*(\\d+(?:\\.?)\\d*)px\\s*(\\d+)?/i,\n\t        numberRegExp = /^(\\+|-?)\\d+(\\.?)\\d*$/,\n\t        FUNCTION = \"function\",\n\t        STRING = \"string\",\n\t        NUMBER = \"number\",\n\t        OBJECT = \"object\",\n\t        NULL = \"null\",\n\t        BOOLEAN = \"boolean\",\n\t        UNDEFINED = \"undefined\",\n\t        getterCache = {},\n\t        setterCache = {},\n\t        slice = [].slice;\n\n\t    kendo.version = \"2018.3.1212\".replace(/^\\s+|\\s+$/g, '');\n\n\t    function Class() {}\n\n\t    Class.extend = function(proto) {\n\t        var base = function() {},\n\t            member,\n\t            that = this,\n\t            subclass = proto && proto.init ? proto.init : function () {\n\t                that.apply(this, arguments);\n\t            },\n\t            fn;\n\n\t        base.prototype = that.prototype;\n\t        fn = subclass.fn = subclass.prototype = new base();\n\n\t        for (member in proto) {\n\t            if (proto[member] != null && proto[member].constructor === Object) {\n\t                // Merge object members\n\t                fn[member] = extend(true, {}, base.prototype[member], proto[member]);\n\t            } else {\n\t                fn[member] = proto[member];\n\t            }\n\t        }\n\n\t        fn.constructor = subclass;\n\t        subclass.extend = that.extend;\n\n\t        return subclass;\n\t    };\n\n\t    Class.prototype._initOptions = function(options) {\n\t        this.options = deepExtend({}, this.options, options);\n\t    };\n\n\t    var isFunction = kendo.isFunction = function(fn) {\n\t        return typeof fn === \"function\";\n\t    };\n\n\t    var preventDefault = function() {\n\t        this._defaultPrevented = true;\n\t    };\n\n\t    var isDefaultPrevented = function() {\n\t        return this._defaultPrevented === true;\n\t    };\n\n\t    var Observable = Class.extend({\n\t        init: function() {\n\t            this._events = {};\n\t        },\n\n\t        bind: function(eventName, handlers, one) {\n\t            var that = this,\n\t                idx,\n\t                eventNames = typeof eventName === STRING ? [eventName] : eventName,\n\t                length,\n\t                original,\n\t                handler,\n\t                handlersIsFunction = typeof handlers === FUNCTION,\n\t                events;\n\n\t            if (handlers === undefined) {\n\t                for (idx in eventName) {\n\t                    that.bind(idx, eventName[idx]);\n\t                }\n\t                return that;\n\t            }\n\n\t            for (idx = 0, length = eventNames.length; idx < length; idx++) {\n\t                eventName = eventNames[idx];\n\n\t                handler = handlersIsFunction ? handlers : handlers[eventName];\n\n\t                if (handler) {\n\t                    if (one) {\n\t                        original = handler;\n\t                        handler = function() {\n\t                            that.unbind(eventName, handler);\n\t                            original.apply(that, arguments);\n\t                        };\n\t                        handler.original = original;\n\t                    }\n\t                    events = that._events[eventName] = that._events[eventName] || [];\n\t                    events.push(handler);\n\t                }\n\t            }\n\n\t            return that;\n\t        },\n\n\t        one: function(eventNames, handlers) {\n\t            return this.bind(eventNames, handlers, true);\n\t        },\n\n\t        first: function(eventName, handlers) {\n\t            var that = this,\n\t                idx,\n\t                eventNames = typeof eventName === STRING ? [eventName] : eventName,\n\t                length,\n\t                handler,\n\t                handlersIsFunction = typeof handlers === FUNCTION,\n\t                events;\n\n\t            for (idx = 0, length = eventNames.length; idx < length; idx++) {\n\t                eventName = eventNames[idx];\n\n\t                handler = handlersIsFunction ? handlers : handlers[eventName];\n\n\t                if (handler) {\n\t                    events = that._events[eventName] = that._events[eventName] || [];\n\t                    events.unshift(handler);\n\t                }\n\t            }\n\n\t            return that;\n\t        },\n\n\t        trigger: function(eventName, e) {\n\t            var that = this,\n\t                events = that._events[eventName],\n\t                idx,\n\t                length;\n\n\t            if (events) {\n\t                e = e || {};\n\n\t                e.sender = that;\n\n\t                e._defaultPrevented = false;\n\n\t                e.preventDefault = preventDefault;\n\n\t                e.isDefaultPrevented = isDefaultPrevented;\n\n\t                events = events.slice();\n\n\t                for (idx = 0, length = events.length; idx < length; idx++) {\n\t                    events[idx].call(that, e);\n\t                }\n\n\t                return e._defaultPrevented === true;\n\t            }\n\n\t            return false;\n\t        },\n\n\t        unbind: function(eventName, handler) {\n\t            var that = this,\n\t                events = that._events[eventName],\n\t                idx;\n\n\t            if (eventName === undefined) {\n\t                that._events = {};\n\t            } else if (events) {\n\t                if (handler) {\n\t                    for (idx = events.length - 1; idx >= 0; idx--) {\n\t                        if (events[idx] === handler || events[idx].original === handler) {\n\t                            events.splice(idx, 1);\n\t                        }\n\t                    }\n\t                } else {\n\t                    that._events[eventName] = [];\n\t                }\n\t            }\n\n\t            return that;\n\t        }\n\t    });\n\n\n\t     function compilePart(part, stringPart) {\n\t         if (stringPart) {\n\t             return \"'\" +\n\t                 part.split(\"'\").join(\"\\\\'\")\n\t                     .split('\\\\\"').join('\\\\\\\\\\\\\"')\n\t                     .replace(/\\n/g, \"\\\\n\")\n\t                     .replace(/\\r/g, \"\\\\r\")\n\t                     .replace(/\\t/g, \"\\\\t\") + \"'\";\n\t         } else {\n\t             var first = part.charAt(0),\n\t                 rest = part.substring(1);\n\n\t             if (first === \"=\") {\n\t                 return \"+(\" + rest + \")+\";\n\t             } else if (first === \":\") {\n\t                 return \"+$kendoHtmlEncode(\" + rest + \")+\";\n\t             } else {\n\t                 return \";\" + part + \";$kendoOutput+=\";\n\t             }\n\t         }\n\t     }\n\n\t    var argumentNameRegExp = /^\\w+/,\n\t        encodeRegExp = /\\$\\{([^}]*)\\}/g,\n\t        escapedCurlyRegExp = /\\\\\\}/g,\n\t        curlyRegExp = /__CURLY__/g,\n\t        escapedSharpRegExp = /\\\\#/g,\n\t        sharpRegExp = /__SHARP__/g,\n\t        zeros = [\"\", \"0\", \"00\", \"000\", \"0000\"];\n\n\t    Template = {\n\t        paramName: \"data\", // name of the parameter of the generated template\n\t        useWithBlock: true, // whether to wrap the template in a with() block\n\t        render: function(template, data) {\n\t            var idx,\n\t                length,\n\t                html = \"\";\n\n\t            for (idx = 0, length = data.length; idx < length; idx++) {\n\t                html += template(data[idx]);\n\t            }\n\n\t            return html;\n\t        },\n\t        compile: function(template, options) {\n\t            var settings = extend({}, this, options),\n\t                paramName = settings.paramName,\n\t                argumentName = paramName.match(argumentNameRegExp)[0],\n\t                useWithBlock = settings.useWithBlock,\n\t                functionBody = \"var $kendoOutput, $kendoHtmlEncode = kendo.htmlEncode;\",\n\t                fn,\n\t                parts,\n\t                idx;\n\n\t            if (isFunction(template)) {\n\t                return template;\n\t            }\n\n\t            functionBody += useWithBlock ? \"with(\" + paramName + \"){\" : \"\";\n\n\t            functionBody += \"$kendoOutput=\";\n\n\t            parts = template\n\t                .replace(escapedCurlyRegExp, \"__CURLY__\")\n\t                .replace(encodeRegExp, \"#=$kendoHtmlEncode($1)#\")\n\t                .replace(curlyRegExp, \"}\")\n\t                .replace(escapedSharpRegExp, \"__SHARP__\")\n\t                .split(\"#\");\n\n\t            for (idx = 0; idx < parts.length; idx ++) {\n\t                functionBody += compilePart(parts[idx], idx % 2 === 0);\n\t            }\n\n\t            functionBody += useWithBlock ? \";}\" : \";\";\n\n\t            functionBody += \"return $kendoOutput;\";\n\n\t            functionBody = functionBody.replace(sharpRegExp, \"#\");\n\n\t            try {\n\t                fn = new Function(argumentName, functionBody);\n\t                fn._slotCount = Math.floor(parts.length / 2);\n\t                return fn;\n\t            } catch(e) {\n\t                throw new Error(kendo.format(\"Invalid template:'{0}' Generated code:'{1}'\", template, functionBody));\n\t            }\n\t        }\n\t    };\n\n\tfunction pad(number, digits, end) {\n\t    number = number + \"\";\n\t    digits = digits || 2;\n\t    end = digits - number.length;\n\n\t    if (end) {\n\t        return zeros[digits].substring(0, end) + number;\n\t    }\n\n\t    return number;\n\t}\n\n\t    //JSON stringify\n\t(function() {\n\t    var escapable = /[\\\\\\\"\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n\t        gap,\n\t        indent,\n\t        meta = {\n\t            \"\\b\": \"\\\\b\",\n\t            \"\\t\": \"\\\\t\",\n\t            \"\\n\": \"\\\\n\",\n\t            \"\\f\": \"\\\\f\",\n\t            \"\\r\": \"\\\\r\",\n\t            \"\\\"\" : '\\\\\"',\n\t            \"\\\\\": \"\\\\\\\\\"\n\t        },\n\t        rep,\n\t        toString = {}.toString;\n\n\n\t    if (typeof Date.prototype.toJSON !== FUNCTION) {\n\n\t        Date.prototype.toJSON = function () {\n\t            var that = this;\n\n\t            return isFinite(that.valueOf()) ?\n\t                pad(that.getUTCFullYear(), 4) + \"-\" +\n\t                pad(that.getUTCMonth() + 1)   + \"-\" +\n\t                pad(that.getUTCDate())        + \"T\" +\n\t                pad(that.getUTCHours())       + \":\" +\n\t                pad(that.getUTCMinutes())     + \":\" +\n\t                pad(that.getUTCSeconds())     + \"Z\" : null;\n\t        };\n\n\t        String.prototype.toJSON = Number.prototype.toJSON = Boolean.prototype.toJSON = function () {\n\t            return this.valueOf();\n\t        };\n\t    }\n\n\t    function quote(string) {\n\t        escapable.lastIndex = 0;\n\t        return escapable.test(string) ? \"\\\"\" + string.replace(escapable, function (a) {\n\t            var c = meta[a];\n\t            return typeof c === STRING ? c :\n\t                \"\\\\u\" + (\"0000\" + a.charCodeAt(0).toString(16)).slice(-4);\n\t        }) + \"\\\"\" : \"\\\"\" + string + \"\\\"\";\n\t    }\n\n\t    function str(key, holder) {\n\t        var i,\n\t            k,\n\t            v,\n\t            length,\n\t            mind = gap,\n\t            partial,\n\t            value = holder[key],\n\t            type;\n\n\t        if (value && typeof value === OBJECT && typeof value.toJSON === FUNCTION) {\n\t            value = value.toJSON(key);\n\t        }\n\n\t        if (typeof rep === FUNCTION) {\n\t            value = rep.call(holder, key, value);\n\t        }\n\n\t        type = typeof value;\n\t        if (type === STRING) {\n\t            return quote(value);\n\t        } else if (type === NUMBER) {\n\t            return isFinite(value) ? String(value) : NULL;\n\t        } else if (type === BOOLEAN || type === NULL) {\n\t            return String(value);\n\t        } else if (type === OBJECT) {\n\t            if (!value) {\n\t                return NULL;\n\t            }\n\t            gap += indent;\n\t            partial = [];\n\t            if (toString.apply(value) === \"[object Array]\") {\n\t                length = value.length;\n\t                for (i = 0; i < length; i++) {\n\t                    partial[i] = str(i, value) || NULL;\n\t                }\n\t                v = partial.length === 0 ? \"[]\" : gap ?\n\t                    \"[\\n\" + gap + partial.join(\",\\n\" + gap) + \"\\n\" + mind + \"]\" :\n\t                    \"[\" + partial.join(\",\") + \"]\";\n\t                gap = mind;\n\t                return v;\n\t            }\n\t            if (rep && typeof rep === OBJECT) {\n\t                length = rep.length;\n\t                for (i = 0; i < length; i++) {\n\t                    if (typeof rep[i] === STRING) {\n\t                        k = rep[i];\n\t                        v = str(k, value);\n\t                        if (v) {\n\t                            partial.push(quote(k) + (gap ? \": \" : \":\") + v);\n\t                        }\n\t                    }\n\t                }\n\t            } else {\n\t                for (k in value) {\n\t                    if (Object.hasOwnProperty.call(value, k)) {\n\t                        v = str(k, value);\n\t                        if (v) {\n\t                            partial.push(quote(k) + (gap ? \": \" : \":\") + v);\n\t                        }\n\t                    }\n\t                }\n\t            }\n\n\t            v = partial.length === 0 ? \"{}\" : gap ?\n\t                \"{\\n\" + gap + partial.join(\",\\n\" + gap) + \"\\n\" + mind + \"}\" :\n\t                \"{\" + partial.join(\",\") + \"}\";\n\t            gap = mind;\n\t            return v;\n\t        }\n\t    }\n\n\t    if (typeof JSON.stringify !== FUNCTION) {\n\t        JSON.stringify = function (value, replacer, space) {\n\t            var i;\n\t            gap = \"\";\n\t            indent = \"\";\n\n\t            if (typeof space === NUMBER) {\n\t                for (i = 0; i < space; i += 1) {\n\t                    indent += \" \";\n\t                }\n\n\t            } else if (typeof space === STRING) {\n\t                indent = space;\n\t            }\n\n\t            rep = replacer;\n\t            if (replacer && typeof replacer !== FUNCTION && (typeof replacer !== OBJECT || typeof replacer.length !== NUMBER)) {\n\t                throw new Error(\"JSON.stringify\");\n\t            }\n\n\t            return str(\"\", {\"\": value});\n\t        };\n\t    }\n\t})();\n\n\t// Date and Number formatting\n\t(function() {\n\t    var dateFormatRegExp = /dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yy|HH|H|hh|h|mm|m|fff|ff|f|tt|ss|s|zzz|zz|z|\"[^\"]*\"|'[^']*'/g,\n\t        standardFormatRegExp =  /^(n|c|p|e)(\\d*)$/i,\n\t        literalRegExp = /(\\\\.)|(['][^']*[']?)|([\"][^\"]*[\"]?)/g,\n\t        commaRegExp = /\\,/g,\n\t        EMPTY = \"\",\n\t        POINT = \".\",\n\t        COMMA = \",\",\n\t        SHARP = \"#\",\n\t        ZERO = \"0\",\n\t        PLACEHOLDER = \"??\",\n\t        EN = \"en-US\",\n\t        objectToString = {}.toString;\n\n\t    //cultures\n\t    kendo.cultures[\"en-US\"] = {\n\t        name: EN,\n\t        numberFormat: {\n\t            pattern: [\"-n\"],\n\t            decimals: 2,\n\t            \",\": \",\",\n\t            \".\": \".\",\n\t            groupSize: [3],\n\t            percent: {\n\t                pattern: [\"-n %\", \"n %\"],\n\t                decimals: 2,\n\t                \",\": \",\",\n\t                \".\": \".\",\n\t                groupSize: [3],\n\t                symbol: \"%\"\n\t            },\n\t            currency: {\n\t                name: \"US Dollar\",\n\t                abbr: \"USD\",\n\t                pattern: [\"($n)\", \"$n\"],\n\t                decimals: 2,\n\t                \",\": \",\",\n\t                \".\": \".\",\n\t                groupSize: [3],\n\t                symbol: \"$\"\n\t            }\n\t        },\n\t        calendars: {\n\t            standard: {\n\t                days: {\n\t                    names: [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"],\n\t                    namesAbbr: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n\t                    namesShort: [ \"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\" ]\n\t                },\n\t                months: {\n\t                    names: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\n\t                    namesAbbr: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\n\t                },\n\t                AM: [ \"AM\", \"am\", \"AM\" ],\n\t                PM: [ \"PM\", \"pm\", \"PM\" ],\n\t                patterns: {\n\t                    d: \"M/d/yyyy\",\n\t                    D: \"dddd, MMMM dd, yyyy\",\n\t                    F: \"dddd, MMMM dd, yyyy h:mm:ss tt\",\n\t                    g: \"M/d/yyyy h:mm tt\",\n\t                    G: \"M/d/yyyy h:mm:ss tt\",\n\t                    m: \"MMMM dd\",\n\t                    M: \"MMMM dd\",\n\t                    s: \"yyyy'-'MM'-'ddTHH':'mm':'ss\",\n\t                    t: \"h:mm tt\",\n\t                    T: \"h:mm:ss tt\",\n\t                    u: \"yyyy'-'MM'-'dd HH':'mm':'ss'Z'\",\n\t                    y: \"MMMM, yyyy\",\n\t                    Y: \"MMMM, yyyy\"\n\t                },\n\t                \"/\": \"/\",\n\t                \":\": \":\",\n\t                firstDay: 0,\n\t                twoDigitYearMax: 2029\n\t            }\n\t        }\n\t    };\n\n\n\t     function findCulture(culture) {\n\t        if (culture) {\n\t            if (culture.numberFormat) {\n\t                return culture;\n\t            }\n\n\t            if (typeof culture === STRING) {\n\t                var cultures = kendo.cultures;\n\t                return cultures[culture] || cultures[culture.split(\"-\")[0]] || null;\n\t            }\n\n\t            return null;\n\t        }\n\n\t        return null;\n\t    }\n\n\t    function getCulture(culture) {\n\t        if (culture) {\n\t            culture = findCulture(culture);\n\t        }\n\n\t        return culture || kendo.cultures.current;\n\t    }\n\n\t    kendo.culture = function(cultureName) {\n\t        var cultures = kendo.cultures, culture;\n\n\t        if (cultureName !== undefined) {\n\t            culture = findCulture(cultureName) || cultures[EN];\n\t            culture.calendar = culture.calendars.standard;\n\t            cultures.current = culture;\n\t        } else {\n\t            return cultures.current;\n\t        }\n\t    };\n\n\t    kendo.findCulture = findCulture;\n\t    kendo.getCulture = getCulture;\n\n\t    //set current culture to en-US.\n\t    kendo.culture(EN);\n\n\t    function formatDate(date, format, culture) {\n\t        culture = getCulture(culture);\n\n\t        var calendar = culture.calendars.standard,\n\t            days = calendar.days,\n\t            months = calendar.months;\n\n\t        format = calendar.patterns[format] || format;\n\n\t        return format.replace(dateFormatRegExp, function (match) {\n\t            var minutes;\n\t            var result;\n\t            var sign;\n\n\t            if (match === \"d\") {\n\t                result = date.getDate();\n\t            } else if (match === \"dd\") {\n\t                result = pad(date.getDate());\n\t            } else if (match === \"ddd\") {\n\t                result = days.namesAbbr[date.getDay()];\n\t            } else if (match === \"dddd\") {\n\t                result = days.names[date.getDay()];\n\t            } else if (match === \"M\") {\n\t                result = date.getMonth() + 1;\n\t            } else if (match === \"MM\") {\n\t                result = pad(date.getMonth() + 1);\n\t            } else if (match === \"MMM\") {\n\t                result = months.namesAbbr[date.getMonth()];\n\t            } else if (match === \"MMMM\") {\n\t                result = months.names[date.getMonth()];\n\t            } else if (match === \"yy\") {\n\t                result = pad(date.getFullYear() % 100);\n\t            } else if (match === \"yyyy\") {\n\t                result = pad(date.getFullYear(), 4);\n\t            } else if (match === \"h\" ) {\n\t                result = date.getHours() % 12 || 12;\n\t            } else if (match === \"hh\") {\n\t                result = pad(date.getHours() % 12 || 12);\n\t            } else if (match === \"H\") {\n\t                result = date.getHours();\n\t            } else if (match === \"HH\") {\n\t                result = pad(date.getHours());\n\t            } else if (match === \"m\") {\n\t                result = date.getMinutes();\n\t            } else if (match === \"mm\") {\n\t                result = pad(date.getMinutes());\n\t            } else if (match === \"s\") {\n\t                result = date.getSeconds();\n\t            } else if (match === \"ss\") {\n\t                result = pad(date.getSeconds());\n\t            } else if (match === \"f\") {\n\t                result = math.floor(date.getMilliseconds() / 100);\n\t            } else if (match === \"ff\") {\n\t                result = date.getMilliseconds();\n\t                if (result > 99) {\n\t                    result = math.floor(result / 10);\n\t                }\n\t                result = pad(result);\n\t            } else if (match === \"fff\") {\n\t                result = pad(date.getMilliseconds(), 3);\n\t            } else if (match === \"tt\") {\n\t                result = date.getHours() < 12 ? calendar.AM[0] : calendar.PM[0];\n\t            } else if (match === \"zzz\") {\n\t                minutes = date.getTimezoneOffset();\n\t                sign = minutes < 0;\n\n\t                result = math.abs(minutes / 60).toString().split(\".\")[0];\n\t                minutes = math.abs(minutes) - (result * 60);\n\n\t                result = (sign ? \"+\" : \"-\") + pad(result);\n\t                result += \":\" + pad(minutes);\n\t            } else if (match === \"zz\" || match === \"z\") {\n\t                result = date.getTimezoneOffset() / 60;\n\t                sign = result < 0;\n\n\t                result = math.abs(result).toString().split(\".\")[0];\n\t                result = (sign ? \"+\" : \"-\") + (match === \"zz\" ? pad(result) : result);\n\t            }\n\n\t            return result !== undefined ? result : match.slice(1, match.length - 1);\n\t        });\n\t    }\n\n\t    //number formatting\n\t    function formatNumber(number, format, culture) {\n\t        culture = getCulture(culture);\n\n\t        var numberFormat = culture.numberFormat,\n\t            decimal = numberFormat[POINT],\n\t            precision = numberFormat.decimals,\n\t            pattern = numberFormat.pattern[0],\n\t            literals = [],\n\t            symbol,\n\t            isCurrency, isPercent,\n\t            customPrecision,\n\t            formatAndPrecision,\n\t            negative = number < 0,\n\t            integer,\n\t            fraction,\n\t            integerLength,\n\t            fractionLength,\n\t            replacement = EMPTY,\n\t            value = EMPTY,\n\t            idx,\n\t            length,\n\t            ch,\n\t            hasGroup,\n\t            hasNegativeFormat,\n\t            decimalIndex,\n\t            sharpIndex,\n\t            zeroIndex,\n\t            hasZero, hasSharp,\n\t            percentIndex,\n\t            currencyIndex,\n\t            startZeroIndex,\n\t            start = -1,\n\t            end;\n\n\t        //return empty string if no number\n\t        if (number === undefined) {\n\t            return EMPTY;\n\t        }\n\n\t        if (!isFinite(number)) {\n\t            return number;\n\t        }\n\n\t        //if no format then return number.toString() or number.toLocaleString() if culture.name is not defined\n\t        if (!format) {\n\t            return culture.name.length ? number.toLocaleString() : number.toString();\n\t        }\n\n\t        formatAndPrecision = standardFormatRegExp.exec(format);\n\n\t        // standard formatting\n\t        if (formatAndPrecision) {\n\t            format = formatAndPrecision[1].toLowerCase();\n\n\t            isCurrency = format === \"c\";\n\t            isPercent = format === \"p\";\n\n\t            if (isCurrency || isPercent) {\n\t                //get specific number format information if format is currency or percent\n\t                numberFormat = isCurrency ? numberFormat.currency : numberFormat.percent;\n\t                decimal = numberFormat[POINT];\n\t                precision = numberFormat.decimals;\n\t                symbol = numberFormat.symbol;\n\t                pattern = numberFormat.pattern[negative ? 0 : 1];\n\t            }\n\n\t            customPrecision = formatAndPrecision[2];\n\n\t            if (customPrecision) {\n\t                precision = +customPrecision;\n\t            }\n\n\t            //return number in exponential format\n\t            if (format === \"e\") {\n\t                var exp = customPrecision ? number.toExponential(precision) : number.toExponential(); // toExponential() and toExponential(undefined) differ in FF #653438.\n\n\t                return exp.replace(POINT, numberFormat[POINT]);\n\t            }\n\n\t            // multiply if format is percent\n\t            if (isPercent) {\n\t                number *= 100;\n\t            }\n\n\t            number = round(number, precision);\n\t            negative = number < 0;\n\t            number = number.split(POINT);\n\n\t            integer = number[0];\n\t            fraction = number[1];\n\n\t            //exclude \"-\" if number is negative.\n\t            if (negative) {\n\t                integer = integer.substring(1);\n\t            }\n\n\t            value = groupInteger(integer, 0, integer.length, numberFormat);\n\n\t            if (fraction) {\n\t                value += decimal + fraction;\n\t            }\n\n\t            if (format === \"n\" && !negative) {\n\t                return value;\n\t            }\n\n\t            number = EMPTY;\n\n\t            for (idx = 0, length = pattern.length; idx < length; idx++) {\n\t                ch = pattern.charAt(idx);\n\n\t                if (ch === \"n\") {\n\t                    number += value;\n\t                } else if (ch === \"$\" || ch === \"%\") {\n\t                    number += symbol;\n\t                } else {\n\t                    number += ch;\n\t                }\n\t            }\n\n\t            return number;\n\t        }\n\n\t        //custom formatting\n\t        //\n\t        //separate format by sections.\n\n\t        if (format.indexOf(\"'\") > -1 || format.indexOf(\"\\\"\") > -1 || format.indexOf(\"\\\\\") > -1) {\n\t            format = format.replace(literalRegExp, function (match) {\n\t                var quoteChar = match.charAt(0).replace(\"\\\\\", \"\"),\n\t                    literal = match.slice(1).replace(quoteChar, \"\");\n\n\t                literals.push(literal);\n\n\t                return PLACEHOLDER;\n\t            });\n\t        }\n\n\t        format = format.split(\";\");\n\t        if (negative && format[1]) {\n\t            //get negative format\n\t            format = format[1];\n\t            hasNegativeFormat = true;\n\t        } else if (number === 0 && format[2]) {\n\t            //format for zeros\n\t            format = format[2];\n\t            if (format.indexOf(SHARP) == -1 && format.indexOf(ZERO) == -1) {\n\t                //return format if it is string constant.\n\t                return format;\n\t            }\n\t        } else {\n\t            format = format[0];\n\t        }\n\n\t        percentIndex = format.indexOf(\"%\");\n\t        currencyIndex = format.indexOf(\"$\");\n\n\t        isPercent = percentIndex != -1;\n\t        isCurrency = currencyIndex != -1;\n\n\t        //multiply number if the format has percent\n\t        if (isPercent) {\n\t            number *= 100;\n\t        }\n\n\t        if (isCurrency && format[currencyIndex - 1] === \"\\\\\") {\n\t            format = format.split(\"\\\\\").join(\"\");\n\t            isCurrency = false;\n\t        }\n\n\t        if (isCurrency || isPercent) {\n\t            //get specific number format information if format is currency or percent\n\t            numberFormat = isCurrency ? numberFormat.currency : numberFormat.percent;\n\t            decimal = numberFormat[POINT];\n\t            precision = numberFormat.decimals;\n\t            symbol = numberFormat.symbol;\n\t        }\n\n\t        hasGroup = format.indexOf(COMMA) > -1;\n\t        if (hasGroup) {\n\t            format = format.replace(commaRegExp, EMPTY);\n\t        }\n\n\t        decimalIndex = format.indexOf(POINT);\n\t        length = format.length;\n\n\t        if (decimalIndex != -1) {\n\t            fraction = number.toString().split(\"e\");\n\t            if (fraction[1]) {\n\t                fraction = round(number, Math.abs(fraction[1]));\n\t            } else {\n\t                fraction = fraction[0];\n\t            }\n\t            fraction = fraction.split(POINT)[1] || EMPTY;\n\t            zeroIndex = format.lastIndexOf(ZERO) - decimalIndex;\n\t            sharpIndex = format.lastIndexOf(SHARP) - decimalIndex;\n\t            hasZero = zeroIndex > -1;\n\t            hasSharp = sharpIndex > -1;\n\t            idx = fraction.length;\n\n\t            if (!hasZero && !hasSharp) {\n\t                format = format.substring(0, decimalIndex) + format.substring(decimalIndex + 1);\n\t                length = format.length;\n\t                decimalIndex = -1;\n\t                idx = 0;\n\t            }\n\n\t            if (hasZero && zeroIndex > sharpIndex) {\n\t                idx = zeroIndex;\n\t            } else if (sharpIndex > zeroIndex) {\n\t                if (hasSharp && idx > sharpIndex) {\n\t                    var rounded = round(number, sharpIndex, negative);\n\n\t                    while (rounded.charAt(rounded.length - 1) === ZERO && sharpIndex > 0 && sharpIndex > zeroIndex) {\n\t                        sharpIndex--;\n\n\t                        rounded = round(number, sharpIndex, negative);\n\t                    }\n\n\t                    idx = sharpIndex;\n\t                } else if (hasZero && idx < zeroIndex) {\n\t                    idx = zeroIndex;\n\t                }\n\t            }\n\t        }\n\n\t        number = round(number, idx, negative);\n\n\t        sharpIndex = format.indexOf(SHARP);\n\t        startZeroIndex = zeroIndex = format.indexOf(ZERO);\n\n\t        //define the index of the first digit placeholder\n\t        if (sharpIndex == -1 && zeroIndex != -1) {\n\t            start = zeroIndex;\n\t        } else if (sharpIndex != -1 && zeroIndex == -1) {\n\t            start = sharpIndex;\n\t        } else {\n\t            start = sharpIndex > zeroIndex ? zeroIndex : sharpIndex;\n\t        }\n\n\t        sharpIndex = format.lastIndexOf(SHARP);\n\t        zeroIndex = format.lastIndexOf(ZERO);\n\n\t        //define the index of the last digit placeholder\n\t        if (sharpIndex == -1 && zeroIndex != -1) {\n\t            end = zeroIndex;\n\t        } else if (sharpIndex != -1 && zeroIndex == -1) {\n\t            end = sharpIndex;\n\t        } else {\n\t            end = sharpIndex > zeroIndex ? sharpIndex : zeroIndex;\n\t        }\n\n\t        if (start == length) {\n\t            end = start;\n\t        }\n\n\t        if (start != -1) {\n\t            value = number.toString().split(POINT);\n\t            integer = value[0];\n\t            fraction = value[1] || EMPTY;\n\n\t            integerLength = integer.length;\n\t            fractionLength = fraction.length;\n\n\t            if (negative && (number * -1) >= 0) {\n\t                negative = false;\n\t            }\n\n\t            number = format.substring(0, start);\n\n\t            if (negative && !hasNegativeFormat) {\n\t                number += \"-\";\n\t            }\n\n\t            for (idx = start; idx < length; idx++) {\n\t                ch = format.charAt(idx);\n\n\t                if (decimalIndex == -1) {\n\t                    if (end - idx < integerLength) {\n\t                        number += integer;\n\t                        break;\n\t                    }\n\t                } else {\n\t                    if (zeroIndex != -1 && zeroIndex < idx) {\n\t                        replacement = EMPTY;\n\t                    }\n\n\t                    if ((decimalIndex - idx) <= integerLength && decimalIndex - idx > -1) {\n\t                        number += integer;\n\t                        idx = decimalIndex;\n\t                    }\n\n\t                    if (decimalIndex === idx) {\n\t                        number += (fraction ? decimal : EMPTY) + fraction;\n\t                        idx += end - decimalIndex + 1;\n\t                        continue;\n\t                    }\n\t                }\n\n\t                if (ch === ZERO) {\n\t                    number += ch;\n\t                    replacement = ch;\n\t                } else if (ch === SHARP) {\n\t                    number += replacement;\n\t                }\n\t            }\n\n\t            if (hasGroup) {\n\t                number = groupInteger(number, start + (negative && !hasNegativeFormat ? 1 : 0), Math.max(end, (integerLength + start)), numberFormat);\n\t            }\n\n\t            if (end >= start) {\n\t                number += format.substring(end + 1);\n\t            }\n\n\t            //replace symbol placeholders\n\t            if (isCurrency || isPercent) {\n\t                value = EMPTY;\n\t                for (idx = 0, length = number.length; idx < length; idx++) {\n\t                    ch = number.charAt(idx);\n\t                    value += (ch === \"$\" || ch === \"%\") ? symbol : ch;\n\t                }\n\t                number = value;\n\t            }\n\n\t            length = literals.length;\n\n\t            if (length) {\n\t                for (idx = 0; idx < length; idx++) {\n\t                    number = number.replace(PLACEHOLDER, literals[idx]);\n\t                }\n\t            }\n\t        }\n\n\t        return number;\n\t    }\n\n\t    var groupInteger = function(number, start, end, numberFormat) {\n\t        var decimalIndex = number.indexOf(numberFormat[POINT]);\n\t        var groupSizes = numberFormat.groupSize.slice();\n\t        var groupSize = groupSizes.shift();\n\t        var integer, integerLength;\n\t        var idx, parts, value;\n\t        var newGroupSize;\n\n\t        end = decimalIndex !== -1 ? decimalIndex : end + 1;\n\n\t        integer = number.substring(start, end);\n\t        integerLength = integer.length;\n\n\t        if (integerLength >= groupSize) {\n\t            idx = integerLength;\n\t            parts = [];\n\n\t            while (idx > -1) {\n\t                value = integer.substring(idx - groupSize, idx);\n\t                if (value) {\n\t                    parts.push(value);\n\t                }\n\t                idx -= groupSize;\n\t                newGroupSize = groupSizes.shift();\n\t                groupSize = newGroupSize !== undefined ? newGroupSize : groupSize;\n\n\t                if (groupSize === 0) {\n\t                    if (idx > 0) {\n\t                        parts.push(integer.substring(0, idx));\n\t                    }\n\t                    break;\n\t                }\n\t            }\n\n\t            integer = parts.reverse().join(numberFormat[COMMA]);\n\t            number = number.substring(0, start) + integer + number.substring(end);\n\t        }\n\n\t        return number;\n\t    };\n\n\t    var round = function(value, precision, negative) {\n\t        precision = precision || 0;\n\n\t        value = value.toString().split('e');\n\t        value = Math.round(+(value[0] + 'e' + (value[1] ? (+value[1] + precision) : precision)));\n\n\t        if (negative) {\n\t            value = -value;\n\t        }\n\n\t        value = value.toString().split('e');\n\t        value = +(value[0] + 'e' + (value[1] ? (+value[1] - precision) : -precision));\n\n\t        return value.toFixed(Math.min(precision, 20));\n\t    };\n\n\t    var toString = function(value, fmt, culture) {\n\t        if (fmt) {\n\t            if (objectToString.call(value) === \"[object Date]\") {\n\t                return formatDate(value, fmt, culture);\n\t            } else if (typeof value === NUMBER) {\n\t                return formatNumber(value, fmt, culture);\n\t            }\n\t        }\n\n\t        return value !== undefined ? value : \"\";\n\t    };\n\n\t    kendo.format = function(fmt) {\n\t        var values = arguments;\n\n\t        return fmt.replace(formatRegExp, function(match, index, placeholderFormat) {\n\t            var value = values[parseInt(index, 10) + 1];\n\n\t            return toString(value, placeholderFormat ? placeholderFormat.substring(1) : \"\");\n\t        });\n\t    };\n\n\t    kendo._extractFormat = function (format) {\n\t        if (format.slice(0,3) === \"{0:\") {\n\t            format = format.slice(3, format.length - 1);\n\t        }\n\n\t        return format;\n\t    };\n\n\t    kendo._activeElement = function() {\n\t        try {\n\t            return document.activeElement;\n\t        } catch(e) {\n\t            return document.documentElement.activeElement;\n\t        }\n\t    };\n\n\t    kendo._round = round;\n\t    kendo._outerWidth = function (element, includeMargin) { return $(element).outerWidth(includeMargin || false) || 0; };\n\t    kendo._outerHeight = function (element, includeMargin) { return $(element).outerHeight(includeMargin || false) || 0; };\n\t    kendo.toString = toString;\n\t})();\n\n\n\t(function() {\n\t    var nonBreakingSpaceRegExp = /\\u00A0/g,\n\t        exponentRegExp = /[eE][\\-+]?[0-9]+/,\n\t        shortTimeZoneRegExp = /[+|\\-]\\d{1,2}/,\n\t        longTimeZoneRegExp = /[+|\\-]\\d{1,2}:?\\d{2}/,\n\t        dateRegExp = /^\\/Date\\((.*?)\\)\\/$/,\n\t        offsetRegExp = /[+-]\\d*/,\n\t        FORMATS_SEQUENCE = [ [], [ \"G\", \"g\", \"F\" ], [ \"D\", \"d\", \"y\", \"m\", \"T\", \"t\" ] ],\n\t        STANDARD_FORMATS = [\n\t            [\n\t            \"yyyy-MM-ddTHH:mm:ss.fffffffzzz\",\n\t            \"yyyy-MM-ddTHH:mm:ss.fffffff\",\n\t            \"yyyy-MM-ddTHH:mm:ss.fffzzz\",\n\t            \"yyyy-MM-ddTHH:mm:ss.fff\",\n\t            \"ddd MMM dd yyyy HH:mm:ss\",\n\t            \"yyyy-MM-ddTHH:mm:sszzz\",\n\t            \"yyyy-MM-ddTHH:mmzzz\",\n\t            \"yyyy-MM-ddTHH:mmzz\",\n\t            \"yyyy-MM-ddTHH:mm:ss\",\n\t            \"yyyy-MM-dd HH:mm:ss\",\n\t            \"yyyy/MM/dd HH:mm:ss\"\n\t            ], [\n\t            \"yyyy-MM-ddTHH:mm\",\n\t            \"yyyy-MM-dd HH:mm\",\n\t            \"yyyy/MM/dd HH:mm\"\n\t            ], [\n\t            \"yyyy/MM/dd\",\n\t            \"yyyy-MM-dd\",\n\t            \"HH:mm:ss\",\n\t            \"HH:mm\"\n\t            ]\n\t        ],\n\t        numberRegExp = {\n\t            2: /^\\d{1,2}/,\n\t            3: /^\\d{1,3}/,\n\t            4: /^\\d{4}/\n\t        },\n\t        objectToString = {}.toString;\n\n\t    function outOfRange(value, start, end) {\n\t        return !(value >= start && value <= end);\n\t    }\n\n\t    function designatorPredicate(designator) {\n\t        return designator.charAt(0);\n\t    }\n\n\t    function mapDesignators(designators) {\n\t        return $.map(designators, designatorPredicate);\n\t    }\n\n\t    //if date's day is different than the typed one - adjust\n\t    function adjustDST(date, hours) {\n\t        if (!hours && date.getHours() === 23) {\n\t            date.setHours(date.getHours() + 2);\n\t        }\n\t    }\n\n\t    function lowerArray(data) {\n\t        var idx = 0,\n\t            length = data.length,\n\t            array = [];\n\n\t        for (; idx < length; idx++) {\n\t            array[idx] = (data[idx] + \"\").toLowerCase();\n\t        }\n\n\t        return array;\n\t    }\n\n\t    function lowerLocalInfo(localInfo) {\n\t        var newLocalInfo = {}, property;\n\n\t        for (property in localInfo) {\n\t            newLocalInfo[property] = lowerArray(localInfo[property]);\n\t        }\n\n\t        return newLocalInfo;\n\t    }\n\n\t    function parseExact(value, format, culture, strict) {\n\t        if (!value) {\n\t            return null;\n\t        }\n\n\t        var lookAhead = function (match) {\n\t                var i = 0;\n\t                while (format[idx] === match) {\n\t                    i++;\n\t                    idx++;\n\t                }\n\t                if (i > 0) {\n\t                    idx -= 1;\n\t                }\n\t                return i;\n\t            },\n\t            getNumber = function(size) {\n\t                var rg = numberRegExp[size] || new RegExp('^\\\\d{1,' + size + '}'),\n\t                    match = value.substr(valueIdx, size).match(rg);\n\n\t                if (match) {\n\t                    match = match[0];\n\t                    valueIdx += match.length;\n\t                    return parseInt(match, 10);\n\t                }\n\t                return null;\n\t            },\n\t            getIndexByName = function (names, lower) {\n\t                var i = 0,\n\t                    length = names.length,\n\t                    name, nameLength,\n\t                    matchLength = 0,\n\t                    matchIdx = 0,\n\t                    subValue;\n\n\t                for (; i < length; i++) {\n\t                    name = names[i];\n\t                    nameLength = name.length;\n\t                    subValue = value.substr(valueIdx, nameLength);\n\n\t                    if (lower) {\n\t                        subValue = subValue.toLowerCase();\n\t                    }\n\n\t                    if (subValue == name && nameLength > matchLength) {\n\t                        matchLength = nameLength;\n\t                        matchIdx = i;\n\t                    }\n\t                }\n\n\t                if (matchLength) {\n\t                    valueIdx += matchLength;\n\t                    return matchIdx + 1;\n\t                }\n\n\t                return null;\n\t            },\n\t            checkLiteral = function() {\n\t                var result = false;\n\t                if (value.charAt(valueIdx) === format[idx]) {\n\t                    valueIdx++;\n\t                    result = true;\n\t                }\n\t                return result;\n\t            },\n\t            calendar = culture.calendars.standard,\n\t            year = null,\n\t            month = null,\n\t            day = null,\n\t            hours = null,\n\t            minutes = null,\n\t            seconds = null,\n\t            milliseconds = null,\n\t            idx = 0,\n\t            valueIdx = 0,\n\t            literal = false,\n\t            date = new Date(),\n\t            twoDigitYearMax = calendar.twoDigitYearMax || 2029,\n\t            defaultYear = date.getFullYear(),\n\t            ch, count, length, pattern,\n\t            pmHour, UTC, matches,\n\t            amDesignators, pmDesignators,\n\t            hoursOffset, minutesOffset,\n\t            hasTime, match;\n\n\t        if (!format) {\n\t            format = \"d\"; //shord date format\n\t        }\n\n\t        //if format is part of the patterns get real format\n\t        pattern = calendar.patterns[format];\n\t        if (pattern) {\n\t            format = pattern;\n\t        }\n\n\t        format = format.split(\"\");\n\t        length = format.length;\n\n\t        for (; idx < length; idx++) {\n\t            ch = format[idx];\n\n\t            if (literal) {\n\t                if (ch === \"'\") {\n\t                    literal = false;\n\t                } else {\n\t                    checkLiteral();\n\t                }\n\t            } else {\n\t                if (ch === \"d\") {\n\t                    count = lookAhead(\"d\");\n\t                    if (!calendar._lowerDays) {\n\t                        calendar._lowerDays = lowerLocalInfo(calendar.days);\n\t                    }\n\n\t                    if (day !== null && count > 2) {\n\t                        continue;\n\t                    }\n\n\t                    day = count < 3 ? getNumber(2) : getIndexByName(calendar._lowerDays[count == 3 ? \"namesAbbr\" : \"names\"], true);\n\n\t                    if (day === null || outOfRange(day, 1, 31)) {\n\t                        return null;\n\t                    }\n\t                } else if (ch === \"M\") {\n\t                    count = lookAhead(\"M\");\n\t                    if (!calendar._lowerMonths) {\n\t                        calendar._lowerMonths = lowerLocalInfo(calendar.months);\n\t                    }\n\t                    month = count < 3 ? getNumber(2) : getIndexByName(calendar._lowerMonths[count == 3 ? 'namesAbbr' : 'names'], true);\n\n\t                    if (month === null || outOfRange(month, 1, 12)) {\n\t                        return null;\n\t                    }\n\t                    month -= 1; //because month is zero based\n\t                } else if (ch === \"y\") {\n\t                    count = lookAhead(\"y\");\n\t                    year = getNumber(count);\n\n\t                    if (year === null) {\n\t                        return null;\n\t                    }\n\n\t                    if (count == 2) {\n\t                        if (typeof twoDigitYearMax === \"string\") {\n\t                            twoDigitYearMax = defaultYear + parseInt(twoDigitYearMax, 10);\n\t                        }\n\n\t                        year = (defaultYear - defaultYear % 100) + year;\n\t                        if (year > twoDigitYearMax) {\n\t                            year -= 100;\n\t                        }\n\t                    }\n\t                } else if (ch === \"h\" ) {\n\t                    lookAhead(\"h\");\n\t                    hours = getNumber(2);\n\t                    if (hours == 12) {\n\t                        hours = 0;\n\t                    }\n\t                    if (hours === null || outOfRange(hours, 0, 11)) {\n\t                        return null;\n\t                    }\n\t                } else if (ch === \"H\") {\n\t                    lookAhead(\"H\");\n\t                    hours = getNumber(2);\n\t                    if (hours === null || outOfRange(hours, 0, 23)) {\n\t                        return null;\n\t                    }\n\t                } else if (ch === \"m\") {\n\t                    lookAhead(\"m\");\n\t                    minutes = getNumber(2);\n\t                    if (minutes === null || outOfRange(minutes, 0, 59)) {\n\t                        return null;\n\t                    }\n\t                } else if (ch === \"s\") {\n\t                    lookAhead(\"s\");\n\t                    seconds = getNumber(2);\n\t                    if (seconds === null || outOfRange(seconds, 0, 59)) {\n\t                        return null;\n\t                    }\n\t                } else if (ch === \"f\") {\n\t                    count = lookAhead(\"f\");\n\n\t                    match = value.substr(valueIdx, count).match(numberRegExp[3]);\n\t                    milliseconds = getNumber(count); //move value index position\n\n\t                    if (milliseconds !== null) {\n\t                        milliseconds = parseFloat(\"0.\" + match[0], 10);\n\t                        milliseconds = kendo._round(milliseconds, 3);\n\t                        milliseconds *= 1000;\n\t                    }\n\n\t                    if (milliseconds === null || outOfRange(milliseconds, 0, 999)) {\n\t                        return null;\n\t                    }\n\n\t                } else if (ch === \"t\") {\n\t                    count = lookAhead(\"t\");\n\t                    amDesignators = calendar.AM;\n\t                    pmDesignators = calendar.PM;\n\n\t                    if (count === 1) {\n\t                        amDesignators = mapDesignators(amDesignators);\n\t                        pmDesignators = mapDesignators(pmDesignators);\n\t                    }\n\n\t                    pmHour = getIndexByName(pmDesignators);\n\t                    if (!pmHour && !getIndexByName(amDesignators)) {\n\t                        return null;\n\t                    }\n\t                }\n\t                else if (ch === \"z\") {\n\t                    UTC = true;\n\t                    count = lookAhead(\"z\");\n\n\t                    if (value.substr(valueIdx, 1) === \"Z\") {\n\t                        checkLiteral();\n\t                        continue;\n\t                    }\n\n\t                    matches = value.substr(valueIdx, 6)\n\t                                   .match(count > 2 ? longTimeZoneRegExp : shortTimeZoneRegExp);\n\n\t                    if (!matches) {\n\t                        return null;\n\t                    }\n\n\t                    matches = matches[0].split(\":\");\n\n\t                    hoursOffset = matches[0];\n\t                    minutesOffset = matches[1];\n\n\t                    if (!minutesOffset && hoursOffset.length > 3) { //(+|-)[hh][mm] format is used\n\t                        valueIdx = hoursOffset.length - 2;\n\t                        minutesOffset = hoursOffset.substring(valueIdx);\n\t                        hoursOffset = hoursOffset.substring(0, valueIdx);\n\t                    }\n\n\t                    hoursOffset = parseInt(hoursOffset, 10);\n\t                    if (outOfRange(hoursOffset, -12, 13)) {\n\t                        return null;\n\t                    }\n\n\t                    if (count > 2) {\n\t                        minutesOffset = matches[0][0] + minutesOffset;\n\t                        minutesOffset = parseInt(minutesOffset, 10);\n\t                        if (isNaN(minutesOffset) || outOfRange(minutesOffset, -59, 59)) {\n\t                            return null;\n\t                        }\n\t                    }\n\t                } else if (ch === \"'\") {\n\t                    literal = true;\n\t                    checkLiteral();\n\t                } else if (!checkLiteral()) {\n\t                    return null;\n\t                }\n\t            }\n\t        }\n\n\t        // if more characters follow, assume wrong format\n\t        // https://github.com/telerik/kendo-ui-core/issues/3476\n\t        if (strict && !/^\\s*$/.test(value.substr(valueIdx))) {\n\t            return null;\n\t        }\n\n\t        hasTime = hours !== null || minutes !== null || seconds || null;\n\n\t        if (year === null && month === null && day === null && hasTime) {\n\t            year = defaultYear;\n\t            month = date.getMonth();\n\t            day = date.getDate();\n\t        } else {\n\t            if (year === null) {\n\t                year = defaultYear;\n\t            }\n\n\t            if (day === null) {\n\t                day = 1;\n\t            }\n\t        }\n\n\t        if (pmHour && hours < 12) {\n\t            hours += 12;\n\t        }\n\n\t        if (UTC) {\n\t            if (hoursOffset) {\n\t                hours += -hoursOffset;\n\t            }\n\n\t            if (minutesOffset) {\n\t                minutes += -minutesOffset;\n\t            }\n\n\t            value = new Date(Date.UTC(year, month, day, hours, minutes, seconds, milliseconds));\n\t        } else {\n\t            value = new Date(year, month, day, hours, minutes, seconds, milliseconds);\n\t            adjustDST(value, hours);\n\t        }\n\n\t        if (year < 100) {\n\t            value.setFullYear(year);\n\t        }\n\n\t        if (value.getDate() !== day && UTC === undefined) {\n\t            return null;\n\t        }\n\n\t        return value;\n\t    }\n\n\t    function parseMicrosoftFormatOffset(offset) {\n\t        var sign = offset.substr(0, 1) === \"-\" ? -1 : 1;\n\n\t        offset = offset.substring(1);\n\t        offset = (parseInt(offset.substr(0, 2), 10) * 60) + parseInt(offset.substring(2), 10);\n\n\t        return sign * offset;\n\t    }\n\n\t    function getDefaultFormats(culture) {\n\t        var length = math.max(FORMATS_SEQUENCE.length, STANDARD_FORMATS.length);\n\t        var calendar = culture.calendar || culture.calendars.standard;\n\t        var patterns = calendar.patterns;\n\t        var cultureFormats, formatIdx, idx;\n\t        var formats = [];\n\n\t        for (idx = 0; idx < length; idx++) {\n\t            cultureFormats = FORMATS_SEQUENCE[idx];\n\t            for (formatIdx = 0; formatIdx < cultureFormats.length; formatIdx++) {\n\t                formats.push(patterns[cultureFormats[formatIdx]]);\n\t            }\n\t            formats = formats.concat(STANDARD_FORMATS[idx]);\n\t        }\n\n\t        return formats;\n\t    }\n\n\t    function internalParseDate(value, formats, culture, strict) {\n\t        if (objectToString.call(value) === \"[object Date]\") {\n\t            return value;\n\t        }\n\n\t        var idx = 0;\n\t        var date = null;\n\t        var length;\n\t        var tzoffset;\n\n\t        if (value && value.indexOf(\"/D\") === 0) {\n\t            date = dateRegExp.exec(value);\n\t            if (date) {\n\t                date = date[1];\n\t                tzoffset = offsetRegExp.exec(date.substring(1));\n\n\t                date = new Date(parseInt(date, 10));\n\n\t                if (tzoffset) {\n\t                    tzoffset = parseMicrosoftFormatOffset(tzoffset[0]);\n\t                    date = kendo.timezone.apply(date, 0);\n\t                    date = kendo.timezone.convert(date, 0, -1 * tzoffset);\n\t                }\n\n\t                return date;\n\t            }\n\t        }\n\n\t        culture = kendo.getCulture(culture);\n\n\t        if (!formats) {\n\t            formats = getDefaultFormats(culture);\n\t        }\n\n\t        formats = isArray(formats) ? formats: [formats];\n\t        length = formats.length;\n\n\t        for (; idx < length; idx++) {\n\t            date = parseExact(value, formats[idx], culture, strict);\n\t            if (date) {\n\t                return date;\n\t            }\n\t        }\n\n\t        return date;\n\t    }\n\n\t    kendo.parseDate = function(value, formats, culture) {\n\t        return internalParseDate(value, formats, culture, false);\n\t    };\n\n\t    kendo.parseExactDate = function(value, formats, culture) {\n\t        return internalParseDate(value, formats, culture, true);\n\t    };\n\n\t    kendo.parseInt = function(value, culture) {\n\t        var result = kendo.parseFloat(value, culture);\n\t        if (result) {\n\t            result = result | 0;\n\t        }\n\t        return result;\n\t    };\n\n\t    kendo.parseFloat = function(value, culture, format) {\n\t        if (!value && value !== 0) {\n\t           return null;\n\t        }\n\n\t        if (typeof value === NUMBER) {\n\t           return value;\n\t        }\n\n\t        value = value.toString();\n\t        culture = kendo.getCulture(culture);\n\n\t        var number = culture.numberFormat,\n\t            percent = number.percent,\n\t            currency = number.currency,\n\t            symbol = currency.symbol,\n\t            percentSymbol = percent.symbol,\n\t            negative = value.indexOf(\"-\"),\n\t            parts, isPercent;\n\n\t        //handle exponential number\n\t        if (exponentRegExp.test(value)) {\n\t            value = parseFloat(value.replace(number[\".\"], \".\"));\n\t            if (isNaN(value)) {\n\t                value = null;\n\t            }\n\t            return value;\n\t        }\n\n\t        if (negative > 0) {\n\t            return null;\n\t        } else {\n\t            negative = negative > -1;\n\t        }\n\n\t        if (value.indexOf(symbol) > -1 || (format && format.toLowerCase().indexOf(\"c\") > -1)) {\n\t            number = currency;\n\t            parts = number.pattern[0].replace(\"$\", symbol).split(\"n\");\n\t            if (value.indexOf(parts[0]) > -1 && value.indexOf(parts[1]) > -1) {\n\t                value = value.replace(parts[0], \"\").replace(parts[1], \"\");\n\t                negative = true;\n\t            }\n\t        } else if (value.indexOf(percentSymbol) > -1) {\n\t            isPercent = true;\n\t            number = percent;\n\t            symbol = percentSymbol;\n\t        }\n\n\t        value = value.replace(\"-\", \"\")\n\t                     .replace(symbol, \"\")\n\t                     .replace(nonBreakingSpaceRegExp, \" \")\n\t                     .split(number[\",\"].replace(nonBreakingSpaceRegExp, \" \")).join(\"\")\n\t                     .replace(number[\".\"], \".\");\n\n\t        value = parseFloat(value);\n\n\t        if (isNaN(value)) {\n\t            value = null;\n\t        } else if (negative) {\n\t            value *= -1;\n\t        }\n\n\t        if (value && isPercent) {\n\t            value /= 100;\n\t        }\n\n\t        return value;\n\t    };\n\t})();\n\n\t    function getShadows(element) {\n\t        var shadow = element.css(kendo.support.transitions.css + \"box-shadow\") || element.css(\"box-shadow\"),\n\t            radius = shadow ? shadow.match(boxShadowRegExp) || [ 0, 0, 0, 0, 0 ] : [ 0, 0, 0, 0, 0 ],\n\t            blur = math.max((+radius[3]), +(radius[4] || 0));\n\n\t        return {\n\t            left: (-radius[1]) + blur,\n\t            right: (+radius[1]) + blur,\n\t            bottom: (+radius[2]) + blur\n\t        };\n\t    }\n\n\t    function wrap(element, autosize) {\n\t        var browser = support.browser,\n\t            percentage,\n\t            outerWidth = kendo._outerWidth,\n\t            outerHeight = kendo._outerHeight;\n\n\t        if (!element.parent().hasClass(\"k-animation-container\")) {\n\t            var width = element[0].style.width,\n\t                height = element[0].style.height,\n\t                percentWidth = percentRegExp.test(width),\n\t                percentHeight = percentRegExp.test(height);\n\n\t            percentage = percentWidth || percentHeight;\n\n\t            if (!percentWidth && (!autosize || (autosize && width) || element.hasClass(\"k-tooltip\"))) { width = autosize ? outerWidth(element) + 1 : outerWidth(element); }\n\t            if (!percentHeight && (!autosize || (autosize && height))) { height = outerHeight(element); }\n\n\t            element.wrap(\n\t                         $(\"<div/>\")\n\t                         .addClass(\"k-animation-container\")\n\t                         .css({\n\t                             width: width,\n\t                             height: height\n\t                         }));\n\n\t            if (percentage) {\n\t                element.css({\n\t                    width: \"100%\",\n\t                    height: \"100%\",\n\t                    boxSizing: \"border-box\",\n\t                    mozBoxSizing: \"border-box\",\n\t                    webkitBoxSizing: \"border-box\"\n\t                });\n\t            }\n\t        } else {\n\t            var wrapper = element.parent(\".k-animation-container\"),\n\t                wrapperStyle = wrapper[0].style;\n\n\t            if (wrapper.is(\":hidden\")) {\n\t                wrapper.css({\n\t                    display: \"\",\n\t                    position: \"\"\n\t                });\n\t            }\n\n\t            percentage = percentRegExp.test(wrapperStyle.width) || percentRegExp.test(wrapperStyle.height);\n\n\t            if (!percentage) {\n\t                wrapper.css({\n\t                    width: autosize ? outerWidth(element) + 1 : outerWidth(element),\n\t                    height: outerHeight(element),\n\t                    boxSizing: \"content-box\",\n\t                    mozBoxSizing: \"content-box\",\n\t                    webkitBoxSizing: \"content-box\"\n\t                });\n\t            }\n\t        }\n\n\t        if (browser.msie && math.floor(browser.version) <= 7) {\n\t            element.css({ zoom: 1 });\n\t            element.children(\".k-menu\").width(element.width());\n\t        }\n\n\t        return element.parent();\n\t    }\n\n\t    function deepExtend(destination) {\n\t        var i = 1,\n\t            length = arguments.length;\n\n\t        for (i = 1; i < length; i++) {\n\t            deepExtendOne(destination, arguments[i]);\n\t        }\n\n\t        return destination;\n\t    }\n\n\t    function deepExtendOne(destination, source) {\n\t        var ObservableArray = kendo.data.ObservableArray,\n\t            LazyObservableArray = kendo.data.LazyObservableArray,\n\t            DataSource = kendo.data.DataSource,\n\t            HierarchicalDataSource = kendo.data.HierarchicalDataSource,\n\t            property,\n\t            propValue,\n\t            propType,\n\t            propInit,\n\t            destProp;\n\n\t        for (property in source) {\n\t            propValue = source[property];\n\t            propType = typeof propValue;\n\n\t            if (propType === OBJECT && propValue !== null) {\n\t                propInit = propValue.constructor;\n\t            } else {\n\t                propInit = null;\n\t            }\n\n\t            if (propInit &&\n\t                propInit !== Array && propInit !== ObservableArray && propInit !== LazyObservableArray &&\n\t                propInit !== DataSource && propInit !== HierarchicalDataSource && propInit !== RegExp) {\n\n\t                if (propValue instanceof Date) {\n\t                    destination[property] = new Date(propValue.getTime());\n\t                } else if (isFunction(propValue.clone)) {\n\t                    destination[property] = propValue.clone();\n\t                } else {\n\t                    destProp = destination[property];\n\t                    if (typeof (destProp) === OBJECT) {\n\t                        destination[property] = destProp || {};\n\t                    } else {\n\t                        destination[property] = {};\n\t                    }\n\t                    deepExtendOne(destination[property], propValue);\n\t                }\n\t            } else if (propType !== UNDEFINED) {\n\t                destination[property] = propValue;\n\t            }\n\t        }\n\n\t        return destination;\n\t    }\n\n\t    function testRx(agent, rxs, dflt) {\n\t        for (var rx in rxs) {\n\t            if (rxs.hasOwnProperty(rx) && rxs[rx].test(agent)) {\n\t                return rx;\n\t            }\n\t        }\n\t        return dflt !== undefined ? dflt : agent;\n\t    }\n\n\t    function toHyphens(str) {\n\t        return str.replace(/([a-z][A-Z])/g, function (g) {\n\t            return g.charAt(0) + '-' + g.charAt(1).toLowerCase();\n\t        });\n\t    }\n\n\t    function toCamelCase(str) {\n\t        return str.replace(/\\-(\\w)/g, function (strMatch, g1) {\n\t            return g1.toUpperCase();\n\t        });\n\t    }\n\n\t    function getComputedStyles(element, properties) {\n\t        var styles = {}, computedStyle;\n\n\t        if (document.defaultView && document.defaultView.getComputedStyle) {\n\t            computedStyle = document.defaultView.getComputedStyle(element, \"\");\n\n\t            if (properties) {\n\t                $.each(properties, function(idx, value) {\n\t                    styles[value] = computedStyle.getPropertyValue(value);\n\t                });\n\t            }\n\t        } else {\n\t            computedStyle = element.currentStyle;\n\n\t            if (properties) {\n\t                $.each(properties, function(idx, value) {\n\t                    styles[value] = computedStyle[toCamelCase(value)];\n\t                });\n\t            }\n\t        }\n\n\t        if (!kendo.size(styles)) {\n\t            styles = computedStyle;\n\t        }\n\n\t        return styles;\n\t    }\n\n\t    function isScrollable(element) {\n\t        if (element && element.className && typeof(element.className) === \"string\" && element.className.indexOf(\"k-auto-scrollable\") > -1) {\n\t            return true;\n\t        }\n\n\t        var overflow = getComputedStyles(element, [\"overflow\"]).overflow;\n\t        return overflow == \"auto\" || overflow == \"scroll\";\n\t    }\n\n\t    function scrollLeft(element, value) {\n\t        var webkit = support.browser.webkit;\n\t        var mozila = support.browser.mozilla;\n\t        var el = element instanceof $ ? element[0] : element;\n\t        var isRtl;\n\n\t        if (!element) {\n\t            return;\n\t        }\n\n\t        isRtl = support.isRtl(element);\n\n\t        if (value !== undefined) {\n\t            if (isRtl && webkit) {\n\t                el.scrollLeft = el.scrollWidth - el.clientWidth - value;\n\t            } else if (isRtl && mozila) {\n\t                el.scrollLeft = -value;\n\t            } else {\n\t                el.scrollLeft = value;\n\t            }\n\t        } else {\n\t            if (isRtl && webkit) {\n\t                return el.scrollWidth - el.clientWidth - el.scrollLeft;\n\t            } else {\n\t                return Math.abs(el.scrollLeft);\n\t            }\n\t        }\n\t    }\n\n\t    (function () {\n\t        support._scrollbar = undefined;\n\n\t        support.scrollbar = function (refresh) {\n\t            if (!isNaN(support._scrollbar) && !refresh) {\n\t                return support._scrollbar;\n\t            } else {\n\t                var div = document.createElement(\"div\"),\n\t                    result;\n\n\t                div.style.cssText = \"overflow:scroll;overflow-x:hidden;zoom:1;clear:both;display:block\";\n\t                div.innerHTML = \"&nbsp;\";\n\t                document.body.appendChild(div);\n\n\t                support._scrollbar = result = div.offsetWidth - div.scrollWidth;\n\n\t                document.body.removeChild(div);\n\n\t                return result;\n\t            }\n\t        };\n\n\t        support.isRtl = function(element) {\n\t            return $(element).closest(\".k-rtl\").length > 0;\n\t        };\n\n\t        var table = document.createElement(\"table\");\n\n\t        // Internet Explorer does not support setting the innerHTML of TBODY and TABLE elements\n\t        try {\n\t            table.innerHTML = \"<tr><td></td></tr>\";\n\n\t            support.tbodyInnerHtml = true;\n\t        } catch (e) {\n\t            support.tbodyInnerHtml = false;\n\t        }\n\n\t        support.touch = \"ontouchstart\" in window;\n\n\t        var docStyle = document.documentElement.style;\n\t        var transitions = support.transitions = false,\n\t            transforms = support.transforms = false,\n\t            elementProto = \"HTMLElement\" in window ? HTMLElement.prototype : [];\n\n\t        support.hasHW3D = (\"WebKitCSSMatrix\" in window && \"m11\" in new window.WebKitCSSMatrix()) || \"MozPerspective\" in docStyle || \"msPerspective\" in docStyle;\n\t        support.cssFlexbox = (\"flexWrap\" in docStyle) || (\"WebkitFlexWrap\" in docStyle) || (\"msFlexWrap\" in docStyle);\n\n\t        each([ \"Moz\", \"webkit\", \"O\", \"ms\" ], function () {\n\t            var prefix = this.toString(),\n\t                hasTransitions = typeof table.style[prefix + \"Transition\"] === STRING;\n\n\t            if (hasTransitions || typeof table.style[prefix + \"Transform\"] === STRING) {\n\t                var lowPrefix = prefix.toLowerCase();\n\n\t                transforms = {\n\t                    css: (lowPrefix != \"ms\") ? \"-\" + lowPrefix + \"-\" : \"\",\n\t                    prefix: prefix,\n\t                    event: (lowPrefix === \"o\" || lowPrefix === \"webkit\") ? lowPrefix : \"\"\n\t                };\n\n\t                if (hasTransitions) {\n\t                    transitions = transforms;\n\t                    transitions.event = transitions.event ? transitions.event + \"TransitionEnd\" : \"transitionend\";\n\t                }\n\n\t                return false;\n\t            }\n\t        });\n\n\t        table = null;\n\n\t        support.transforms = transforms;\n\t        support.transitions = transitions;\n\n\t        support.devicePixelRatio = window.devicePixelRatio === undefined ? 1 : window.devicePixelRatio;\n\n\t        try {\n\t            support.screenWidth = window.outerWidth || window.screen ? window.screen.availWidth : window.innerWidth;\n\t            support.screenHeight = window.outerHeight || window.screen ? window.screen.availHeight : window.innerHeight;\n\t        } catch(e) {\n\t            //window.outerWidth throws error when in IE showModalDialog.\n\t            support.screenWidth = window.screen.availWidth;\n\t            support.screenHeight = window.screen.availHeight;\n\t        }\n\n\t        support.detectOS = function (ua) {\n\t            var os = false, minorVersion, match = [],\n\t                notAndroidPhone = !/mobile safari/i.test(ua),\n\t                agentRxs = {\n\t                    wp: /(Windows Phone(?: OS)?)\\s(\\d+)\\.(\\d+(\\.\\d+)?)/,\n\t                    fire: /(Silk)\\/(\\d+)\\.(\\d+(\\.\\d+)?)/,\n\t                    android: /(Android|Android.*(?:Opera|Firefox).*?\\/)\\s*(\\d+)\\.?(\\d+(\\.\\d+)?)?/,\n\t                    iphone: /(iPhone|iPod).*OS\\s+(\\d+)[\\._]([\\d\\._]+)/,\n\t                    ipad: /(iPad).*OS\\s+(\\d+)[\\._]([\\d_]+)/,\n\t                    meego: /(MeeGo).+NokiaBrowser\\/(\\d+)\\.([\\d\\._]+)/,\n\t                    webos: /(webOS)\\/(\\d+)\\.(\\d+(\\.\\d+)?)/,\n\t                    blackberry: /(BlackBerry|BB10).*?Version\\/(\\d+)\\.(\\d+(\\.\\d+)?)/,\n\t                    playbook: /(PlayBook).*?Tablet\\s*OS\\s*(\\d+)\\.(\\d+(\\.\\d+)?)/,\n\t                    windows: /(MSIE)\\s+(\\d+)\\.(\\d+(\\.\\d+)?)/,\n\t                    tizen: /(tizen).*?Version\\/(\\d+)\\.(\\d+(\\.\\d+)?)/i,\n\t                    sailfish: /(sailfish).*rv:(\\d+)\\.(\\d+(\\.\\d+)?).*firefox/i,\n\t                    ffos: /(Mobile).*rv:(\\d+)\\.(\\d+(\\.\\d+)?).*Firefox/\n\t                },\n\t                osRxs = {\n\t                    ios: /^i(phone|pad|pod)$/i,\n\t                    android: /^android|fire$/i,\n\t                    blackberry: /^blackberry|playbook/i,\n\t                    windows: /windows/,\n\t                    wp: /wp/,\n\t                    flat: /sailfish|ffos|tizen/i,\n\t                    meego: /meego/\n\t                },\n\t                formFactorRxs = {\n\t                    tablet: /playbook|ipad|fire/i\n\t                },\n\t                browserRxs = {\n\t                    omini: /Opera\\sMini/i,\n\t                    omobile: /Opera\\sMobi/i,\n\t                    firefox: /Firefox|Fennec/i,\n\t                    mobilesafari: /version\\/.*safari/i,\n\t                    ie: /MSIE|Windows\\sPhone/i,\n\t                    chrome: /chrome|crios/i,\n\t                    webkit: /webkit/i\n\t                };\n\n\t            for (var agent in agentRxs) {\n\t                if (agentRxs.hasOwnProperty(agent)) {\n\t                    match = ua.match(agentRxs[agent]);\n\t                    if (match) {\n\t                        if (agent == \"windows\" && \"plugins\" in navigator) { return false; } // Break if not Metro/Mobile Windows\n\n\t                        os = {};\n\t                        os.device = agent;\n\t                        os.tablet = testRx(agent, formFactorRxs, false);\n\t                        os.browser = testRx(ua, browserRxs, \"default\");\n\t                        os.name = testRx(agent, osRxs);\n\t                        os[os.name] = true;\n\t                        os.majorVersion = match[2];\n\t                        os.minorVersion = (match[3] || \"0\").replace(\"_\", \".\");\n\t                        minorVersion = os.minorVersion.replace(\".\", \"\").substr(0, 2);\n\t                        os.flatVersion = os.majorVersion + minorVersion + (new Array(3 - (minorVersion.length < 3 ? minorVersion.length : 2)).join(\"0\"));\n\t                        os.cordova = typeof window.PhoneGap !== UNDEFINED || typeof window.cordova !== UNDEFINED; // Use file protocol to detect appModes.\n\t                        os.appMode = window.navigator.standalone || (/file|local|wmapp/).test(window.location.protocol) || os.cordova; // Use file protocol to detect appModes.\n\n\t                        if (os.android && (support.devicePixelRatio < 1.5 && os.flatVersion < 400 || notAndroidPhone) && (support.screenWidth > 800 || support.screenHeight > 800)) {\n\t                            os.tablet = agent;\n\t                        }\n\n\t                        break;\n\t                    }\n\t                }\n\t            }\n\t            return os;\n\t        };\n\n\t        var mobileOS = support.mobileOS = support.detectOS(navigator.userAgent);\n\n\t        support.wpDevicePixelRatio = mobileOS.wp ? screen.width / 320 : 0;\n\n\t        support.hasNativeScrolling = false;\n\n\t        if (mobileOS.ios || (mobileOS.android && mobileOS.majorVersion > 2) || mobileOS.wp) {\n\t            support.hasNativeScrolling = mobileOS;\n\t        }\n\n\t        support.delayedClick = function() {\n\n\t            // only the mobile devices with touch events do this.\n\t            if (support.touch) {\n\t                // All iOS devices so far (by the time I am writing this, iOS 9.0.2 is the latest),\n\t                // delay their click events.\n\t                if (mobileOS.ios) {\n\t                    return true;\n\t                }\n\n\t                if (mobileOS.android) {\n\n\t                    if (!support.browser.chrome) { // older webkits and webviews delay the click\n\t                        return true;\n\t                    }\n\n\t                    // from here on, we deal with Chrome on Android.\n\t                    if (support.browser.version < 32) {\n\t                        return false;\n\t                    }\n\n\t                    // Chrome 32+ does conditional fast clicks if the view port is not user scalable.\n\t                    return !($(\"meta[name=viewport]\").attr(\"content\") || \"\").match(/user-scalable=no/i);\n\t                }\n\t            }\n\n\t            return false;\n\t        };\n\n\t        support.mouseAndTouchPresent = support.touch && !(support.mobileOS.ios || support.mobileOS.android);\n\n\t        support.detectBrowser = function(ua) {\n\t            var browser = false, match = [],\n\t                browserRxs = {\n\t                    edge: /(edge)[ \\/]([\\w.]+)/i,\n\t                    webkit: /(chrome|crios)[ \\/]([\\w.]+)/i,\n\t                    safari: /(webkit)[ \\/]([\\w.]+)/i,\n\t                    opera: /(opera)(?:.*version|)[ \\/]([\\w.]+)/i,\n\t                    msie: /(msie\\s|trident.*? rv:)([\\w.]+)/i,\n\t                    mozilla: /(mozilla)(?:.*? rv:([\\w.]+)|)/i\n\t                };\n\n\t            for (var agent in browserRxs) {\n\t                if (browserRxs.hasOwnProperty(agent)) {\n\t                    match = ua.match(browserRxs[agent]);\n\t                    if (match) {\n\t                        browser = {};\n\t                        browser[agent] = true;\n\t                        browser[match[1].toLowerCase().split(\" \")[0].split(\"/\")[0]] = true;\n\t                        browser.version = parseInt(document.documentMode || match[2], 10);\n\n\t                        break;\n\t                    }\n\t                }\n\t            }\n\n\t            return browser;\n\t        };\n\n\t        support.browser = support.detectBrowser(navigator.userAgent);\n\n\t        support.detectClipboardAccess = function() {\n\t            var commands = {\n\t                copy: document.queryCommandSupported ? document.queryCommandSupported(\"copy\") : false,\n\t                cut: document.queryCommandSupported ? document.queryCommandSupported(\"cut\") : false,\n\t                paste : document.queryCommandSupported ? document.queryCommandSupported(\"paste\") : false\n\t            };\n\n\t            if (support.browser.chrome) {\n\t                //not using queryCommandSupported due to chromium issues 476508 and 542948\n\t                commands.paste = false;\n\t                if(support.browser.version >= 43) {\n\t                    commands.copy = true;\n\t                    commands.cut = true;\n\t                }\n\t            }\n\n\t            return commands;\n\t        };\n\n\t        support.clipboard = support.detectClipboardAccess();\n\n\t        support.zoomLevel = function() {\n\t            try {\n\t                var browser = support.browser;\n\t                var ie11WidthCorrection = 0;\n\t                var docEl = document.documentElement;\n\n\t                if (browser.msie && browser.version == 11 && docEl.scrollHeight > docEl.clientHeight && !support.touch) {\n\t                    ie11WidthCorrection = support.scrollbar();\n\t                }\n\n\t                return support.touch ? (docEl.clientWidth / window.innerWidth) :\n\t                       browser.msie && browser.version >= 10 ? (((top || window).document.documentElement.offsetWidth + ie11WidthCorrection) / (top || window).innerWidth) : 1;\n\t            } catch(e) {\n\t                return 1;\n\t            }\n\t        };\n\n\t        support.cssBorderSpacing = typeof docStyle.borderSpacing != \"undefined\" && !(support.browser.msie && support.browser.version < 8);\n\n\t        (function(browser) {\n\t            // add browser-specific CSS class\n\t            var cssClass = \"\",\n\t                docElement = $(document.documentElement),\n\t                majorVersion = parseInt(browser.version, 10);\n\n\t            if (browser.msie) {\n\t                cssClass = \"ie\";\n\t            } else if (browser.mozilla) {\n\t                cssClass = \"ff\";\n\t            } else if (browser.safari) {\n\t                cssClass = \"safari\";\n\t            } else if (browser.webkit) {\n\t                cssClass = \"webkit\";\n\t            } else if (browser.opera) {\n\t                cssClass = \"opera\";\n\t            } else if (browser.edge) {\n\t                cssClass = \"edge\";\n\t            }\n\n\t            if (cssClass) {\n\t                cssClass = \"k-\" + cssClass + \" k-\" + cssClass + majorVersion;\n\t            }\n\t            if (support.mobileOS) {\n\t                cssClass += \" k-mobile\";\n\t            }\n\n\t            if (!support.cssFlexbox) {\n\t                cssClass += \" k-no-flexbox\";\n\t            }\n\n\t            docElement.addClass(cssClass);\n\t        })(support.browser);\n\n\t        support.eventCapture = document.documentElement.addEventListener;\n\n\t        var input = document.createElement(\"input\");\n\n\t        support.placeholder = \"placeholder\" in input;\n\t        support.propertyChangeEvent = \"onpropertychange\" in input;\n\n\t        support.input = (function() {\n\t            var types = [\"number\", \"date\", \"time\", \"month\", \"week\", \"datetime\", \"datetime-local\"];\n\t            var length = types.length;\n\t            var value = \"test\";\n\t            var result = {};\n\t            var idx = 0;\n\t            var type;\n\n\t            for (;idx < length; idx++) {\n\t                type = types[idx];\n\t                input.setAttribute(\"type\", type);\n\t                input.value = value;\n\n\t                result[type.replace(\"-\", \"\")] = input.type !== \"text\" && input.value !== value;\n\t            }\n\n\t            return result;\n\t        })();\n\n\t        input.style.cssText = \"float:left;\";\n\n\t        support.cssFloat = !!input.style.cssFloat;\n\n\t        input = null;\n\n\t        support.stableSort = (function() {\n\t            // Chrome sort is not stable for more than *10* items\n\t            // IE9+ sort is not stable for than *512* items\n\t            var threshold = 513;\n\n\t            var sorted = [{\n\t                index: 0,\n\t                field: \"b\"\n\t            }];\n\n\t            for (var i = 1; i < threshold; i++) {\n\t                sorted.push({\n\t                    index: i,\n\t                    field: \"a\"\n\t                });\n\t            }\n\n\t            sorted.sort(function(a, b) {\n\t                return a.field > b.field ? 1 : (a.field < b.field ? -1 : 0);\n\t            });\n\n\t            return sorted[0].index === 1;\n\t        })();\n\n\t        support.matchesSelector = elementProto.webkitMatchesSelector || elementProto.mozMatchesSelector ||\n\t                                  elementProto.msMatchesSelector || elementProto.oMatchesSelector ||\n\t                                  elementProto.matchesSelector || elementProto.matches ||\n\t          function( selector ) {\n\t              var nodeList = document.querySelectorAll ? ( this.parentNode || document ).querySelectorAll( selector ) || [] : $(selector),\n\t                  i = nodeList.length;\n\n\t              while (i--) {\n\t                  if (nodeList[i] == this) {\n\t                      return true;\n\t                  }\n\t              }\n\n\t              return false;\n\t          };\n\n\t        support.matchMedia = \"matchMedia\" in window;\n\n\t        support.pushState = window.history && window.history.pushState;\n\n\t        var documentMode = document.documentMode;\n\n\t        support.hashChange = (\"onhashchange\" in window) && !(support.browser.msie && (!documentMode || documentMode <= 8)); // old IE detection\n\n\t        support.customElements = (\"registerElement\" in window.document);\n\n\t        var chrome = support.browser.chrome,\n\t            mozilla = support.browser.mozilla;\n\t        support.msPointers = !chrome && window.MSPointerEvent;\n\t        support.pointers = !chrome && !mozilla && window.PointerEvent;\n\t        support.kineticScrollNeeded = mobileOS && (support.touch || support.msPointers || support.pointers);\n\t    })();\n\n\n\t    function size(obj) {\n\t        var result = 0, key;\n\t        for (key in obj) {\n\t            if (obj.hasOwnProperty(key) && key != \"toJSON\") { // Ignore fake IE7 toJSON.\n\t                result++;\n\t            }\n\t        }\n\n\t        return result;\n\t    }\n\n\t    function getOffset(element, type, positioned) {\n\t        if (!type) {\n\t            type = \"offset\";\n\t        }\n\n\t        var offset = element[type]();\n\t        // clone ClientRect object to JS object (jQuery3)\n\t        var result = {\n\t            top: offset.top,\n\t            right: offset.right,\n\t            bottom: offset.bottom,\n\t            left: offset.left\n\t        };\n\n\t        // IE10 touch zoom is living in a separate viewport\n\t        if (support.browser.msie && (support.pointers || support.msPointers) && !positioned) {\n\t            var sign = support.isRtl(element) ? 1 : -1;\n\n\t            result.top -= (window.pageYOffset - (document.documentElement.scrollTop));\n\t            result.left -= (window.pageXOffset + (sign * document.documentElement.scrollLeft));\n\t        }\n\n\t        return result;\n\t    }\n\n\t    var directions = {\n\t        left: { reverse: \"right\" },\n\t        right: { reverse: \"left\" },\n\t        down: { reverse: \"up\" },\n\t        up: { reverse: \"down\" },\n\t        top: { reverse: \"bottom\" },\n\t        bottom: { reverse: \"top\" },\n\t        \"in\": { reverse: \"out\" },\n\t        out: { reverse: \"in\" }\n\t    };\n\n\t    function parseEffects(input) {\n\t        var effects = {};\n\n\t        each((typeof input === \"string\" ? input.split(\" \") : input), function(idx) {\n\t            effects[idx] = this;\n\t        });\n\n\t        return effects;\n\t    }\n\n\t    function fx(element) {\n\t        return new kendo.effects.Element(element);\n\t    }\n\n\t    var effects = {};\n\n\t    $.extend(effects, {\n\t        enabled: true,\n\t        Element: function(element) {\n\t            this.element = $(element);\n\t        },\n\n\t        promise: function(element, options) {\n\t            if (!element.is(\":visible\")) {\n\t                element.css({ display: element.data(\"olddisplay\") || \"block\" }).css(\"display\");\n\t            }\n\n\t            if (options.hide) {\n\t                element.data(\"olddisplay\", element.css(\"display\")).hide();\n\t            }\n\n\t            if (options.init) {\n\t                options.init();\n\t            }\n\n\t            if (options.completeCallback) {\n\t                options.completeCallback(element); // call the external complete callback with the element\n\t            }\n\n\t            element.dequeue();\n\t        },\n\n\t        disable: function() {\n\t            this.enabled = false;\n\t            this.promise = this.promiseShim;\n\t        },\n\n\t        enable: function() {\n\t            this.enabled = true;\n\t            this.promise = this.animatedPromise;\n\t        }\n\t    });\n\n\t    effects.promiseShim = effects.promise;\n\n\t    function prepareAnimationOptions(options, duration, reverse, complete) {\n\t        if (typeof options === STRING) {\n\t            // options is the list of effect names separated by space e.g. animate(element, \"fadeIn slideDown\")\n\n\t            // only callback is provided e.g. animate(element, options, function() {});\n\t            if (isFunction(duration)) {\n\t                complete = duration;\n\t                duration = 400;\n\t                reverse = false;\n\t            }\n\n\t            if (isFunction(reverse)) {\n\t                complete = reverse;\n\t                reverse = false;\n\t            }\n\n\t            if (typeof duration === BOOLEAN){\n\t                reverse = duration;\n\t                duration = 400;\n\t            }\n\n\t            options = {\n\t                effects: options,\n\t                duration: duration,\n\t                reverse: reverse,\n\t                complete: complete\n\t            };\n\t        }\n\n\t        return extend({\n\t            //default options\n\t            effects: {},\n\t            duration: 400, //jQuery default duration\n\t            reverse: false,\n\t            init: noop,\n\t            teardown: noop,\n\t            hide: false\n\t        }, options, { completeCallback: options.complete, complete: noop }); // Move external complete callback, so deferred.resolve can be always executed.\n\n\t    }\n\n\t    function animate(element, options, duration, reverse, complete) {\n\t        var idx = 0,\n\t            length = element.length,\n\t            instance;\n\n\t        for (; idx < length; idx ++) {\n\t            instance = $(element[idx]);\n\t            instance.queue(function() {\n\t                effects.promise(instance, prepareAnimationOptions(options, duration, reverse, complete));\n\t            });\n\t        }\n\n\t        return element;\n\t    }\n\n\t    function toggleClass(element, classes, options, add) {\n\t        if (classes) {\n\t            classes = classes.split(\" \");\n\n\t            each(classes, function(idx, value) {\n\t                element.toggleClass(value, add);\n\t            });\n\t        }\n\n\t        return element;\n\t    }\n\n\t    if (!(\"kendoAnimate\" in $.fn)) {\n\t        extend($.fn, {\n\t            kendoStop: function(clearQueue, gotoEnd) {\n\t                return this.stop(clearQueue, gotoEnd);\n\t            },\n\n\t            kendoAnimate: function(options, duration, reverse, complete) {\n\t                return animate(this, options, duration, reverse, complete);\n\t            },\n\n\t            kendoAddClass: function(classes, options){\n\t                return kendo.toggleClass(this, classes, options, true);\n\t            },\n\n\t            kendoRemoveClass: function(classes, options){\n\t                return kendo.toggleClass(this, classes, options, false);\n\t            },\n\t            kendoToggleClass: function(classes, options, toggle){\n\t                return kendo.toggleClass(this, classes, options, toggle);\n\t            }\n\t        });\n\t    }\n\n\t    var ampRegExp = /&/g,\n\t        ltRegExp = /</g,\n\t        quoteRegExp = /\"/g,\n\t        aposRegExp = /'/g,\n\t        gtRegExp = />/g;\n\t    function htmlEncode(value) {\n\t        return (\"\" + value).replace(ampRegExp, \"&amp;\").replace(ltRegExp, \"&lt;\").replace(gtRegExp, \"&gt;\").replace(quoteRegExp, \"&quot;\").replace(aposRegExp, \"&#39;\");\n\t    }\n\n\t    var eventTarget = function (e) {\n\t        return e.target;\n\t    };\n\n\t    if (support.touch) {\n\n\t        eventTarget = function(e) {\n\t            var touches = \"originalEvent\" in e ? e.originalEvent.changedTouches : \"changedTouches\" in e ? e.changedTouches : null;\n\n\t            return touches ? document.elementFromPoint(touches[0].clientX, touches[0].clientY) : e.target;\n\t        };\n\n\t        each([\"swipe\", \"swipeLeft\", \"swipeRight\", \"swipeUp\", \"swipeDown\", \"doubleTap\", \"tap\"], function(m, value) {\n\t            $.fn[value] = function(callback) {\n\t                return this.bind(value, callback);\n\t            };\n\t        });\n\t    }\n\n\t    if (support.touch) {\n\t        if (!support.mobileOS) {\n\t            support.mousedown = \"mousedown touchstart\";\n\t            support.mouseup = \"mouseup touchend\";\n\t            support.mousemove = \"mousemove touchmove\";\n\t            support.mousecancel = \"mouseleave touchcancel\";\n\t            support.click = \"click\";\n\t            support.resize = \"resize\";\n\t        } else {\n\t            support.mousedown = \"touchstart\";\n\t            support.mouseup = \"touchend\";\n\t            support.mousemove = \"touchmove\";\n\t            support.mousecancel = \"touchcancel\";\n\t            support.click = \"touchend\";\n\t            support.resize = \"orientationchange\";\n\t        }\n\t    } else if (support.pointers) {\n\t        support.mousemove = \"pointermove\";\n\t        support.mousedown = \"pointerdown\";\n\t        support.mouseup = \"pointerup\";\n\t        support.mousecancel = \"pointercancel\";\n\t        support.click = \"pointerup\";\n\t        support.resize = \"orientationchange resize\";\n\t    } else if (support.msPointers) {\n\t        support.mousemove = \"MSPointerMove\";\n\t        support.mousedown = \"MSPointerDown\";\n\t        support.mouseup = \"MSPointerUp\";\n\t        support.mousecancel = \"MSPointerCancel\";\n\t        support.click = \"MSPointerUp\";\n\t        support.resize = \"orientationchange resize\";\n\t    } else {\n\t        support.mousemove = \"mousemove\";\n\t        support.mousedown = \"mousedown\";\n\t        support.mouseup = \"mouseup\";\n\t        support.mousecancel = \"mouseleave\";\n\t        support.click = \"click\";\n\t        support.resize = \"resize\";\n\t    }\n\n\t    var wrapExpression = function(members, paramName) {\n\t        var result = paramName || \"d\",\n\t            index,\n\t            idx,\n\t            length,\n\t            member,\n\t            count = 1;\n\n\t        for (idx = 0, length = members.length; idx < length; idx++) {\n\t            member = members[idx];\n\t            if (member !== \"\") {\n\t                index = member.indexOf(\"[\");\n\n\t                if (index !== 0) {\n\t                    if (index == -1) {\n\t                        member = \".\" + member;\n\t                    } else {\n\t                        count++;\n\t                        member = \".\" + member.substring(0, index) + \" || {})\" + member.substring(index);\n\t                    }\n\t                }\n\n\t                count++;\n\t                result += member + ((idx < length - 1) ? \" || {})\" : \")\");\n\t            }\n\t        }\n\t        return new Array(count).join(\"(\") + result;\n\t    },\n\t    localUrlRe = /^([a-z]+:)?\\/\\//i;\n\n\t    extend(kendo, {\n\t        widgets: [],\n\t        _widgetRegisteredCallbacks: [],\n\t        ui: kendo.ui || {},\n\t        fx: kendo.fx || fx,\n\t        effects: kendo.effects || effects,\n\t        mobile: kendo.mobile || { },\n\t        data: kendo.data || {},\n\t        dataviz: kendo.dataviz || {},\n\t        drawing: kendo.drawing || {},\n\t        spreadsheet: { messages: {} },\n\t        keys: {\n\t            INSERT: 45,\n\t            DELETE: 46,\n\t            BACKSPACE: 8,\n\t            TAB: 9,\n\t            ENTER: 13,\n\t            ESC: 27,\n\t            LEFT: 37,\n\t            UP: 38,\n\t            RIGHT: 39,\n\t            DOWN: 40,\n\t            END: 35,\n\t            HOME: 36,\n\t            SPACEBAR: 32,\n\t            PAGEUP: 33,\n\t            PAGEDOWN: 34,\n\t            F2: 113,\n\t            F10: 121,\n\t            F12: 123,\n\t            NUMPAD_PLUS: 107,\n\t            NUMPAD_MINUS: 109,\n\t            NUMPAD_DOT: 110\n\t        },\n\t        support: kendo.support || support,\n\t        animate: kendo.animate || animate,\n\t        ns: \"\",\n\t        attr: function(value) {\n\t            return \"data-\" + kendo.ns + value;\n\t        },\n\t        getShadows: getShadows,\n\t        wrap: wrap,\n\t        deepExtend: deepExtend,\n\t        getComputedStyles: getComputedStyles,\n\t        webComponents: kendo.webComponents || [],\n\t        isScrollable: isScrollable,\n\t        scrollLeft: scrollLeft,\n\t        size: size,\n\t        toCamelCase: toCamelCase,\n\t        toHyphens: toHyphens,\n\t        getOffset: kendo.getOffset || getOffset,\n\t        parseEffects: kendo.parseEffects || parseEffects,\n\t        toggleClass: kendo.toggleClass || toggleClass,\n\t        directions: kendo.directions || directions,\n\t        Observable: Observable,\n\t        Class: Class,\n\t        Template: Template,\n\t        template: proxy(Template.compile, Template),\n\t        render: proxy(Template.render, Template),\n\t        stringify: proxy(JSON.stringify, JSON),\n\t        eventTarget: eventTarget,\n\t        htmlEncode: htmlEncode,\n\t        isLocalUrl: function(url) {\n\t            return url && !localUrlRe.test(url);\n\t        },\n\n\t        expr: function(expression, safe, paramName) {\n\t            expression = expression || \"\";\n\n\t            if (typeof safe == STRING) {\n\t                paramName = safe;\n\t                safe = false;\n\t            }\n\n\t            paramName = paramName || \"d\";\n\n\t            if (expression && expression.charAt(0) !== \"[\") {\n\t                expression = \".\" + expression;\n\t            }\n\n\t            if (safe) {\n\t                expression = expression.replace(/\"([^.]*)\\.([^\"]*)\"/g,'\"$1_$DOT$_$2\"');\n\t                expression = expression.replace(/'([^.]*)\\.([^']*)'/g,\"'$1_$DOT$_$2'\");\n\t                expression = wrapExpression(expression.split(\".\"), paramName);\n\t                expression = expression.replace(/_\\$DOT\\$_/g, \".\");\n\t            } else {\n\t                expression = paramName + expression;\n\t            }\n\n\t            return expression;\n\t        },\n\n\t        getter: function(expression, safe) {\n\t            var key = expression + safe;\n\t            return getterCache[key] = getterCache[key] || new Function(\"d\", \"return \" + kendo.expr(expression, safe));\n\t        },\n\n\t        setter: function(expression) {\n\t            return setterCache[expression] = setterCache[expression] || new Function(\"d,value\", kendo.expr(expression) + \"=value\");\n\t        },\n\n\t        accessor: function(expression) {\n\t            return {\n\t                get: kendo.getter(expression),\n\t                set: kendo.setter(expression)\n\t            };\n\t        },\n\n\t        guid: function() {\n\t            var id = \"\", i, random;\n\n\t            for (i = 0; i < 32; i++) {\n\t                random = math.random() * 16 | 0;\n\n\t                if (i == 8 || i == 12 || i == 16 || i == 20) {\n\t                    id += \"-\";\n\t                }\n\t                id += (i == 12 ? 4 : (i == 16 ? (random & 3 | 8) : random)).toString(16);\n\t            }\n\n\t            return id;\n\t        },\n\n\t        roleSelector: function(role) {\n\t            return role.replace(/(\\S+)/g, \"[\" + kendo.attr(\"role\") + \"=$1],\").slice(0, -1);\n\t        },\n\n\t        directiveSelector: function(directives) {\n\t            var selectors = directives.split(\" \");\n\n\t            if (selectors) {\n\t                for (var i = 0; i < selectors.length; i++) {\n\t                    if (selectors[i] != \"view\") {\n\t                        selectors[i] = selectors[i].replace(/(\\w*)(view|bar|strip|over)$/, \"$1-$2\");\n\t                    }\n\t                }\n\t            }\n\n\t            return selectors.join(\" \").replace(/(\\S+)/g, \"kendo-mobile-$1,\").slice(0, -1);\n\t        },\n\n\t        triggeredByInput: function(e) {\n\t            return (/^(label|input|textarea|select)$/i).test(e.target.tagName);\n\t        },\n\n\t        onWidgetRegistered: function(callback) {\n\t            for (var i = 0, len = kendo.widgets.length; i < len; i++) {\n\t                callback(kendo.widgets[i]);\n\t            }\n\n\t            kendo._widgetRegisteredCallbacks.push(callback);\n\t        },\n\n\t        logToConsole: function(message, type) {\n\t            var console = window.console;\n\n\t            if (!kendo.suppressLog && typeof(console) != \"undefined\" && console.log) {\n\t                console[type || \"log\"](message);\n\t            }\n\t        }\n\t    });\n\n\t    var Widget = Observable.extend( {\n\t        init: function(element, options) {\n\t            var that = this;\n\n\t            that.element = kendo.jQuery(element).handler(that);\n\n\t            that.angular(\"init\", options);\n\n\t            Observable.fn.init.call(that);\n\n\t            var dataSource = options ? options.dataSource : null;\n\n\t            if (dataSource) {\n\t                // avoid deep cloning the data source\n\t                options = extend({}, options, { dataSource: {} });\n\t            }\n\n\t            options = that.options = extend(true, {}, that.options, options);\n\n\t            if (dataSource) {\n\t                options.dataSource = dataSource;\n\t            }\n\n\t            if (!that.element.attr(kendo.attr(\"role\"))) {\n\t                that.element.attr(kendo.attr(\"role\"), (options.name || \"\").toLowerCase());\n\t            }\n\n\t            that.element.data(\"kendo\" + options.prefix + options.name, that);\n\n\t            that.bind(that.events, options);\n\t        },\n\n\t        events: [],\n\n\t        options: {\n\t            prefix: \"\"\n\t        },\n\n\t        _hasBindingTarget: function() {\n\t            return !!this.element[0].kendoBindingTarget;\n\t        },\n\n\t        _tabindex: function(target) {\n\t            target = target || this.wrapper;\n\n\t            var element = this.element,\n\t                TABINDEX = \"tabindex\",\n\t                tabindex = target.attr(TABINDEX) || element.attr(TABINDEX);\n\n\t            element.removeAttr(TABINDEX);\n\n\t            target.attr(TABINDEX, !isNaN(tabindex) ? tabindex : 0);\n\t        },\n\n\t        setOptions: function(options) {\n\t            this._setEvents(options);\n\t            $.extend(this.options, options);\n\t        },\n\n\t        _setEvents: function(options) {\n\t            var that = this,\n\t                idx = 0,\n\t                length = that.events.length,\n\t                e;\n\n\t            for (; idx < length; idx ++) {\n\t                e = that.events[idx];\n\t                if (that.options[e] && options[e]) {\n\t                    that.unbind(e, that.options[e]);\n\t                }\n\t            }\n\n\t            that.bind(that.events, options);\n\t        },\n\n\t        resize: function(force) {\n\t            var size = this.getSize(),\n\t                currentSize = this._size;\n\n\t            if (force || (size.width > 0 || size.height > 0) && (!currentSize || size.width !== currentSize.width || size.height !== currentSize.height)) {\n\t                this._size = size;\n\t                this._resize(size, force);\n\t                this.trigger(\"resize\", size);\n\t            }\n\t        },\n\n\t        getSize: function() {\n\t            return kendo.dimensions(this.element);\n\t        },\n\n\t        size: function(size) {\n\t            if (!size) {\n\t                return this.getSize();\n\t            } else {\n\t                this.setSize(size);\n\t            }\n\t        },\n\n\t        setSize: $.noop,\n\t        _resize: $.noop,\n\n\t        destroy: function() {\n\t            var that = this;\n\n\t            that.element.removeData(\"kendo\" + that.options.prefix + that.options.name);\n\t            that.element.removeData(\"handler\");\n\t            that.unbind();\n\t        },\n\t        _destroy: function() {\n\t            this.destroy();\n\t        },\n\t        angular: function(){},\n\n\t        _muteAngularRebind: function(callback) {\n\t            this._muteRebind = true;\n\n\t            callback.call(this);\n\n\t            this._muteRebind = false;\n\t        }\n\t    });\n\n\t    var DataBoundWidget = Widget.extend({\n\t        // Angular consumes these.\n\t        dataItems: function() {\n\t            return this.dataSource.flatView();\n\t        },\n\n\t        _angularItems: function(cmd) {\n\t            var that = this;\n\t            that.angular(cmd, function(){\n\t                return {\n\t                    elements: that.items(),\n\t                    data: $.map(that.dataItems(), function(dataItem){\n\t                        return { dataItem: dataItem };\n\t                    })\n\t                };\n\t            });\n\t        }\n\t    });\n\n\t    kendo.dimensions = function(element, dimensions) {\n\t        var domElement = element[0];\n\n\t        if (dimensions) {\n\t            element.css(dimensions);\n\t        }\n\n\t        return { width: domElement.offsetWidth, height: domElement.offsetHeight };\n\t    };\n\n\t    kendo.notify = noop;\n\n\t    var templateRegExp = /template$/i,\n\t        jsonRegExp = /^\\s*(?:\\{(?:.|\\r\\n|\\n)*\\}|\\[(?:.|\\r\\n|\\n)*\\])\\s*$/,\n\t        jsonFormatRegExp = /^\\{(\\d+)(:[^\\}]+)?\\}|^\\[[A-Za-z_]+\\]$/,\n\t        dashRegExp = /([A-Z])/g;\n\n\t    function parseOption(element, option) {\n\t        var value;\n\n\t        if (option.indexOf(\"data\") === 0) {\n\t            option = option.substring(4);\n\t            option = option.charAt(0).toLowerCase() + option.substring(1);\n\t        }\n\n\t        option = option.replace(dashRegExp, \"-$1\");\n\t        value = element.getAttribute(\"data-\" + kendo.ns + option);\n\n\t        if (value === null) {\n\t            value = undefined;\n\t        } else if (value === \"null\") {\n\t            value = null;\n\t        } else if (value === \"true\") {\n\t            value = true;\n\t        } else if (value === \"false\") {\n\t            value = false;\n\t        } else if (numberRegExp.test(value) && option != \"mask\") {\n\t            value = parseFloat(value);\n\t        } else if (jsonRegExp.test(value) && !jsonFormatRegExp.test(value)) {\n\t            value = new Function(\"return (\" + value + \")\")();\n\t        }\n\n\t        return value;\n\t    }\n\n\t    function parseOptions(element, options, source) {\n\t        var result = {},\n\t            option,\n\t            value;\n\n\t        for (option in options) {\n\t            value = parseOption(element, option);\n\n\t            if (value !== undefined) {\n\n\t                if (templateRegExp.test(option)) {\n\t                    if(typeof value === \"string\") {\n\t                        if($(\"#\" + value).length){\n\t                            value = kendo.template($(\"#\" + value).html());\n\t                        }else if (source){\n\t                            value = kendo.template(source[value]);\n\t                        }\n\t                    } else {\n\t                        value = element.getAttribute(option);\n\t                    }\n\t                }\n\n\t                result[option] = value;\n\t            }\n\t        }\n\n\t        return result;\n\t    }\n\n\t    kendo.initWidget = function(element, options, roles) {\n\t        var result,\n\t            option,\n\t            widget,\n\t            idx,\n\t            length,\n\t            role,\n\t            value,\n\t            dataSource,\n\t            fullPath,\n\t            widgetKeyRegExp;\n\n\t        // Preserve backwards compatibility with (element, options, namespace) signature, where namespace was kendo.ui\n\t        if (!roles) {\n\t            roles = kendo.ui.roles;\n\t        } else if (roles.roles) {\n\t            roles = roles.roles;\n\t        }\n\n\t        element = element.nodeType ? element : element[0];\n\n\t        role = element.getAttribute(\"data-\" + kendo.ns + \"role\");\n\n\t        if (!role) {\n\t            return;\n\t        }\n\n\t        fullPath = role.indexOf(\".\") === -1;\n\n\t        // look for any widget that may be already instantiated based on this role.\n\t        // The prefix used is unknown, hence the regexp\n\t        //\n\n\t        if (fullPath) {\n\t            widget = roles[role];\n\t        } else { // full namespace path - like kendo.ui.Widget\n\t            widget = kendo.getter(role)(window);\n\t        }\n\n\t        var data = $(element).data(),\n\t            widgetKey = widget ? \"kendo\" + widget.fn.options.prefix + widget.fn.options.name : \"\";\n\n\t        if (fullPath) {\n\t            widgetKeyRegExp = new RegExp(\"^kendo.*\" + role + \"$\", \"i\");\n\t        } else { // full namespace path - like kendo.ui.Widget\n\t            widgetKeyRegExp = new RegExp(\"^\" + widgetKey + \"$\", \"i\");\n\t        }\n\n\t        for(var key in data) {\n\t            if (key.match(widgetKeyRegExp)) {\n\t                // we have detected a widget of the same kind - save its reference, we will set its options\n\t                if (key === widgetKey) {\n\t                    result = data[key];\n\t                } else {\n\t                    return data[key];\n\t                }\n\t            }\n\t        }\n\n\t        if (!widget) {\n\t            return;\n\t        }\n\n\t        dataSource = parseOption(element, \"dataSource\");\n\n\t        options = $.extend({}, parseOptions(element, widget.fn.options), options);\n\n\t        if (dataSource) {\n\t            if (typeof dataSource === STRING) {\n\t                options.dataSource = kendo.getter(dataSource)(window);\n\t            } else {\n\t                options.dataSource = dataSource;\n\t            }\n\t        }\n\n\t        for (idx = 0, length = widget.fn.events.length; idx < length; idx++) {\n\t            option = widget.fn.events[idx];\n\n\t            value = parseOption(element, option);\n\n\t            if (value !== undefined) {\n\t                options[option] = kendo.getter(value)(window);\n\t            }\n\t        }\n\n\t        if (!result) {\n\t            result = new widget(element, options);\n\t        } else if (!$.isEmptyObject(options)) {\n\t            result.setOptions(options);\n\t        }\n\n\t        return result;\n\t    };\n\n\t    kendo.rolesFromNamespaces = function(namespaces) {\n\t        var roles = [],\n\t            idx,\n\t            length;\n\n\t        if (!namespaces[0]) {\n\t            namespaces = [kendo.ui, kendo.dataviz.ui];\n\t        }\n\n\t        for (idx = 0, length = namespaces.length; idx < length; idx ++) {\n\t            roles[idx] = namespaces[idx].roles;\n\t        }\n\n\t        return extend.apply(null, [{}].concat(roles.reverse()));\n\t    };\n\n\t    kendo.init = function(element) {\n\t        var roles = kendo.rolesFromNamespaces(slice.call(arguments, 1));\n\n\t        $(element).find(\"[data-\" + kendo.ns + \"role]\").addBack().each(function(){\n\t            kendo.initWidget(this, {}, roles);\n\t        });\n\t    };\n\n\t    kendo.destroy = function(element) {\n\t        $(element).find(\"[data-\" + kendo.ns + \"role]\").addBack().each(function(){\n\t            var data = $(this).data();\n\n\t            for (var key in data) {\n\t                if (key.indexOf(\"kendo\") === 0 && typeof data[key].destroy === FUNCTION) {\n\t                    data[key].destroy();\n\t                }\n\t            }\n\t        });\n\t    };\n\n\t    function containmentComparer(a, b) {\n\t        return $.contains(a, b) ? -1 : 1;\n\t    }\n\n\t    function resizableWidget() {\n\t        var widget = $(this);\n\t        return ($.inArray(widget.attr(\"data-\" + kendo.ns + \"role\"), [\"slider\", \"rangeslider\"]) > -1) || widget.is(\":visible\");\n\t    }\n\n\t    kendo.resize = function(element, force) {\n\t        var widgets = $(element).find(\"[data-\" + kendo.ns + \"role]\").addBack().filter(resizableWidget);\n\n\t        if (!widgets.length) {\n\t            return;\n\t        }\n\n\t        // sort widgets based on their parent-child relation\n\t        var widgetsArray = $.makeArray(widgets);\n\t        widgetsArray.sort(containmentComparer);\n\n\t        // resize widgets\n\t        $.each(widgetsArray, function () {\n\t            var widget = kendo.widgetInstance($(this));\n\t            if (widget) {\n\t                widget.resize(force);\n\t            }\n\t        });\n\t    };\n\n\t    kendo.parseOptions = parseOptions;\n\n\t    extend(kendo.ui, {\n\t        Widget: Widget,\n\t        DataBoundWidget: DataBoundWidget,\n\t        roles: {},\n\t        progress: function(container, toggle, options) {\n\t            var mask = container.find(\".k-loading-mask\"),\n\t                support = kendo.support,\n\t                browser = support.browser,\n\t                isRtl, leftRight, webkitCorrection, containerScrollLeft, cssClass;\n\n\t                options = $.extend({}, {\n\t                    width: \"100%\",\n\t                    height: \"100%\",\n\t                    top: container.scrollTop(),\n\t                    opacity: false\n\t                }, options);\n\n\t                cssClass = options.opacity ? 'k-loading-mask k-opaque' : 'k-loading-mask';\n\n\t            if (toggle) {\n\t                if (!mask.length) {\n\t                    isRtl = support.isRtl(container);\n\t                    leftRight = isRtl ? \"right\" : \"left\";\n\t                    containerScrollLeft = container.scrollLeft();\n\t                    webkitCorrection = browser.webkit ? (!isRtl ? 0 : container[0].scrollWidth - container.width() - 2 * containerScrollLeft) : 0;\n\n\t                    mask = $(kendo.format(\"<div class='{0}'><span class='k-loading-text'>{1}</span><div class='k-loading-image'/><div class='k-loading-color'/></div>\", cssClass, kendo.ui.progress.messages.loading))\n\t                        .width(options.width).height(options.height)\n\t                        .css(\"top\", options.top)\n\t                        .css(leftRight, Math.abs(containerScrollLeft) + webkitCorrection)\n\t                        .prependTo(container);\n\t                }\n\t            } else if (mask) {\n\t                mask.remove();\n\t            }\n\t        },\n\t        plugin: function(widget, register, prefix) {\n\t            var name = widget.fn.options.name,\n\t                getter;\n\n\t            register = register || kendo.ui;\n\t            prefix = prefix || \"\";\n\n\t            register[name] = widget;\n\n\t            register.roles[name.toLowerCase()] = widget;\n\n\t            getter = \"getKendo\" + prefix + name;\n\t            name = \"kendo\" + prefix + name;\n\n\t            var widgetEntry = { name: name, widget: widget, prefix: prefix || \"\" };\n\t            kendo.widgets.push(widgetEntry);\n\n\t            for (var i = 0, len = kendo._widgetRegisteredCallbacks.length; i < len; i++) {\n\t                kendo._widgetRegisteredCallbacks[i](widgetEntry);\n\t            }\n\n\t            $.fn[name] = function(options) {\n\t                var value = this,\n\t                    args;\n\n\t                if (typeof options === STRING) {\n\t                    args = slice.call(arguments, 1);\n\n\t                    this.each(function(){\n\t                        var widget = $.data(this, name),\n\t                            method,\n\t                            result;\n\n\t                        if (!widget) {\n\t                            throw new Error(kendo.format(\"Cannot call method '{0}' of {1} before it is initialized\", options, name));\n\t                        }\n\n\t                        method = widget[options];\n\n\t                        if (typeof method !== FUNCTION) {\n\t                            throw new Error(kendo.format(\"Cannot find method '{0}' of {1}\", options, name));\n\t                        }\n\n\t                        result = method.apply(widget, args);\n\n\t                        if (result !== undefined) {\n\t                            value = result;\n\t                            return false;\n\t                        }\n\t                    });\n\t                } else {\n\t                    this.each(function() {\n\t                        return new widget(this, options);\n\t                    });\n\t                }\n\n\t                return value;\n\t            };\n\n\t            $.fn[name].widget = widget;\n\n\t            $.fn[getter] = function() {\n\t                return this.data(name);\n\t            };\n\t        }\n\t    });\n\n\t    kendo.ui.progress.messages = {\n\t        loading: \"Loading...\"\n\t    };\n\n\t    var ContainerNullObject = { bind: function () { return this; }, nullObject: true, options: {} };\n\n\t    var MobileWidget = Widget.extend({\n\t        init: function(element, options) {\n\t            Widget.fn.init.call(this, element, options);\n\t            this.element.autoApplyNS();\n\t            this.wrapper = this.element;\n\t            this.element.addClass(\"km-widget\");\n\t        },\n\n\t        destroy: function() {\n\t            Widget.fn.destroy.call(this);\n\t            this.element.kendoDestroy();\n\t        },\n\n\t        options: {\n\t            prefix: \"Mobile\"\n\t        },\n\n\t        events: [],\n\n\t        view: function() {\n\t            var viewElement = this.element.closest(kendo.roleSelector(\"view splitview modalview drawer\"));\n\t            return kendo.widgetInstance(viewElement, kendo.mobile.ui) || ContainerNullObject;\n\t        },\n\n\t        viewHasNativeScrolling: function() {\n\t            var view = this.view();\n\t            return view && view.options.useNativeScrolling;\n\t        },\n\n\t        container: function() {\n\t            var element = this.element.closest(kendo.roleSelector(\"view layout modalview drawer splitview\"));\n\t            return kendo.widgetInstance(element.eq(0), kendo.mobile.ui) || ContainerNullObject;\n\t        }\n\t    });\n\n\t    extend(kendo.mobile, {\n\t        init: function(element) {\n\t            kendo.init(element, kendo.mobile.ui, kendo.ui, kendo.dataviz.ui);\n\t        },\n\n\t        appLevelNativeScrolling: function() {\n\t            return kendo.mobile.application && kendo.mobile.application.options && kendo.mobile.application.options.useNativeScrolling;\n\t        },\n\n\t        roles: {},\n\n\t        ui: {\n\t            Widget: MobileWidget,\n\t            DataBoundWidget: DataBoundWidget.extend(MobileWidget.prototype),\n\t            roles: {},\n\t            plugin: function(widget) {\n\t                kendo.ui.plugin(widget, kendo.mobile.ui, \"Mobile\");\n\t            }\n\t        }\n\t    });\n\n\t    deepExtend(kendo.dataviz, {\n\t        init: function(element) {\n\t            kendo.init(element, kendo.dataviz.ui);\n\t        },\n\t        ui: {\n\t            roles: {},\n\t            themes: {},\n\t            views: [],\n\t            plugin: function(widget) {\n\t                kendo.ui.plugin(widget, kendo.dataviz.ui);\n\t            }\n\t        },\n\t        roles: {}\n\t    });\n\n\t    kendo.touchScroller = function(elements, options) {\n\t        // return the first touch scroller\n\t        if (!options){ options = {}; }\n\n\t        options.useNative = true;\n\n\t        return $(elements).map(function(idx, element) {\n\t            element = $(element);\n\t            if (support.kineticScrollNeeded && kendo.mobile.ui.Scroller && !element.data(\"kendoMobileScroller\")) {\n\t                element.kendoMobileScroller(options);\n\t                return element.data(\"kendoMobileScroller\");\n\t            } else {\n\t                return false;\n\t            }\n\t        })[0];\n\t    };\n\n\t    kendo.preventDefault = function(e) {\n\t        e.preventDefault();\n\t    };\n\n\t    kendo.widgetInstance = function(element, suites) {\n\t        var role = element.data(kendo.ns + \"role\"),\n\t            widgets = [], i, length;\n\n\t        if (role) {\n\t            // HACK!!! mobile view scroller widgets are instantiated on data-role=\"content\" elements. We need to discover them when resizing.\n\t            if (role === \"content\") {\n\t                role = \"scroller\";\n\t            }\n\n\t            // kendoEditorToolbar is not a public plugin, thus it does not exist in kendo.ui.roles.\n\t            // Therefore, this is needed in order to be resized when placed in Kendo Window.\n\t            if (role === \"editortoolbar\") {\n\t                var editorToolbar = element.data(\"kendoEditorToolbar\");\n\t                if (editorToolbar) {\n\t                    return editorToolbar;\n\t                }\n\t            }\n\n\t            if (suites) {\n\t                if (suites[0]) {\n\t                    for (i = 0, length = suites.length; i < length; i ++) {\n\t                        widgets.push(suites[i].roles[role]);\n\t                    }\n\t                } else {\n\t                    widgets.push(suites.roles[role]);\n\t                }\n\t            }\n\t            else {\n\t                widgets = [ kendo.ui.roles[role], kendo.dataviz.ui.roles[role],  kendo.mobile.ui.roles[role] ];\n\t            }\n\n\t            if (role.indexOf(\".\") >= 0) {\n\t                widgets = [ kendo.getter(role)(window) ];\n\t            }\n\n\t            for (i = 0, length = widgets.length; i < length; i ++) {\n\t                var widget = widgets[i];\n\t                if (widget) {\n\t                    var instance = element.data(\"kendo\" + widget.fn.options.prefix + widget.fn.options.name);\n\t                    if (instance) {\n\t                        return instance;\n\t                    }\n\t                }\n\t            }\n\t        }\n\t    };\n\n\t    kendo.onResize = function(callback) {\n\t        var handler = callback;\n\t        if (support.mobileOS.android) {\n\t            handler = function() { setTimeout(callback, 600); };\n\t        }\n\n\t        $(window).on(support.resize, handler);\n\t        return handler;\n\t    };\n\n\t    kendo.unbindResize = function(callback) {\n\t        $(window).off(support.resize, callback);\n\t    };\n\n\t    kendo.attrValue = function(element, key) {\n\t        return element.data(kendo.ns + key);\n\t    };\n\n\t    kendo.days = {\n\t        Sunday: 0,\n\t        Monday: 1,\n\t        Tuesday: 2,\n\t        Wednesday: 3,\n\t        Thursday: 4,\n\t        Friday: 5,\n\t        Saturday: 6\n\t    };\n\n\t    function focusable(element, isTabIndexNotNaN) {\n\t        var nodeName = element.nodeName.toLowerCase();\n\n\t        return (/input|select|textarea|button|object/.test(nodeName) ?\n\t                !element.disabled :\n\t                \"a\" === nodeName ?\n\t                element.href || isTabIndexNotNaN :\n\t                isTabIndexNotNaN\n\t               ) &&\n\t            visible(element);\n\t    }\n\n\t    function visible(element) {\n\t        return $.expr.filters.visible(element) &&\n\t            !$(element).parents().addBack().filter(function() {\n\t                return $.css(this,\"visibility\") === \"hidden\";\n\t            }).length;\n\t    }\n\n\t    $.extend($.expr[ \":\" ], {\n\t        kendoFocusable: function(element) {\n\t            var idx = $.attr(element, \"tabindex\");\n\t            return focusable(element, !isNaN(idx) && idx > -1);\n\t        }\n\t    });\n\n\t    var MOUSE_EVENTS = [\"mousedown\", \"mousemove\", \"mouseenter\", \"mouseleave\", \"mouseover\", \"mouseout\", \"mouseup\", \"click\"];\n\t    var EXCLUDE_BUST_CLICK_SELECTOR = \"label, input, [data-rel=external]\";\n\n\t    var MouseEventNormalizer = {\n\t        setupMouseMute: function() {\n\t            var idx = 0,\n\t                length = MOUSE_EVENTS.length,\n\t                element = document.documentElement;\n\n\t            if (MouseEventNormalizer.mouseTrap || !support.eventCapture) {\n\t                return;\n\t            }\n\n\t            MouseEventNormalizer.mouseTrap = true;\n\n\t            MouseEventNormalizer.bustClick = false;\n\t            MouseEventNormalizer.captureMouse = false;\n\n\t            var handler = function(e) {\n\t                if (MouseEventNormalizer.captureMouse) {\n\t                    if (e.type === \"click\") {\n\t                        if (MouseEventNormalizer.bustClick && !$(e.target).is(EXCLUDE_BUST_CLICK_SELECTOR)) {\n\t                            e.preventDefault();\n\t                            e.stopPropagation();\n\t                        }\n\t                    } else {\n\t                        e.stopPropagation();\n\t                    }\n\t                }\n\t            };\n\n\t            for (; idx < length; idx++) {\n\t                element.addEventListener(MOUSE_EVENTS[idx], handler, true);\n\t            }\n\t        },\n\n\t        muteMouse: function(e) {\n\t            MouseEventNormalizer.captureMouse = true;\n\t            if (e.data.bustClick) {\n\t                MouseEventNormalizer.bustClick = true;\n\t            }\n\t            clearTimeout(MouseEventNormalizer.mouseTrapTimeoutID);\n\t        },\n\n\t        unMuteMouse: function() {\n\t            clearTimeout(MouseEventNormalizer.mouseTrapTimeoutID);\n\t            MouseEventNormalizer.mouseTrapTimeoutID = setTimeout(function() {\n\t                MouseEventNormalizer.captureMouse = false;\n\t                MouseEventNormalizer.bustClick = false;\n\t            }, 400);\n\t        }\n\t    };\n\n\t    var eventMap = {\n\t        down: \"touchstart mousedown\",\n\t        move: \"mousemove touchmove\",\n\t        up: \"mouseup touchend touchcancel\",\n\t        cancel: \"mouseleave touchcancel\"\n\t    };\n\n\t    if (support.touch && (support.mobileOS.ios || support.mobileOS.android)) {\n\t        eventMap = {\n\t            down: \"touchstart\",\n\t            move: \"touchmove\",\n\t            up: \"touchend touchcancel\",\n\t            cancel: \"touchcancel\"\n\t        };\n\t    } else if (support.pointers) {\n\t        eventMap = {\n\t            down: \"pointerdown\",\n\t            move: \"pointermove\",\n\t            up: \"pointerup\",\n\t            cancel: \"pointercancel pointerleave\"\n\t        };\n\t    } else if (support.msPointers) {\n\t        eventMap = {\n\t            down: \"MSPointerDown\",\n\t            move: \"MSPointerMove\",\n\t            up: \"MSPointerUp\",\n\t            cancel: \"MSPointerCancel MSPointerLeave\"\n\t        };\n\t    }\n\n\t    if (support.msPointers && !(\"onmspointerenter\" in window)) { // IE10\n\t        // Create MSPointerEnter/MSPointerLeave events using mouseover/out and event-time checks\n\t        $.each({\n\t            MSPointerEnter: \"MSPointerOver\",\n\t            MSPointerLeave: \"MSPointerOut\"\n\t        }, function( orig, fix ) {\n\t            $.event.special[ orig ] = {\n\t                delegateType: fix,\n\t                bindType: fix,\n\n\t                handle: function( event ) {\n\t                    var ret,\n\t                        target = this,\n\t                        related = event.relatedTarget,\n\t                        handleObj = event.handleObj;\n\n\t                    // For mousenter/leave call the handler if related is outside the target.\n\t                    // NB: No relatedTarget if the mouse left/entered the browser window\n\t                    if ( !related || (related !== target && !$.contains( target, related )) ) {\n\t                        event.type = handleObj.origType;\n\t                        ret = handleObj.handler.apply( this, arguments );\n\t                        event.type = fix;\n\t                    }\n\t                    return ret;\n\t                }\n\t            };\n\t        });\n\t    }\n\n\n\t    var getEventMap = function(e) { return (eventMap[e] || e); },\n\t        eventRegEx = /([^ ]+)/g;\n\n\t    kendo.applyEventMap = function(events, ns) {\n\t        events = events.replace(eventRegEx, getEventMap);\n\n\t        if (ns) {\n\t            events = events.replace(eventRegEx, \"$1.\" + ns);\n\t        }\n\n\t        return events;\n\t    };\n\n\t    var on = $.fn.on;\n\n\t    function kendoJQuery(selector, context) {\n\t        return new kendoJQuery.fn.init(selector, context);\n\t    }\n\n\t    extend(true, kendoJQuery, $);\n\n\t    kendoJQuery.fn = kendoJQuery.prototype = new $();\n\n\t    kendoJQuery.fn.constructor = kendoJQuery;\n\n\t    kendoJQuery.fn.init = function(selector, context) {\n\t        if (context && context instanceof $ && !(context instanceof kendoJQuery)) {\n\t            context = kendoJQuery(context);\n\t        }\n\n\t        return $.fn.init.call(this, selector, context, rootjQuery);\n\t    };\n\n\t    kendoJQuery.fn.init.prototype = kendoJQuery.fn;\n\n\t    var rootjQuery = kendoJQuery(document);\n\n\t    extend(kendoJQuery.fn, {\n\t        handler: function(handler) {\n\t            this.data(\"handler\", handler);\n\t            return this;\n\t        },\n\n\t        autoApplyNS: function(ns) {\n\t            this.data(\"kendoNS\", ns || kendo.guid());\n\t            return this;\n\t        },\n\n\t        on: function() {\n\t            var that = this,\n\t                ns = that.data(\"kendoNS\");\n\n\t            // support for event map signature\n\t            if (arguments.length === 1) {\n\t                return on.call(that, arguments[0]);\n\t            }\n\n\t            var context = that,\n\t                args = slice.call(arguments);\n\n\t            if (typeof args[args.length -1] === UNDEFINED) {\n\t                args.pop();\n\t            }\n\n\t            var callback =  args[args.length - 1],\n\t                events = kendo.applyEventMap(args[0], ns);\n\n\t            // setup mouse trap\n\t            if (support.mouseAndTouchPresent && events.search(/mouse|click/) > -1 && this[0] !== document.documentElement) {\n\t                MouseEventNormalizer.setupMouseMute();\n\n\t                var selector = args.length === 2 ? null : args[1],\n\t                    bustClick = events.indexOf(\"click\") > -1 && events.indexOf(\"touchend\") > -1;\n\n\t                on.call(this,\n\t                    {\n\t                        touchstart: MouseEventNormalizer.muteMouse,\n\t                        touchend: MouseEventNormalizer.unMuteMouse\n\t                    },\n\t                    selector,\n\t                    {\n\t                        bustClick: bustClick\n\t                    });\n\t            }\n\n\t            if (typeof callback === STRING) {\n\t                context = that.data(\"handler\");\n\t                callback = context[callback];\n\n\t                args[args.length - 1] = function(e) {\n\t                    callback.call(context, e);\n\t                };\n\t            }\n\n\t            args[0] = events;\n\n\t            on.apply(that, args);\n\n\t            return that;\n\t        },\n\n\t        kendoDestroy: function(ns) {\n\t            ns = ns || this.data(\"kendoNS\");\n\n\t            if (ns) {\n\t                this.off(\".\" + ns);\n\t            }\n\n\t            return this;\n\t        }\n\t    });\n\n\t    kendo.jQuery = kendoJQuery;\n\t    kendo.eventMap = eventMap;\n\n\t    kendo.timezone = (function(){\n\t        var months =  { Jan: 0, Feb: 1, Mar: 2, Apr: 3, May: 4, Jun: 5, Jul: 6, Aug: 7, Sep: 8, Oct: 9, Nov: 10, Dec: 11 };\n\t        var days = { Sun: 0, Mon: 1, Tue: 2, Wed: 3, Thu: 4, Fri: 5, Sat: 6 };\n\n\t        function ruleToDate(year, rule) {\n\t            var date;\n\t            var targetDay;\n\t            var ourDay;\n\t            var month = rule[3];\n\t            var on = rule[4];\n\t            var time = rule[5];\n\t            var cache = rule[8];\n\n\t            if (!cache) {\n\t                rule[8] = cache = {};\n\t            }\n\n\t            if (cache[year]) {\n\t                return cache[year];\n\t            }\n\n\t            if (!isNaN(on)) {\n\t                date = new Date(Date.UTC(year, months[month], on, time[0], time[1], time[2], 0));\n\t            } else if (on.indexOf(\"last\") === 0) {\n\t                date = new Date(Date.UTC(year, months[month] + 1, 1, time[0] - 24, time[1], time[2], 0));\n\n\t                targetDay = days[on.substr(4, 3)];\n\t                ourDay = date.getUTCDay();\n\n\t                date.setUTCDate(date.getUTCDate() + targetDay - ourDay - (targetDay > ourDay ? 7 : 0));\n\t            } else if (on.indexOf(\">=\") >= 0) {\n\t                date = new Date(Date.UTC(year, months[month], on.substr(5), time[0], time[1], time[2], 0));\n\n\t                targetDay = days[on.substr(0, 3)];\n\t                ourDay = date.getUTCDay();\n\n\t                date.setUTCDate(date.getUTCDate() + targetDay - ourDay + (targetDay < ourDay ? 7 : 0));\n\t            }\n\n\t            return cache[year] = date;\n\t        }\n\n\t        function findRule(utcTime, rules, zone) {\n\t            rules = rules[zone];\n\n\t            if (!rules) {\n\t                var time = zone.split(\":\");\n\t                var offset = 0;\n\n\t                if (time.length > 1) {\n\t                    offset = time[0] * 60 + Number(time[1]);\n\t                }\n\n\t                return [-1000000, 'max', '-', 'Jan', 1, [0, 0, 0], offset, '-'];\n\t            }\n\n\t            var year = new Date(utcTime).getUTCFullYear();\n\n\t            rules = jQuery.grep(rules, function(rule) {\n\t                var from = rule[0];\n\t                var to = rule[1];\n\n\t                return from <= year && (to >= year || (from == year && to == \"only\") || to == \"max\");\n\t            });\n\n\t            rules.push(utcTime);\n\n\t            rules.sort(function(a, b) {\n\t                if (typeof a != \"number\") {\n\t                    a = Number(ruleToDate(year, a));\n\t                }\n\n\t                if (typeof b != \"number\") {\n\t                    b = Number(ruleToDate(year, b));\n\t                }\n\n\t                return a - b;\n\t            });\n\n\t            var rule = rules[jQuery.inArray(utcTime, rules) - 1] || rules[rules.length - 1];\n\n\t            return isNaN(rule) ? rule : null;\n\t        }\n\n\t        function findZone(utcTime, zones, timezone) {\n\t            var zoneRules = zones[timezone];\n\n\t            if (typeof zoneRules === \"string\") {\n\t                zoneRules = zones[zoneRules];\n\t            }\n\n\t            if (!zoneRules) {\n\t                throw new Error('Timezone \"' + timezone + '\" is either incorrect, or kendo.timezones.min.js is not included.');\n\t            }\n\n\t            for (var idx = zoneRules.length - 1; idx >= 0; idx--) {\n\t                var until = zoneRules[idx][3];\n\n\t                if (until && utcTime > until) {\n\t                    break;\n\t                }\n\t            }\n\n\t            var zone = zoneRules[idx + 1];\n\n\t            if (!zone) {\n\t                throw new Error('Timezone \"' + timezone + '\" not found on ' + utcTime + \".\");\n\t            }\n\n\t            return zone;\n\t        }\n\n\t        function zoneAndRule(utcTime, zones, rules, timezone) {\n\t            if (typeof utcTime != NUMBER) {\n\t                utcTime = Date.UTC(utcTime.getFullYear(), utcTime.getMonth(),\n\t                    utcTime.getDate(), utcTime.getHours(), utcTime.getMinutes(),\n\t                    utcTime.getSeconds(), utcTime.getMilliseconds());\n\t            }\n\n\t            var zone = findZone(utcTime, zones, timezone);\n\n\t            return {\n\t                zone: zone,\n\t                rule: findRule(utcTime, rules, zone[1])\n\t            };\n\t        }\n\n\t        function offset(utcTime, timezone) {\n\t            if (timezone == \"Etc/UTC\" || timezone == \"Etc/GMT\") {\n\t                return 0;\n\t            }\n\n\t            var info = zoneAndRule(utcTime, this.zones, this.rules, timezone);\n\t            var zone = info.zone;\n\t            var rule = info.rule;\n\n\t            return kendo.parseFloat(rule? zone[0] - rule[6] : zone[0]);\n\t        }\n\n\t        function abbr(utcTime, timezone) {\n\t            var info = zoneAndRule(utcTime, this.zones, this.rules, timezone);\n\t            var zone = info.zone;\n\t            var rule = info.rule;\n\n\t            var base = zone[2];\n\n\t            if (base.indexOf(\"/\") >= 0) {\n\t                return base.split(\"/\")[rule && +rule[6] ? 1 : 0];\n\t            } else if (base.indexOf(\"%s\") >= 0) {\n\t                return base.replace(\"%s\", (!rule || rule[7] == \"-\") ? '' : rule[7]);\n\t            }\n\n\t            return base;\n\t        }\n\n\t        function convert(date, fromOffset, toOffset) {\n\t            var tempToOffset = toOffset;\n\t            var diff;\n\n\t            if (typeof fromOffset == STRING) {\n\t                fromOffset = this.offset(date, fromOffset);\n\t            }\n\n\t            if (typeof toOffset == STRING) {\n\t                toOffset = this.offset(date, toOffset);\n\t            }\n\n\t            var fromLocalOffset = date.getTimezoneOffset();\n\n\t            date = new Date(date.getTime() + (fromOffset - toOffset) * 60000);\n\n\t            var toLocalOffset = date.getTimezoneOffset();\n\n\t            if (typeof tempToOffset == STRING) {\n\t                tempToOffset = this.offset(date, tempToOffset);\n\t            }\n\n\t            diff = (toLocalOffset - fromLocalOffset) + (toOffset - tempToOffset);\n\n\t            return new Date(date.getTime() + diff * 60000);\n\t        }\n\n\t        function apply(date, timezone) {\n\t           return this.convert(date, date.getTimezoneOffset(), timezone);\n\t        }\n\n\t        function remove(date, timezone) {\n\t           return this.convert(date, timezone, date.getTimezoneOffset());\n\t        }\n\n\t        function toLocalDate(time) {\n\t            return this.apply(new Date(time), \"Etc/UTC\");\n\t        }\n\n\t        return {\n\t           zones: {},\n\t           rules: {},\n\t           offset: offset,\n\t           convert: convert,\n\t           apply: apply,\n\t           remove: remove,\n\t           abbr: abbr,\n\t           toLocalDate: toLocalDate\n\t        };\n\t    })();\n\n\t    kendo.date = (function(){\n\t        var MS_PER_MINUTE = 60000,\n\t            MS_PER_DAY = 86400000;\n\n\t        function adjustDST(date, hours) {\n\t            if (hours === 0 && date.getHours() === 23) {\n\t                date.setHours(date.getHours() + 2);\n\t                return true;\n\t            }\n\n\t            return false;\n\t        }\n\n\t        function setDayOfWeek(date, day, dir) {\n\t            var hours = date.getHours();\n\n\t            dir = dir || 1;\n\t            day = ((day - date.getDay()) + (7 * dir)) % 7;\n\n\t            date.setDate(date.getDate() + day);\n\t            adjustDST(date, hours);\n\t        }\n\n\t        function dayOfWeek(date, day, dir) {\n\t            date = new Date(date);\n\t            setDayOfWeek(date, day, dir);\n\t            return date;\n\t        }\n\n\t        function firstDayOfMonth(date) {\n\t            return new Date(\n\t                date.getFullYear(),\n\t                date.getMonth(),\n\t                1\n\t            );\n\t        }\n\n\t        function lastDayOfMonth(date) {\n\t            var last = new Date(date.getFullYear(), date.getMonth() + 1, 0),\n\t                first = firstDayOfMonth(date),\n\t                timeOffset = Math.abs(last.getTimezoneOffset() - first.getTimezoneOffset());\n\n\t            if (timeOffset) {\n\t                last.setHours(first.getHours() + (timeOffset / 60));\n\t            }\n\n\t            return last;\n\t        }\n\n\t        function moveDateToWeekStart(date, weekStartDay) {\n\t            if (weekStartDay !== 1) {\n\t                return addDays(dayOfWeek(date, weekStartDay, -1), 4);\n\t            }\n\n\t            return addDays(date, (4 - (date.getDay() || 7)));\n\t        }\n\n\t        function calcWeekInYear(date, weekStartDay) {\n\t            var firstWeekInYear = new Date(date.getFullYear(), 0, 1, -6);\n\n\t            var newDate = moveDateToWeekStart(date, weekStartDay);\n\n\t            var diffInMS = newDate.getTime() - firstWeekInYear.getTime();\n\n\t            var days = Math.floor(diffInMS / MS_PER_DAY);\n\n\t            return 1 + Math.floor(days / 7);\n\t        }\n\n\t        function weekInYear(date, weekStartDay) {\n\t            if(weekStartDay === undefined) {\n\t                weekStartDay = kendo.culture().calendar.firstDay;\n\t            }\n\n\t            var prevWeekDate = addDays(date, -7);\n\t            var nextWeekDate = addDays(date, 7);\n\n\t            var weekNumber = calcWeekInYear(date, weekStartDay);\n\n\t            if (weekNumber === 0) {\n\t                return calcWeekInYear(prevWeekDate, weekStartDay) + 1;\n\t            }\n\n\t            if (weekNumber === 53 && calcWeekInYear(nextWeekDate, weekStartDay) > 1) {\n\t                return 1;\n\t            }\n\n\t            return weekNumber;\n\t        }\n\n\t        function getDate(date) {\n\t            date = new Date(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0);\n\t            adjustDST(date, 0);\n\t            return date;\n\t        }\n\n\t        function toUtcTime(date) {\n\t            return Date.UTC(date.getFullYear(), date.getMonth(),\n\t                        date.getDate(), date.getHours(), date.getMinutes(),\n\t                        date.getSeconds(), date.getMilliseconds());\n\t        }\n\n\t        function getMilliseconds(date) {\n\t            return toInvariantTime(date).getTime() - getDate(toInvariantTime(date));\n\t        }\n\n\t        function isInTimeRange(value, min, max) {\n\t            var msMin = getMilliseconds(min),\n\t                msMax = getMilliseconds(max),\n\t                msValue;\n\n\t            if (!value || msMin == msMax) {\n\t                return true;\n\t            }\n\n\t            if (min >= max) {\n\t                max += MS_PER_DAY;\n\t            }\n\n\t            msValue = getMilliseconds(value);\n\n\t            if (msMin > msValue) {\n\t                msValue += MS_PER_DAY;\n\t            }\n\n\t            if (msMax < msMin) {\n\t                msMax += MS_PER_DAY;\n\t            }\n\n\t            return msValue >= msMin && msValue <= msMax;\n\t        }\n\n\t        function isInDateRange(value, min, max) {\n\t            var msMin = min.getTime(),\n\t                msMax = max.getTime(),\n\t                msValue;\n\n\t            if (msMin >= msMax) {\n\t                msMax += MS_PER_DAY;\n\t            }\n\n\t            msValue = value.getTime();\n\n\t            return msValue >= msMin && msValue <= msMax;\n\t        }\n\n\t        function addDays(date, offset) {\n\t            var hours = date.getHours();\n\t                date = new Date(date);\n\n\t            setTime(date, offset * MS_PER_DAY);\n\t            adjustDST(date, hours);\n\t            return date;\n\t        }\n\n\t        function setTime(date, milliseconds, ignoreDST) {\n\t            var offset = date.getTimezoneOffset();\n\t            var difference;\n\n\t            date.setTime(date.getTime() + milliseconds);\n\n\t            if (!ignoreDST) {\n\t                difference = date.getTimezoneOffset() - offset;\n\t                date.setTime(date.getTime() + difference * MS_PER_MINUTE);\n\t            }\n\t        }\n\n\t        function setHours(date, time) {\n\t            date = new Date(kendo.date.getDate(date).getTime() + kendo.date.getMilliseconds(time));\n\t            adjustDST(date, time.getHours());\n\t            return date;\n\t        }\n\n\t        function today() {\n\t            return getDate(new Date());\n\t        }\n\n\t        function isToday(date) {\n\t           return getDate(date).getTime() == today().getTime();\n\t        }\n\n\t        function toInvariantTime(date) {\n\t            var staticDate = new Date(1980, 1, 1, 0, 0, 0);\n\n\t            if (date) {\n\t                staticDate.setHours(date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());\n\t            }\n\n\t            return staticDate;\n\t        }\n\n\t        return {\n\t            adjustDST: adjustDST,\n\t            dayOfWeek: dayOfWeek,\n\t            setDayOfWeek: setDayOfWeek,\n\t            getDate: getDate,\n\t            isInDateRange: isInDateRange,\n\t            isInTimeRange: isInTimeRange,\n\t            isToday: isToday,\n\t            nextDay: function(date) {\n\t                return addDays(date, 1);\n\t            },\n\t            previousDay: function(date) {\n\t                return addDays(date, -1);\n\t            },\n\t            toUtcTime: toUtcTime,\n\t            MS_PER_DAY: MS_PER_DAY,\n\t            MS_PER_HOUR: 60 * MS_PER_MINUTE,\n\t            MS_PER_MINUTE: MS_PER_MINUTE,\n\t            setTime: setTime,\n\t            setHours: setHours,\n\t            addDays: addDays,\n\t            today: today,\n\t            toInvariantTime: toInvariantTime,\n\t            firstDayOfMonth: firstDayOfMonth,\n\t            lastDayOfMonth: lastDayOfMonth,\n\t            weekInYear: weekInYear,\n\t            getMilliseconds: getMilliseconds\n\t        };\n\t    })();\n\n\n\t    kendo.stripWhitespace = function(element) {\n\t        if (document.createNodeIterator) {\n\t            var iterator = document.createNodeIterator(element, NodeFilter.SHOW_TEXT, function(node) {\n\t                    return node.parentNode == element ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_REJECT;\n\t                }, false);\n\n\t            while (iterator.nextNode()) {\n\t                if (iterator.referenceNode && !iterator.referenceNode.textContent.trim()) {\n\t                    iterator.referenceNode.parentNode.removeChild(iterator.referenceNode);\n\t                }\n\t            }\n\t        } else { // IE7/8 support\n\t            for (var i = 0; i < element.childNodes.length; i++) {\n\t                var child = element.childNodes[i];\n\n\t                if (child.nodeType == 3 && !/\\S/.test(child.nodeValue)) {\n\t                    element.removeChild(child);\n\t                    i--;\n\t                }\n\n\t                if (child.nodeType == 1) {\n\t                    kendo.stripWhitespace(child);\n\t                }\n\t            }\n\t        }\n\t    };\n\n\t    var animationFrame  = window.requestAnimationFrame       ||\n\t                          window.webkitRequestAnimationFrame ||\n\t                          window.mozRequestAnimationFrame    ||\n\t                          window.oRequestAnimationFrame      ||\n\t                          window.msRequestAnimationFrame     ||\n\t                          function(callback){ setTimeout(callback, 1000 / 60); };\n\n\t    kendo.animationFrame = function(callback) {\n\t        animationFrame.call(window, callback);\n\t    };\n\n\t    var animationQueue = [];\n\n\t    kendo.queueAnimation = function(callback) {\n\t        animationQueue[animationQueue.length] = callback;\n\t        if (animationQueue.length === 1) {\n\t            kendo.runNextAnimation();\n\t        }\n\t    };\n\n\t    kendo.runNextAnimation = function() {\n\t        kendo.animationFrame(function() {\n\t            if (animationQueue[0]) {\n\t                animationQueue.shift()();\n\t                if (animationQueue[0]) {\n\t                    kendo.runNextAnimation();\n\t                }\n\t            }\n\t        });\n\t    };\n\n\t    kendo.parseQueryStringParams = function(url) {\n\t        var queryString = url.split('?')[1] || \"\",\n\t            params = {},\n\t            paramParts = queryString.split(/&|=/),\n\t            length = paramParts.length,\n\t            idx = 0;\n\n\t        for (; idx < length; idx += 2) {\n\t            if(paramParts[idx] !== \"\") {\n\t                params[decodeURIComponent(paramParts[idx])] = decodeURIComponent(paramParts[idx + 1]);\n\t            }\n\t        }\n\n\t        return params;\n\t    };\n\n\t    kendo.elementUnderCursor = function(e) {\n\t        if (typeof e.x.client != \"undefined\") {\n\t            return document.elementFromPoint(e.x.client, e.y.client);\n\t        }\n\t    };\n\n\t    kendo.wheelDeltaY = function(jQueryEvent) {\n\t        var e = jQueryEvent.originalEvent,\n\t            deltaY = e.wheelDeltaY,\n\t            delta;\n\n\t            if (e.wheelDelta) { // Webkit and IE\n\t                if (deltaY === undefined || deltaY) { // IE does not have deltaY, thus always scroll (horizontal scrolling is treated as vertical)\n\t                    delta = e.wheelDelta;\n\t                }\n\t            } else if (e.detail && e.axis === e.VERTICAL_AXIS) { // Firefox and Opera\n\t                delta = (-e.detail) * 10;\n\t            }\n\n\t        return delta;\n\t    };\n\n\t    kendo.throttle = function(fn, delay) {\n\t        var timeout;\n\t        var lastExecTime = 0;\n\n\t        if (!delay || delay <= 0) {\n\t            return fn;\n\t        }\n\n\t        var throttled = function() {\n\t            var that = this;\n\t            var elapsed = +new Date() - lastExecTime;\n\t            var args = arguments;\n\n\t            function exec() {\n\t                fn.apply(that, args);\n\t                lastExecTime = +new Date();\n\t            }\n\n\t            // first execution\n\t            if (!lastExecTime) {\n\t                return exec();\n\t            }\n\n\t            if (timeout) {\n\t                clearTimeout(timeout);\n\t            }\n\n\t            if (elapsed > delay) {\n\t                exec();\n\t            } else {\n\t                timeout = setTimeout(exec, delay - elapsed);\n\t            }\n\t        };\n\n\t        throttled.cancel = function() {\n\t            clearTimeout(timeout);\n\t        };\n\n\t        return throttled;\n\t    };\n\n\n\t    kendo.caret = function (element, start, end) {\n\t        var rangeElement;\n\t        var isPosition = start !== undefined;\n\n\t        if (end === undefined) {\n\t            end = start;\n\t        }\n\n\t        if (element[0]) {\n\t            element = element[0];\n\t        }\n\n\t        if (isPosition && element.disabled) {\n\t            return;\n\t        }\n\n\t        try {\n\t            if (element.selectionStart !== undefined) {\n\t                if (isPosition) {\n\t                    element.focus();\n\t                    var mobile = support.mobileOS;\n\t                    if(mobile.wp || mobile.android) {// without the timeout the caret is at the end of the input\n\t                        setTimeout(function() { element.setSelectionRange(start, end); }, 0);\n\t                    }\n\t                    else {\n\t                        element.setSelectionRange(start, end);\n\t                    }\n\t                } else {\n\t                    start = [element.selectionStart, element.selectionEnd];\n\t                }\n\t            } else if (document.selection) {\n\t                if ($(element).is(\":visible\")) {\n\t                    element.focus();\n\t                }\n\n\t                rangeElement = element.createTextRange();\n\n\t                if (isPosition) {\n\t                    rangeElement.collapse(true);\n\t                    rangeElement.moveStart(\"character\", start);\n\t                    rangeElement.moveEnd(\"character\", end - start);\n\t                    rangeElement.select();\n\t                } else {\n\t                    var rangeDuplicated = rangeElement.duplicate(),\n\t                        selectionStart, selectionEnd;\n\n\t                        rangeElement.moveToBookmark(document.selection.createRange().getBookmark());\n\t                        rangeDuplicated.setEndPoint('EndToStart', rangeElement);\n\t                        selectionStart = rangeDuplicated.text.length;\n\t                        selectionEnd = selectionStart + rangeElement.text.length;\n\n\t                    start = [selectionStart, selectionEnd];\n\t                }\n\t            }\n\t        } catch(e) {\n\t            /* element is not focused or it is not in the DOM */\n\t            start = [];\n\t        }\n\n\t        return start;\n\t    };\n\n\t    kendo.compileMobileDirective = function(element, scope) {\n\t        var angular = window.angular;\n\n\t        element.attr(\"data-\" + kendo.ns + \"role\", element[0].tagName.toLowerCase().replace('kendo-mobile-', '').replace('-', ''));\n\n\t        angular.element(element).injector().invoke([\"$compile\", function($compile) {\n\t            $compile(element)(scope);\n\n\t            if (!/^\\$(digest|apply)$/.test(scope.$$phase)) {\n\t                scope.$digest();\n\t            }\n\t        }]);\n\n\t        return kendo.widgetInstance(element, kendo.mobile.ui);\n\t    };\n\n\t    kendo.antiForgeryTokens = function() {\n\t        var tokens = { },\n\t            csrf_token = $(\"meta[name=csrf-token],meta[name=_csrf]\").attr(\"content\"),\n\t            csrf_param = $(\"meta[name=csrf-param],meta[name=_csrf_header]\").attr(\"content\");\n\n\t        $(\"input[name^='__RequestVerificationToken']\").each(function() {\n\t            tokens[this.name] = this.value;\n\t        });\n\n\t        if (csrf_param !== undefined && csrf_token !== undefined) {\n\t          tokens[csrf_param] = csrf_token;\n\t        }\n\n\t        return tokens;\n\t    };\n\n\t    kendo.cycleForm = function(form) {\n\t        var firstElement = form.find(\"input, .k-widget\").first();\n\t        var lastElement = form.find(\"button, .k-button\").last();\n\n\t        function focus(el) {\n\t            var widget = kendo.widgetInstance(el);\n\n\t            if (widget && widget.focus) {\n\t              widget.focus();\n\t            } else {\n\t              el.focus();\n\t            }\n\t        }\n\n\t        lastElement.on(\"keydown\", function(e) {\n\t          if (e.keyCode == kendo.keys.TAB && !e.shiftKey) {\n\t            e.preventDefault();\n\t            focus(firstElement);\n\t          }\n\t        });\n\n\t        firstElement.on(\"keydown\", function(e) {\n\t          if (e.keyCode == kendo.keys.TAB && e.shiftKey) {\n\t            e.preventDefault();\n\t            focus(lastElement);\n\t          }\n\t        });\n\t    };\n\n\t    kendo.focusElement = function(element) {\n\t        var scrollTopPositions = [];\n\t        var scrollableParents = element.parentsUntil(\"body\")\n\t                .filter(function(index, element) {\n\t                    var computedStyle = kendo.getComputedStyles(element, [\"overflow\"]);\n\t                    return computedStyle.overflow !== \"visible\";\n\t                })\n\t                .add(window);\n\n\t        scrollableParents.each(function(index, parent) {\n\t            scrollTopPositions[index] = $(parent).scrollTop();\n\t        });\n\n\t        try {\n\t            //The setActive method does not cause the document to scroll to the active object in the current page\n\t            element[0].setActive();\n\t        } catch (e) {\n\t            element[0].focus();\n\t        }\n\n\t        scrollableParents.each(function(index, parent) {\n\t            $(parent).scrollTop(scrollTopPositions[index]);\n\t        });\n\t    };\n\n\t    kendo.matchesMedia = function(mediaQuery) {\n\t        var media = kendo._bootstrapToMedia(mediaQuery) || mediaQuery;\n\t        return support.matchMedia && window.matchMedia(media).matches;\n\t    };\n\n\t    kendo._bootstrapToMedia = function(bootstrapMedia) {\n\t        return {\n\t            \"xs\": \"(max-width: 576px)\",\n\t            \"sm\": \"(min-width: 576px)\",\n\t            \"md\": \"(min-width: 768px)\",\n\t            \"lg\": \"(min-width: 992px)\",\n\t            \"xl\": \"(min-width: 1200px)\"\n\t        }[bootstrapMedia];\n\t    };\n\n\t    // kendo.saveAs -----------------------------------------------\n\t    (function() {\n\t        function postToProxy(dataURI, fileName, proxyURL, proxyTarget) {\n\t            var form = $(\"<form>\").attr({\n\t                action: proxyURL,\n\t                method: \"POST\",\n\t                target: proxyTarget\n\t            });\n\n\t            var data = kendo.antiForgeryTokens();\n\t            data.fileName = fileName;\n\n\t            var parts = dataURI.split(\";base64,\");\n\t            data.contentType = parts[0].replace(\"data:\", \"\");\n\t            data.base64 = parts[1];\n\n\t            for (var name in data) {\n\t                if (data.hasOwnProperty(name)) {\n\t                    $('<input>').attr({\n\t                        value: data[name],\n\t                        name: name,\n\t                        type: \"hidden\"\n\t                    }).appendTo(form);\n\t                }\n\t            }\n\n\t            form.appendTo(\"body\").submit().remove();\n\t        }\n\n\t        var fileSaver = document.createElement(\"a\");\n\t        var downloadAttribute = \"download\" in fileSaver && !kendo.support.browser.edge;\n\n\t        function saveAsBlob(dataURI, fileName) {\n\t            var blob = dataURI; // could be a Blob object\n\n\t            if (typeof dataURI == \"string\") {\n\t                var parts = dataURI.split(\";base64,\");\n\t                var contentType = parts[0];\n\t                var base64 = atob(parts[1]);\n\t                var array = new Uint8Array(base64.length);\n\n\t                for (var idx = 0; idx < base64.length; idx++) {\n\t                    array[idx] = base64.charCodeAt(idx);\n\t                }\n\t                blob = new Blob([array.buffer], { type: contentType });\n\t            }\n\n\t            navigator.msSaveBlob(blob, fileName);\n\t        }\n\n\t        function saveAsDataURI(dataURI, fileName) {\n\t            if (window.Blob && dataURI instanceof Blob) {\n\t                dataURI = URL.createObjectURL(dataURI);\n\t            }\n\n\t            fileSaver.download = fileName;\n\t            fileSaver.href = dataURI;\n\n\t            var e = document.createEvent(\"MouseEvents\");\n\t            e.initMouseEvent(\"click\", true, false, window,\n\t                0, 0, 0, 0, 0, false, false, false, false, 0, null);\n\n\t            fileSaver.dispatchEvent(e);\n\t            setTimeout(function(){\n\t                URL.revokeObjectURL(dataURI);\n\t            });\n\t        }\n\n\t        kendo.saveAs = function(options) {\n\t            var save = postToProxy;\n\n\t            if (!options.forceProxy) {\n\t                if (downloadAttribute) {\n\t                    save = saveAsDataURI;\n\t                } else if (navigator.msSaveBlob) {\n\t                    save = saveAsBlob;\n\t                }\n\t            }\n\n\t            save(options.dataURI, options.fileName, options.proxyURL, options.proxyTarget);\n\t        };\n\t    })();\n\n\t    // kendo proxySetters\n\t    kendo.proxyModelSetters = function proxyModelSetters(data) {\n\t        var observable = {};\n\n\t        Object.keys(data || {}).forEach(function(property) {\n\t          Object.defineProperty(observable, property, {\n\t            get: function() {\n\t              return data[property];\n\t            },\n\t            set: function(value) {\n\t              data[property] = value;\n\t              data.dirty = true;\n\t            }\n\t          });\n\t        });\n\n\t        return observable;\n\t    };\n\n\t})(jQuery, window);\n\n\treturn window.kendo;\n\n\t}, __webpack_require__(3));\n\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1003)))\n\n/***/ })\n\n/******/ });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///46d3985e259824d97676\n");

/***/ }),

/***/ "52de5ccd30df4e157d32":
/*!**************************************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/kendo.treeview.draganddrop.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1340);\n\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function() { throw new Error(\"define cannot be used indirect\"); };\r\n\n\n/***/ }),\n\n/***/ 1013:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.data */ \"f78db54954381e284430\");\n\n/***/ }),\n\n/***/ 1059:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.draganddrop */ \"b4c182ea2e2a8af62a4a\");\n\n/***/ }),\n\n/***/ 1340:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(1013), __webpack_require__(1059) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t})(function(){\n\n\tvar __meta__ = { // jshint ignore:line\n\t    id: \"treeview.draganddrop\",\n\t    name: \"Hierarchical Drag & Drop\",\n\t    category: \"framework\",\n\t    depends: [ \"core\", \"draganddrop\" ],\n\t    advanced: true\n\t};\n\n\t(function($, undefined){\n\t    var kendo = window.kendo;\n\t    var ui = kendo.ui;\n\t    var proxy = $.proxy;\n\t    var extend = $.extend;\n\t    var VISIBILITY = \"visibility\";\n\t    var KSTATEHOVER = \"k-state-hover\";\n\t    var INPUTSELECTOR = \"input,a:not(.k-in),textarea,.k-multiselect-wrap,select,button,a.k-button>.k-icon,button.k-button>.k-icon,span.k-icon.k-i-arrow-60-right,span.k-icon.k-i-arrow-45-down-right\";\n\n\t    ui.HierarchicalDragAndDrop = kendo.Class.extend({\n\t        init: function (element, options) {\n\t            this.element = element;\n\t            this.hovered = element;\n\t            this.options = extend({\n\t                dragstart: $.noop, drag: $.noop, drop: $.noop, dragend: $.noop\n\t            }, options);\n\n\t            this._draggable = new ui.Draggable(element, {\n\t                ignore: INPUTSELECTOR,\n\t                filter: options.filter,\n\t                autoScroll: options.autoScroll,\n\t                cursorOffset: {\n\t                    left: 10,\n\t                    top: kendo.support.mobileOS ? -40 / kendo.support.zoomLevel() : 10\n\t                },\n\t                hint: proxy(this._hint, this),\n\t                dragstart: proxy(this.dragstart, this),\n\t                dragcancel: proxy(this.dragcancel, this),\n\t                drag: proxy(this.drag, this),\n\t                dragend: proxy(this.dragend, this),\n\t                $angular: options.$angular\n\t            });\n\t        },\n\n\t        _hint: function(element) {\n\t            return \"<div class='k-header k-drag-clue'>\" +\n\t                        \"<span class='k-icon k-drag-status' />\" +\n\t                        this.options.hintText(element) +\n\t                    \"</div>\";\n\t        },\n\n\t        _removeTouchHover: function() {\n\t            if (kendo.support.touch && this.hovered) {\n\t                this.hovered.find(\".\" + KSTATEHOVER).removeClass(KSTATEHOVER);\n\t                this.hovered = false;\n\t            }\n\t        },\n\n\t        _hintStatus: function(newStatus) {\n\t            var statusElement = this._draggable.hint.find(\".k-drag-status\")[0];\n\n\t            if (newStatus) {\n\t                statusElement.className = \"k-icon k-drag-status \" + newStatus;\n\t            } else {\n\t                return $.trim(statusElement.className.replace(/(p|k)-(icon|drag-status)/g, \"\"));\n\t            }\n\t        },\n\n\t        dragstart: function (e) {\n\t            this.source = e.currentTarget.closest(this.options.itemSelector);\n\n\t            if (this.options.dragstart(this.source)) {\n\t                e.preventDefault();\n\t            }\n\n\t            if (this.options.reorderable) {\n\t                this.dropHint = $(\"<div class='k-i-drag-and-drop' />\")\n\t                    .css(VISIBILITY, \"hidden\")\n\t                    .appendTo(this.element);\n\t            } else {\n\t                this.dropHint = $();\n\t            }\n\t        },\n\n\t        drag: function (e) {\n\t            var options = this.options;\n\t            var source = this.source;\n\t            var target = this.dropTarget = $(kendo.eventTarget(e));\n\t            var container = target.closest(options.allowedContainers);\n\t            var hoveredItem, itemHeight, itemTop, itemContent, delta;\n\t            var insertOnTop, insertOnBottom, addChild;\n\t            var itemData, position, status;\n\n\t            if (!container.length) {\n\t                // dragging outside of allowed elements\n\t                status = \"k-i-cancel\";\n\t                this._removeTouchHover();\n\t            } else if (source[0] == target[0] || options.contains(source[0], target[0])) {\n\t                // dragging item within itself\n\t                status = \"k-i-cancel\";\n\t            } else {\n\t                // moving or reordering item\n\t                status = \"k-i-insert-middle\";\n\n\t                itemData = options.itemFromTarget(target);\n\t                hoveredItem = itemData.item;\n\n\t                if (hoveredItem.length) {\n\t                    this._removeTouchHover();\n\t                    itemHeight = kendo._outerHeight(hoveredItem);\n\t                    itemContent = itemData.content;\n\n\t                    if (options.reorderable) {\n\t                        delta = itemHeight / (itemContent.length > 0 ? 4 : 2);\n\t                        itemTop = kendo.getOffset(hoveredItem).top;\n\n\t                        insertOnTop = e.y.location < (itemTop + delta);\n\t                        insertOnBottom = (itemTop + itemHeight - delta) < e.y.location;\n\t                        addChild = itemContent.length && !insertOnTop && !insertOnBottom;\n\t                    } else {\n\t                        addChild = true;\n\t                        insertOnTop = false;\n\t                        insertOnBottom = false;\n\t                    }\n\n\t                    this.hovered = addChild ? container : false;\n\n\t                    this.dropHint.css(VISIBILITY, addChild ? \"hidden\" : \"visible\");\n\n\t                    if (this._lastHover && this._lastHover[0] != itemContent[0]) {\n\t                        this._lastHover.removeClass(KSTATEHOVER);\n\t                    }\n\n\t                    this._lastHover = itemContent.toggleClass(KSTATEHOVER, addChild);\n\n\t                    if (addChild) {\n\t                        status = \"k-i-plus\";\n\t                    } else {\n\t                        position = hoveredItem.position();\n\t                        position.top += insertOnTop ? 0 : itemHeight;\n\n\t                        this.dropHint.css(position)\n\t                            [insertOnTop ? \"prependTo\" : \"appendTo\"]\n\t                            (options.dropHintContainer(hoveredItem));\n\n\t                        if (insertOnTop && itemData.first) {\n\t                            status = \"k-i-insert-up\";\n\t                        }\n\n\t                        if (insertOnBottom && itemData.last) {\n\t                            status = \"k-i-insert-down\";\n\t                        }\n\t                    }\n\t                } else if (target[0] != this.dropHint[0]) {\n\t                    if (this._lastHover) {\n\t                        this._lastHover.removeClass(KSTATEHOVER);\n\t                    }\n\n\t                    if (!$.contains(this.element[0], container[0])) {\n\t                        // moving node to different element\n\t                        status = \"k-i-plus\";\n\t                    } else {\n\t                        status = \"k-i-cancel\";\n\t                    }\n\t                }\n\t            }\n\n\t            this.options.drag({\n\t                originalEvent: e.originalEvent,\n\t                source: source,\n\t                target: target,\n\t                pageY: e.y.location,\n\t                pageX: e.x.location,\n\t                status: status.substring(2),\n\t                setStatus: function(value) {\n\t                    status = value;\n\t                }\n\t            });\n\n\t            if (status.indexOf(\"k-i-insert\") !== 0) {\n\t                this.dropHint.css(VISIBILITY, \"hidden\");\n\t            }\n\n\t            this._hintStatus(status);\n\t        },\n\n\t        dragcancel: function() {\n\t            this.dropHint.remove();\n\t        },\n\n\t        dragend: function (e) {\n\t            var position = \"over\",\n\t                source = this.source,\n\t                destination,\n\t                dropHint = this.dropHint,\n\t                dropTarget = this.dropTarget,\n\t                eventArgs, dropPrevented;\n\n\t            if (dropHint.css(VISIBILITY) == \"visible\") {\n\t                position = this.options.dropPositionFrom(dropHint);\n\t                destination = dropHint.closest(this.options.itemSelector);\n\t            } else if (dropTarget) {\n\t                destination = dropTarget.closest(this.options.itemSelector);\n\n\t                // moving node to root element\n\t                if (!destination.length) {\n\t                    destination = dropTarget.closest(this.options.allowedContainers);\n\t                }\n\t            }\n\n\t            eventArgs = {\n\t                originalEvent: e.originalEvent,\n\t                source: source[0],\n\t                destination: destination[0],\n\t                valid: this._hintStatus() != \"k-i-cancel\",\n\t                setValid: function(newValid) {\n\t                    this.valid = newValid;\n\t                },\n\t                dropTarget: dropTarget[0],\n\t                position: position\n\t            };\n\n\t            dropPrevented = this.options.drop(eventArgs);\n\n\t            dropHint.remove();\n\t            this._removeTouchHover();\n\t            if (this._lastHover) {\n\t                this._lastHover.removeClass(KSTATEHOVER);\n\t            }\n\n\t            if (!eventArgs.valid || dropPrevented) {\n\t                this._draggable.dropped = eventArgs.valid;\n\t                return;\n\t            }\n\n\t            this._draggable.dropped = true;\n\n\t            this.options.dragend({\n\t                originalEvent: e.originalEvent,\n\t                source: source,\n\t                destination: destination,\n\t                position: position\n\t            });\n\t        },\n\n\t        destroy: function() {\n\t            this._lastHover = this.hovered = null;\n\t            this._draggable.destroy();\n\t        }\n\t    });\n\n\t})(window.kendo.jQuery);\n\n\treturn window.kendo;\n\n\t}, __webpack_require__(3));\n\n\n/***/ })\n\n/******/ });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///52de5ccd30df4e157d32\n");

/***/ }),

/***/ "9a0e40ed3a51a921e191":
/*!****************************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/kendo.userevents.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1350);\n\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function() { throw new Error(\"define cannot be used indirect\"); };\r\n\n\n/***/ }),\n\n/***/ 1004:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.core */ \"46d3985e259824d97676\");\n\n/***/ }),\n\n/***/ 1350:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(1004) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t})(function(){\n\n\tvar __meta__ = { // jshint ignore:line\n\t    id: \"userevents\",\n\t    name: \"User Events\",\n\t    category: \"framework\",\n\t    depends: [ \"core\" ],\n\t    hidden: true\n\t};\n\n\t(function ($, undefined) {\n\t    var kendo = window.kendo,\n\t        support = kendo.support,\n\t        Class = kendo.Class,\n\t        Observable = kendo.Observable,\n\t        now = $.now,\n\t        extend = $.extend,\n\t        OS = support.mobileOS,\n\t        invalidZeroEvents = OS && OS.android,\n\t        DEFAULT_MIN_HOLD = 800,\n\t        CLICK_DELAY = 300,\n\t        DEFAULT_THRESHOLD = support.browser.msie ? 5 : 0, // WP8 and W8 are very sensitive and always report move.\n\n\t        // UserEvents events\n\t        PRESS = \"press\",\n\t        HOLD = \"hold\",\n\t        SELECT = \"select\",\n\t        START = \"start\",\n\t        MOVE = \"move\",\n\t        END = \"end\",\n\t        CANCEL = \"cancel\",\n\t        TAP = \"tap\",\n\t        DOUBLETAP = \"doubleTap\",\n\t        RELEASE = \"release\",\n\t        GESTURESTART = \"gesturestart\",\n\t        GESTURECHANGE = \"gesturechange\",\n\t        GESTUREEND = \"gestureend\",\n\t        GESTURETAP = \"gesturetap\";\n\n\t    var THRESHOLD = {\n\t        \"api\": 0,\n\t        \"touch\": 0,\n\t        \"mouse\": 9,\n\t        \"pointer\": 9\n\t    };\n\n\t    var ENABLE_GLOBAL_SURFACE = (!support.touch || support.mouseAndTouchPresent);\n\n\t    function touchDelta(touch1, touch2) {\n\t        var x1 = touch1.x.location,\n\t            y1 = touch1.y.location,\n\t            x2 = touch2.x.location,\n\t            y2 = touch2.y.location,\n\t            dx = x1 - x2,\n\t            dy = y1 - y2;\n\n\t        return {\n\t            center: {\n\t               x: (x1 + x2) / 2,\n\t               y: (y1 + y2) / 2\n\t            },\n\n\t            distance: Math.sqrt(dx*dx + dy*dy)\n\t        };\n\t    }\n\n\t    function getTouches(e) {\n\t        var touches = [],\n\t            originalEvent = e.originalEvent,\n\t            currentTarget = e.currentTarget,\n\t            idx = 0, length,\n\t            changedTouches,\n\t            touch;\n\n\t        if (e.api) {\n\t            touches.push({\n\t                id: 2,  // hardcoded ID for API call;\n\t                event: e,\n\t                target: e.target,\n\t                currentTarget: e.target,\n\t                location: e,\n\t                type: \"api\"\n\t            });\n\t        }\n\t        else if (e.type.match(/touch/)) {\n\t            changedTouches = originalEvent ? originalEvent.changedTouches : [];\n\t            for (length = changedTouches.length; idx < length; idx ++) {\n\t                touch = changedTouches[idx];\n\t                touches.push({\n\t                    location: touch,\n\t                    event: e,\n\t                    target: touch.target,\n\t                    currentTarget: currentTarget,\n\t                    id: touch.identifier,\n\t                    type: \"touch\"\n\t                });\n\t            }\n\t        }\n\t        else if (support.pointers || support.msPointers) {\n\t            touches.push({\n\t                location: originalEvent,\n\t                event: e,\n\t                target: e.target,\n\t                currentTarget: currentTarget,\n\t                id: originalEvent.pointerId,\n\t                type: \"pointer\"\n\t            });\n\t        } else {\n\t            touches.push({\n\t                id: 1, // hardcoded ID for mouse event;\n\t                event: e,\n\t                target: e.target,\n\t                currentTarget: currentTarget,\n\t                location: e,\n\t                type: \"mouse\"\n\t            });\n\t        }\n\n\t        return touches;\n\t    }\n\n\t    var TouchAxis = Class.extend({\n\t        init: function(axis, location) {\n\t            var that = this;\n\n\t            that.axis = axis;\n\n\t            that._updateLocationData(location);\n\n\t            that.startLocation = that.location;\n\t            that.velocity = that.delta = 0;\n\t            that.timeStamp = now();\n\t        },\n\n\t        move: function(location) {\n\t            var that = this,\n\t                offset = location[\"page\" + that.axis],\n\t                timeStamp = now(),\n\t                timeDelta = (timeStamp - that.timeStamp) || 1; // Firing manually events in tests can make this 0;\n\n\t            if (!offset && invalidZeroEvents) {\n\t                return;\n\t            }\n\n\t            that.delta = offset - that.location;\n\n\t            that._updateLocationData(location);\n\n\t            that.initialDelta = offset - that.startLocation;\n\t            that.velocity = that.delta / timeDelta;\n\t            that.timeStamp = timeStamp;\n\t        },\n\n\t        _updateLocationData: function(location) {\n\t            var that = this, axis = that.axis;\n\n\t            that.location = location[\"page\" + axis];\n\t            that.client = location[\"client\" + axis];\n\t            that.screen = location[\"screen\" + axis];\n\t        }\n\t    });\n\n\t    var Touch = Class.extend({\n\t        init: function(userEvents, target, touchInfo) {\n\t            extend(this, {\n\t                x: new TouchAxis(\"X\", touchInfo.location),\n\t                y: new TouchAxis(\"Y\", touchInfo.location),\n\t                type: touchInfo.type,\n\t                useClickAsTap: userEvents.useClickAsTap,\n\t                threshold: userEvents.threshold || THRESHOLD[touchInfo.type],\n\t                userEvents: userEvents,\n\t                target: target,\n\t                currentTarget: touchInfo.currentTarget,\n\t                initialTouch: touchInfo.target,\n\t                id: touchInfo.id,\n\t                pressEvent: touchInfo,\n\t                _clicks: userEvents._clicks,\n\t                supportDoubleTap: userEvents.supportDoubleTap,\n\t                _moved: false,\n\t                _finished: false\n\t            });\n\t        },\n\n\t        press: function() {\n\t            this._holdTimeout = setTimeout($.proxy(this, \"_hold\"), this.userEvents.minHold);\n\t            this._trigger(PRESS, this.pressEvent);\n\t        },\n\n\t        _tap: function(touchInfo) {\n\t            var that = this;\n\t            that.userEvents._clicks++;\n\t            if (that.userEvents._clicks == 1) {\n\t                that._clickTimeout = setTimeout(function() {\n\t                    if (that.userEvents._clicks == 1) {\n\t                        that._trigger(TAP, touchInfo);\n\t                    }\n\t                    else {\n\t                        that._trigger(DOUBLETAP, touchInfo);\n\t                    }\n\t                    that.userEvents._clicks = 0;\n\t                }, CLICK_DELAY);\n\t            }\n\t        },\n\n\t        _hold: function() {\n\t            this._trigger(HOLD, this.pressEvent);\n\t        },\n\n\t        move: function(touchInfo) {\n\t            var that = this;\n\n\t            if (that._finished) { return; }\n\n\t            that.x.move(touchInfo.location);\n\t            that.y.move(touchInfo.location);\n\n\t            if (!that._moved) {\n\t                if (that._withinIgnoreThreshold()) {\n\t                    return;\n\t                }\n\n\t                if (!UserEvents.current || UserEvents.current === that.userEvents) {\n\t                    that._start(touchInfo);\n\t                } else {\n\t                    return that.dispose();\n\t                }\n\t            }\n\n\t            // Event handlers may cancel the drag in the START event handler, hence the double check for pressed.\n\t            if (!that._finished) {\n\t                that._trigger(MOVE, touchInfo);\n\t            }\n\t        },\n\n\t        end: function(touchInfo) {\n\t            this.endTime = now();\n\n\t            if (this._finished) { return; }\n\n\t            // Mark the object as finished if there are blocking operations in the event handlers (alert/confirm)\n\t            this._finished = true;\n\n\t            this._trigger(RELEASE, touchInfo); // Release should be fired before TAP (as click is after mouseup/touchend)\n\n\t            if (this._moved) {\n\t                this._trigger(END, touchInfo);\n\t            } else {\n\t                if (!this.useClickAsTap) {\n\t                    if (this.supportDoubleTap) {\n\t                        this._tap(touchInfo);\n\t                    }\n\t                    else {\n\t                        this._trigger(TAP, touchInfo);\n\t                    }\n\t                }\n\t            }\n\n\t            clearTimeout(this._holdTimeout);\n\n\t            this.dispose();\n\t        },\n\n\t        dispose: function() {\n\t            var userEvents = this.userEvents,\n\t                activeTouches = userEvents.touches;\n\n\t            this._finished = true;\n\t            this.pressEvent = null;\n\t            clearTimeout(this._holdTimeout);\n\n\t            activeTouches.splice($.inArray(this, activeTouches), 1);\n\t        },\n\n\t        skip: function() {\n\t            this.dispose();\n\t        },\n\n\t        cancel: function() {\n\t            this.dispose();\n\t        },\n\n\t        isMoved: function() {\n\t            return this._moved;\n\t        },\n\n\t        _start: function(touchInfo) {\n\t            clearTimeout(this._holdTimeout);\n\n\t            this.startTime = now();\n\t            this._moved = true;\n\t            this._trigger(START, touchInfo);\n\t        },\n\n\t        _trigger: function(name, touchInfo) {\n\t            var that = this,\n\t                jQueryEvent = touchInfo.event,\n\t                data = {\n\t                    touch: that,\n\t                    x: that.x,\n\t                    y: that.y,\n\t                    target: that.target,\n\t                    event: jQueryEvent\n\t                };\n\n\t            if(that.userEvents.notify(name, data)) {\n\t                jQueryEvent.preventDefault();\n\t            }\n\t        },\n\n\t        _withinIgnoreThreshold: function() {\n\t            var xDelta = this.x.initialDelta,\n\t                yDelta = this.y.initialDelta;\n\n\t            return Math.sqrt(xDelta * xDelta + yDelta * yDelta) <= this.threshold;\n\t        }\n\t    });\n\n\t    function withEachUpEvent(callback) {\n\t        var downEvents = kendo.eventMap.up.split(\" \"),\n\t            idx = 0,\n\t            length = downEvents.length;\n\n\t        for(; idx < length; idx ++) {\n\t            callback(downEvents[idx]);\n\t        }\n\t    }\n\n\t    var UserEvents = Observable.extend({\n\t        init: function(element, options) {\n\t            var that = this,\n\t                filter,\n\t                ns = kendo.guid();\n\n\t            options = options || {};\n\t            filter = that.filter = options.filter;\n\t            that.threshold = options.threshold || DEFAULT_THRESHOLD;\n\t            that.minHold = options.minHold || DEFAULT_MIN_HOLD;\n\t            that.touches = [];\n\t            that._maxTouches = options.multiTouch ? 2 : 1;\n\t            that.allowSelection = options.allowSelection;\n\t            that.captureUpIfMoved = options.captureUpIfMoved;\n\t            that.useClickAsTap = !options.fastTap && !support.delayedClick();\n\t            that.eventNS = ns;\n\t            that._clicks = 0;\n\t            that.supportDoubleTap = options.supportDoubleTap;\n\n\t            element = $(element).handler(that);\n\t            Observable.fn.init.call(that);\n\n\t            extend(that, {\n\t                element: element,\n\t                // the touch events lock to the element anyway, so no need for the global setting\n\t                surface: options.global && ENABLE_GLOBAL_SURFACE ? $(element[0].ownerDocument.documentElement) : $(options.surface || element),\n\t                stopPropagation: options.stopPropagation,\n\t                pressed: false\n\t            });\n\n\t            that.surface.handler(that)\n\t                .on(kendo.applyEventMap(\"move\", ns), \"_move\")\n\t                .on(kendo.applyEventMap(\"up cancel\", ns), \"_end\");\n\n\t            element.on(kendo.applyEventMap(\"down\", ns), filter, \"_start\");\n\n\t            if (that.useClickAsTap) {\n\t                element.on(kendo.applyEventMap(\"click\", ns), filter, \"_click\");\n\t            }\n\n\t            if (support.pointers || support.msPointers) {\n\t                //touch-action:none will not work for IE10\n\t                if (support.browser.version < 11) {\n\t                    var defaultAction = \"pinch-zoom double-tap-zoom\";\n\t                    element.css(\"-ms-touch-action\", options.touchAction && options.touchAction != \"none\" ? defaultAction + \" \" + options.touchAction : defaultAction);\n\t                } else {\n\t                    element.css(\"touch-action\", options.touchAction || \"none\");\n\t                }\n\t            }\n\n\t            if (options.preventDragEvent) {\n\t                element.on(kendo.applyEventMap(\"dragstart\", ns), kendo.preventDefault);\n\t            }\n\n\t            element.on(kendo.applyEventMap(\"mousedown\", ns), filter, { root: element }, \"_select\");\n\n\t            if (that.captureUpIfMoved && support.eventCapture) {\n\t                var surfaceElement = that.surface[0],\n\t                    preventIfMovingProxy = $.proxy(that.preventIfMoving, that);\n\n\t                withEachUpEvent(function(eventName) {\n\t                    surfaceElement.addEventListener(eventName, preventIfMovingProxy, true);\n\t                });\n\t            }\n\n\t            that.bind([\n\t            PRESS,\n\t            HOLD,\n\t            TAP,\n\t            DOUBLETAP,\n\t            START,\n\t            MOVE,\n\t            END,\n\t            RELEASE,\n\t            CANCEL,\n\t            GESTURESTART,\n\t            GESTURECHANGE,\n\t            GESTUREEND,\n\t            GESTURETAP,\n\t            SELECT\n\t            ], options);\n\t        },\n\n\t        preventIfMoving: function(e) {\n\t            if (this._isMoved()) {\n\t                e.preventDefault();\n\t            }\n\t        },\n\n\t        destroy: function() {\n\t            var that = this;\n\n\t            if (that._destroyed) {\n\t                return;\n\t            }\n\n\t            that._destroyed = true;\n\n\t            if (that.captureUpIfMoved && support.eventCapture) {\n\t                var surfaceElement = that.surface[0];\n\t                withEachUpEvent(function(eventName) {\n\t                    surfaceElement.removeEventListener(eventName, that.preventIfMoving);\n\t                });\n\t            }\n\n\t            that.element.kendoDestroy(that.eventNS);\n\t            that.surface.kendoDestroy(that.eventNS);\n\t            that.element.removeData(\"handler\");\n\t            that.surface.removeData(\"handler\");\n\t            that._disposeAll();\n\n\t            that.unbind();\n\t            delete that.surface;\n\t            delete that.element;\n\t            delete that.currentTarget;\n\t        },\n\n\t        capture: function() {\n\t            UserEvents.current = this;\n\t        },\n\n\t        cancel: function() {\n\t            this._disposeAll();\n\t            this.trigger(CANCEL);\n\t        },\n\n\t        notify: function(eventName, data) {\n\t            var that = this,\n\t                touches = that.touches;\n\n\t            if (this._isMultiTouch()) {\n\t                switch(eventName) {\n\t                    case MOVE:\n\t                        eventName = GESTURECHANGE;\n\t                        break;\n\t                    case END:\n\t                        eventName = GESTUREEND;\n\t                        break;\n\t                    case TAP:\n\t                        eventName = GESTURETAP;\n\t                        break;\n\t                }\n\n\t                extend(data, {touches: touches}, touchDelta(touches[0], touches[1]));\n\t            }\n\n\t            return this.trigger(eventName, extend(data, {type: eventName}));\n\t        },\n\n\t        // API\n\t        press: function(x, y, target) {\n\t            this._apiCall(\"_start\", x, y, target);\n\t        },\n\n\t        move: function(x, y) {\n\t            this._apiCall(\"_move\", x, y);\n\t        },\n\n\t        end: function(x, y) {\n\t            this._apiCall(\"_end\", x, y);\n\t        },\n\n\t        _isMultiTouch: function() {\n\t            return this.touches.length > 1;\n\t        },\n\n\t        _maxTouchesReached: function() {\n\t            return this.touches.length >= this._maxTouches;\n\t        },\n\n\t        _disposeAll: function() {\n\t            var touches = this.touches;\n\t            while (touches.length > 0) {\n\t                touches.pop().dispose();\n\t            }\n\t        },\n\n\t        _isMoved: function() {\n\t            return $.grep(this.touches, function(touch) {\n\t                return touch.isMoved();\n\t            }).length;\n\t        },\n\n\t        _select: function(e) {\n\t           if (!this.allowSelection || this.trigger(SELECT, { event: e })) {\n\t               e.preventDefault();\n\t           }\n\t        },\n\n\t        _start: function(e) {\n\t            var that = this,\n\t                idx = 0,\n\t                filter = that.filter,\n\t                target,\n\t                touches = getTouches(e),\n\t                length = touches.length,\n\t                touch,\n\t                which = e.which;\n\n\t            if ((which && which > 1) || (that._maxTouchesReached())){\n\t                return;\n\t            }\n\n\t            UserEvents.current = null;\n\n\t            that.currentTarget = e.currentTarget;\n\n\t            if (that.stopPropagation) {\n\t                e.stopPropagation();\n\t            }\n\n\t            for (; idx < length; idx ++) {\n\t                if (that._maxTouchesReached()) {\n\t                    break;\n\t                }\n\n\t                touch = touches[idx];\n\n\t                if (filter) {\n\t                    target = $(touch.currentTarget); // target.is(filter) ? target : target.closest(filter, that.element);\n\t                } else {\n\t                    target = that.element;\n\t                }\n\n\t                if (!target.length) {\n\t                    continue;\n\t                }\n\n\t                touch = new Touch(that, target, touch);\n\t                that.touches.push(touch);\n\t                touch.press();\n\n\t                if (that._isMultiTouch()) {\n\t                    that.notify(\"gesturestart\", {});\n\t                }\n\t            }\n\t        },\n\n\t        _move: function(e) {\n\t            this._eachTouch(\"move\", e);\n\t        },\n\n\t        _end: function(e) {\n\t            this._eachTouch(\"end\", e);\n\t        },\n\n\t        _click: function(e) {\n\t            var data = {\n\t                touch: {\n\t                    initialTouch: e.target,\n\t                    target: $(e.currentTarget),\n\t                    endTime: now(),\n\t                    x: {\n\t                        location: e.pageX,\n\t                        client: e.clientX\n\t                    },\n\t                    y: {\n\t                        location: e.pageY,\n\t                        client: e.clientY\n\t                    }\n\t                },\n\t                x: e.pageX,\n\t                y: e.pageY,\n\t                target: $(e.currentTarget),\n\t                event: e,\n\t                type: \"tap\"\n\t            };\n\n\t            if (this.trigger(\"tap\", data)) {\n\t                e.preventDefault();\n\t            }\n\t        },\n\n\t        _eachTouch: function(methodName, e) {\n\t            var that = this,\n\t                dict = {},\n\t                touches = getTouches(e),\n\t                activeTouches = that.touches,\n\t                idx,\n\t                touch,\n\t                touchInfo,\n\t                matchingTouch;\n\n\t            for (idx = 0; idx < activeTouches.length; idx ++) {\n\t                touch = activeTouches[idx];\n\t                dict[touch.id] = touch;\n\t            }\n\n\t            for (idx = 0; idx < touches.length; idx ++) {\n\t                touchInfo = touches[idx];\n\t                matchingTouch = dict[touchInfo.id];\n\n\t                if (matchingTouch) {\n\t                    matchingTouch[methodName](touchInfo);\n\t                }\n\t            }\n\t        },\n\n\t        _apiCall: function(type, x, y, target) {\n\t            this[type]({\n\t                api: true,\n\t                pageX: x,\n\t                pageY: y,\n\t                clientX: x,\n\t                clientY: y,\n\t                target: $(target || this.element)[0],\n\t                stopPropagation: $.noop,\n\t                preventDefault: $.noop\n\t            });\n\t        }\n\t    });\n\n\t    UserEvents.defaultThreshold = function(value) {\n\t        DEFAULT_THRESHOLD = value;\n\t    };\n\n\t    UserEvents.minHold = function(value) {\n\t        DEFAULT_MIN_HOLD = value;\n\t    };\n\n\t    kendo.getTouches = getTouches;\n\t    kendo.touchDelta = touchDelta;\n\t    kendo.UserEvents = UserEvents;\n\t })(window.kendo.jQuery);\n\n\treturn window.kendo;\n\n\t}, __webpack_require__(3));\n\n\n/***/ })\n\n/******/ });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9a0e40ed3a51a921e191\n");

/***/ }),

/***/ "b4c182ea2e2a8af62a4a":
/*!*****************************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/kendo.draganddrop.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1123);\n\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function() { throw new Error(\"define cannot be used indirect\"); };\r\n\n\n/***/ }),\n\n/***/ 1004:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.core */ \"46d3985e259824d97676\");\n\n/***/ }),\n\n/***/ 1038:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.userevents */ \"9a0e40ed3a51a921e191\");\n\n/***/ }),\n\n/***/ 1123:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){\r\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(1004), __webpack_require__(1038) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\t})(function(){\r\n\r\n\tvar __meta__ = { // jshint ignore:line\r\n\t    id: \"draganddrop\",\r\n\t    name: \"Drag & drop\",\r\n\t    category: \"framework\",\r\n\t    description: \"Drag & drop functionality for any DOM element.\",\r\n\t    depends: [ \"core\", \"userevents\" ]\r\n\t};\r\n\r\n\t(function ($, undefined) {\r\n\t    var kendo = window.kendo,\r\n\t        support = kendo.support,\r\n\t        document = window.document,\r\n\t        $window = $(window),\r\n\t        Class = kendo.Class,\r\n\t        Widget = kendo.ui.Widget,\r\n\t        Observable = kendo.Observable,\r\n\t        UserEvents = kendo.UserEvents,\r\n\t        proxy = $.proxy,\r\n\t        extend = $.extend,\r\n\t        getOffset = kendo.getOffset,\r\n\t        draggables = {},\r\n\t        dropTargets = {},\r\n\t        dropAreas = {},\r\n\t        lastDropTarget,\r\n\t        elementUnderCursor = kendo.elementUnderCursor,\r\n\t        KEYUP = \"keyup\",\r\n\t        CHANGE = \"change\",\r\n\r\n\t        // Draggable events\r\n\t        DRAGSTART = \"dragstart\",\r\n\t        HOLD = \"hold\",\r\n\t        DRAG = \"drag\",\r\n\t        DRAGEND = \"dragend\",\r\n\t        DRAGCANCEL = \"dragcancel\",\r\n\t        HINTDESTROYED = \"hintDestroyed\",\r\n\r\n\t        // DropTarget events\r\n\t        DRAGENTER = \"dragenter\",\r\n\t        DRAGLEAVE = \"dragleave\",\r\n\t        DROP = \"drop\";\r\n\r\n\t    function contains(parent, child) {\r\n\t        try {\r\n\t            return $.contains(parent, child) || parent == child;\r\n\t        } catch (e) {\r\n\t            return false;\r\n\t        }\r\n\t    }\r\n\r\n\t    function numericCssPropery(element, property) {\r\n\t        return parseInt(element.css(property), 10) || 0;\r\n\t    }\r\n\r\n\t    function within(value, range) {\r\n\t        return Math.min(Math.max(value, range.min), range.max);\r\n\t    }\r\n\r\n\t    function containerBoundaries(container, element) {\r\n\t        var offset = getOffset(container),\r\n\t            outerWidth = kendo._outerWidth,\r\n\t            outerHeight = kendo._outerHeight,\r\n\t            minX = offset.left + numericCssPropery(container, \"borderLeftWidth\") + numericCssPropery(container, \"paddingLeft\"),\r\n\t            minY = offset.top + numericCssPropery(container, \"borderTopWidth\") + numericCssPropery(container, \"paddingTop\"),\r\n\t            maxX = minX + container.width() - outerWidth(element, true),\r\n\t            maxY = minY + container.height() - outerHeight(element, true);\r\n\r\n\t        return {\r\n\t            x: { min: minX, max: maxX },\r\n\t            y: { min: minY, max: maxY }\r\n\t        };\r\n\t    }\r\n\r\n\t    function checkTarget(target, targets, areas) {\r\n\t        var theTarget, theFilter, i = 0,\r\n\t            targetLen = targets && targets.length,\r\n\t            areaLen = areas && areas.length;\r\n\r\n\t        while (target && target.parentNode) {\r\n\t            for (i = 0; i < targetLen; i ++) {\r\n\t                theTarget = targets[i];\r\n\t                if (theTarget.element[0] === target) {\r\n\t                    return { target: theTarget, targetElement: target };\r\n\t                }\r\n\t            }\r\n\r\n\t            for (i = 0; i < areaLen; i ++) {\r\n\t                theFilter = areas[i];\r\n\t                if ($.contains(theFilter.element[0], target) && support.matchesSelector.call(target, theFilter.options.filter)) {\r\n\t                    return { target: theFilter, targetElement: target };\r\n\t                }\r\n\t            }\r\n\r\n\t            target = target.parentNode;\r\n\t        }\r\n\r\n\t        return undefined;\r\n\t    }\r\n\r\n\t    var TapCapture = Observable.extend({\r\n\t        init: function(element, options) {\r\n\t            var that = this,\r\n\t                domElement = element[0];\r\n\r\n\t            that.capture = false;\r\n\r\n\t            if (domElement.addEventListener) {\r\n\t                $.each(kendo.eventMap.down.split(\" \"), function() {\r\n\t                    domElement.addEventListener(this, proxy(that._press, that), true);\r\n\t                });\r\n\t                $.each(kendo.eventMap.up.split(\" \"), function() {\r\n\t                    domElement.addEventListener(this, proxy(that._release, that), true);\r\n\t                });\r\n\t            } else {\r\n\t                $.each(kendo.eventMap.down.split(\" \"), function() {\r\n\t                    domElement.attachEvent(this, proxy(that._press, that));\r\n\t                });\r\n\t                $.each(kendo.eventMap.up.split(\" \"), function() {\r\n\t                    domElement.attachEvent(this, proxy(that._release, that));\r\n\t                });\r\n\t            }\r\n\r\n\t            Observable.fn.init.call(that);\r\n\r\n\t            that.bind([\"press\", \"release\"], options || {});\r\n\t        },\r\n\r\n\t        captureNext: function() {\r\n\t            this.capture = true;\r\n\t        },\r\n\r\n\t        cancelCapture: function() {\r\n\t            this.capture = false;\r\n\t        },\r\n\r\n\t        _press: function(e) {\r\n\t            var that = this;\r\n\t            that.trigger(\"press\");\r\n\t            if (that.capture) {\r\n\t                e.preventDefault();\r\n\t            }\r\n\t        },\r\n\r\n\t        _release: function(e) {\r\n\t            var that = this;\r\n\t            that.trigger(\"release\");\r\n\r\n\t            if (that.capture) {\r\n\t                e.preventDefault();\r\n\t                that.cancelCapture();\r\n\t            }\r\n\t        }\r\n\t    });\r\n\r\n\t    var PaneDimension = Observable.extend({\r\n\t        init: function(options) {\r\n\t            var that = this;\r\n\t            Observable.fn.init.call(that);\r\n\r\n\t            that.forcedEnabled = false;\r\n\r\n\t            $.extend(that, options);\r\n\r\n\t            that.scale = 1;\r\n\r\n\t            if (that.horizontal) {\r\n\t                that.measure = \"offsetWidth\";\r\n\t                that.scrollSize = \"scrollWidth\";\r\n\t                that.axis = \"x\";\r\n\t            } else {\r\n\t                that.measure = \"offsetHeight\";\r\n\t                that.scrollSize = \"scrollHeight\";\r\n\t                that.axis = \"y\";\r\n\t            }\r\n\t        },\r\n\r\n\t        makeVirtual: function() {\r\n\t            $.extend(this, {\r\n\t                virtual: true,\r\n\t                forcedEnabled: true,\r\n\t                _virtualMin: 0,\r\n\t                _virtualMax: 0\r\n\t            });\r\n\t        },\r\n\r\n\t        virtualSize: function(min, max) {\r\n\t            if (this._virtualMin !== min || this._virtualMax !== max) {\r\n\t                this._virtualMin = min;\r\n\t                this._virtualMax = max;\r\n\t                this.update();\r\n\t            }\r\n\t        },\r\n\r\n\t        outOfBounds: function(offset) {\r\n\t            return offset > this.max || offset < this.min;\r\n\t        },\r\n\r\n\t        forceEnabled: function() {\r\n\t            this.forcedEnabled = true;\r\n\t        },\r\n\r\n\t        getSize: function() {\r\n\t            return this.container[0][this.measure];\r\n\t        },\r\n\r\n\t        getTotal: function() {\r\n\t            return this.element[0][this.scrollSize];\r\n\t        },\r\n\r\n\t        rescale: function(scale) {\r\n\t            this.scale = scale;\r\n\t        },\r\n\r\n\t        update: function(silent) {\r\n\t            var that = this,\r\n\t                total = that.virtual ? that._virtualMax : that.getTotal(),\r\n\t                scaledTotal = total * that.scale,\r\n\t                size = that.getSize();\r\n\r\n\t            if (total === 0 && !that.forcedEnabled) {\r\n\t                return; // we are not visible.\r\n\t            }\r\n\r\n\t            that.max = that.virtual ? -that._virtualMin : 0;\r\n\t            that.size = size;\r\n\t            that.total = scaledTotal;\r\n\t            that.min = Math.min(that.max, size - scaledTotal);\r\n\t            that.minScale = size / total;\r\n\t            that.centerOffset = (scaledTotal - size) / 2;\r\n\r\n\t            that.enabled = that.forcedEnabled || (scaledTotal > size);\r\n\r\n\t            if (!silent) {\r\n\t                that.trigger(CHANGE, that);\r\n\t            }\r\n\t        }\r\n\t    });\r\n\r\n\t    var PaneDimensions = Observable.extend({\r\n\t        init: function(options) {\r\n\t            var that = this;\r\n\r\n\t            Observable.fn.init.call(that);\r\n\r\n\t            that.x = new PaneDimension(extend({horizontal: true}, options));\r\n\t            that.y = new PaneDimension(extend({horizontal: false}, options));\r\n\t            that.container = options.container;\r\n\t            that.forcedMinScale = options.minScale;\r\n\t            that.maxScale = options.maxScale || 100;\r\n\r\n\t            that.bind(CHANGE, options);\r\n\t        },\r\n\r\n\t        rescale: function(newScale) {\r\n\t            this.x.rescale(newScale);\r\n\t            this.y.rescale(newScale);\r\n\t            this.refresh();\r\n\t        },\r\n\r\n\t        centerCoordinates: function() {\r\n\t            return { x: Math.min(0, -this.x.centerOffset), y: Math.min(0, -this.y.centerOffset) };\r\n\t        },\r\n\r\n\t        refresh: function() {\r\n\t            var that = this;\r\n\t            that.x.update();\r\n\t            that.y.update();\r\n\t            that.enabled = that.x.enabled || that.y.enabled;\r\n\t            that.minScale = that.forcedMinScale || Math.min(that.x.minScale, that.y.minScale);\r\n\t            that.fitScale = Math.max(that.x.minScale, that.y.minScale);\r\n\t            that.trigger(CHANGE);\r\n\t        }\r\n\t    });\r\n\r\n\t    var PaneAxis = Observable.extend({\r\n\t        init: function(options) {\r\n\t            var that = this;\r\n\t            extend(that, options);\r\n\t            Observable.fn.init.call(that);\r\n\t        },\r\n\r\n\t        outOfBounds: function() {\r\n\t            return this.dimension.outOfBounds(this.movable[this.axis]);\r\n\t        },\r\n\r\n\t        dragMove: function(delta) {\r\n\t            var that = this,\r\n\t                dimension = that.dimension,\r\n\t                axis = that.axis,\r\n\t                movable = that.movable,\r\n\t                position = movable[axis] + delta;\r\n\r\n\t            if (!dimension.enabled) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            if ((position < dimension.min && delta < 0) || (position > dimension.max && delta > 0)) {\r\n\t                delta *= that.resistance;\r\n\t            }\r\n\r\n\t            movable.translateAxis(axis, delta);\r\n\t            that.trigger(CHANGE, that);\r\n\t        }\r\n\t    });\r\n\r\n\t    var Pane = Class.extend({\r\n\r\n\t        init: function(options) {\r\n\t            var that = this,\r\n\t                x,\r\n\t                y,\r\n\t                resistance,\r\n\t                movable;\r\n\r\n\t            extend(that, {elastic: true}, options);\r\n\r\n\t            resistance = that.elastic ? 0.5 : 0;\r\n\t            movable = that.movable;\r\n\r\n\t            that.x = x = new PaneAxis({\r\n\t                axis: \"x\",\r\n\t                dimension: that.dimensions.x,\r\n\t                resistance: resistance,\r\n\t                movable: movable\r\n\t            });\r\n\r\n\t            that.y = y = new PaneAxis({\r\n\t                axis: \"y\",\r\n\t                dimension: that.dimensions.y,\r\n\t                resistance: resistance,\r\n\t                movable: movable\r\n\t            });\r\n\r\n\t            that.userEvents.bind([\"press\", \"move\", \"end\", \"gesturestart\", \"gesturechange\"], {\r\n\t                gesturestart: function(e) {\r\n\t                    that.gesture = e;\r\n\t                    that.offset = that.dimensions.container.offset();\r\n\t                },\r\n\r\n\t                press: function(e) {\r\n\t                    if ($(e.event.target).closest(\"a\").is(\"[data-navigate-on-press=true]\")) {\r\n\t                        e.sender.cancel();\r\n\t                    }\r\n\t                },\r\n\r\n\t                gesturechange: function(e) {\r\n\t                    var previousGesture = that.gesture,\r\n\t                        previousCenter = previousGesture.center,\r\n\r\n\t                        center = e.center,\r\n\r\n\t                        scaleDelta = e.distance / previousGesture.distance,\r\n\r\n\t                        minScale = that.dimensions.minScale,\r\n\t                        maxScale = that.dimensions.maxScale,\r\n\t                        coordinates;\r\n\r\n\t                    if (movable.scale <= minScale && scaleDelta < 1) {\r\n\t                        // Resist shrinking. Instead of shrinking from 1 to 0.5, it will shrink to 0.5 + (1 /* minScale */ - 0.5) * 0.8 = 0.9;\r\n\t                        scaleDelta += (1 - scaleDelta) * 0.8;\r\n\t                    }\r\n\r\n\t                    if (movable.scale * scaleDelta >= maxScale) {\r\n\t                        scaleDelta = maxScale / movable.scale;\r\n\t                    }\r\n\r\n\t                    var offsetX = movable.x + that.offset.left,\r\n\t                        offsetY = movable.y + that.offset.top;\r\n\r\n\t                    coordinates = {\r\n\t                        x: (offsetX - previousCenter.x) * scaleDelta + center.x - offsetX,\r\n\t                        y: (offsetY - previousCenter.y) * scaleDelta + center.y - offsetY\r\n\t                    };\r\n\r\n\t                    movable.scaleWith(scaleDelta);\r\n\r\n\t                    x.dragMove(coordinates.x);\r\n\t                    y.dragMove(coordinates.y);\r\n\r\n\t                    that.dimensions.rescale(movable.scale);\r\n\t                    that.gesture = e;\r\n\t                    e.preventDefault();\r\n\t                },\r\n\r\n\t                move: function(e) {\r\n\t                    if (e.event.target.tagName.match(/textarea|input/i)) {\r\n\t                        return;\r\n\t                    }\r\n\r\n\t                    if (x.dimension.enabled || y.dimension.enabled) {\r\n\t                        x.dragMove(e.x.delta);\r\n\t                        y.dragMove(e.y.delta);\r\n\t                        e.preventDefault();\r\n\t                    } else {\r\n\t                        e.touch.skip();\r\n\t                    }\r\n\t                },\r\n\r\n\t                end: function(e) {\r\n\t                    e.preventDefault();\r\n\t                }\r\n\t            });\r\n\t        }\r\n\t    });\r\n\r\n\t    var TRANSFORM_STYLE = support.transitions.prefix + \"Transform\",\r\n\t        translate;\r\n\r\n\r\n\t    if (support.hasHW3D) {\r\n\t        translate = function(x, y, scale) {\r\n\t            return \"translate3d(\" + x + \"px,\" + y +\"px,0) scale(\" + scale + \")\";\r\n\t        };\r\n\t    } else {\r\n\t        translate = function(x, y, scale) {\r\n\t            return \"translate(\" + x + \"px,\" + y +\"px) scale(\" + scale + \")\";\r\n\t        };\r\n\t    }\r\n\r\n\t    var Movable = Observable.extend({\r\n\t        init: function(element) {\r\n\t            var that = this;\r\n\r\n\t            Observable.fn.init.call(that);\r\n\r\n\t            that.element = $(element);\r\n\t            that.element[0].style.webkitTransformOrigin = \"left top\";\r\n\t            that.x = 0;\r\n\t            that.y = 0;\r\n\t            that.scale = 1;\r\n\t            that._saveCoordinates(translate(that.x, that.y, that.scale));\r\n\t        },\r\n\r\n\t        translateAxis: function(axis, by) {\r\n\t            this[axis] += by;\r\n\t            this.refresh();\r\n\t        },\r\n\r\n\t        scaleTo: function(scale) {\r\n\t            this.scale = scale;\r\n\t            this.refresh();\r\n\t        },\r\n\r\n\t        scaleWith: function(scaleDelta) {\r\n\t            this.scale *= scaleDelta;\r\n\t            this.refresh();\r\n\t        },\r\n\r\n\t        translate: function(coordinates) {\r\n\t            this.x += coordinates.x;\r\n\t            this.y += coordinates.y;\r\n\t            this.refresh();\r\n\t        },\r\n\r\n\t        moveAxis: function(axis, value) {\r\n\t            this[axis] = value;\r\n\t            this.refresh();\r\n\t        },\r\n\r\n\t        moveTo: function(coordinates) {\r\n\t            extend(this, coordinates);\r\n\t            this.refresh();\r\n\t        },\r\n\r\n\t        refresh: function() {\r\n\t            var that = this,\r\n\t                x = that.x,\r\n\t                y = that.y,\r\n\t                newCoordinates;\r\n\r\n\t            if (that.round) {\r\n\t                x = Math.round(x);\r\n\t                y = Math.round(y);\r\n\t            }\r\n\r\n\t            newCoordinates = translate(x, y, that.scale);\r\n\r\n\t            if (newCoordinates != that.coordinates) {\r\n\t                if (kendo.support.browser.msie && kendo.support.browser.version < 10) {\r\n\t                    that.element[0].style.position = \"absolute\";\r\n\t                    that.element[0].style.left = that.x + \"px\";\r\n\t                    that.element[0].style.top = that.y + \"px\";\r\n\r\n\t                } else {\r\n\t                    that.element[0].style[TRANSFORM_STYLE] = newCoordinates;\r\n\t                }\r\n\t                that._saveCoordinates(newCoordinates);\r\n\t                that.trigger(CHANGE);\r\n\t            }\r\n\t        },\r\n\r\n\t        _saveCoordinates: function(coordinates) {\r\n\t            this.coordinates = coordinates;\r\n\t        }\r\n\t    });\r\n\r\n\t    function destroyDroppable(collection, widget) {\r\n\t        var groupName = widget.options.group,\r\n\t        droppables = collection[groupName],\r\n\t        i;\r\n\r\n\t        Widget.fn.destroy.call(widget);\r\n\r\n\t        if (droppables.length > 1) {\r\n\t            for (i = 0; i < droppables.length; i++) {\r\n\t                if (droppables[i] == widget) {\r\n\t                    droppables.splice(i, 1);\r\n\t                    break;\r\n\t                }\r\n\t            }\r\n\t        } else {\r\n\t            droppables.length = 0; // WTF, porting this from the previous destroyGroup\r\n\t            delete collection[groupName];\r\n\t        }\r\n\t    }\r\n\r\n\t    var DropTarget = Widget.extend({\r\n\t        init: function(element, options) {\r\n\t            var that = this;\r\n\r\n\t            Widget.fn.init.call(that, element, options);\r\n\r\n\t            var group = that.options.group;\r\n\r\n\t            if (!(group in dropTargets)) {\r\n\t                dropTargets[group] = [ that ];\r\n\t            } else {\r\n\t                dropTargets[group].push( that );\r\n\t            }\r\n\t        },\r\n\r\n\t        events: [\r\n\t            DRAGENTER,\r\n\t            DRAGLEAVE,\r\n\t            DROP\r\n\t        ],\r\n\r\n\t        options: {\r\n\t            name: \"DropTarget\",\r\n\t            group: \"default\"\r\n\t        },\r\n\r\n\t        destroy: function() {\r\n\t            destroyDroppable(dropTargets, this);\r\n\t        },\r\n\r\n\t        _trigger: function(eventName, e) {\r\n\t            var that = this,\r\n\t                draggable = draggables[that.options.group];\r\n\r\n\t            if (draggable) {\r\n\t                return that.trigger(eventName, extend({}, e.event, {\r\n\t                           draggable: draggable,\r\n\t                           dropTarget: e.dropTarget\r\n\t                       }));\r\n\t            }\r\n\t        },\r\n\r\n\t        _over: function(e) {\r\n\t            this._trigger(DRAGENTER, e);\r\n\t        },\r\n\r\n\t        _out: function(e) {\r\n\t            this._trigger(DRAGLEAVE, e);\r\n\t        },\r\n\r\n\t        _drop: function(e) {\r\n\t            var that = this,\r\n\t                draggable = draggables[that.options.group];\r\n\r\n\t            if (draggable) {\r\n\t                draggable.dropped = !that._trigger(DROP, e);\r\n\t            }\r\n\t        }\r\n\t    });\r\n\r\n\t    DropTarget.destroyGroup = function(groupName) {\r\n\t        var group = dropTargets[groupName] || dropAreas[groupName],\r\n\t            i;\r\n\r\n\t        if (group) {\r\n\t            for (i = 0; i < group.length; i++) {\r\n\t                Widget.fn.destroy.call(group[i]);\r\n\t            }\r\n\r\n\t            group.length = 0;\r\n\t            delete dropTargets[groupName];\r\n\t            delete dropAreas[groupName];\r\n\t        }\r\n\t    };\r\n\r\n\t    DropTarget._cache = dropTargets;\r\n\r\n\t    var DropTargetArea = DropTarget.extend({\r\n\t        init: function(element, options) {\r\n\t            var that = this;\r\n\r\n\t            Widget.fn.init.call(that, element, options);\r\n\r\n\t            var group = that.options.group;\r\n\r\n\t            if (!(group in dropAreas)) {\r\n\t                dropAreas[group] = [ that ];\r\n\t            } else {\r\n\t                dropAreas[group].push( that );\r\n\t            }\r\n\t        },\r\n\r\n\t        destroy: function() {\r\n\t            destroyDroppable(dropAreas, this);\r\n\t        },\r\n\r\n\t        options: {\r\n\t            name: \"DropTargetArea\",\r\n\t            group: \"default\",\r\n\t            filter: null\r\n\t        }\r\n\t    });\r\n\r\n\t    var Draggable = Widget.extend({\r\n\t        init: function (element, options) {\r\n\t            var that = this;\r\n\r\n\t            Widget.fn.init.call(that, element, options);\r\n\r\n\t            that._activated = false;\r\n\r\n\t            that.userEvents = new UserEvents(that.element, {\r\n\t                global: true,\r\n\t                allowSelection: true,\r\n\t                filter: that.options.filter,\r\n\t                threshold: that.options.distance,\r\n\t                start: proxy(that._start, that),\r\n\t                hold: proxy(that._hold, that),\r\n\t                move: proxy(that._drag, that),\r\n\t                end: proxy(that._end, that),\r\n\t                cancel: proxy(that._cancel, that),\r\n\t                select: proxy(that._select, that)\r\n\t            });\r\n\r\n\t            that._afterEndHandler = proxy(that._afterEnd, that);\r\n\t            that._captureEscape = proxy(that._captureEscape, that);\r\n\t        },\r\n\r\n\t        events: [\r\n\t            HOLD,\r\n\t            DRAGSTART,\r\n\t            DRAG,\r\n\t            DRAGEND,\r\n\t            DRAGCANCEL,\r\n\t            HINTDESTROYED\r\n\t        ],\r\n\r\n\t        options: {\r\n\t            name: \"Draggable\",\r\n\t            distance: ( kendo.support.touch ? 0 : 5),\r\n\t            group: \"default\",\r\n\t            cursorOffset: null,\r\n\t            axis: null,\r\n\t            container: null,\r\n\t            filter: null,\r\n\t            ignore: null,\r\n\t            holdToDrag: false,\r\n\t            autoScroll: false,\r\n\t            dropped: false\r\n\t        },\r\n\r\n\t        cancelHold: function() {\r\n\t            this._activated = false;\r\n\t        },\r\n\r\n\t        _captureEscape: function(e) {\r\n\t            var that = this;\r\n\r\n\t            if (e.keyCode === kendo.keys.ESC) {\r\n\t                that._trigger(DRAGCANCEL, { event: e });\r\n\t                that.userEvents.cancel();\r\n\t            }\r\n\t        },\r\n\r\n\t        _updateHint: function(e) {\r\n\t            var that = this,\r\n\t                coordinates,\r\n\t                options = that.options,\r\n\t                boundaries = that.boundaries,\r\n\t                axis = options.axis,\r\n\t                cursorOffset = that.options.cursorOffset;\r\n\r\n\t            if (cursorOffset) {\r\n\t               coordinates = { left: e.x.location + cursorOffset.left, top: e.y.location + cursorOffset.top };\r\n\t            } else {\r\n\t                that.hintOffset.left += e.x.delta;\r\n\t                that.hintOffset.top += e.y.delta;\r\n\t                coordinates = $.extend({}, that.hintOffset);\r\n\t            }\r\n\r\n\t            if (boundaries) {\r\n\t                coordinates.top = within(coordinates.top, boundaries.y);\r\n\t                coordinates.left = within(coordinates.left, boundaries.x);\r\n\t            }\r\n\r\n\t            if (axis === \"x\") {\r\n\t                delete coordinates.top;\r\n\t            } else if (axis === \"y\") {\r\n\t                delete coordinates.left;\r\n\t            }\r\n\r\n\t            that.hint.css(coordinates);\r\n\t        },\r\n\r\n\t        _shouldIgnoreTarget: function(target) {\r\n\t            var ignoreSelector = this.options.ignore;\r\n\t            return ignoreSelector && $(target).is(ignoreSelector);\r\n\t        },\r\n\r\n\t        _select: function(e) {\r\n\t            if (!this._shouldIgnoreTarget(e.event.target)) {\r\n\t                e.preventDefault();\r\n\t            }\r\n\t        },\r\n\r\n\t        _start: function(e) {\r\n\t            var that = this,\r\n\t                options = that.options,\r\n\t                container = options.container ? $(options.container): null,\r\n\t                hint = options.hint;\r\n\r\n\t            if (this._shouldIgnoreTarget(e.touch.initialTouch) || (options.holdToDrag && !that._activated)) {\r\n\t                that.userEvents.cancel();\r\n\t                return;\r\n\t            }\r\n\r\n\t            that.currentTarget = e.target;\r\n\t            that.currentTargetOffset = getOffset(that.currentTarget);\r\n\r\n\t            if (hint) {\r\n\t                if (that.hint) {\r\n\t                    that.hint.stop(true, true).remove();\r\n\t                }\r\n\r\n\t                that.hint = kendo.isFunction(hint) ? $(hint.call(that, that.currentTarget)) : hint;\r\n\r\n\t                var offset = getOffset(that.currentTarget);\r\n\t                that.hintOffset = offset;\r\n\r\n\t                that.hint.css( {\r\n\t                    position: \"absolute\",\r\n\t                    zIndex: 20000, // the Window's z-index is 10000 and can be raised because of z-stacking\r\n\t                    left: offset.left,\r\n\t                    top: offset.top\r\n\t                })\r\n\t                .appendTo(document.body);\r\n\r\n\t                that.angular(\"compile\", function(){\r\n\t                    that.hint.removeAttr(\"ng-repeat\");\r\n\t                    var scopeTarget = $(e.target);\r\n\r\n\t                    while (!scopeTarget.data(\"$$kendoScope\") && scopeTarget.length) {\r\n\t                        scopeTarget = scopeTarget.parent();\r\n\t                    }\r\n\r\n\t                    return {\r\n\t                        elements: that.hint.get(),\r\n\t                        scopeFrom: scopeTarget.data(\"$$kendoScope\")\r\n\t                    };\r\n\t                });\r\n\t            }\r\n\r\n\t            draggables[options.group] = that;\r\n\r\n\t            that.dropped = false;\r\n\r\n\t            if (container) {\r\n\t                that.boundaries = containerBoundaries(container, that.hint);\r\n\t            }\r\n\r\n\t            $(document).on(KEYUP, that._captureEscape);\r\n\r\n\t            if (that._trigger(DRAGSTART, e)) {\r\n\t                that.userEvents.cancel();\r\n\t                that._afterEnd();\r\n\t            }\r\n\r\n\t            that.userEvents.capture();\r\n\t        },\r\n\r\n\t        _hold: function(e) {\r\n\t            this.currentTarget = e.target;\r\n\r\n\t            if (this._trigger(HOLD, e)) {\r\n\t                this.userEvents.cancel();\r\n\t            } else {\r\n\t                this._activated = true;\r\n\t            }\r\n\t        },\r\n\r\n\t        _drag: function(e) {\r\n\t            e.preventDefault();\r\n\r\n\t            var cursorElement = this._elementUnderCursor(e);\r\n\r\n\t            if (this.options.autoScroll && this._cursorElement !== cursorElement) {\r\n\t                this._scrollableParent = findScrollableParent(cursorElement);\r\n\t                this._cursorElement = cursorElement;\r\n\t            }\r\n\r\n\t            this._lastEvent = e;\r\n\t            this._processMovement(e, cursorElement);\r\n\r\n\t            if (this.options.autoScroll) {\r\n\t                // chrome seems to trigger mousemove when mouse is moved outside of the window (over the Chrome), too.\r\n\t                if (this._scrollableParent[0]) {\r\n\t                    var velocity = autoScrollVelocity(e.x.location, e.y.location, scrollableViewPort(this._scrollableParent));\r\n\r\n\r\n\t                    this._scrollCompenstation = $.extend({}, this.hintOffset);\r\n\t                    this._scrollVelocity = velocity;\r\n\r\n\t                    if (velocity.y === 0 && velocity.x === 0) {\r\n\t                        clearInterval(this._scrollInterval);\r\n\t                        this._scrollInterval = null;\r\n\t                    } else if(!this._scrollInterval) {\r\n\t                        this._scrollInterval = setInterval($.proxy(this, \"_autoScroll\"), 50);\r\n\t                    }\r\n\t                }\r\n\t            }\r\n\r\n\t            if (this.hint) {\r\n\t                this._updateHint(e);\r\n\t            }\r\n\t        },\r\n\r\n\t        _processMovement: function(e, cursorElement) {\r\n\t            this._withDropTarget(cursorElement, function(target, targetElement) {\r\n\t                if (!target) {\r\n\t                    if (lastDropTarget) {\r\n\t                        lastDropTarget._trigger(DRAGLEAVE, extend(e, { dropTarget: $(lastDropTarget.targetElement) }));\r\n\t                        lastDropTarget = null;\r\n\t                    }\r\n\t                    return;\r\n\t                }\r\n\r\n\t                if (lastDropTarget) {\r\n\t                    if (targetElement === lastDropTarget.targetElement) {\r\n\t                        return;\r\n\t                    }\r\n\r\n\t                    lastDropTarget._trigger(DRAGLEAVE, extend(e, { dropTarget: $(lastDropTarget.targetElement) }));\r\n\t                }\r\n\r\n\t                target._trigger(DRAGENTER, extend(e, { dropTarget: $(targetElement) }));\r\n\t                lastDropTarget = extend(target, { targetElement: targetElement });\r\n\t            });\r\n\r\n\t            this._trigger(DRAG, extend(e, { dropTarget: lastDropTarget, elementUnderCursor: cursorElement }));\r\n\t        },\r\n\r\n\t        _autoScroll: function() {\r\n\t            var parent = this._scrollableParent[0],\r\n\t                velocity = this._scrollVelocity,\r\n\t                compensation = this._scrollCompenstation;\r\n\r\n\t            if (!parent) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            var cursorElement = this._elementUnderCursor(this._lastEvent);\r\n\t            this._processMovement(this._lastEvent, cursorElement);\r\n\r\n\t            var yIsScrollable, xIsScrollable;\r\n\r\n\t            var isRootNode = parent === scrollableRoot()[0];\r\n\r\n\t            if (isRootNode) {\r\n\t                yIsScrollable = document.body.scrollHeight > $window.height();\r\n\t                xIsScrollable = document.body.scrollWidth > $window.width();\r\n\t            } else {\r\n\t                yIsScrollable = parent.offsetHeight <= parent.scrollHeight;\r\n\t                xIsScrollable = parent.offsetWidth <= parent.scrollWidth;\r\n\t            }\r\n\r\n\t            var yDelta = parent.scrollTop + velocity.y;\r\n\t            var yInBounds = yIsScrollable && yDelta > 0 && yDelta < parent.scrollHeight;\r\n\r\n\t            var xDelta = parent.scrollLeft + velocity.x;\r\n\t            var xInBounds = xIsScrollable && xDelta > 0 && xDelta < parent.scrollWidth;\r\n\r\n\t            if (yInBounds) {\r\n\t                parent.scrollTop += velocity.y;\r\n\t            }\r\n\r\n\t            if (xInBounds) {\r\n\t                parent.scrollLeft += velocity.x;\r\n\t            }\r\n\r\n\t            if (this.hint && isRootNode && (xInBounds || yInBounds)) {\r\n\t                if (yInBounds) {\r\n\t                    compensation.top += velocity.y;\r\n\t                }\r\n\r\n\t                if (xInBounds) {\r\n\t                    compensation.left += velocity.x;\r\n\t                }\r\n\r\n\t                this.hint.css(compensation);\r\n\t            }\r\n\t        },\r\n\r\n\t        _end: function(e) {\r\n\t            this._withDropTarget(this._elementUnderCursor(e), function(target, targetElement) {\r\n\t                if (target) {\r\n\t                    target._drop(extend({}, e, { dropTarget: $(targetElement) }));\r\n\t                    lastDropTarget = null;\r\n\t                }\r\n\t            });\r\n\r\n\t            this._cancel(this._trigger(DRAGEND, e));\r\n\t        },\r\n\r\n\t        _cancel: function(isDefaultPrevented) {\r\n\t            var that = this;\r\n\r\n\t            that._scrollableParent = null;\r\n\t            this._cursorElement = null;\r\n\t            clearInterval(this._scrollInterval);\r\n\t            that._activated = false;\r\n\r\n\t            if (that.hint && !that.dropped) {\r\n\t                setTimeout(function() {\r\n\t                    that.hint.stop(true, true);\r\n\r\n\t                    if (isDefaultPrevented) {\r\n\t                        that._afterEndHandler();\r\n\t                    } else {\r\n\t                        that.hint.animate(that.currentTargetOffset, \"fast\", that._afterEndHandler);\r\n\t                    }\r\n\t                }, 0);\r\n\r\n\t            } else {\r\n\t                that._afterEnd();\r\n\t            }\r\n\t        },\r\n\r\n\t        _trigger: function(eventName, e) {\r\n\t            var that = this;\r\n\r\n\t            return that.trigger(\r\n\t                eventName, extend(\r\n\t                {},\r\n\t                e.event,\r\n\t                {\r\n\t                    x: e.x,\r\n\t                    y: e.y,\r\n\t                    currentTarget: that.currentTarget,\r\n\t                    initialTarget: e.touch ? e.touch.initialTouch : null,\r\n\t                    dropTarget: e.dropTarget,\r\n\t                    elementUnderCursor: e.elementUnderCursor\r\n\t                }\r\n\t            ));\r\n\t        },\r\n\r\n\t        _elementUnderCursor: function(e) {\r\n\t            var target = elementUnderCursor(e),\r\n\t                hint = this.hint;\r\n\r\n\t            if (hint && contains(hint[0], target)) {\r\n\t                hint.hide();\r\n\t                target = elementUnderCursor(e);\r\n\t                // IE8 does not return the element in iframe from first attempt\r\n\t                if (!target) {\r\n\t                    target = elementUnderCursor(e);\r\n\t                }\r\n\t                hint.show();\r\n\t            }\r\n\r\n\t            return target;\r\n\t        },\r\n\r\n\t        _withDropTarget: function(element, callback) {\r\n\t            var result,\r\n\t                group = this.options.group,\r\n\t                targets = dropTargets[group],\r\n\t                areas = dropAreas[group];\r\n\r\n\t            if (targets && targets.length || areas && areas.length) {\r\n\t                result = checkTarget(element, targets, areas);\r\n\r\n\t                if (result) {\r\n\t                    callback(result.target, result.targetElement);\r\n\t                } else {\r\n\t                    callback();\r\n\t                }\r\n\t            }\r\n\t        },\r\n\r\n\t        destroy: function() {\r\n\t            var that = this;\r\n\r\n\t            Widget.fn.destroy.call(that);\r\n\r\n\t            that._afterEnd();\r\n\r\n\t            that.userEvents.destroy();\r\n\r\n\t            this._scrollableParent = null;\r\n\t            this._cursorElement = null;\r\n\t            clearInterval(this._scrollInterval);\r\n\r\n\t            that.currentTarget = null;\r\n\t        },\r\n\r\n\t        _afterEnd: function() {\r\n\t            var that = this;\r\n\r\n\t            if (that.hint) {\r\n\t                that.hint.remove();\r\n\t            }\r\n\r\n\t            delete draggables[that.options.group];\r\n\r\n\t            that.trigger(\"destroy\");\r\n\t            that.trigger(HINTDESTROYED);\r\n\t            $(document).off(KEYUP, that._captureEscape);\r\n\t        }\r\n\t    });\r\n\r\n\t    kendo.ui.plugin(DropTarget);\r\n\t    kendo.ui.plugin(DropTargetArea);\r\n\t    kendo.ui.plugin(Draggable);\r\n\t    kendo.TapCapture = TapCapture;\r\n\t    kendo.containerBoundaries = containerBoundaries;\r\n\r\n\t    extend(kendo.ui, {\r\n\t        Pane: Pane,\r\n\t        PaneDimensions: PaneDimensions,\r\n\t        Movable: Movable\r\n\t    });\r\n\r\n\t    function scrollableViewPort(element) {\r\n\t        var root = scrollableRoot()[0],\r\n\t            offset,\r\n\t            top,\r\n\t            left;\r\n\r\n\t        if (element[0] === root) {\r\n\t            top = root.scrollTop;\r\n\t            left = root.scrollLeft;\r\n\r\n\t            return {\r\n\t                top: top,\r\n\t                left: left,\r\n\t                bottom: top + $window.height(),\r\n\t                right: left + $window.width()\r\n\t            };\r\n\t        } else {\r\n\t            offset = element.offset();\r\n\t            offset.bottom = offset.top + element.height();\r\n\t            offset.right =  offset.left + element.width();\r\n\t            return offset;\r\n\t        }\r\n\t    }\r\n\r\n\t    function scrollableRoot() {\r\n\t        return $(kendo.support.browser.edge || kendo.support.browser.safari ? document.body : document.documentElement);\r\n\t    }\r\n\r\n\t    function findScrollableParent(element) {\r\n\t        var root = scrollableRoot();\r\n\r\n\t        if (!element || element === document.body || element === document.documentElement) {\r\n\t            return root;\r\n\t        }\r\n\r\n\t        var parent = $(element)[0];\r\n\r\n\t        while (parent && !kendo.isScrollable(parent) && parent !== document.body) {\r\n\t            parent = parent.parentNode;\r\n\t        }\r\n\r\n\t        if (parent === document.body) {\r\n\t            return root;\r\n\t        }\r\n\r\n\t        return $(parent);\r\n\t    }\r\n\r\n\t    function autoScrollVelocity(mouseX, mouseY, rect) {\r\n\t        var velocity = { x: 0, y: 0 };\r\n\r\n\t        var AUTO_SCROLL_AREA = 50;\r\n\r\n\t        if (mouseX - rect.left < AUTO_SCROLL_AREA) {\r\n\t            velocity.x = -(AUTO_SCROLL_AREA - (mouseX - rect.left));\r\n\t        } else if (rect.right - mouseX < AUTO_SCROLL_AREA) {\r\n\t            velocity.x = AUTO_SCROLL_AREA - (rect.right - mouseX);\r\n\t        }\r\n\r\n\t        if (mouseY - rect.top < AUTO_SCROLL_AREA) {\r\n\t            velocity.y = -(AUTO_SCROLL_AREA - (mouseY - rect.top));\r\n\t        } else if (rect.bottom - mouseY < AUTO_SCROLL_AREA) {\r\n\t            velocity.y = AUTO_SCROLL_AREA - (rect.bottom - mouseY);\r\n\t        }\r\n\r\n\t        return velocity;\r\n\t    }\r\n\r\n\t    // export for testing\r\n\t    kendo.ui.Draggable.utils = {\r\n\t        autoScrollVelocity: autoScrollVelocity,\r\n\t        scrollableViewPort: scrollableViewPort,\r\n\t        findScrollableParent: findScrollableParent\r\n\t    };\r\n\r\n\t })(window.kendo.jQuery);\r\n\r\n\treturn window.kendo;\r\n\r\n\t}, __webpack_require__(3));\r\n\n\n/***/ })\n\n/******/ });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///b4c182ea2e2a8af62a4a\n");

/***/ }),

/***/ "c138e55a31f3f8960e99":
/*!*************************************************!*\
  !*** ./node_modules/css-loader/lib/css-base.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\nmodule.exports = function(useSourceMap) {\n\tvar list = [];\n\n\t// return the list of modules as css string\n\tlist.toString = function toString() {\n\t\treturn this.map(function (item) {\n\t\t\tvar content = cssWithMappingToString(item, useSourceMap);\n\t\t\tif(item[2]) {\n\t\t\t\treturn \"@media \" + item[2] + \"{\" + content + \"}\";\n\t\t\t} else {\n\t\t\t\treturn content;\n\t\t\t}\n\t\t}).join(\"\");\n\t};\n\n\t// import a list of modules into the list\n\tlist.i = function(modules, mediaQuery) {\n\t\tif(typeof modules === \"string\")\n\t\t\tmodules = [[null, modules, \"\"]];\n\t\tvar alreadyImportedModules = {};\n\t\tfor(var i = 0; i < this.length; i++) {\n\t\t\tvar id = this[i][0];\n\t\t\tif(typeof id === \"number\")\n\t\t\t\talreadyImportedModules[id] = true;\n\t\t}\n\t\tfor(i = 0; i < modules.length; i++) {\n\t\t\tvar item = modules[i];\n\t\t\t// skip already imported module\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\n\t\t\t//  when a module is imported multiple times with different media queries.\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\n\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\n\t\t\t\tif(mediaQuery && !item[2]) {\n\t\t\t\t\titem[2] = mediaQuery;\n\t\t\t\t} else if(mediaQuery) {\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\n\t\t\t\t}\n\t\t\t\tlist.push(item);\n\t\t\t}\n\t\t}\n\t};\n\treturn list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n\tvar content = item[1] || '';\n\tvar cssMapping = item[3];\n\tif (!cssMapping) {\n\t\treturn content;\n\t}\n\n\tif (useSourceMap && typeof btoa === 'function') {\n\t\tvar sourceMapping = toComment(cssMapping);\n\t\tvar sourceURLs = cssMapping.sources.map(function (source) {\n\t\t\treturn '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'\n\t\t});\n\n\t\treturn [content].concat(sourceURLs).concat([sourceMapping]).join('\\n');\n\t}\n\n\treturn [content].join('\\n');\n}\n\n// Adapted from convert-source-map (MIT)\nfunction toComment(sourceMap) {\n\t// eslint-disable-next-line no-undef\n\tvar base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n\tvar data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;\n\n\treturn '/*# ' + data + ' */';\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYzEzOGU1NWEzMWYzZjg5NjBlOTkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanM/MjM1MCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odXNlU291cmNlTWFwKSB7XG5cdHZhciBsaXN0ID0gW107XG5cblx0Ly8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXHRsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG5cdFx0XHR2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKTtcblx0XHRcdGlmKGl0ZW1bMl0pIHtcblx0XHRcdFx0cmV0dXJuIFwiQG1lZGlhIFwiICsgaXRlbVsyXSArIFwie1wiICsgY29udGVudCArIFwifVwiO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRlbnQ7XG5cdFx0XHR9XG5cdFx0fSkuam9pbihcIlwiKTtcblx0fTtcblxuXHQvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuXHRsaXN0LmkgPSBmdW5jdGlvbihtb2R1bGVzLCBtZWRpYVF1ZXJ5KSB7XG5cdFx0aWYodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpXG5cdFx0XHRtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCBcIlwiXV07XG5cdFx0dmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGlkID0gdGhpc1tpXVswXTtcblx0XHRcdGlmKHR5cGVvZiBpZCA9PT0gXCJudW1iZXJcIilcblx0XHRcdFx0YWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuXHRcdH1cblx0XHRmb3IoaSA9IDA7IGkgPCBtb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaXRlbSA9IG1vZHVsZXNbaV07XG5cdFx0XHQvLyBza2lwIGFscmVhZHkgaW1wb3J0ZWQgbW9kdWxlXG5cdFx0XHQvLyB0aGlzIGltcGxlbWVudGF0aW9uIGlzIG5vdCAxMDAlIHBlcmZlY3QgZm9yIHdlaXJkIG1lZGlhIHF1ZXJ5IGNvbWJpbmF0aW9uc1xuXHRcdFx0Ly8gIHdoZW4gYSBtb2R1bGUgaXMgaW1wb3J0ZWQgbXVsdGlwbGUgdGltZXMgd2l0aCBkaWZmZXJlbnQgbWVkaWEgcXVlcmllcy5cblx0XHRcdC8vICBJIGhvcGUgdGhpcyB3aWxsIG5ldmVyIG9jY3VyIChIZXkgdGhpcyB3YXkgd2UgaGF2ZSBzbWFsbGVyIGJ1bmRsZXMpXG5cdFx0XHRpZih0eXBlb2YgaXRlbVswXSAhPT0gXCJudW1iZXJcIiB8fCAhYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuXHRcdFx0XHRpZihtZWRpYVF1ZXJ5ICYmICFpdGVtWzJdKSB7XG5cdFx0XHRcdFx0aXRlbVsyXSA9IG1lZGlhUXVlcnk7XG5cdFx0XHRcdH0gZWxzZSBpZihtZWRpYVF1ZXJ5KSB7XG5cdFx0XHRcdFx0aXRlbVsyXSA9IFwiKFwiICsgaXRlbVsyXSArIFwiKSBhbmQgKFwiICsgbWVkaWFRdWVyeSArIFwiKVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGxpc3QucHVzaChpdGVtKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdHJldHVybiBsaXN0O1xufTtcblxuZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApIHtcblx0dmFyIGNvbnRlbnQgPSBpdGVtWzFdIHx8ICcnO1xuXHR2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cdGlmICghY3NzTWFwcGluZykge1xuXHRcdHJldHVybiBjb250ZW50O1xuXHR9XG5cblx0aWYgKHVzZVNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdHZhciBzb3VyY2VNYXBwaW5nID0gdG9Db21tZW50KGNzc01hcHBpbmcpO1xuXHRcdHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG5cdFx0XHRyZXR1cm4gJy8qIyBzb3VyY2VVUkw9JyArIGNzc01hcHBpbmcuc291cmNlUm9vdCArIHNvdXJjZSArICcgKi8nXG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKCdcXG4nKTtcblx0fVxuXG5cdHJldHVybiBbY29udGVudF0uam9pbignXFxuJyk7XG59XG5cbi8vIEFkYXB0ZWQgZnJvbSBjb252ZXJ0LXNvdXJjZS1tYXAgKE1JVClcbmZ1bmN0aW9uIHRvQ29tbWVudChzb3VyY2VNYXApIHtcblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG5cdHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpO1xuXHR2YXIgZGF0YSA9ICdzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCwnICsgYmFzZTY0O1xuXG5cdHJldHVybiAnLyojICcgKyBkYXRhICsgJyAqLyc7XG59XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///c138e55a31f3f8960e99\n");

/***/ }),

/***/ "c4b523a40f8c9d1f237b":
/*!****************************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/kendo.data.odata.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1049);\n\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function() { throw new Error(\"define cannot be used indirect\"); };\r\n\n\n/***/ }),\n\n/***/ 1004:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.core */ \"46d3985e259824d97676\");\n\n/***/ }),\n\n/***/ 1049:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(1004) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t})(function(){\n\n\tvar __meta__ = { // jshint ignore:line\n\t    id: \"data.odata\",\n\t    name: \"OData\",\n\t    category: \"framework\",\n\t    depends: [ \"core\" ],\n\t    hidden: true\n\t};\n\n\t(function($, undefined) {\n\t    var kendo = window.kendo,\n\t        extend = $.extend,\n\t        NEWLINE = \"\\r\\n\",\n\t        DOUBLELINE = \"\\r\\n\\r\\n\",\n\t        isFunction = kendo.isFunction,\n\t        odataFilters = {\n\t            eq: \"eq\",\n\t            neq: \"ne\",\n\t            gt: \"gt\",\n\t            gte: \"ge\",\n\t            lt: \"lt\",\n\t            lte: \"le\",\n\t            contains : \"substringof\",\n\t            doesnotcontain: \"substringof\",\n\t            endswith: \"endswith\",\n\t            startswith: \"startswith\",\n\t            isnull: \"eq\",\n\t            isnotnull: \"ne\",\n\t            isnullorempty: \"eq\",\n\t            isnotnullorempty: \"ne\",\n\t            isempty: \"eq\",\n\t            isnotempty: \"ne\"\n\t        },\n\t        odataFiltersVersionFour = extend({}, odataFilters, {\n\t            contains: \"contains\"\n\t        }),\n\t        mappers = {\n\t            pageSize: $.noop,\n\t            page: $.noop,\n\t            filter: function(params, filter, useVersionFour) {\n\t                if (filter) {\n\t                    filter = toOdataFilter(filter, useVersionFour);\n\t                    if (filter) {\n\t                        params.$filter = filter;\n\t                    }\n\t                }\n\t            },\n\t            sort: function(params, orderby) {\n\t                var expr = $.map(orderby, function(value) {\n\t                    var order = value.field.replace(/\\./g, \"/\");\n\n\t                    if (value.dir === \"desc\") {\n\t                        order += \" desc\";\n\t                    }\n\n\t                    return order;\n\t                }).join(\",\");\n\n\t                if (expr) {\n\t                    params.$orderby = expr;\n\t                }\n\t            },\n\t            skip: function(params, skip) {\n\t                if (skip) {\n\t                    params.$skip = skip;\n\t                }\n\t            },\n\t            take: function(params, take) {\n\t                if (take) {\n\t                    params.$top = take;\n\t                }\n\t            }\n\t        },\n\t        defaultDataType = {\n\t            read: {\n\t                dataType: \"jsonp\"\n\t            }\n\t        };\n\n\t    function toOdataFilter(filter, useOdataFour) {\n\t        var result = [],\n\t            logic = filter.logic || \"and\",\n\t            idx,\n\t            length,\n\t            field,\n\t            type,\n\t            format,\n\t            operator,\n\t            value,\n\t            ignoreCase,\n\t            filters = filter.filters;\n\n\t        for (idx = 0, length = filters.length; idx < length; idx++) {\n\t            filter = filters[idx];\n\t            field = filter.field;\n\t            value = filter.value;\n\t            operator = filter.operator;\n\n\t            if (filter.filters) {\n\t                filter = toOdataFilter(filter, useOdataFour);\n\t            } else {\n\t                ignoreCase = filter.ignoreCase;\n\t                field = field.replace(/\\./g, \"/\");\n\t                filter = odataFilters[operator];\n\t                if (useOdataFour) {\n\t                    filter = odataFiltersVersionFour[operator];\n\t                }\n\n\t                if (operator === \"isnullorempty\") {\n\t                    filter = kendo.format(\"{0} {1} null or {0} {1} ''\", field, filter);\n\t                } else if(operator === \"isnotnullorempty\") {\n\t                    filter = kendo.format(\"{0} {1} null and {0} {1} ''\", field, filter);\n\t                } else if (operator === \"isnull\" || operator === \"isnotnull\") {\n\t                    filter = kendo.format(\"{0} {1} null\", field, filter);\n\t                } else if (operator === \"isempty\" || operator === \"isnotempty\") {\n\t                    filter = kendo.format(\"{0} {1} ''\", field, filter);\n\t                } else if (filter && value !== undefined) {\n\t                    type = $.type(value);\n\t                    if (type === \"string\") {\n\t                        format = \"'{1}'\";\n\t                        value = value.replace(/'/g, \"''\");\n\n\t                        if (ignoreCase === true) {\n\t                            field = \"tolower(\" + field + \")\";\n\t                        }\n\n\t                    } else if (type === \"date\") {\n\t                        if (useOdataFour) {\n\t                            format = \"{1:yyyy-MM-ddTHH:mm:ss+00:00}\";\n\t                            value = kendo.timezone.apply(value, 'Etc/UTC');\n\t                        } else {\n\t                            format = \"datetime'{1:yyyy-MM-ddTHH:mm:ss}'\";\n\t                        }\n\t                    } else {\n\t                        format = \"{1}\";\n\t                    }\n\n\t                    if (filter.length > 3) {\n\t                        if (filter !== \"substringof\") {\n\t                            format = \"{0}({2},\" + format + \")\";\n\t                        } else {\n\t                            format = \"{0}(\" + format + \",{2})\";\n\t                            if (operator === \"doesnotcontain\") {\n\t                                if (useOdataFour) {\n\t                                    format = \"{0}({2},'{1}') eq -1\";\n\t                                    filter = \"indexof\";\n\t                                } else {\n\t                                    format += \" eq false\";\n\t                                }\n\t                            }\n\t                        }\n\t                    } else {\n\t                        format = \"{2} {0} \" + format;\n\t                    }\n\n\t                    filter = kendo.format(format, filter, value, field);\n\t                }\n\t            }\n\n\t            result.push(filter);\n\t        }\n\n\t        filter = result.join(\" \" + logic + \" \");\n\n\t        if (result.length > 1) {\n\t            filter = \"(\" + filter + \")\";\n\t        }\n\n\t        return filter;\n\t    }\n\n\t    function stripMetadata(obj) {\n\t        for (var name in obj) {\n\t            if(name.indexOf(\"@odata\") === 0) {\n\t                delete obj[name];\n\t            }\n\t        }\n\t    }\n\n\t    function hex16() {\n\t        return Math.floor((1 + Math.random()) * 0x10000).toString(16).substr(1);\n\t    }\n\n\t    function createBoundary(prefix) {\n\t        return prefix + hex16() + '-' + hex16() + '-' + hex16();\n\t    }\n\n\t    function createDelimeter(boundary, close) {\n\t        var result = NEWLINE + \"--\" + boundary;\n\n\t        if (close) {\n\t            result += \"--\";\n\t        }\n\n\t        return result;\n\t    }\n\n\t    function createCommand(transport, item, httpVerb, command) {\n\t         var transportUrl = transport.options[command].url;\n\t         var commandPrefix = kendo.format(\"{0} \", httpVerb);\n\n\t         if (isFunction(transportUrl)) {\n\t             return commandPrefix + transportUrl(item);\n\t         } else {\n\t             return commandPrefix + transportUrl;\n\t         }\n\t    }\n\n\t    function getOperationHeader(changeset, changeId) {\n\t        var header = \"\";\n\n\t        header += createDelimeter(changeset, false);\n\t        header += NEWLINE + 'Content-Type: application/http';\n\t        header += NEWLINE + 'Content-Transfer-Encoding: binary';\n\t        header += NEWLINE + 'Content-ID: ' + changeId;\n\n\t        return header;\n\t    }\n\n\t    function getOperationContent(item) {\n\t        var content = \"\";\n\n\t        content += NEWLINE + \"Content-Type: application/json;odata=minimalmetadata\";\n\t        content += NEWLINE + \"Prefer: return=representation\";\n\t        content += DOUBLELINE + kendo.stringify(item);\n\n\t        return content;\n\t    }\n\n\t    function getOperations(collection, changeset, changeId, command, transport, skipContent) {\n\t        var requestBody = \"\";\n\n\t        for (var i = 0; i < collection.length; i++) {\n\t            requestBody += getOperationHeader(changeset, changeId);\n\t            requestBody += DOUBLELINE + createCommand(transport, collection[i], transport.options[command].type, command) + ' HTTP/1.1';\n\t            if (!skipContent) {\n\t                requestBody += getOperationContent(collection[i]);\n\t            }\n\t            requestBody += NEWLINE;\n\t            changeId++;\n\t        }\n\n\t        return requestBody;\n\t    }\n\n\t    function processCollection(colection, boundary, changeset, changeId, transport, command, skipContent) {\n\t        var requestBody = \"\";\n\n\t        requestBody += getBoundary(boundary, changeset);\n\t        requestBody += getOperations(colection, changeset, changeId, command, transport, skipContent);\n\t        requestBody += createDelimeter(changeset, true);\n\t        requestBody += NEWLINE;\n\n\t        return requestBody;\n\t    }\n\n\t    function getBoundary(boundary,changeset) {\n\t        var requestBody = \"\";\n\n\t        requestBody += \"--\" + boundary + NEWLINE;\n\t        requestBody += \"Content-Type: multipart/mixed; boundary=\" + changeset + NEWLINE;\n\n\t        return requestBody;\n\t    }\n\n\t    function createBatchRequest(transport, colections) {\n\t        var options = {};\n\t        var boundary = createBoundary(\"sf_batch_\");\n\t        var requestBody = \"\";\n\t        var changeId = 0;\n\t        var batchURL = transport.options.batch.url;\n\t        var changeset = createBoundary(\"sf_changeset_\");\n\n\t        options.type = transport.options.batch.type;\n\t        options.url = isFunction(batchURL) ? batchURL() : batchURL;\n\t        options.headers = {\n\t            \"Content-Type\": \"multipart/mixed; boundary=\" + boundary\n\t        };\n\n\t        if (colections.updated.length) {\n\t            requestBody += processCollection(colections.updated, boundary, changeset, changeId, transport, \"update\", false);\n\t            changeId += colections.updated.length;\n\t            changeset = createBoundary(\"sf_changeset_\");\n\t        }\n\n\t        if (colections.destroyed.length) {\n\t            requestBody += processCollection(colections.destroyed, boundary, changeset, changeId, transport, \"destroy\", true);\n\t            changeId += colections.destroyed.length;\n\t            changeset = createBoundary(\"sf_changeset_\");\n\t        }\n\n\t        if (colections.created.length) {\n\t            requestBody += processCollection(colections.created, boundary, changeset, changeId, transport, \"create\", false);\n\t        }\n\n\t        requestBody += createDelimeter(boundary, true);\n\n\t        options.data = requestBody;\n\n\t        return options;\n\t    }\n\n\t    function parseBatchResponse(responseText) {\n\t        var responseMarkers = responseText.match(/--changesetresponse_[a-z0-9-]+$/gm);\n\t        var markerIndex = 0;\n\t        var collections = [];\n\t        var changeBody;\n\t        var status;\n\t        var code;\n\t        var marker;\n\t        var jsonModel;\n\n\t        collections.push({ models: [], passed: true });\n\n\t        for (var i = 0; i < responseMarkers.length; i++) {\n\t            marker = responseMarkers[i];\n\t            if (marker.lastIndexOf('--', marker.length - 1)) {\n\t                if (i < responseMarkers.length - 1) {\n\t                    collections.push({ models: [], passed: true });\n\t                }\n\t                continue;\n\t            }\n\n\t            if (!markerIndex) {\n\t                markerIndex = responseText.indexOf(marker);\n\t            } else {\n\t                markerIndex = responseText.indexOf(marker, markerIndex + marker.length);\n\t            }\n\n\t            changeBody = responseText.substring(markerIndex, responseText.indexOf(\"--\", markerIndex + 1));\n\t            status = changeBody.match(/^HTTP\\/1\\.\\d (\\d{3}) (.*)$/gm).pop();\n\t            code = kendo.parseFloat(status.match(/\\d{3}/g).pop());\n\n\t            if (code >= 200 && code <= 299) {\n\t                jsonModel = changeBody.match(/\\{.*\\}/gm);\n\t                if (jsonModel) {\n\t                    collections[collections.length - 1].models.push(JSON.parse(jsonModel[0]));\n\t                }\n\t            } else {\n\t                collections[collections.length - 1].passed = false;\n\t            }\n\n\t        }\n\n\t        return collections;\n\t    }\n\n\t    extend(true, kendo.data, {\n\t        schemas: {\n\t            odata: {\n\t                type: \"json\",\n\t                data: function(data) {\n\t                    return data.d.results || [data.d];\n\t                },\n\t                total: \"d.__count\"\n\t            }\n\t        },\n\t        transports: {\n\t            odata: {\n\t                read: {\n\t                    cache: true, // to prevent jQuery from adding cache buster\n\t                    dataType: \"jsonp\",\n\t                    jsonp: \"$callback\"\n\t                },\n\t                update: {\n\t                    cache: true,\n\t                    dataType: \"json\",\n\t                    contentType: \"application/json\", // to inform the server the the request body is JSON encoded\n\t                    type: \"PUT\" // can be PUT or MERGE\n\t                },\n\t                create: {\n\t                    cache: true,\n\t                    dataType: \"json\",\n\t                    contentType: \"application/json\",\n\t                    type: \"POST\" // must be POST to create new entity\n\t                },\n\t                destroy: {\n\t                    cache: true,\n\t                    dataType: \"json\",\n\t                    type: \"DELETE\"\n\t                },\n\t                parameterMap: function(options, type, useVersionFour) {\n\t                    var params,\n\t                        value,\n\t                        option,\n\t                        dataType;\n\n\t                    options = options || {};\n\t                    type = type || \"read\";\n\t                    dataType = (this.options || defaultDataType)[type];\n\t                    dataType = dataType ? dataType.dataType : \"json\";\n\n\t                    if (type === \"read\") {\n\t                        params = {\n\t                            $inlinecount: \"allpages\"\n\t                        };\n\n\t                        if (dataType != \"json\") {\n\t                            params.$format = \"json\";\n\t                        }\n\n\t                        for (option in options) {\n\t                            if (mappers[option]) {\n\t                                mappers[option](params, options[option], useVersionFour);\n\t                            } else {\n\t                                params[option] = options[option];\n\t                            }\n\t                        }\n\t                    } else {\n\t                        if (dataType !== \"json\") {\n\t                            throw new Error(\"Only json dataType can be used for \" + type + \" operation.\");\n\t                        }\n\n\t                        if (type !== \"destroy\") {\n\t                            for (option in options) {\n\t                                value = options[option];\n\t                                if (typeof value === \"number\") {\n\t                                    options[option] = value + \"\";\n\t                                }\n\t                            }\n\n\t                            params = kendo.stringify(options);\n\t                        }\n\t                    }\n\n\t                    return params;\n\t                }\n\t            }\n\t        }\n\t    });\n\n\t    extend(true, kendo.data, {\n\t        schemas: {\n\t            \"odata-v4\": {\n\t                type: \"json\",\n\t                data: function(data) {\n\t                    if ($.isArray(data)) {\n\t                        for (var i = 0; i < data.length; i++) {\n\t                            stripMetadata(data[i]);\n\t                        }\n\t                        return data;\n\t                    } else {\n\t                        data = $.extend({}, data);\n\t                        stripMetadata(data);\n\n\t                        if (data.value) {\n\t                            return data.value;\n\t                        }\n\t                        return [data];\n\t                    }\n\t                },\n\t                total: function(data) {\n\t                    return data[\"@odata.count\"];\n\t                }\n\t            }\n\t        },\n\t        transports: {\n\t            \"odata-v4\": {\n\t                batch: {\n\t                    type: \"POST\"\n\t                },\n\t                read: {\n\t                    cache: true, // to prevent jQuery from adding cache buster\n\t                    dataType: \"json\"\n\t                },\n\t                update: {\n\t                    cache: true,\n\t                    dataType: \"json\",\n\t                    contentType: \"application/json;IEEE754Compatible=true\", // to inform the server the the request body is JSON encoded\n\t                    type: \"PUT\" // can be PUT or MERGE\n\t                },\n\t                create: {\n\t                    cache: true,\n\t                    dataType: \"json\",\n\t                    contentType: \"application/json;IEEE754Compatible=true\",\n\t                    type: \"POST\" // must be POST to create new entity\n\t                },\n\t                destroy: {\n\t                    cache: true,\n\t                    dataType: \"json\",\n\t                    type: \"DELETE\"\n\t                },\n\t                parameterMap: function(options, type) {\n\t                    var result = kendo.data.transports.odata.parameterMap(options, type, true);\n\t                    if (type == \"read\") {\n\t                        result.$count = true;\n\t                        delete result.$inlinecount;\n\t                    }\n\n\t                    return result;\n\t                },\n\t                submit: function(e) {\n\t                    var that = this;\n\t                    var options = createBatchRequest(that, e.data);\n\t                    var collections = e.data;\n\n\t                    if (!collections.updated.length && !collections.destroyed.length && !collections.created.length) {\n\t                        return;\n\t                    }\n\n\t                    $.ajax(extend(true, {}, {\n\t                        success: function (response) {\n\t                            var responses = parseBatchResponse(response);\n\t                            var index = 0;\n\t                            var current;\n\n\t                            if (collections.updated.length) {\n\t                                current = responses[index];\n\t                                if (current.passed) {\n\t                                    // Pass either the obtained models or an empty array if only status codes are returned.\n\t                                    e.success(current.models.length ? current.models : [], \"update\");\n\t                                }\n\t                                index++;\n\t                            }\n\t                            if (collections.destroyed.length) {\n\t                                current = responses[index];\n\t                                if (current.passed) {\n\t                                    // For delete operations OData returns only status codes.\n\t                                    // Passing empty array to datasource will force it to correctly remove the deleted items from the pristine collection.\n\t                                    e.success([], \"destroy\");\n\t                                }\n\t                                index++;\n\t                            }\n\t                            if (collections.created.length) {\n\t                                current = responses[index];\n\t                                if (current.passed) {\n\t                                    e.success(current.models, \"create\");\n\t                                }\n\t                            }\n\t                        },\n\t                        error: function (response, status, error) {\n\t                            e.error(response, status, error);\n\t                        }\n\t                    }, options));\n\t                }\n\t            }\n\t        }\n\t    });\n\n\t})(window.kendo.jQuery);\n\n\treturn window.kendo;\n\n\t}, __webpack_require__(3));\n\n\n/***/ })\n\n/******/ });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///c4b523a40f8c9d1f237b\n");

/***/ }),

/***/ "cd5975204d58830e8b52":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/css-loader!./src/vendor/Anakeen/SmartStructures/Iuser/Render/changeGroupView.css ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(/*! ../../../../../../node_modules/css-loader/lib/css-base.js */ \"c138e55a31f3f8960e99\")(false);\n// imports\n\n\n// module\nexports.push([module.i, \"#listOfGroups .k-checkbox:checked + .k-checkbox-label:before {\\n    background-color: #007bff;\\n}\\n\\n.hasChildChecked {\\n    border-bottom: solid 1px #007bff;\\n}\", \"\"]);\n\n// exports\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2Q1OTc1MjA0ZDU4ODMwZThiNTIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdmVuZG9yL0FuYWtlZW4vU21hcnRTdHJ1Y3R1cmVzL0l1c2VyL1JlbmRlci9jaGFuZ2VHcm91cFZpZXcuY3NzP2U4OGUiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKShmYWxzZSk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIjbGlzdE9mR3JvdXBzIC5rLWNoZWNrYm94OmNoZWNrZWQgKyAuay1jaGVja2JveC1sYWJlbDpiZWZvcmUge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA3YmZmO1xcbn1cXG5cXG4uaGFzQ2hpbGRDaGVja2VkIHtcXG4gICAgYm9yZGVyLWJvdHRvbTogc29saWQgMXB4ICMwMDdiZmY7XFxufVwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///cd5975204d58830e8b52\n");

/***/ }),

/***/ "e5de476db2ea45d6ed4e":
/*!*****************************************************************************!*\
  !*** ./src/vendor/Anakeen/SmartStructures/Iuser/Render/changeGroupView.css ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("\nvar content = __webpack_require__(/*! !../../../../../../node_modules/css-loader!./changeGroupView.css */ \"cd5975204d58830e8b52\");\n\nif(typeof content === 'string') content = [[module.i, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = __webpack_require__(/*! ../../../../../../node_modules/style-loader/lib/addStyles.js */ \"1e4534d1d62a11482e97\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(false) {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZTVkZTQ3NmRiMmVhNDVkNmVkNGUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdmVuZG9yL0FuYWtlZW4vU21hcnRTdHJ1Y3R1cmVzL0l1c2VyL1JlbmRlci9jaGFuZ2VHcm91cFZpZXcuY3NzPzA0NDEiXSwic291cmNlc0NvbnRlbnQiOlsiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vY2hhbmdlR3JvdXBWaWV3LmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9jaGFuZ2VHcm91cFZpZXcuY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9jaGFuZ2VHcm91cFZpZXcuY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///e5de476db2ea45d6ed4e\n");

/***/ }),

/***/ "ed7ea6f7dc20380e2940":
/*!****************************************************************************!*\
  !*** ./src/vendor/Anakeen/SmartStructures/Iuser/Render/changeGroupView.js ***!
  \****************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _progress_kendo_ui_js_kendo_treeview__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @progress/kendo-ui/js/kendo.treeview */ \"04065e00ab361f322eef\");\n/* harmony import */ var _progress_kendo_ui_js_kendo_treeview__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_progress_kendo_ui_js_kendo_treeview__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _changeGroupView_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./changeGroupView.css */ \"e5de476db2ea45d6ed4e\");\n/* harmony import */ var _changeGroupView_css__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_changeGroupView_css__WEBPACK_IMPORTED_MODULE_1__);\n\n\n\n{\n  let getGroupTreeSource;\n  let checkedGroups;\n\n  const getGroups = () => {\n    return fetch(\"/api/v2/admin/account/groups/\", {\n      credentials: \"same-origin\"\n    })\n      .then(response => {\n        return response.json();\n      })\n      .then(response => {\n        return response.groups;\n      });\n  };\n\n  const initTreeGroup = groups => () => {\n    return new kendo.data.HierarchicalDataSource({\n      filter: {},\n      transport: {\n        read: options => {\n          groups\n            .then(groups => {\n              Object.values(groups).forEach(currentData => {\n                currentData.expanded = true;\n                currentData.items = currentData.items || [];\n                currentData.parents.forEach(parentData => {\n                  try {\n                    groups[parentData].items = groups[parentData].items || [];\n                    groups[parentData].items.push(currentData);\n                  } catch (e) {\n                    //no need to handle the error\n                  }\n                });\n              });\n              //Suppress first level elements\n              Object.values(groups).forEach(currentData => {\n                if (currentData.parents.length > 0) {\n                  delete groups[currentData.accountId];\n                }\n              });\n\n              try {\n                //Suppress refs elements and keep only values\n                groups = Object.values(JSON.parse(JSON.stringify(groups)));\n              } catch (e) {\n                groups = [];\n              }\n              const addUniqId = (currentElement, id = \"\") => {\n                currentElement.hierarchicalId = id\n                  ? id + \"/\" + currentElement.documentId\n                  : currentElement.documentId;\n                if (currentElement.items) {\n                  currentElement.items.forEach(childrenElement => {\n                    addUniqId(childrenElement, currentElement.hierarchicalId);\n                  });\n                }\n              };\n              groups.forEach(currentGroup => {\n                addUniqId(currentGroup);\n              });\n              const restoreCheckedTree = checked => {\n                return function analyzeChecked(data) {\n                  data.forEach(currentData => {\n                    currentData.checked = false;\n                    if (checked[currentData.accountId]) {\n                      currentData.checked = true;\n                    }\n                    if (currentData.items && currentData.items.length) {\n                      analyzeChecked(currentData.items);\n                    }\n                  });\n                };\n              };\n              if (checkedGroups) {\n                restoreCheckedTree(checkedGroups)(groups);\n              }\n              const hasChildChecked = data => {\n                return data.reduce((accumulator, currentData) => {\n                  if (currentData.items && currentData.items.length) {\n                    if (hasChildChecked(currentData.items)) {\n                      currentData.hasChildChecked = true;\n                      return true;\n                    }\n                  }\n                  return accumulator || currentData.checked;\n                }, false);\n              };\n              hasChildChecked(groups);\n\n              options.success(groups);\n            })\n            .catch(error => {\n              console.error(\"Unable to get group\", error);\n            });\n        }\n      },\n      schema: {\n        model: {\n          id: \"hierarchicalId\",\n          children: \"items\"\n        }\n      }\n    });\n  };\n\n  window.dcp.document.documentController(\n    \"addEventListener\",\n    \"beforeRender\",\n    {\n      name: \"changeGroupBeforeRender.changeGroup\",\n      documentCheck: documentObject => {\n        const serverData = window.dcp.document.documentController(\n          \"getCustomServerData\"\n        );\n        return (\n          documentObject.renderMode === \"edit\" && serverData[\"GROUP_ANALYZE\"]\n        );\n      }\n    },\n    () => {\n      if (!getGroupTreeSource) {\n        getGroupTreeSource = initTreeGroup(getGroups());\n      }\n    }\n  );\n\n  window.dcp.document.documentController(\n    \"addEventListener\",\n    \"ready\",\n    {\n      name: \"changeGroupReady.changeGroup\",\n      documentCheck: documentObject => {\n        const serverData = window.dcp.document.documentController(\n          \"getCustomServerData\"\n        );\n        return (\n          documentObject.renderMode === \"edit\" && serverData[\"GROUP_ANALYZE\"]\n        );\n      }\n    },\n    () => {\n      const serverData = window.dcp.document.documentController(\n        \"getCustomServerData\"\n      );\n      checkedGroups = serverData.groups;\n      let filterTitle = null;\n\n      const updateTreeSource = kendoTree => {\n        return (force = false) => {\n          let groupTreeSource = kendoTree.dataSource;\n          const filter = filterTitle\n            ? { field: \"title\", operator: \"contains\", value: filterTitle }\n            : {};\n          if (force) {\n            const newTreeSource = getGroupTreeSource();\n            newTreeSource.read().then(() => {\n              kendoTree.setDataSource(newTreeSource);\n              newTreeSource.filter(filter);\n            });\n          } else {\n            groupTreeSource.filter(filter);\n          }\n        };\n      };\n\n      const getChecked = checked => currentEventNode => {\n        return function analyzeChecked(dataSource) {\n          const data =\n            dataSource instanceof kendo.data.HierarchicalDataSource &&\n            dataSource.data();\n          if (data === false) {\n            return;\n          }\n          data.forEach(currentNode => {\n            let isChecked = null;\n            if (currentEventNode.accountId === currentNode.accountId) {\n              isChecked = currentEventNode.checked;\n            }\n            if (\n              isChecked === null &&\n              currentNode.accountId &&\n              currentNode.checked\n            ) {\n              isChecked = true;\n            }\n            if (isChecked) {\n              checked[currentNode.accountId] = true;\n            }\n            if (currentNode.children) {\n              analyzeChecked(currentNode.children);\n            }\n          });\n        };\n      };\n\n      let updateListOfGroup;\n\n      $(\"#listOfGroups\").kendoTreeView({\n        checkboxes: true,\n        dataSource: getGroupTreeSource(),\n        select: event => {\n          event.preventDefault();\n        },\n        template:\n          \"<span # if(item.hasChildChecked) {# class='hasChildChecked' #}# data-accountId='#= item.accountId #' data-se-id='#= item.documentId #'>#= item.title # (#= item.nbUser #) </span>\",\n        check: function onTreeCheck(event) {\n          const eventNode = this.dataItem(event.node);\n          const checked = {};\n          getChecked(checked)(eventNode)(event.sender.dataSource);\n          checkedGroups = checked;\n          window.dcp.document.documentController(\"addCustomClientData\", {\n            parentGroups: checkedGroups\n          });\n          updateListOfGroup(true);\n        }\n      });\n\n      $(\"#formFilter\").on(\"submit\", event => {\n        event.preventDefault();\n        filterTitle = document.getElementById(\"filterTree\").value\n          ? document.getElementById(\"filterTree\").value.toLowerCase()\n          : \"\";\n        updateListOfGroup();\n      });\n\n      updateListOfGroup = updateTreeSource(\n        $(\"#listOfGroups\").data(\"kendoTreeView\")\n      );\n    }\n  );\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///ed7ea6f7dc20380e2940\n");

/***/ }),

/***/ "f1f6d1b513a156927c9d":
/*!**************************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/kendo.data.xml.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1051);\n\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function() { throw new Error(\"define cannot be used indirect\"); };\r\n\n\n/***/ }),\n\n/***/ 1004:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.core */ \"46d3985e259824d97676\");\n\n/***/ }),\n\n/***/ 1051:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){\r\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(1004) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\t})(function(){\r\n\r\n\tvar __meta__ = { // jshint ignore:line\r\n\t    id: \"data.xml\",\r\n\t    name: \"XML\",\r\n\t    category: \"framework\",\r\n\t    depends: [ \"core\" ],\r\n\t    hidden: true\r\n\t};\r\n\r\n\t/*jshint  eqnull: true, boss: true */\r\n\t(function($, undefined) {\r\n\t    var kendo = window.kendo,\r\n\t        isArray = $.isArray,\r\n\t        isPlainObject = $.isPlainObject,\r\n\t        map = $.map,\r\n\t        each = $.each,\r\n\t        extend = $.extend,\r\n\t        getter = kendo.getter,\r\n\t        Class = kendo.Class;\r\n\r\n\t    var XmlDataReader = Class.extend({\r\n\t        init: function(options) {\r\n\t            var that = this,\r\n\t                total = options.total,\r\n\t                model = options.model,\r\n\t                parse = options.parse,\r\n\t                errors = options.errors,\r\n\t                serialize = options.serialize,\r\n\t                data = options.data;\r\n\r\n\t            if (model) {\r\n\t                if (isPlainObject(model)) {\r\n\t                    var base = options.modelBase || kendo.data.Model;\r\n\r\n\t                    if (model.fields) {\r\n\t                        each(model.fields, function(field, value) {\r\n\t                            if (isPlainObject(value) && value.field) {\r\n\t                                if (!$.isFunction(value.field)) {\r\n\t                                    value = extend(value, { field: that.getter(value.field) });\r\n\t                                }\r\n\t                            } else {\r\n\t                                value = { field: that.getter(value) };\r\n\t                            }\r\n\t                            model.fields[field] = value;\r\n\t                        });\r\n\t                    }\r\n\r\n\t                    var id = model.id;\r\n\t                    if (id) {\r\n\t                        var idField = {};\r\n\r\n\t                        idField[that.xpathToMember(id, true)] = { field : that.getter(id) };\r\n\t                        model.fields = extend(idField, model.fields);\r\n\t                        model.id = that.xpathToMember(id);\r\n\t                    }\r\n\t                    model = base.define(model);\r\n\t                }\r\n\r\n\t                that.model = model;\r\n\t            }\r\n\r\n\t            if (total) {\r\n\t                if (typeof total == \"string\") {\r\n\t                    total = that.getter(total);\r\n\t                    that.total = function(data) {\r\n\t                        return parseInt(total(data), 10);\r\n\t                    };\r\n\t                } else if (typeof total == \"function\"){\r\n\t                    that.total = total;\r\n\t                }\r\n\t            }\r\n\r\n\t            if (errors) {\r\n\t                if (typeof errors == \"string\") {\r\n\t                    errors = that.getter(errors);\r\n\t                    that.errors = function(data) {\r\n\t                        return errors(data) || null;\r\n\t                    };\r\n\t                } else if (typeof errors == \"function\"){\r\n\t                    that.errors = errors;\r\n\t                }\r\n\t            }\r\n\r\n\t            if (data) {\r\n\t                if (typeof data == \"string\") {\r\n\t                    data = that.xpathToMember(data);\r\n\t                    that.data = function(value) {\r\n\t                        var result = that.evaluate(value, data),\r\n\t                            modelInstance;\r\n\r\n\t                        result = isArray(result) ? result : [result];\r\n\r\n\t                        if (that.model && model.fields) {\r\n\t                            modelInstance = new that.model();\r\n\r\n\t                            return map(result, function(value) {\r\n\t                                if (value) {\r\n\t                                    var record = {}, field;\r\n\r\n\t                                    for (field in model.fields) {\r\n\t                                        record[field] = modelInstance._parse(field, model.fields[field].field(value));\r\n\t                                    }\r\n\r\n\t                                    return record;\r\n\t                                }\r\n\t                            });\r\n\t                        }\r\n\r\n\t                        return result;\r\n\t                    };\r\n\t                } else if (typeof data == \"function\") {\r\n\t                    that.data = data;\r\n\t                }\r\n\t            }\r\n\r\n\t            if (typeof parse == \"function\") {\r\n\t                var xmlParse = that.parse;\r\n\r\n\t                that.parse = function(data) {\r\n\t                    var xml = parse.call(that, data);\r\n\t                    return xmlParse.call(that, xml);\r\n\t                };\r\n\t            }\r\n\r\n\t            if (typeof serialize == \"function\") {\r\n\t                that.serialize = serialize;\r\n\t            }\r\n\t        },\r\n\t        total: function(result) {\r\n\t            return this.data(result).length;\r\n\t        },\r\n\t        errors: function(data) {\r\n\t            return data ? data.errors : null;\r\n\t        },\r\n\t        serialize: function(data) {\r\n\t            return data;\r\n\t        },\r\n\t        parseDOM: function(element) {\r\n\t            var result = {},\r\n\t                parsedNode,\r\n\t                node,\r\n\t                nodeType,\r\n\t                nodeName,\r\n\t                member,\r\n\t                attribute,\r\n\t                attributes = element.attributes,\r\n\t                attributeCount = attributes.length,\r\n\t                idx;\r\n\r\n\t            for (idx = 0; idx < attributeCount; idx++) {\r\n\t                attribute = attributes[idx];\r\n\t                result[\"@\" + attribute.nodeName] = attribute.nodeValue;\r\n\t            }\r\n\r\n\t            for (node = element.firstChild; node; node = node.nextSibling) {\r\n\t                nodeType = node.nodeType;\r\n\r\n\t                if (nodeType === 3 || nodeType === 4) {\r\n\t                    // text nodes or CDATA are stored as #text field\r\n\t                    result[\"#text\"] = node.nodeValue;\r\n\t                } else if (nodeType === 1) {\r\n\t                    // elements are stored as fields\r\n\t                    parsedNode = this.parseDOM(node);\r\n\r\n\t                    nodeName = node.nodeName;\r\n\r\n\t                    member = result[nodeName];\r\n\r\n\t                    if (isArray(member)) {\r\n\t                        // elements of same nodeName are stored as array\r\n\t                        member.push(parsedNode);\r\n\t                    } else if (member !== undefined) {\r\n\t                        member = [member, parsedNode];\r\n\t                    } else {\r\n\t                        member = parsedNode;\r\n\t                    }\r\n\r\n\t                    result[nodeName] = member;\r\n\t                }\r\n\t            }\r\n\t            return result;\r\n\t        },\r\n\r\n\t        evaluate: function(value, expression) {\r\n\t            var members = expression.split(\".\"),\r\n\t                member,\r\n\t                result,\r\n\t                length,\r\n\t                intermediateResult,\r\n\t                idx;\r\n\r\n\t            while (member = members.shift()) {\r\n\t                value = value[member];\r\n\r\n\t                if (isArray(value)) {\r\n\t                    result = [];\r\n\t                    expression = members.join(\".\");\r\n\r\n\t                    for (idx = 0, length = value.length; idx < length; idx++) {\r\n\t                        intermediateResult = this.evaluate(value[idx], expression);\r\n\r\n\t                        intermediateResult = isArray(intermediateResult) ? intermediateResult : [intermediateResult];\r\n\r\n\t                        result.push.apply(result, intermediateResult);\r\n\t                    }\r\n\r\n\t                    return result;\r\n\t                }\r\n\t            }\r\n\r\n\t            return value;\r\n\t        },\r\n\r\n\t        parse: function(xml) {\r\n\t            var documentElement,\r\n\t                tree,\r\n\t                result = {};\r\n\r\n\t            documentElement = xml.documentElement || $.parseXML(xml).documentElement;\r\n\r\n\t            tree = this.parseDOM(documentElement);\r\n\r\n\t            result[documentElement.nodeName] = tree;\r\n\r\n\t            return result;\r\n\t        },\r\n\r\n\t        xpathToMember: function(member, raw) {\r\n\t            if (!member) {\r\n\t                return \"\";\r\n\t            }\r\n\r\n\t            member = member.replace(/^\\//, \"\") // remove the first \"/\"\r\n\t                           .replace(/\\//g, \".\"); // replace all \"/\" with \".\"\r\n\r\n\t            if (member.indexOf(\"@\") >= 0) {\r\n\t                // replace @attribute with '[\"@attribute\"]'\r\n\t                return member.replace(/\\.?(@.*)/, raw? '$1':'[\"$1\"]');\r\n\t            }\r\n\r\n\t            if (member.indexOf(\"text()\") >= 0) {\r\n\t                // replace \".text()\" with '[\"#text\"]'\r\n\t                return member.replace(/(\\.?text\\(\\))/, raw? '#text':'[\"#text\"]');\r\n\t            }\r\n\r\n\t            return member;\r\n\t        },\r\n\t        getter: function(member) {\r\n\t            return getter(this.xpathToMember(member), true);\r\n\t        }\r\n\t    });\r\n\r\n\t    $.extend(true, kendo.data, {\r\n\t        XmlDataReader: XmlDataReader,\r\n\t        readers: {\r\n\t            xml: XmlDataReader\r\n\t        }\r\n\t    });\r\n\t})(window.kendo.jQuery);\r\n\r\n\treturn window.kendo;\r\n\r\n\t}, __webpack_require__(3));\r\n\n\n/***/ })\n\n/******/ });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///f1f6d1b513a156927c9d\n");

/***/ }),

/***/ "f78db54954381e284430":
/*!**********************************************************!*\
  !*** ./node_modules/@progress/kendo-ui/js/kendo.data.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1046);\n\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function() { throw new Error(\"define cannot be used indirect\"); };\r\n\n\n/***/ }),\n\n/***/ 1004:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.core */ \"46d3985e259824d97676\");\n\n/***/ }),\n\n/***/ 1046:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(1004), __webpack_require__(1047), __webpack_require__(1048) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t})(function(){\n\n\tvar __meta__ = { // jshint ignore:line\n\t    id: \"data\",\n\t    name: \"Data source\",\n\t    category: \"framework\",\n\t    description: \"Powerful component for using local and remote data.Fully supports CRUD, Sorting, Paging, Filtering, Grouping, and Aggregates.\",\n\t    depends: [ \"core\" ],\n\t    features: [ {\n\t        id: \"data-odata\",\n\t        name: \"OData\",\n\t        description: \"Support for accessing Open Data Protocol (OData) services.\",\n\t        depends: [ \"data.odata\" ]\n\t    }, {\n\t        id: \"data-signalr\",\n\t        name: \"SignalR\",\n\t        description: \"Support for binding to SignalR hubs.\",\n\t        depends: [ \"data.signalr\" ]\n\t    }, {\n\t        id: \"data-XML\",\n\t        name: \"XML\",\n\t        description: \"Support for binding to XML.\",\n\t        depends: [ \"data.xml\" ]\n\t    }]\n\t};\n\n\t/*jshint eqnull: true, loopfunc: true, evil: true */\n\t(function($, undefined) {\n\t    var extend = $.extend,\n\t        proxy = $.proxy,\n\t        isPlainObject = $.isPlainObject,\n\t        isEmptyObject = $.isEmptyObject,\n\t        isArray = $.isArray,\n\t        grep = $.grep,\n\t        ajax = $.ajax,\n\t        map,\n\t        each = $.each,\n\t        noop = $.noop,\n\t        kendo = window.kendo,\n\t        isFunction = kendo.isFunction,\n\t        Observable = kendo.Observable,\n\t        Class = kendo.Class,\n\t        STRING = \"string\",\n\t        FUNCTION = \"function\",\n\t        CREATE = \"create\",\n\t        READ = \"read\",\n\t        UPDATE = \"update\",\n\t        DESTROY = \"destroy\",\n\t        CHANGE = \"change\",\n\t        SYNC = \"sync\",\n\t        GET = \"get\",\n\t        ERROR = \"error\",\n\t        REQUESTSTART = \"requestStart\",\n\t        PROGRESS = \"progress\",\n\t        REQUESTEND = \"requestEnd\",\n\t        crud = [CREATE, READ, UPDATE, DESTROY],\n\t        identity = function(o) { return o; },\n\t        getter = kendo.getter,\n\t        stringify = kendo.stringify,\n\t        math = Math,\n\t        push = [].push,\n\t        join = [].join,\n\t        pop = [].pop,\n\t        splice = [].splice,\n\t        shift = [].shift,\n\t        slice = [].slice,\n\t        unshift = [].unshift,\n\t        toString = {}.toString,\n\t        stableSort = kendo.support.stableSort,\n\t        dateRegExp = /^\\/Date\\((.*?)\\)\\/$/;\n\n\t    var ObservableArray = Observable.extend({\n\t        init: function(array, type) {\n\t            var that = this;\n\n\t            that.type = type || ObservableObject;\n\n\t            Observable.fn.init.call(that);\n\n\t            that.length = array.length;\n\n\t            that.wrapAll(array, that);\n\t        },\n\n\t        at: function(index) {\n\t            return this[index];\n\t        },\n\n\t        toJSON: function() {\n\t            var idx, length = this.length, value, json = new Array(length);\n\n\t            for (idx = 0; idx < length; idx++){\n\t                value = this[idx];\n\n\t                if (value instanceof ObservableObject) {\n\t                    value = value.toJSON();\n\t                }\n\n\t                json[idx] = value;\n\t            }\n\n\t            return json;\n\t        },\n\n\t        parent: noop,\n\n\t        wrapAll: function(source, target) {\n\t            var that = this,\n\t                idx,\n\t                length,\n\t                parent = function() {\n\t                    return that;\n\t                };\n\n\t            target = target || [];\n\n\t            for (idx = 0, length = source.length; idx < length; idx++) {\n\t                target[idx] = that.wrap(source[idx], parent);\n\t            }\n\n\t            return target;\n\t        },\n\n\t        wrap: function(object, parent) {\n\t            var that = this,\n\t                observable;\n\n\t            if (object !== null && toString.call(object) === \"[object Object]\") {\n\t                observable = object instanceof that.type || object instanceof Model;\n\n\t                if (!observable) {\n\t                    object = object instanceof ObservableObject ? object.toJSON() : object;\n\t                    object = new that.type(object);\n\t                }\n\n\t                object.parent = parent;\n\n\t                object.bind(CHANGE, function(e) {\n\t                    that.trigger(CHANGE, {\n\t                        field: e.field,\n\t                        node: e.node,\n\t                        index: e.index,\n\t                        items: e.items || [this],\n\t                        action: e.node ? (e.action || \"itemloaded\") : \"itemchange\"\n\t                    });\n\t                });\n\t            }\n\n\t            return object;\n\t        },\n\n\t        push: function() {\n\t            var index = this.length,\n\t                items = this.wrapAll(arguments),\n\t                result;\n\n\t            result = push.apply(this, items);\n\n\t            this.trigger(CHANGE, {\n\t                action: \"add\",\n\t                index: index,\n\t                items: items\n\t            });\n\n\t            return result;\n\t        },\n\n\t        slice: slice,\n\n\t        sort: [].sort,\n\n\t        join: join,\n\n\t        pop: function() {\n\t            var length = this.length, result = pop.apply(this);\n\n\t            if (length) {\n\t                this.trigger(CHANGE, {\n\t                    action: \"remove\",\n\t                    index: length - 1,\n\t                    items:[result]\n\t                });\n\t            }\n\n\t            return result;\n\t        },\n\n\t        splice: function(index, howMany, item) {\n\t            var items = this.wrapAll(slice.call(arguments, 2)),\n\t                result, i, len;\n\n\t            result = splice.apply(this, [index, howMany].concat(items));\n\n\t            if (result.length) {\n\t                this.trigger(CHANGE, {\n\t                    action: \"remove\",\n\t                    index: index,\n\t                    items: result\n\t                });\n\n\t                for (i = 0, len = result.length; i < len; i++) {\n\t                    if (result[i] && result[i].children) {\n\t                        result[i].unbind(CHANGE);\n\t                    }\n\t                }\n\t            }\n\n\t            if (item) {\n\t                this.trigger(CHANGE, {\n\t                    action: \"add\",\n\t                    index: index,\n\t                    items: items\n\t                });\n\t            }\n\t            return result;\n\t        },\n\n\t        shift: function() {\n\t            var length = this.length, result = shift.apply(this);\n\n\t            if (length) {\n\t                this.trigger(CHANGE, {\n\t                    action: \"remove\",\n\t                    index: 0,\n\t                    items:[result]\n\t                });\n\t            }\n\n\t            return result;\n\t        },\n\n\t        unshift: function() {\n\t            var items = this.wrapAll(arguments),\n\t                result;\n\n\t            result = unshift.apply(this, items);\n\n\t            this.trigger(CHANGE, {\n\t                action: \"add\",\n\t                index: 0,\n\t                items: items\n\t            });\n\n\t            return result;\n\t        },\n\n\t        indexOf: function(item) {\n\t            var that = this,\n\t                idx,\n\t                length;\n\n\t            for (idx = 0, length = that.length; idx < length; idx++) {\n\t                if (that[idx] === item) {\n\t                    return idx;\n\t                }\n\t            }\n\t            return -1;\n\t        },\n\n\t        forEach: function(callback, thisArg) {\n\t            var idx = 0;\n\t            var length = this.length;\n\t            var context = thisArg || window;\n\n\t            for (; idx < length; idx++) {\n\t                callback.call(context, this[idx], idx, this);\n\t            }\n\t        },\n\n\t        map: function(callback, thisArg) {\n\t            var idx = 0;\n\t            var result = [];\n\t            var length = this.length;\n\t            var context = thisArg || window;\n\n\t            for (; idx < length; idx++) {\n\t                result[idx] = callback.call(context, this[idx], idx, this);\n\t            }\n\n\t            return result;\n\t        },\n\n\t        reduce: function(callback) {\n\t            var idx = 0,\n\t                result,\n\t                length = this.length;\n\n\t            if (arguments.length == 2) {\n\t                result = arguments[1];\n\t            } else if (idx < length) {\n\t                result = this[idx++];\n\t            }\n\n\t            for (; idx < length; idx++) {\n\t                result = callback(result, this[idx], idx, this);\n\t            }\n\n\t            return result;\n\t        },\n\n\t        reduceRight: function(callback) {\n\t            var idx = this.length - 1,\n\t                result;\n\n\t            if (arguments.length == 2) {\n\t                result = arguments[1];\n\t            } else if (idx > 0) {\n\t                result = this[idx--];\n\t            }\n\n\t            for (; idx >= 0; idx--) {\n\t                result = callback(result, this[idx], idx, this);\n\t            }\n\n\t            return result;\n\t        },\n\n\t        filter: function(callback, thisArg) {\n\t            var idx = 0;\n\t            var result = [];\n\t            var item;\n\t            var length = this.length;\n\t            var context = thisArg || window;\n\n\t            for (; idx < length; idx++) {\n\t                item = this[idx];\n\t                if (callback.call(context, item, idx, this)) {\n\t                    result[result.length] = item;\n\t                }\n\t            }\n\n\t            return result;\n\t        },\n\n\t        find: function(callback, thisArg) {\n\t            var idx = 0;\n\t            var item;\n\t            var length = this.length;\n\t            var context = thisArg || window;\n\n\t            for (; idx < length; idx++) {\n\t                item = this[idx];\n\t                if (callback.call(context, item, idx, this)) {\n\t                    return item;\n\t                }\n\t            }\n\t        },\n\n\t        every: function(callback, thisArg) {\n\t            var idx = 0;\n\t            var item;\n\t            var length = this.length;\n\t            var context = thisArg || window;\n\n\t            for (; idx < length; idx++) {\n\t                item = this[idx];\n\t                if (!callback.call(context, item, idx, this)) {\n\t                    return false;\n\t                }\n\t            }\n\n\t            return true;\n\t        },\n\n\t        some: function(callback, thisArg) {\n\t            var idx = 0;\n\t            var item;\n\t            var length = this.length;\n\t            var context = thisArg || window;\n\n\t            for (; idx < length; idx++) {\n\t                item = this[idx];\n\t                if (callback.call(context, item, idx, this)) {\n\t                    return true;\n\t                }\n\t            }\n\n\t            return false;\n\t        },\n\n\t        // non-standard collection methods\n\t        remove: function(item) {\n\t            var idx = this.indexOf(item);\n\n\t            if (idx !== -1) {\n\t                this.splice(idx, 1);\n\t            }\n\t        },\n\n\t        empty: function() {\n\t            this.splice(0, this.length);\n\t        }\n\t    });\n\n\t    // Polyfill for Symbol.iterator\n\t    if (typeof Symbol !== \"undefined\" && Symbol.iterator && !ObservableArray.prototype[Symbol.iterator]) {\n\t        ObservableArray.prototype[Symbol.iterator] = [][Symbol.iterator];\n\t    }\n\n\t    var LazyObservableArray = ObservableArray.extend({\n\t        init: function (data, type, events) {\n\t            Observable.fn.init.call(this);\n\n\t            this.type = type || ObservableObject;\n\n\t            if (events) {\n\t                this._events = events;\n\t            }\n\n\t            for (var idx = 0; idx < data.length; idx++) {\n\t                this[idx] = data[idx];\n\t            }\n\n\t            this.length = idx;\n\t            this._parent = proxy(function() { return this; }, this);\n\t        },\n\t        at: function(index) {\n\t            var item = this[index];\n\n\t            if (!(item instanceof this.type)) {\n\t                item = this[index] = this.wrap(item, this._parent);\n\t            } else {\n\t                item.parent = this._parent;\n\t            }\n\n\t            return item;\n\t        }\n\t    });\n\n\t    function eventHandler(context, type, field, prefix) {\n\t        return function(e) {\n\t            var event = {}, key;\n\n\t            for (key in e) {\n\t                event[key] = e[key];\n\t            }\n\n\t            if (prefix) {\n\t                event.field = field + \".\" + e.field;\n\t            } else {\n\t                event.field = field;\n\t            }\n\n\t            if (type == CHANGE && context._notifyChange) {\n\t                context._notifyChange(event);\n\t            }\n\n\t            context.trigger(type, event);\n\t        };\n\t    }\n\n\t    var ObservableObject = Observable.extend({\n\t        init: function(value) {\n\t            var that = this,\n\t                member,\n\t                field,\n\t                parent = function() {\n\t                    return that;\n\t                };\n\n\t            Observable.fn.init.call(this);\n\n\t            this._handlers = {};\n\n\t            for (field in value) {\n\t                member = value[field];\n\n\t                if (typeof member === \"object\" && member && !member.getTime && field.charAt(0) != \"_\") {\n\t                    member = that.wrap(member, field, parent);\n\t                }\n\n\t                that[field] = member;\n\t            }\n\n\t            that.uid = kendo.guid();\n\t        },\n\n\t        shouldSerialize: function(field) {\n\t            return this.hasOwnProperty(field) && field !== \"_handlers\" && field !== \"_events\" && typeof this[field] !== FUNCTION && field !== \"uid\";\n\t        },\n\n\t        forEach: function(f) {\n\t            for (var i in this) {\n\t                if (this.shouldSerialize(i)) {\n\t                    f(this[i], i);\n\t                }\n\t            }\n\t        },\n\n\t        toJSON: function() {\n\t            var result = {}, value, field;\n\n\t            for (field in this) {\n\t                if (this.shouldSerialize(field)) {\n\t                    value = this[field];\n\n\t                    if (value instanceof ObservableObject || value instanceof ObservableArray) {\n\t                        value = value.toJSON();\n\t                    }\n\n\t                    result[field] = value;\n\t                }\n\t            }\n\n\t            return result;\n\t        },\n\n\t        get: function(field) {\n\t            var that = this, result;\n\n\t            that.trigger(GET, { field: field });\n\n\t            if (field === \"this\") {\n\t                result = that;\n\t            } else {\n\t                result = kendo.getter(field, true)(that);\n\t            }\n\n\t            return result;\n\t        },\n\n\t        _set: function(field, value) {\n\t            var that = this;\n\t            var composite = field.indexOf(\".\") >= 0;\n\n\t            if (composite) {\n\t                var paths = field.split(\".\"),\n\t                    path = \"\";\n\n\t                while (paths.length > 1) {\n\t                    path += paths.shift();\n\t                    var obj = kendo.getter(path, true)(that);\n\t                    if (obj instanceof ObservableObject) {\n\t                        obj.set(paths.join(\".\"), value);\n\t                        return composite;\n\t                    }\n\t                    path += \".\";\n\t                }\n\t            }\n\n\t            kendo.setter(field)(that, value);\n\n\t            return composite;\n\t        },\n\n\t        set: function(field, value) {\n\t            var that = this,\n\t                isSetPrevented = false,\n\t                composite = field.indexOf(\".\") >= 0,\n\t                current = kendo.getter(field, true)(that);\n\n\t            if (current !== value) {\n\t                if (current instanceof Observable && this._handlers[field]) {\n\t                    if (this._handlers[field].get) {\n\t                       current.unbind(GET, this._handlers[field].get);\n\t                    }\n\t                    current.unbind(CHANGE, this._handlers[field].change);\n\t                }\n\n\t                isSetPrevented = that.trigger(\"set\", { field: field, value: value });\n\n\t                if (!isSetPrevented) {\n\t                    if (!composite) {\n\t                        value = that.wrap(value, field, function() { return that; });\n\t                    }\n\t                    if (!that._set(field, value) || field.indexOf(\"(\") >= 0 || field.indexOf(\"[\") >= 0) {\n\t                        that.trigger(CHANGE, { field: field });\n\t                    }\n\t                }\n\t            }\n\n\t            return isSetPrevented;\n\t        },\n\n\t        parent: noop,\n\n\t        wrap: function(object, field, parent) {\n\t            var that = this;\n\t            var get;\n\t            var change;\n\t            var type = toString.call(object);\n\n\t            if (object != null && (type === \"[object Object]\" || type === \"[object Array]\")) {\n\t                var isObservableArray = object instanceof ObservableArray;\n\t                var isDataSource = object instanceof DataSource;\n\n\t                if (type === \"[object Object]\" && !isDataSource && !isObservableArray) {\n\t                    if (!(object instanceof ObservableObject)) {\n\t                        object = new ObservableObject(object);\n\t                    }\n\n\t                    get = eventHandler(that, GET, field, true);\n\t                    object.bind(GET, get);\n\t                    change = eventHandler(that, CHANGE, field, true);\n\t                    object.bind(CHANGE, change);\n\n\t                    that._handlers[field] = { get: get, change: change };\n\t                } else if (type === \"[object Array]\" || isObservableArray || isDataSource) {\n\t                    if (!isObservableArray && !isDataSource) {\n\t                        object = new ObservableArray(object);\n\t                    }\n\n\t                    change = eventHandler(that, CHANGE, field, false);\n\n\t                    object.bind(CHANGE, change);\n\n\t                    that._handlers[field] = { change: change };\n\t                }\n\n\t                object.parent = parent;\n\t            }\n\n\t            return object;\n\t        }\n\t    });\n\n\t    function equal(x, y) {\n\t        if (x === y) {\n\t            return true;\n\t        }\n\n\t        var xtype = $.type(x), ytype = $.type(y), field;\n\n\t        if (xtype !== ytype) {\n\t            return false;\n\t        }\n\n\t        if (xtype === \"date\") {\n\t            return x.getTime() === y.getTime();\n\t        }\n\n\t        if (xtype !== \"object\" && xtype !== \"array\") {\n\t            return false;\n\t        }\n\n\t        for (field in x) {\n\t            if (!equal(x[field], y[field])) {\n\t                return false;\n\t            }\n\t        }\n\n\t        return true;\n\t    }\n\n\t    var parsers = {\n\t        \"number\": function(value) {\n\t            if (typeof value === STRING && value.toLowerCase() === \"null\") {\n\t                return null;\n\t            }\n\t            return kendo.parseFloat(value);\n\t        },\n\n\t        \"date\": function(value) {\n\t            if (typeof value === STRING && value.toLowerCase() === \"null\") {\n\t                return null;\n\t            }\n\t            return kendo.parseDate(value);\n\t        },\n\n\t        \"boolean\": function(value) {\n\t            if (typeof value === STRING) {\n\t                if (value.toLowerCase() === \"null\") {\n\t                    return null;\n\t                } else {\n\t                    return value.toLowerCase() === \"true\";\n\t                }\n\t            }\n\t            return value != null ? !!value : value;\n\t        },\n\n\t        \"string\": function(value) {\n\t            if (typeof value === STRING && value.toLowerCase() === \"null\") {\n\t                return null;\n\t            }\n\t            return value != null ? (value + \"\") : value;\n\t        },\n\n\t        \"default\": function(value) {\n\t            return value;\n\t        }\n\t    };\n\n\t    var defaultValues = {\n\t        \"string\": \"\",\n\t        \"number\": 0,\n\t        \"date\": new Date(),\n\t        \"boolean\": false,\n\t        \"default\": \"\"\n\t    };\n\n\t    function getFieldByName(obj, name) {\n\t        var field,\n\t            fieldName;\n\n\t        for (fieldName in obj) {\n\t            field = obj[fieldName];\n\t            if (isPlainObject(field) && field.field && field.field === name) {\n\t                return field;\n\t            } else if (field === name) {\n\t                return field;\n\t            }\n\t        }\n\t        return null;\n\t    }\n\n\t    var Model = ObservableObject.extend({\n\t        init: function(data) {\n\t            var that = this;\n\n\t            if (!data || $.isEmptyObject(data)) {\n\t                data = $.extend({}, that.defaults, data);\n\n\t                if (that._initializers) {\n\t                    for (var idx = 0; idx < that._initializers.length; idx++) {\n\t                         var name = that._initializers[idx];\n\t                         data[name] = that.defaults[name]();\n\t                    }\n\t                }\n\t            }\n\n\t            ObservableObject.fn.init.call(that, data);\n\n\t            that.dirty = false;\n\t            that.dirtyFields = {};\n\n\t            if (that.idField) {\n\t                that.id = that.get(that.idField);\n\n\t                if (that.id === undefined) {\n\t                    that.id = that._defaultId;\n\t                }\n\t            }\n\t        },\n\n\t        shouldSerialize: function(field) {\n\t            return ObservableObject.fn.shouldSerialize.call(this, field) &&\n\t                field !== \"uid\" && !(this.idField !== \"id\" && field === \"id\") &&\n\t                field !== \"dirty\" &&  field !== \"dirtyFields\" && field !== \"_accessors\";\n\t        },\n\n\t        _parse: function(field, value) {\n\t            var that = this,\n\t                fieldName = field,\n\t                fields = (that.fields || {}),\n\t                parse;\n\n\t            field = fields[field];\n\t            if (!field) {\n\t                field = getFieldByName(fields, fieldName);\n\t            }\n\t            if (field) {\n\t                parse = field.parse;\n\t                if (!parse && field.type) {\n\t                    parse = parsers[field.type.toLowerCase()];\n\t                }\n\t            }\n\n\t            return parse ? parse(value) : value;\n\t        },\n\n\t        _notifyChange: function(e) {\n\t            var action = e.action;\n\n\t            if (action == \"add\" || action == \"remove\") {\n\t                this.dirty = true;\n\t                this.dirtyFields[e.field] = true;\n\t            }\n\t        },\n\n\t        editable: function(field) {\n\t            field = (this.fields || {})[field];\n\t            return field ? field.editable !== false : true;\n\t        },\n\n\t        set: function(field, value, initiator) {\n\t            var that = this;\n\t            var dirty = that.dirty;\n\n\t            if (that.editable(field)) {\n\t                value = that._parse(field, value);\n\n\t                if (!equal(value, that.get(field))) {\n\t                    that.dirty = true;\n\t                    that.dirtyFields[field] = true;\n\n\t                    if (ObservableObject.fn.set.call(that, field, value, initiator) && !dirty) {\n\t                        that.dirty = dirty;\n\n\t                        if (!that.dirty) {\n\t                            that.dirtyFields[field] = false;\n\t                        }\n\t                    }\n\t                } else {\n\t                    that.trigger(\"equalSet\", { field: field, value: value });\n\t                }\n\t            }\n\t        },\n\n\t        accept: function(data) {\n\t            var that = this,\n\t                parent = function() { return that; },\n\t                field;\n\n\t            for (field in data) {\n\t                var value = data[field];\n\n\t                if (field.charAt(0) != \"_\") {\n\t                    value = that.wrap(data[field], field, parent);\n\t                }\n\n\t                that._set(field, value);\n\t            }\n\n\t            if (that.idField) {\n\t                that.id = that.get(that.idField);\n\t            }\n\n\t            that.dirty = false;\n\t            that.dirtyFields = {};\n\t        },\n\n\t        isNew: function() {\n\t            return this.id === this._defaultId;\n\t        }\n\t    });\n\n\t    Model.define = function(base, options) {\n\t        if (options === undefined) {\n\t            options = base;\n\t            base = Model;\n\t        }\n\n\t        var model,\n\t            proto = extend({ defaults: {} }, options),\n\t            name,\n\t            field,\n\t            type,\n\t            value,\n\t            idx,\n\t            length,\n\t            fields = {},\n\t            originalName,\n\t            id = proto.id,\n\t            functionFields = [];\n\n\t        if (id) {\n\t            proto.idField = id;\n\t        }\n\n\t        if (proto.id) {\n\t            delete proto.id;\n\t        }\n\n\t        if (id) {\n\t            proto.defaults[id] = proto._defaultId = \"\";\n\t        }\n\n\t        if (toString.call(proto.fields) === \"[object Array]\") {\n\t            for (idx = 0, length = proto.fields.length; idx < length; idx++) {\n\t                field = proto.fields[idx];\n\t                if (typeof field === STRING) {\n\t                    fields[field] = {};\n\t                } else if (field.field) {\n\t                    fields[field.field] = field;\n\t                }\n\t            }\n\t            proto.fields = fields;\n\t        }\n\n\t        for (name in proto.fields) {\n\t            field = proto.fields[name];\n\t            type = field.type || \"default\";\n\t            value = null;\n\t            originalName = name;\n\n\t            name = typeof (field.field) === STRING ? field.field : name;\n\n\t            if (!field.nullable) {\n\t                value = proto.defaults[originalName !== name ? originalName : name] = field.defaultValue !== undefined ? field.defaultValue : defaultValues[type.toLowerCase()];\n\n\t                if (typeof value === \"function\") {\n\t                    functionFields.push(name);\n\t                }\n\t            }\n\n\t            if (options.id === name) {\n\t                proto._defaultId = value;\n\t            }\n\n\t            proto.defaults[originalName !== name ? originalName : name] = value;\n\n\t            field.parse = field.parse || parsers[type];\n\t        }\n\n\t        if (functionFields.length > 0) {\n\t            proto._initializers = functionFields;\n\t        }\n\n\t        model = base.extend(proto);\n\t        model.define = function(options) {\n\t            return Model.define(model, options);\n\t        };\n\n\t        if (proto.fields) {\n\t            model.fields = proto.fields;\n\t            model.idField = proto.idField;\n\t        }\n\n\t        return model;\n\t    };\n\n\t    var Comparer = {\n\t        selector: function(field) {\n\t            return isFunction(field) ? field : getter(field);\n\t        },\n\n\t        compare: function(field) {\n\t            var selector = this.selector(field);\n\t            return function (a, b) {\n\t                a = selector(a);\n\t                b = selector(b);\n\n\t                if (a == null && b == null) {\n\t                    return 0;\n\t                }\n\n\t                if (a == null) {\n\t                    return -1;\n\t                }\n\n\t                if (b == null) {\n\t                    return 1;\n\t                }\n\n\t                if (a.localeCompare) {\n\t                    return a.localeCompare(b);\n\t                }\n\n\t                return a > b ? 1 : (a < b ? -1 : 0);\n\t            };\n\t        },\n\n\t        create: function(sort) {\n\t            var compare = sort.compare || this.compare(sort.field);\n\n\t            if (sort.dir == \"desc\") {\n\t                return function(a, b) {\n\t                    return compare(b, a, true);\n\t                };\n\t            }\n\n\t            return compare;\n\t        },\n\n\t        combine: function(comparers) {\n\t            return function(a, b) {\n\t                var result = comparers[0](a, b),\n\t                    idx,\n\t                    length;\n\n\t                for (idx = 1, length = comparers.length; idx < length; idx ++) {\n\t                    result = result || comparers[idx](a, b);\n\t                }\n\n\t                return result;\n\t            };\n\t        }\n\t    };\n\n\t    var StableComparer = extend({}, Comparer, {\n\t        asc: function(field) {\n\t            var selector = this.selector(field);\n\t            return function (a, b) {\n\t                var valueA = selector(a);\n\t                var valueB = selector(b);\n\n\t                if (valueA && valueA.getTime && valueB && valueB.getTime) {\n\t                    valueA = valueA.getTime();\n\t                    valueB = valueB.getTime();\n\t                }\n\n\t                if (valueA === valueB) {\n\t                    return a.__position - b.__position;\n\t                }\n\n\t                if (valueA == null) {\n\t                    return -1;\n\t                }\n\n\t                if (valueB == null) {\n\t                    return 1;\n\t                }\n\n\t                if (valueA.localeCompare) {\n\t                    return valueA.localeCompare(valueB);\n\t                }\n\n\t                return valueA > valueB ? 1 : -1;\n\t            };\n\t        },\n\n\t        desc: function(field) {\n\t            var selector = this.selector(field);\n\t            return function (a, b) {\n\t                var valueA = selector(a);\n\t                var valueB = selector(b);\n\n\t                if (valueA && valueA.getTime && valueB && valueB.getTime) {\n\t                    valueA = valueA.getTime();\n\t                    valueB = valueB.getTime();\n\t                }\n\n\t                if (valueA === valueB) {\n\t                    return a.__position - b.__position;\n\t                }\n\n\t                if (valueA == null) {\n\t                    return 1;\n\t                }\n\n\t                if (valueB == null) {\n\t                    return -1;\n\t                }\n\n\t                if (valueB.localeCompare) {\n\t                    return valueB.localeCompare(valueA);\n\t                }\n\n\t                return valueA < valueB ? 1 : -1;\n\t            };\n\t        },\n\t        create: function(sort) {\n\t           return this[sort.dir](sort.field);\n\t        }\n\t    });\n\n\t    map = function (array, callback) {\n\t        var idx, length = array.length, result = new Array(length);\n\n\t        for (idx = 0; idx < length; idx++) {\n\t            result[idx] = callback(array[idx], idx, array);\n\t        }\n\n\t        return result;\n\t    };\n\n\t    var operators = (function(){\n\n\t        function quote(str) {\n\t            if (typeof str == \"string\") {\n\t                str = str.replace(/[\\r\\n]+/g, \"\");\n\t            }\n\t            return JSON.stringify(str);\n\t        }\n\n\t        function textOp(impl) {\n\t            return function(a, b, ignore) {\n\t                b += \"\";\n\t                if (ignore) {\n\t                    a = \"(\" + a + \" || '').toString().toLowerCase()\";\n\t                    b = b.toLowerCase();\n\t                }\n\t                return impl(a, quote(b), ignore);\n\t            };\n\t        }\n\n\t        function operator(op, a, b, ignore) {\n\t            if (b != null) {\n\t                if (typeof b === STRING) {\n\t                    var date = dateRegExp.exec(b);\n\t                    if (date) {\n\t                        b = new Date(+date[1]);\n\t                    } else if (ignore) {\n\t                        b = quote(b.toLowerCase());\n\t                        a = \"((\" + a + \" || '')+'').toLowerCase()\";\n\t                    } else {\n\t                        b = quote(b);\n\t                    }\n\t                }\n\n\t                if (b.getTime) {\n\t                    //b looks like a Date\n\t                    a = \"(\" + a + \"&&\" + a + \".getTime?\" + a + \".getTime():\" + a + \")\";\n\t                    b = b.getTime();\n\t                }\n\t            }\n\n\t            return a + \" \" + op + \" \" + b;\n\t        }\n\n\t        function getMatchRegexp(pattern) {\n\t            // take a pattern, as supported by Excel match filter, and\n\t            // convert it to the equivalent JS regular expression.\n\t            // Excel patterns support:\n\t            //\n\t            //   * - match any sequence of characters\n\t            //   ? - match a single character\n\t            //\n\t            // to match a literal * or ?, they must be prefixed by a tilde (~)\n\t            for (var rx = \"/^\", esc = false, i = 0; i < pattern.length; ++i) {\n\t                var ch = pattern.charAt(i);\n\t                if (esc) {\n\t                    rx += \"\\\\\" + ch;\n\t                } else if (ch == \"~\") {\n\t                    esc = true;\n\t                    continue;\n\t                } else if (ch == \"*\") {\n\t                    rx += \".*\";\n\t                } else if (ch == \"?\") {\n\t                    rx += \".\";\n\t                } else if (\".+^$()[]{}|\\\\/\\n\\r\\u2028\\u2029\\xA0\".indexOf(ch) >= 0) {\n\t                    rx += \"\\\\\" + ch;\n\t                } else {\n\t                    rx += ch;\n\t                }\n\t                esc = false;\n\t            }\n\t            return rx + \"$/\";\n\t        }\n\n\t        return {\n\t            quote: function(value) {\n\t                if (value && value.getTime) {\n\t                    return \"new Date(\" + value.getTime() + \")\";\n\t                }\n\t                return quote(value);\n\t            },\n\t            eq: function(a, b, ignore) {\n\t                return operator(\"==\", a, b, ignore);\n\t            },\n\t            neq: function(a, b, ignore) {\n\t                return operator(\"!=\", a, b, ignore);\n\t            },\n\t            gt: function(a, b, ignore) {\n\t                return operator(\">\", a, b, ignore);\n\t            },\n\t            gte: function(a, b, ignore) {\n\t                return operator(\">=\", a, b, ignore);\n\t            },\n\t            lt: function(a, b, ignore) {\n\t                return operator(\"<\", a, b, ignore);\n\t            },\n\t            lte: function(a, b, ignore) {\n\t                return operator(\"<=\", a, b, ignore);\n\t            },\n\t            startswith: textOp(function(a, b) {\n\t                return a + \".lastIndexOf(\" + b + \", 0) == 0\";\n\t            }),\n\t            doesnotstartwith: textOp(function(a, b) {\n\t                return a + \".lastIndexOf(\" + b + \", 0) == -1\";\n\t            }),\n\t            endswith: textOp(function(a, b) {\n\t                var n = b ? b.length - 2 : 0;\n\t                return a + \".indexOf(\" + b + \", \" + a + \".length - \" + n + \") >= 0\";\n\t            }),\n\t            doesnotendwith: textOp(function(a, b) {\n\t                var n = b ? b.length - 2 : 0;\n\t                return a + \".indexOf(\" + b + \", \" + a + \".length - \" + n + \") < 0\";\n\t            }),\n\t            contains: textOp(function(a, b) {\n\t                return a + \".indexOf(\" + b + \") >= 0\";\n\t            }),\n\t            doesnotcontain: textOp(function(a, b) {\n\t                return a + \".indexOf(\" + b + \") == -1\";\n\t            }),\n\t            matches: textOp(function(a, b){\n\t                b = b.substring(1, b.length - 1);\n\t                return getMatchRegexp(b) + \".test(\" + a + \")\";\n\t            }),\n\t            doesnotmatch: textOp(function(a, b){\n\t                b = b.substring(1, b.length - 1);\n\t                return \"!\" + getMatchRegexp(b) + \".test(\" + a + \")\";\n\t            }),\n\t            isempty: function(a) {\n\t                return a + \" === ''\";\n\t            },\n\t            isnotempty: function(a) {\n\t                return a + \" !== ''\";\n\t            },\n\t            isnull: function(a) {\n\t                return \"(\" + a + \" == null)\";\n\t            },\n\t            isnotnull: function(a) {\n\t                return \"(\" + a + \" != null)\";\n\t            },\n\t            isnullorempty: function(a) {\n\t                return \"(\" + a + \" === null) || (\" + a + \" === '')\";\n\t            },\n\t            isnotnullorempty: function(a) {\n\t                return \"(\" + a + \" !== null) && (\" + a + \" !== '')\";\n\t            }\n\t        };\n\t    })();\n\n\t    function Query(data) {\n\t        this.data = data || [];\n\t    }\n\n\t    Query.filterExpr = function(expression) {\n\t        var expressions = [],\n\t            logic = { and: \" && \", or: \" || \" },\n\t            idx,\n\t            length,\n\t            filter,\n\t            expr,\n\t            fieldFunctions = [],\n\t            operatorFunctions = [],\n\t            field,\n\t            operator,\n\t            filters = expression.filters;\n\n\t        for (idx = 0, length = filters.length; idx < length; idx++) {\n\t            filter = filters[idx];\n\t            field = filter.field;\n\t            operator = filter.operator;\n\n\t            if (filter.filters) {\n\t                expr = Query.filterExpr(filter);\n\t                //Nested function fields or operators - update their index e.g. __o[0] -> __o[1]\n\t                filter = expr.expression\n\t                .replace(/__o\\[(\\d+)\\]/g, function(match, index) {\n\t                    index = +index;\n\t                    return \"__o[\" + (operatorFunctions.length + index) + \"]\";\n\t                })\n\t                .replace(/__f\\[(\\d+)\\]/g, function(match, index) {\n\t                    index = +index;\n\t                    return \"__f[\" + (fieldFunctions.length + index) + \"]\";\n\t                });\n\n\t                operatorFunctions.push.apply(operatorFunctions, expr.operators);\n\t                fieldFunctions.push.apply(fieldFunctions, expr.fields);\n\t            } else {\n\t                if (typeof field === FUNCTION) {\n\t                    expr = \"__f[\" + fieldFunctions.length +\"](d)\";\n\t                    fieldFunctions.push(field);\n\t                } else {\n\t                    expr = kendo.expr(field);\n\t                }\n\n\t                if (typeof operator === FUNCTION) {\n\t                    filter = \"__o[\" + operatorFunctions.length + \"](\" + expr + \", \" + operators.quote(filter.value) + \")\";\n\t                    operatorFunctions.push(operator);\n\t                } else {\n\t                    filter = operators[(operator || \"eq\").toLowerCase()](expr, filter.value, filter.ignoreCase !== undefined? filter.ignoreCase : true);\n\t                }\n\t            }\n\n\t            expressions.push(filter);\n\t        }\n\n\t        return  { expression: \"(\" + expressions.join(logic[expression.logic]) + \")\", fields: fieldFunctions, operators: operatorFunctions };\n\t    };\n\n\t    function normalizeSort(field, dir) {\n\t        if (field) {\n\t            var descriptor = typeof field === STRING ? { field: field, dir: dir } : field,\n\t            descriptors = isArray(descriptor) ? descriptor : (descriptor !== undefined ? [descriptor] : []);\n\n\t            return grep(descriptors, function(d) { return !!d.dir; });\n\t        }\n\t    }\n\n\t    var operatorMap = {\n\t        \"==\": \"eq\",\n\t        equals: \"eq\",\n\t        isequalto: \"eq\",\n\t        equalto: \"eq\",\n\t        equal: \"eq\",\n\t        \"!=\": \"neq\",\n\t        ne: \"neq\",\n\t        notequals: \"neq\",\n\t        isnotequalto: \"neq\",\n\t        notequalto: \"neq\",\n\t        notequal: \"neq\",\n\t        \"<\": \"lt\",\n\t        islessthan: \"lt\",\n\t        lessthan: \"lt\",\n\t        less: \"lt\",\n\t        \"<=\": \"lte\",\n\t        le: \"lte\",\n\t        islessthanorequalto: \"lte\",\n\t        lessthanequal: \"lte\",\n\t        \">\": \"gt\",\n\t        isgreaterthan: \"gt\",\n\t        greaterthan: \"gt\",\n\t        greater: \"gt\",\n\t        \">=\": \"gte\",\n\t        isgreaterthanorequalto: \"gte\",\n\t        greaterthanequal: \"gte\",\n\t        ge: \"gte\",\n\t        notsubstringof: \"doesnotcontain\",\n\t        isnull: \"isnull\",\n\t        isempty: \"isempty\",\n\t        isnotempty: \"isnotempty\"\n\t    };\n\n\t    function normalizeOperator(expression) {\n\t        var idx,\n\t        length,\n\t        filter,\n\t        operator,\n\t        filters = expression.filters;\n\n\t        if (filters) {\n\t            for (idx = 0, length = filters.length; idx < length; idx++) {\n\t                filter = filters[idx];\n\t                operator = filter.operator;\n\n\t                if (operator && typeof operator === STRING) {\n\t                    filter.operator = operatorMap[operator.toLowerCase()] || operator;\n\t                }\n\n\t                normalizeOperator(filter);\n\t            }\n\t        }\n\t    }\n\n\t    function normalizeFilter(expression) {\n\t        if (expression && !isEmptyObject(expression)) {\n\t            if (isArray(expression) || !expression.filters) {\n\t                expression = {\n\t                    logic: \"and\",\n\t                    filters: isArray(expression) ? expression : [expression]\n\t                };\n\t            }\n\n\t            normalizeOperator(expression);\n\n\t            return expression;\n\t        }\n\t    }\n\n\t    Query.normalizeFilter = normalizeFilter;\n\n\t    function compareDescriptor(f1, f2) {\n\t        if (f1.logic || f2.logic) {\n\t            return false;\n\t        }\n\n\t        return f1.field === f2.field && f1.value === f2.value && f1.operator === f2.operator;\n\t    }\n\n\t    function normalizeDescriptor(filter) {\n\t        filter = filter || {};\n\n\t        if (isEmptyObject(filter)) {\n\t            return { logic: \"and\", filters: [] };\n\t        }\n\n\t        return normalizeFilter(filter);\n\t    }\n\n\t    function fieldComparer(a, b) {\n\t        if (b.logic || (a.field > b.field)) {\n\t            return 1;\n\t        } else if (a.field < b.field) {\n\t            return -1;\n\t        } else {\n\t            return 0;\n\t        }\n\t    }\n\n\t    function compareFilters(expr1, expr2) {\n\t        expr1 = normalizeDescriptor(expr1);\n\t        expr2 = normalizeDescriptor(expr2);\n\n\t        if (expr1.logic !== expr2.logic) {\n\t            return false;\n\t        }\n\n\t        var f1, f2;\n\t        var filters1 = (expr1.filters || []).slice();\n\t        var filters2 = (expr2.filters || []).slice();\n\n\t        if (filters1.length !== filters2.length) {\n\t            return false;\n\t        }\n\n\t        filters1 = filters1.sort(fieldComparer);\n\t        filters2 = filters2.sort(fieldComparer);\n\n\t        for (var idx = 0; idx < filters1.length; idx++) {\n\t            f1 = filters1[idx];\n\t            f2 = filters2[idx];\n\n\t            if (f1.logic && f2.logic) {\n\t                if (!compareFilters(f1, f2)) {\n\t                    return false;\n\t                }\n\t            } else if (!compareDescriptor(f1, f2)) {\n\t                return false;\n\t            }\n\t        }\n\n\t        return true;\n\t    }\n\n\t    Query.compareFilters = compareFilters;\n\n\t    function normalizeAggregate(expressions) {\n\t        return isArray(expressions) ? expressions : [expressions];\n\t    }\n\n\t    function normalizeGroup(field, dir) {\n\t        var descriptor = typeof field === STRING ? { field: field, dir: dir } : field,\n\t        descriptors = isArray(descriptor) ? descriptor : (descriptor !== undefined ? [descriptor] : []);\n\n\t        return map(descriptors, function(d) { return { field: d.field, dir: d.dir || \"asc\", aggregates: d.aggregates }; });\n\t    }\n\n\t    Query.prototype = {\n\t        toArray: function () {\n\t            return this.data;\n\t        },\n\t        range: function(index, count) {\n\t            return new Query(this.data.slice(index, index + count));\n\t        },\n\t        skip: function (count) {\n\t            return new Query(this.data.slice(count));\n\t        },\n\t        take: function (count) {\n\t            return new Query(this.data.slice(0, count));\n\t        },\n\t        select: function (selector) {\n\t            return new Query(map(this.data, selector));\n\t        },\n\t        order: function(selector, dir, inPlace) {\n\t            var sort = { dir: dir };\n\n\t            if (selector) {\n\t                if (selector.compare) {\n\t                    sort.compare = selector.compare;\n\t                } else {\n\t                    sort.field = selector;\n\t                }\n\t            }\n\n\t            if (inPlace) {\n\t                return new Query(this.data.sort(Comparer.create(sort)));\n\t            }\n\t            return new Query(this.data.slice(0).sort(Comparer.create(sort)));\n\t        },\n\t        orderBy: function(selector, inPlace) {\n\t            return this.order(selector, \"asc\", inPlace);\n\t        },\n\t        orderByDescending: function(selector, inPlace) {\n\t            return this.order(selector, \"desc\", inPlace);\n\t        },\n\t        sort: function(field, dir, comparer, inPlace) {\n\t            var idx,\n\t            length,\n\t            descriptors = normalizeSort(field, dir),\n\t            comparers = [];\n\n\t            comparer = comparer || Comparer;\n\n\t            if (descriptors.length) {\n\t                for (idx = 0, length = descriptors.length; idx < length; idx++) {\n\t                    comparers.push(comparer.create(descriptors[idx]));\n\t                }\n\n\t                return this.orderBy({ compare: comparer.combine(comparers) }, inPlace);\n\t            }\n\n\t            return this;\n\t        },\n\n\t        filter: function(expressions) {\n\t            var idx,\n\t            current,\n\t            length,\n\t            compiled,\n\t            predicate,\n\t            data = this.data,\n\t            fields,\n\t            operators,\n\t            result = [],\n\t            filter;\n\n\t            expressions = normalizeFilter(expressions);\n\n\t            if (!expressions || expressions.filters.length === 0) {\n\t                return this;\n\t            }\n\n\t            compiled = Query.filterExpr(expressions);\n\t            fields = compiled.fields;\n\t            operators = compiled.operators;\n\n\t            predicate = filter = new Function(\"d, __f, __o\", \"return \" + compiled.expression);\n\n\t            if (fields.length || operators.length) {\n\t                filter = function(d) {\n\t                    return predicate(d, fields, operators);\n\t                };\n\t            }\n\n\n\t            for (idx = 0, length = data.length; idx < length; idx++) {\n\t                current = data[idx];\n\n\t                if (filter(current)) {\n\t                    result.push(current);\n\t                }\n\t            }\n\n\t            return new Query(result);\n\t        },\n\n\t        group: function(descriptors, allData) {\n\t            descriptors =  normalizeGroup(descriptors || []);\n\t            allData = allData || this.data;\n\n\t            var that = this,\n\t            result = new Query(that.data),\n\t            descriptor;\n\n\t            if (descriptors.length > 0) {\n\t                descriptor = descriptors[0];\n\t                result = result.groupBy(descriptor).select(function(group) {\n\t                    var data = new Query(allData).filter([ { field: group.field, operator: \"eq\", value: group.value, ignoreCase: false } ]);\n\t                    return {\n\t                        field: group.field,\n\t                        value: group.value,\n\t                        items: descriptors.length > 1 ? new Query(group.items).group(descriptors.slice(1), data.toArray()).toArray() : group.items,\n\t                        hasSubgroups: descriptors.length > 1,\n\t                        aggregates: data.aggregate(descriptor.aggregates)\n\t                    };\n\t                });\n\t            }\n\t            return result;\n\t        },\n\n\t        groupBy: function(descriptor) {\n\t            if (isEmptyObject(descriptor) || !this.data.length) {\n\t                return new Query([]);\n\t            }\n\n\t            var field = descriptor.field,\n\t                sorted = this._sortForGrouping(field, descriptor.dir || \"asc\"),\n\t                accessor = kendo.accessor(field),\n\t                item,\n\t                groupValue = accessor.get(sorted[0], field),\n\t                group = {\n\t                    field: field,\n\t                    value: groupValue,\n\t                    items: []\n\t                },\n\t                currentValue,\n\t                idx,\n\t                len,\n\t                result = [group];\n\n\t            for(idx = 0, len = sorted.length; idx < len; idx++) {\n\t                item = sorted[idx];\n\t                currentValue = accessor.get(item, field);\n\t                if(!groupValueComparer(groupValue, currentValue)) {\n\t                    groupValue = currentValue;\n\t                    group = {\n\t                        field: field,\n\t                        value: groupValue,\n\t                        items: []\n\t                    };\n\t                    result.push(group);\n\t                }\n\t                group.items.push(item);\n\t            }\n\t            return new Query(result);\n\t        },\n\n\t        _sortForGrouping: function(field, dir) {\n\t            var idx, length,\n\t                data = this.data;\n\n\t            if (!stableSort) {\n\t                for (idx = 0, length = data.length; idx < length; idx++) {\n\t                    data[idx].__position = idx;\n\t                }\n\n\t                data = new Query(data).sort(field, dir, StableComparer).toArray();\n\n\t                for (idx = 0, length = data.length; idx < length; idx++) {\n\t                    delete data[idx].__position;\n\t                }\n\t                return data;\n\t            }\n\t            return this.sort(field, dir).toArray();\n\t        },\n\n\t        aggregate: function (aggregates) {\n\t            var idx,\n\t                len,\n\t                result = {},\n\t                state = {};\n\n\t            if (aggregates && aggregates.length) {\n\t                for(idx = 0, len = this.data.length; idx < len; idx++) {\n\t                    calculateAggregate(result, aggregates, this.data[idx], idx, len, state);\n\t                }\n\t            }\n\t            return result;\n\t        }\n\t    };\n\n\t    function groupValueComparer(a, b) {\n\t        if (a && a.getTime && b && b.getTime) {\n\t            return a.getTime() === b.getTime();\n\t        }\n\t        return a === b;\n\t    }\n\n\t    function calculateAggregate(accumulator, aggregates, item, index, length, state) {\n\t        aggregates = aggregates || [];\n\t        var idx,\n\t            aggr,\n\t            functionName,\n\t            len = aggregates.length;\n\n\t        for (idx = 0; idx < len; idx++) {\n\t            aggr = aggregates[idx];\n\t            functionName = aggr.aggregate;\n\t            var field = aggr.field;\n\t            accumulator[field] = accumulator[field] || {};\n\t            state[field] = state[field] || {};\n\t            state[field][functionName] = state[field][functionName] || {};\n\t            accumulator[field][functionName] = functions[functionName.toLowerCase()](accumulator[field][functionName], item, kendo.accessor(field), index, length, state[field][functionName]);\n\t        }\n\t    }\n\n\t    var functions = {\n\t        sum: function(accumulator, item, accessor) {\n\t            var value = accessor.get(item);\n\n\t            if (!isNumber(accumulator)) {\n\t                accumulator = value;\n\t            } else if (isNumber(value)) {\n\t                accumulator += value;\n\t            }\n\n\t            return accumulator;\n\t        },\n\t        count: function(accumulator) {\n\t            return (accumulator || 0) + 1;\n\t        },\n\t        average: function(accumulator, item, accessor, index, length, state) {\n\t            var value = accessor.get(item);\n\n\t            if (state.count === undefined) {\n\t                state.count = 0;\n\t            }\n\n\t            if (!isNumber(accumulator)) {\n\t                accumulator = value;\n\t            } else if (isNumber(value)) {\n\t                accumulator += value;\n\t            }\n\n\t            if (isNumber(value)) {\n\t                state.count++;\n\t            }\n\n\t            if(index == length - 1 && isNumber(accumulator)) {\n\t                accumulator = accumulator / state.count;\n\t            }\n\t            return accumulator;\n\t        },\n\t        max: function(accumulator, item, accessor) {\n\t            var value = accessor.get(item);\n\n\t            if (!isNumber(accumulator) && !isDate(accumulator)) {\n\t                accumulator = value;\n\t            }\n\n\t            if(accumulator < value && (isNumber(value) || isDate(value))) {\n\t                accumulator = value;\n\t            }\n\t            return accumulator;\n\t        },\n\t        min: function(accumulator, item, accessor) {\n\t            var value = accessor.get(item);\n\n\t            if (!isNumber(accumulator) && !isDate(accumulator)) {\n\t                accumulator = value;\n\t            }\n\n\t            if(accumulator > value && (isNumber(value) || isDate(value))) {\n\t                accumulator = value;\n\t            }\n\t            return accumulator;\n\t        }\n\t    };\n\n\t    function isNumber(val) {\n\t        return typeof val === \"number\" && !isNaN(val);\n\t    }\n\n\t    function isDate(val) {\n\t        return val && val.getTime;\n\t    }\n\n\t    function toJSON(array) {\n\t        var idx, length = array.length, result = new Array(length);\n\n\t        for (idx = 0; idx < length; idx++) {\n\t            result[idx] = array[idx].toJSON();\n\t        }\n\n\t        return result;\n\t    }\n\n\t    Query.normalizeGroup = normalizeGroup;\n\t    Query.normalizeSort = normalizeSort;\n\n\t    Query.process = function(data, options, inPlace) {\n\t        options = options || {};\n\n\t        var query = new Query(data),\n\t            group = options.group,\n\t            sort = normalizeGroup(group || []).concat(normalizeSort(options.sort || [])),\n\t            total,\n\t            filterCallback = options.filterCallback,\n\t            filter = options.filter,\n\t            skip = options.skip,\n\t            take = options.take;\n\n\t        if (sort && inPlace) {\n\t            query = query.sort(sort, undefined, undefined, inPlace);\n\t        }\n\n\t        if (filter) {\n\t            query = query.filter(filter);\n\n\t            if (filterCallback) {\n\t                query = filterCallback(query);\n\t            }\n\n\t            total = query.toArray().length;\n\t        }\n\n\t        if (sort && !inPlace) {\n\t            query = query.sort(sort);\n\n\t            if (group) {\n\t                data = query.toArray();\n\t            }\n\t        }\n\n\t        if (skip !== undefined && take !== undefined) {\n\t            query = query.range(skip, take);\n\t        }\n\n\t        if (group) {\n\t            query = query.group(group, data);\n\t        }\n\n\t        return {\n\t            total: total,\n\t            data: query.toArray()\n\t        };\n\t    };\n\n\t    var LocalTransport = Class.extend({\n\t        init: function(options) {\n\t            this.data = options.data;\n\t        },\n\n\t        read: function(options) {\n\t            options.success(this.data);\n\t        },\n\t        update: function(options) {\n\t            options.success(options.data);\n\t        },\n\t        create: function(options) {\n\t            options.success(options.data);\n\t        },\n\t        destroy: function(options) {\n\t            options.success(options.data);\n\t        }\n\t    });\n\n\t    var RemoteTransport = Class.extend( {\n\t        init: function(options) {\n\t            var that = this, parameterMap;\n\n\t            options = that.options = extend({}, that.options, options);\n\n\t            each(crud, function(index, type) {\n\t                if (typeof options[type] === STRING) {\n\t                    options[type] = {\n\t                        url: options[type]\n\t                    };\n\t                }\n\t            });\n\n\t            that.cache = options.cache? Cache.create(options.cache) : {\n\t                find: noop,\n\t                add: noop\n\t            };\n\n\t            parameterMap = options.parameterMap;\n\n\t            if (options.submit) {\n\t                that.submit = options.submit;\n\t            }\n\n\t            if (isFunction(options.push)) {\n\t                that.push = options.push;\n\t            }\n\n\t            if (!that.push) {\n\t                that.push = identity;\n\t            }\n\n\t            that.parameterMap = isFunction(parameterMap) ? parameterMap : function(options) {\n\t                var result = {};\n\n\t                each(options, function(option, value) {\n\t                    if (option in parameterMap) {\n\t                        option = parameterMap[option];\n\t                        if (isPlainObject(option)) {\n\t                            value = option.value(value);\n\t                            option = option.key;\n\t                        }\n\t                    }\n\n\t                    result[option] = value;\n\t                });\n\n\t                return result;\n\t            };\n\t        },\n\n\t        options: {\n\t            parameterMap: identity\n\t        },\n\n\t        create: function(options) {\n\t            return ajax(this.setup(options, CREATE));\n\t        },\n\n\t        read: function(options) {\n\t            var that = this,\n\t                success,\n\t                error,\n\t                result,\n\t                cache = that.cache;\n\n\t            options = that.setup(options, READ);\n\n\t            success = options.success || noop;\n\t            error = options.error || noop;\n\n\t            result = cache.find(options.data);\n\n\t            if(result !== undefined) {\n\t                success(result);\n\t            } else {\n\t                options.success = function(result) {\n\t                    cache.add(options.data, result);\n\n\t                    success(result);\n\t                };\n\n\t                $.ajax(options);\n\t            }\n\t        },\n\n\t        update: function(options) {\n\t            return ajax(this.setup(options, UPDATE));\n\t        },\n\n\t        destroy: function(options) {\n\t            return ajax(this.setup(options, DESTROY));\n\t        },\n\n\t        setup: function(options, type) {\n\t            options = options || {};\n\n\t            var that = this,\n\t                parameters,\n\t                operation = that.options[type],\n\t                data = isFunction(operation.data) ? operation.data(options.data) : operation.data;\n\n\t            options = extend(true, {}, operation, options);\n\t            parameters = extend(true, {}, data, options.data);\n\n\t            options.data = that.parameterMap(parameters, type);\n\n\t            if (isFunction(options.url)) {\n\t                options.url = options.url(parameters);\n\t            }\n\n\t            return options;\n\t        }\n\t    });\n\n\t    var Cache = Class.extend({\n\t        init: function() {\n\t            this._store = {};\n\t        },\n\t        add: function(key, data) {\n\t            if(key !== undefined) {\n\t                this._store[stringify(key)] = data;\n\t            }\n\t        },\n\t        find: function(key) {\n\t            return this._store[stringify(key)];\n\t        },\n\t        clear: function() {\n\t            this._store = {};\n\t        },\n\t        remove: function(key) {\n\t            delete this._store[stringify(key)];\n\t        }\n\t    });\n\n\t    Cache.create = function(options) {\n\t        var store = {\n\t            \"inmemory\": function() { return new Cache(); }\n\t        };\n\n\t        if (isPlainObject(options) && isFunction(options.find)) {\n\t            return options;\n\t        }\n\n\t        if (options === true) {\n\t            return new Cache();\n\t        }\n\n\t        return store[options]();\n\t    };\n\n\t    function serializeRecords(data, getters, modelInstance, originalFieldNames, fieldNames) {\n\t        var record,\n\t            getter,\n\t            originalName,\n\t            idx,\n\t            setters = {},\n\t            length;\n\n\t        for (idx = 0, length = data.length; idx < length; idx++) {\n\t            record = data[idx];\n\t            for (getter in getters) {\n\t                originalName = fieldNames[getter];\n\n\t                if (originalName && originalName !== getter) {\n\t                    if (!setters[originalName]) {\n\t                        setters[originalName] = kendo.setter(originalName);\n\t                    }\n\t                    setters[originalName](record, getters[getter](record));\n\t                    delete record[getter];\n\t                }\n\t            }\n\t        }\n\t    }\n\n\t    function convertRecords(data, getters, modelInstance, originalFieldNames, fieldNames) {\n\t        var record,\n\t            getter,\n\t            originalName,\n\t            idx,\n\t            length;\n\n\t        for (idx = 0, length = data.length; idx < length; idx++) {\n\t            record = data[idx];\n\t            for (getter in getters) {\n\t                record[getter] = modelInstance._parse(getter, getters[getter](record));\n\n\t                originalName = fieldNames[getter];\n\t                if (originalName && originalName !== getter) {\n\t                    delete record[originalName];\n\t                }\n\t            }\n\t        }\n\t    }\n\n\t    function convertGroup(data, getters, modelInstance, originalFieldNames, fieldNames) {\n\t        var record,\n\t            idx,\n\t            fieldName,\n\t            length;\n\n\t        for (idx = 0, length = data.length; idx < length; idx++) {\n\t            record = data[idx];\n\n\t            fieldName = originalFieldNames[record.field];\n\t            if (fieldName && fieldName != record.field) {\n\t                record.field = fieldName;\n\t            }\n\n\t            record.value = modelInstance._parse(record.field, record.value);\n\n\t            if (record.hasSubgroups) {\n\t                convertGroup(record.items, getters, modelInstance, originalFieldNames, fieldNames);\n\t            } else {\n\t                convertRecords(record.items, getters, modelInstance, originalFieldNames, fieldNames);\n\t            }\n\t        }\n\t    }\n\n\t    function wrapDataAccess(originalFunction, model, converter, getters, originalFieldNames, fieldNames) {\n\t        return function(data) {\n\t            data = originalFunction(data);\n\n\t            return wrapDataAccessBase(model, converter, getters, originalFieldNames, fieldNames)(data);\n\t        };\n\t    }\n\n\t    function wrapDataAccessBase(model, converter, getters, originalFieldNames, fieldNames) {\n\t        return function(data) {\n\n\t            if (data && !isEmptyObject(getters)) {\n\t                if (toString.call(data) !== \"[object Array]\" && !(data instanceof ObservableArray)) {\n\t                    data = [data];\n\t                }\n\n\t                converter(data, getters, new model(), originalFieldNames, fieldNames);\n\t            }\n\n\t            return data || [];\n\t        };\n\t    }\n\n\t    var DataReader = Class.extend({\n\t        init: function(schema) {\n\t            var that = this, member, get, model, base;\n\n\t            schema = schema || {};\n\n\t            for (member in schema) {\n\t                get = schema[member];\n\n\t                that[member] = typeof get === STRING ? getter(get) : get;\n\t            }\n\n\t            base = schema.modelBase || Model;\n\n\t            if (isPlainObject(that.model)) {\n\t                that.model = model = base.define(that.model);\n\t            }\n\n\t            var dataFunction = proxy(that.data, that);\n\n\t            that._dataAccessFunction = dataFunction;\n\n\t            if (that.model) {\n\t                var groupsFunction = proxy(that.groups, that),\n\t                    serializeFunction = proxy(that.serialize, that),\n\t                    originalFieldNames = {},\n\t                    getters = {},\n\t                    serializeGetters = {},\n\t                    fieldNames = {},\n\t                    shouldSerialize = false,\n\t                    fieldName,\n\t                    name;\n\n\t                model = that.model;\n\n\t                if (model.fields) {\n\t                    each(model.fields, function(field, value) {\n\t                        var fromName;\n\n\t                        fieldName = field;\n\n\t                        if (isPlainObject(value) && value.field) {\n\t                            fieldName = value.field;\n\t                        } else if (typeof value === STRING) {\n\t                            fieldName = value;\n\t                        }\n\n\t                        if (isPlainObject(value) && value.from) {\n\t                            fromName = value.from;\n\t                        }\n\n\t                        shouldSerialize = shouldSerialize || (fromName && fromName !== field) || fieldName !== field;\n\t                        name = fromName || fieldName;\n\t                        getters[field] = name.indexOf(\".\") !== -1 ? getter(name, true) : getter(name);\n\t                        serializeGetters[field] = getter(field);\n\t                        originalFieldNames[fromName || fieldName] = field;\n\t                        fieldNames[field] = fromName || fieldName;\n\t                    });\n\n\t                    if (!schema.serialize && shouldSerialize) {\n\t                        that.serialize = wrapDataAccess(serializeFunction, model, serializeRecords, serializeGetters, originalFieldNames, fieldNames);\n\t                    }\n\t                }\n\n\t                that._dataAccessFunction = dataFunction;\n\t                that._wrapDataAccessBase = wrapDataAccessBase(model, convertRecords, getters, originalFieldNames, fieldNames);\n\t                that.data = wrapDataAccess(dataFunction, model, convertRecords, getters, originalFieldNames, fieldNames);\n\t                that.groups = wrapDataAccess(groupsFunction, model, convertGroup, getters, originalFieldNames, fieldNames);\n\t            }\n\t        },\n\t        errors: function(data) {\n\t            return data ? data.errors : null;\n\t        },\n\t        parse: identity,\n\t        data: identity,\n\t        total: function(data) {\n\t            return data.length;\n\t        },\n\t        groups: identity,\n\t        aggregates: function() {\n\t            return {};\n\t        },\n\t        serialize: function(data) {\n\t            return data;\n\t        }\n\t    });\n\n\t    function fillLastGroup(originalGroup, newGroup) {\n\t        var currOriginal;\n\t        var currentNew;\n\n\t        if (newGroup.items && newGroup.items.length) {\n\t            for (var i = 0; i < newGroup.items.length; i++) {\n\t                currOriginal = originalGroup.items[i];\n\t                currentNew = newGroup.items[i];\n\t                if (currOriginal && currentNew) {\n\t                    if (currOriginal.hasSubgroups) {\n\t                        fillLastGroup(currOriginal, currentNew);\n\t                    } else if (currOriginal.field && currOriginal.value == currentNew.value) {\n\t                        currOriginal.items.push.apply(currOriginal.items, currentNew.items);\n\t                    } else {\n\t                        originalGroup.items.push.apply(originalGroup.items, [currentNew]);\n\t                    }\n\t                } else if (currentNew) {\n\t                    originalGroup.items.push.apply(originalGroup.items, [currentNew]);\n\t                }\n\t            }\n\t        }\n\t    }\n\t    function mergeGroups(target, dest, skip, take) {\n\t        var group,\n\t            idx = 0,\n\t            items;\n\n\t        while (dest.length && take) {\n\t            group = dest[idx];\n\t            items = group.items;\n\n\t            var length = items.length;\n\n\t            if (target && target.field === group.field && target.value === group.value) {\n\t                if (target.hasSubgroups && target.items.length) {\n\t                    mergeGroups(target.items[target.items.length - 1], group.items, skip, take);\n\t                } else {\n\t                    items = items.slice(skip, skip + take);\n\t                    target.items = target.items.concat(items);\n\t                }\n\t                dest.splice(idx--, 1);\n\t            } else if (group.hasSubgroups && items.length) {\n\t                mergeGroups(group, items, skip, take);\n\t                if (!group.items.length) {\n\t                    dest.splice(idx--, 1);\n\t                }\n\t            } else {\n\t                items = items.slice(skip, skip + take);\n\t                group.items = items;\n\n\t                if (!group.items.length) {\n\t                    dest.splice(idx--, 1);\n\t                }\n\t            }\n\n\t            if (items.length === 0) {\n\t                skip -= length;\n\t            } else {\n\t                skip = 0;\n\t                take -= items.length;\n\t            }\n\n\t            if (++idx >= dest.length) {\n\t                break;\n\t            }\n\t        }\n\n\t        if (idx < dest.length) {\n\t            dest.splice(idx, dest.length - idx);\n\t        }\n\t    }\n\n\t    function flattenGroups(data) {\n\t        var idx,\n\t            result = [],\n\t            length,\n\t            items,\n\t            itemIndex;\n\n\t        for (idx = 0, length = data.length; idx < length; idx++) {\n\t            var group = data.at(idx);\n\t            if (group.hasSubgroups) {\n\t                result = result.concat(flattenGroups(group.items));\n\t            } else {\n\t                items = group.items;\n\t                for (itemIndex = 0; itemIndex < items.length; itemIndex++) {\n\t                    result.push(items.at(itemIndex));\n\t                }\n\t            }\n\t        }\n\t        return result;\n\t    }\n\n\t    function wrapGroupItems(data, model) {\n\t        var idx, length, group;\n\t        if (model) {\n\t            for (idx = 0, length = data.length; idx < length; idx++) {\n\t                group = data.at(idx);\n\n\t                if (group.hasSubgroups) {\n\t                    wrapGroupItems(group.items, model);\n\t                } else {\n\t                    group.items = new LazyObservableArray(group.items, model, group.items._events);\n\t                }\n\t            }\n\t        }\n\t    }\n\n\t    function eachGroupItems(data, func) {\n\t        for (var idx = 0; idx < data.length; idx++) {\n\t            if (data[idx].hasSubgroups) {\n\t                if (eachGroupItems(data[idx].items, func)) {\n\t                    return true;\n\t                }\n\t            } else if (func(data[idx].items, data[idx])) {\n\t                return true;\n\t            }\n\t        }\n\t    }\n\n\t    function replaceInRanges(ranges, data, item, observable) {\n\t        for (var idx = 0; idx < ranges.length; idx++) {\n\t            if (ranges[idx].data === data) {\n\t                break;\n\t            }\n\t            if (replaceInRange(ranges[idx].data, item, observable)) {\n\t                break;\n\t            }\n\t        }\n\t    }\n\n\t    function replaceInRange(items, item, observable) {\n\t        for (var idx = 0, length = items.length; idx < length; idx++) {\n\t            if (items[idx] && items[idx].hasSubgroups) {\n\t                return replaceInRange(items[idx].items, item, observable);\n\t            } else if (items[idx] === item || items[idx] === observable) {\n\t               items[idx] = observable;\n\t               return true;\n\t            }\n\t        }\n\t    }\n\n\t    function replaceWithObservable(view, data, ranges, type, serverGrouping) {\n\t        for (var viewIndex = 0, length = view.length; viewIndex < length; viewIndex++) {\n\t            var item = view[viewIndex];\n\n\t            if (!item || item instanceof type) {\n\t                continue;\n\t            }\n\n\t            if (item.hasSubgroups !== undefined && !serverGrouping) {\n\t                replaceWithObservable(item.items, data, ranges, type, serverGrouping);\n\t            } else {\n\t                for (var idx = 0; idx < data.length; idx++) {\n\t                    if (data[idx] === item) {\n\t                        view[viewIndex] = data.at(idx);\n\t                        replaceInRanges(ranges, data, item, view[viewIndex]);\n\t                        break;\n\t                    }\n\t                }\n\t            }\n\t        }\n\t    }\n\n\t    function removeModel(data, model) {\n\t        var length = data.length;\n\t        var dataItem;\n\t        var idx;\n\n\t        for (idx = 0; idx < length; idx++) {\n\t            dataItem = data[idx];\n\n\t            if (dataItem.uid && dataItem.uid == model.uid) {\n\t                data.splice(idx, 1);\n\t                return dataItem;\n\t            }\n\t        }\n\t    }\n\n\t    function indexOfPristineModel(data, model) {\n\t        if (model) {\n\t            return indexOf(data, function(item) {\n\t                return (item.uid && item.uid == model.uid) || (item[model.idField] === model.id && model.id !== model._defaultId);\n\t            });\n\t        }\n\t        return -1;\n\t    }\n\n\t    function indexOfModel(data, model) {\n\t        if (model) {\n\t            return indexOf(data, function(item) {\n\t                return item.uid == model.uid;\n\t            });\n\t        }\n\t        return -1;\n\t    }\n\n\t    function indexOf(data, comparer) {\n\t        var idx, length;\n\n\t        for (idx = 0, length = data.length; idx < length; idx++) {\n\t            if (comparer(data[idx])) {\n\t                return idx;\n\t            }\n\t        }\n\n\t        return -1;\n\t    }\n\n\t    function fieldNameFromModel(fields, name) {\n\t        if (fields && !isEmptyObject(fields)) {\n\t            var descriptor = fields[name];\n\t            var fieldName;\n\t            if (isPlainObject(descriptor)) {\n\t                fieldName = descriptor.from || descriptor.field || name;\n\t            } else {\n\t                fieldName = fields[name] || name;\n\t            }\n\n\t            if (isFunction(fieldName)) {\n\t                return name;\n\t            }\n\n\t            return fieldName;\n\t        }\n\t        return name;\n\t    }\n\n\t    function convertFilterDescriptorsField(descriptor, model) {\n\t        var idx,\n\t            length,\n\t            target = {};\n\n\t        for (var field in descriptor) {\n\t            if (field !== \"filters\") {\n\t                target[field] = descriptor[field];\n\t            }\n\t        }\n\n\t        if (descriptor.filters) {\n\t            target.filters = [];\n\t            for (idx = 0, length = descriptor.filters.length; idx < length; idx++) {\n\t                target.filters[idx] = convertFilterDescriptorsField(descriptor.filters[idx], model);\n\t            }\n\t        } else {\n\t            target.field = fieldNameFromModel(model.fields, target.field);\n\t        }\n\t        return target;\n\t    }\n\n\t    function convertDescriptorsField(descriptors, model) {\n\t        var idx,\n\t            length,\n\t            result = [],\n\t            target,\n\t            descriptor;\n\n\t        for (idx = 0, length = descriptors.length; idx < length; idx ++) {\n\t            target = {};\n\n\t            descriptor = descriptors[idx];\n\n\t            for (var field in descriptor) {\n\t                target[field] = descriptor[field];\n\t            }\n\n\t            target.field = fieldNameFromModel(model.fields, target.field);\n\n\t            if (target.aggregates && isArray(target.aggregates)) {\n\t                target.aggregates = convertDescriptorsField(target.aggregates, model);\n\t            }\n\t            result.push(target);\n\t        }\n\t        return result;\n\t    }\n\n\t    var DataSource = Observable.extend({\n\t        init: function(options) {\n\t            var that = this, model, data;\n\n\t            if (options) {\n\t                data = options.data;\n\t            }\n\n\t            options = that.options = extend({}, that.options, options);\n\n\t            that._map = {};\n\t            that._prefetch = {};\n\t            that._data = [];\n\t            that._pristineData = [];\n\t            that._ranges = [];\n\t            that._view = [];\n\t            that._pristineTotal = 0;\n\t            that._destroyed = [];\n\t            that._pageSize = options.pageSize;\n\t            that._page = options.page  || (options.pageSize ? 1 : undefined);\n\t            that._sort = normalizeSort(options.sort);\n\t            that._filter = normalizeFilter(options.filter);\n\t            that._group = normalizeGroup(options.group);\n\t            that._aggregate = options.aggregate;\n\t            that._total = options.total;\n\n\t            that._shouldDetachObservableParents = true;\n\n\t            Observable.fn.init.call(that);\n\n\t            that.transport = Transport.create(options, data, that);\n\n\t            if (isFunction(that.transport.push)) {\n\t                that.transport.push({\n\t                    pushCreate: proxy(that._pushCreate, that),\n\t                    pushUpdate: proxy(that._pushUpdate, that),\n\t                    pushDestroy: proxy(that._pushDestroy, that)\n\t                });\n\t            }\n\n\t            if (options.offlineStorage != null) {\n\t                if (typeof options.offlineStorage == \"string\") {\n\t                    var key = options.offlineStorage;\n\n\t                    that._storage = {\n\t                        getItem: function() {\n\t                            return JSON.parse(localStorage.getItem(key));\n\t                        },\n\t                        setItem: function(item) {\n\t                            localStorage.setItem(key, stringify(that.reader.serialize(item)));\n\t                        }\n\t                    };\n\t                } else {\n\t                    that._storage = options.offlineStorage;\n\t                }\n\t            }\n\n\t            that.reader = new kendo.data.readers[options.schema.type || \"json\" ](options.schema);\n\n\t            model = that.reader.model || {};\n\n\t            that._detachObservableParents();\n\n\t            that._data = that._observe(that._data);\n\t            that._online = true;\n\n\t            that.bind([\"push\", ERROR, CHANGE, REQUESTSTART, SYNC, REQUESTEND, PROGRESS], options);\n\t        },\n\n\t        options: {\n\t            data: null,\n\t            schema: {\n\t               modelBase: Model\n\t            },\n\t            offlineStorage: null,\n\t            serverSorting: false,\n\t            serverPaging: false,\n\t            serverFiltering: false,\n\t            serverGrouping: false,\n\t            serverAggregates: false,\n\t            batch: false,\n\t            inPlaceSort: false\n\t        },\n\n\t        clone: function() {\n\t            return this;\n\t        },\n\n\t        online: function(value) {\n\t            if (value !== undefined) {\n\t                if (this._online != value) {\n\t                    this._online = value;\n\n\t                    if (value) {\n\t                        return this.sync();\n\t                    }\n\t                }\n\n\t                return $.Deferred().resolve().promise();\n\t            } else {\n\t                return this._online;\n\t            }\n\t        },\n\n\t        offlineData: function(state) {\n\t            if (this.options.offlineStorage == null) {\n\t                return null;\n\t            }\n\n\t            if (state !== undefined) {\n\t                return this._storage.setItem(state);\n\t            }\n\n\t            return this._storage.getItem() || [];\n\t        },\n\n\t        _isServerGrouped: function() {\n\t            var group = this.group() || [];\n\n\t            return this.options.serverGrouping && group.length;\n\t        },\n\n\t        _pushCreate: function(result) {\n\t            this._push(result, \"pushCreate\");\n\t        },\n\n\t        _pushUpdate: function(result) {\n\t            this._push(result, \"pushUpdate\");\n\t        },\n\n\t        _pushDestroy: function(result) {\n\t            this._push(result, \"pushDestroy\");\n\t        },\n\n\t        _push: function(result, operation) {\n\t            var data = this._readData(result);\n\n\t            if (!data) {\n\t                data = result;\n\t            }\n\n\t            this[operation](data);\n\t        },\n\n\t        _flatData: function(data, skip) {\n\t            if (data) {\n\t                if (this._isServerGrouped()) {\n\t                    return flattenGroups(data);\n\t                }\n\n\t                if (!skip) {\n\t                    for (var idx = 0; idx < data.length; idx++) {\n\t                        data.at(idx);\n\t                    }\n\t                }\n\t            }\n\n\t            return data;\n\t        },\n\n\t        parent: noop,\n\n\t        get: function(id) {\n\t            var idx, length, data = this._flatData(this._data, this.options.useRanges);\n\n\t            for (idx = 0, length = data.length; idx < length; idx++) {\n\t                if (data[idx].id == id) {\n\t                    return data[idx];\n\t                }\n\t            }\n\t        },\n\n\t        getByUid: function(id) {\n\t            return this._getByUid(id, this._data);\n\t        },\n\n\t        _getByUid: function(id, dataItems) {\n\t            var idx, length, data = this._flatData(dataItems, this.options.useRanges);\n\n\t            if (!data) {\n\t                return;\n\t            }\n\n\t            for (idx = 0, length = data.length; idx < length; idx++) {\n\t                if (data[idx].uid == id) {\n\t                    return data[idx];\n\t                }\n\t            }\n\t        },\n\n\t        indexOf: function(model) {\n\t            return indexOfModel(this._data, model);\n\t        },\n\n\t        at: function(index) {\n\t            return this._data.at(index);\n\t        },\n\n\t        data: function(value) {\n\t            var that = this;\n\t            if (value !== undefined) {\n\t                that._detachObservableParents();\n\t                that._data = this._observe(value);\n\n\t                that._pristineData = value.slice(0);\n\n\t                that._storeData();\n\n\t                that._ranges = [];\n\t                that.trigger(\"reset\");\n\t                that._addRange(that._data);\n\n\t                that._total = that._data.length;\n\t                that._pristineTotal = that._total;\n\n\t                that._process(that._data);\n\t            } else {\n\t                if (that._data) {\n\t                    for (var idx = 0; idx < that._data.length; idx++) {\n\t                        that._data.at(idx);\n\t                    }\n\t                }\n\n\t                return that._data;\n\t            }\n\t        },\n\n\t        view: function(value) {\n\t            if (value === undefined) {\n\t                return this._view;\n\t            } else {\n\t                this._view = this._observeView(value);\n\t            }\n\t        },\n\n\t        _observeView: function(data) {\n\t            var that = this;\n\t            replaceWithObservable(data, that._data, that._ranges, that.reader.model || ObservableObject, that._isServerGrouped());\n\n\t            var view = new LazyObservableArray(data, that.reader.model);\n\t            view.parent = function() { return that.parent(); };\n\t            return view;\n\t        },\n\n\t        flatView: function() {\n\t            var groups = this.group() || [];\n\n\t            if (groups.length) {\n\t                return flattenGroups(this._view);\n\t            } else {\n\t                return this._view;\n\t            }\n\t        },\n\n\t        add: function(model) {\n\t            return this.insert(this._data.length, model);\n\t        },\n\n\t        _createNewModel: function(model) {\n\t            if (this.reader.model) {\n\t                return new this.reader.model(model);\n\t            }\n\n\t            if (model instanceof ObservableObject) {\n\t                return model;\n\t            }\n\n\t            return new ObservableObject(model);\n\t        },\n\n\t        insert: function(index, model) {\n\t            if (!model) {\n\t                model = index;\n\t                index = 0;\n\t            }\n\n\t            if (!(model instanceof Model)) {\n\t                model = this._createNewModel(model);\n\t            }\n\n\t            if (this._isServerGrouped()) {\n\t                this._data.splice(index, 0, this._wrapInEmptyGroup(model));\n\t            } else {\n\t                this._data.splice(index, 0, model);\n\t            }\n\n\t            this._insertModelInRange(index, model);\n\n\t            return model;\n\t        },\n\n\t        pushInsert: function(index, items) {\n\t            var that = this;\n\t            var rangeSpan = that._getCurrentRangeSpan();\n\n\t            if (!items) {\n\t                items = index;\n\t                index = 0;\n\t            }\n\n\t            if (!isArray(items)) {\n\t                items = [items];\n\t            }\n\n\t            var pushed = [];\n\t            var autoSync = this.options.autoSync;\n\t            this.options.autoSync = false;\n\n\t            try {\n\t                for (var idx = 0; idx < items.length; idx ++) {\n\t                    var item = items[idx];\n\n\t                    var result = this.insert(index, item);\n\n\t                    pushed.push(result);\n\n\t                    var pristine = result.toJSON();\n\n\t                    if (this._isServerGrouped()) {\n\t                        pristine = this._wrapInEmptyGroup(pristine);\n\t                    }\n\n\t                    this._pristineData.push(pristine);\n\n\t                    if (rangeSpan && rangeSpan.length) {\n\t                        $(rangeSpan).last()[0].pristineData.push(pristine);\n\t                    }\n\n\t                    index++;\n\t                }\n\t            } finally {\n\t                this.options.autoSync = autoSync;\n\t            }\n\n\t            if (pushed.length) {\n\t                this.trigger(\"push\", {\n\t                    type: \"create\",\n\t                    items: pushed\n\t                });\n\t            }\n\t        },\n\n\t        pushCreate: function(items) {\n\t            this.pushInsert(this._data.length, items);\n\t        },\n\n\t        pushUpdate: function(items) {\n\t            if (!isArray(items)) {\n\t                items = [items];\n\t            }\n\n\t            var pushed = [];\n\n\t            for (var idx = 0; idx < items.length; idx ++) {\n\t                var item = items[idx];\n\t                var model = this._createNewModel(item);\n\n\t                var target = this.get(model.id);\n\n\t                if (target) {\n\t                    pushed.push(target);\n\n\t                    target.accept(item);\n\n\t                    target.trigger(CHANGE);\n\n\t                    this._updatePristineForModel(target, item);\n\t                } else {\n\t                    this.pushCreate(item);\n\t                }\n\t            }\n\n\t            if (pushed.length) {\n\t                this.trigger(\"push\", {\n\t                    type: \"update\",\n\t                    items: pushed\n\t                });\n\t            }\n\t        },\n\n\t        pushDestroy: function(items) {\n\t            var pushed = this._removeItems(items);\n\n\t            if (pushed.length) {\n\t                this.trigger(\"push\", {\n\t                    type: \"destroy\",\n\t                    items: pushed\n\t                });\n\t            }\n\t        },\n\n\t        _removeItems: function(items, removePristine) {\n\t            if (!isArray(items)) {\n\t                items = [items];\n\t            }\n\n\t            var shouldRemovePristine = typeof removePristine !== \"undefined\" ? removePristine : true;\n\n\t            var destroyed = [];\n\t            var autoSync = this.options.autoSync;\n\t            this.options.autoSync = false;\n\t            try {\n\t                for (var idx = 0; idx < items.length; idx ++) {\n\t                    var item = items[idx];\n\t                    var model = this._createNewModel(item);\n\t                    var found = false;\n\n\t                    this._eachItem(this._data, function(items){\n\t                        for (var idx = 0; idx < items.length; idx++) {\n\t                            var item = items.at(idx);\n\t                            if (item.id === model.id) {\n\t                                destroyed.push(item);\n\t                                items.splice(idx, 1);\n\t                                found = true;\n\t                                break;\n\t                            }\n\t                        }\n\t                    });\n\n\t                    if (found && shouldRemovePristine) {\n\t                        this._removePristineForModel(model);\n\t                        this._destroyed.pop();\n\t                    }\n\t                }\n\t            } finally {\n\t                this.options.autoSync = autoSync;\n\t            }\n\n\t            return destroyed;\n\t        },\n\n\t        remove: function(model) {\n\t            var result,\n\t                that = this,\n\t                hasGroups = that._isServerGrouped();\n\n\t            this._eachItem(that._data, function(items) {\n\t                result = removeModel(items, model);\n\n\t                if (result && hasGroups) {\n\t                    if (!result.isNew || !result.isNew()) {\n\t                        that._destroyed.push(result);\n\t                    }\n\t                    return true;\n\t                }\n\t            });\n\n\t            this._removeModelFromRanges(model);\n\n\t            return model;\n\t        },\n\n\t        destroyed: function() {\n\t            return this._destroyed;\n\t        },\n\n\t        created: function() {\n\t            var idx,\n\t                length,\n\t                result = [],\n\t                data = this._flatData(this._data, this.options.useRanges);\n\n\t            for (idx = 0, length = data.length; idx < length; idx++) {\n\t                if (data[idx].isNew && data[idx].isNew()) {\n\t                    result.push(data[idx]);\n\t                }\n\t            }\n\t            return result;\n\t        },\n\n\t        updated: function() {\n\t            var idx,\n\t                length,\n\t                result = [],\n\t                data = this._flatData(this._data, this.options.useRanges);\n\n\t            for (idx = 0, length = data.length; idx < length; idx++) {\n\t                if ((data[idx].isNew && !data[idx].isNew()) && data[idx].dirty) {\n\t                    result.push(data[idx]);\n\t                }\n\t            }\n\t            return result;\n\t        },\n\n\t        sync: function() {\n\t            var that = this,\n\t                created = [],\n\t                updated = [],\n\t                destroyed = that._destroyed;\n\n\t            var promise = $.Deferred().resolve().promise();\n\n\t            if (that.online()) {\n\n\t                if (!that.reader.model) {\n\t                    return promise;\n\t                }\n\n\t                created = that.created();\n\t                updated = that.updated();\n\n\t                var promises = [];\n\n\t                if (that.options.batch && that.transport.submit) {\n\t                    promises = that._sendSubmit(created, updated, destroyed);\n\t                } else {\n\t                    promises.push.apply(promises, that._send(\"create\", created));\n\t                    promises.push.apply(promises, that._send(\"update\", updated));\n\t                    promises.push.apply(promises, that._send(\"destroy\", destroyed));\n\t                }\n\n\t                promise = $.when\n\t                 .apply(null, promises)\n\t                 .then(function() {\n\t                    var idx, length;\n\n\t                    for (idx = 0, length = arguments.length; idx < length; idx++){\n\t                        if (arguments[idx]) {\n\t                            that._accept(arguments[idx]);\n\t                        }\n\t                    }\n\n\t                    that._storeData(true);\n\n\t                    that._syncEnd();\n\n\t                    that._change({ action: \"sync\" });\n\n\t                    that.trigger(SYNC);\n\t                });\n\t            } else {\n\t                that._storeData(true);\n\n\t                that._syncEnd();\n\n\t                that._change({ action: \"sync\" });\n\t            }\n\n\t            return promise;\n\t        },\n\n\t        _syncEnd: noop,\n\n\t        cancelChanges: function(model) {\n\t            var that = this;\n\n\t            if (model instanceof kendo.data.Model) {\n\t                that._cancelModel(model);\n\t            } else {\n\t                that._destroyed = [];\n\t                that._detachObservableParents();\n\t                that._data = that._observe(that._pristineData);\n\t                if (that.options.serverPaging) {\n\t                    that._total = that._pristineTotal;\n\t                }\n\n\t                that._ranges = [];\n\t                that._addRange(that._data, 0);\n\n\t                that._changesCanceled();\n\n\t                that._change();\n\n\t                that._markOfflineUpdatesAsDirty();\n\t            }\n\t        },\n\n\t        _changesCanceled: noop,\n\n\t        _markOfflineUpdatesAsDirty: function() {\n\t            var that = this;\n\n\t            if (that.options.offlineStorage != null) {\n\t                that._eachItem(that._data, function(items) {\n\t                    for (var idx = 0; idx < items.length; idx++) {\n\t                        var item = items.at(idx);\n\t                        if (item.__state__ == \"update\" || item.__state__ == \"create\") {\n\t                            item.dirty = true;\n\t                        }\n\t                    }\n\t                });\n\t            }\n\t        },\n\n\t        hasChanges: function() {\n\t            var idx,\n\t                length,\n\t                data = this._flatData(this._data, this.options.useRanges);\n\n\t            if (this._destroyed.length) {\n\t                return true;\n\t            }\n\n\t            for (idx = 0, length = data.length; idx < length; idx++) {\n\t                if ((data[idx].isNew && data[idx].isNew()) || data[idx].dirty) {\n\t                    return true;\n\t                }\n\t            }\n\n\t            return false;\n\t        },\n\n\t        _accept: function(result) {\n\t            var that = this,\n\t                models = result.models,\n\t                response = result.response,\n\t                idx = 0,\n\t                serverGroup = that._isServerGrouped(),\n\t                pristine = that._pristineData,\n\t                type = result.type,\n\t                length;\n\n\t            that.trigger(REQUESTEND, { response: response, type: type });\n\n\t            if (response && !isEmptyObject(response)) {\n\t                response = that.reader.parse(response);\n\n\t                if (that._handleCustomErrors(response)) {\n\t                    return;\n\t                }\n\n\t                response = that.reader.data(response);\n\n\t                if (!isArray(response)) {\n\t                    response = [response];\n\t                }\n\t            } else {\n\t                response = $.map(models, function(model) { return model.toJSON(); } );\n\t            }\n\n\t            if (type === \"destroy\") {\n\t                that._destroyed = [];\n\t            }\n\n\t            for (idx = 0, length = models.length; idx < length; idx++) {\n\t                if (type !== \"destroy\") {\n\t                    models[idx].accept(response[idx]);\n\n\t                    if (type === \"create\") {\n\t                        pristine.push(serverGroup ? that._wrapInEmptyGroup(models[idx].toJSON()) : response[idx]);\n\t                    } else if (type === \"update\") {\n\t                        that._updatePristineForModel(models[idx], response[idx]);\n\t                    }\n\t                } else {\n\t                    that._removePristineForModel(models[idx]);\n\t                }\n\t            }\n\t        },\n\n\t        _updatePristineForModel: function(model, values) {\n\t            this._executeOnPristineForModel(model, function(index, items) {\n\t                kendo.deepExtend(items[index], values);\n\t            });\n\t        },\n\n\t        _executeOnPristineForModel: function(model, callback) {\n\t            this._eachPristineItem(\n\t                function(items) {\n\t                    var index = indexOfPristineModel(items, model);\n\t                    if (index > -1) {\n\t                        callback(index, items);\n\t                        return true;\n\t                    }\n\t                });\n\t        },\n\n\t        _removePristineForModel: function(model) {\n\t            this._executeOnPristineForModel(model, function(index, items) {\n\t                items.splice(index, 1);\n\t            });\n\t        },\n\n\t        _readData: function(data) {\n\t            var read = !this._isServerGrouped() ? this.reader.data : this.reader.groups;\n\t            return read.call(this.reader, data);\n\t        },\n\n\t        _eachPristineItem: function(callback) {\n\t            var that = this;\n\t            var options = that.options;\n\t            var rangeSpan = that._getCurrentRangeSpan();\n\n\t            that._eachItem(that._pristineData, callback);\n\n\t            if (options.serverPaging && options.useRanges) {\n\t                each(rangeSpan, function(i, range) {\n\t                    that._eachItem(range.pristineData, callback);\n\t                });\n\t            }\n\t        },\n\n\t       _eachItem: function(data, callback) {\n\t            if (data && data.length) {\n\t                if (this._isServerGrouped()) {\n\t                    eachGroupItems(data, callback);\n\t                } else {\n\t                    callback(data);\n\t                }\n\t            }\n\t        },\n\n\t        _pristineForModel: function(model) {\n\t            var pristine,\n\t                idx,\n\t                callback = function(items) {\n\t                    idx = indexOfPristineModel(items, model);\n\t                    if (idx > -1) {\n\t                        pristine = items[idx];\n\t                        return true;\n\t                    }\n\t                };\n\n\t            this._eachPristineItem(callback);\n\n\t            return pristine;\n\t        },\n\n\t        _cancelModel: function(model) {\n\t            var that = this;\n\t            var pristine = this._pristineForModel(model);\n\n\t            this._eachItem(this._data, function(items) {\n\t                var idx = indexOfModel(items, model);\n\t                if (idx >= 0) {\n\t                    if (pristine && (!model.isNew() || pristine.__state__)) {\n\t                        items[idx].accept(pristine);\n\n\t                        if (pristine.__state__ == \"update\") {\n\t                            items[idx].dirty = true;\n\t                        }\n\n\t                    } else {\n\t                        that._modelCanceled(model);\n\n\t                        items.splice(idx, 1);\n\n\t                        that._removeModelFromRanges(model);\n\t                    }\n\t                }\n\t            });\n\t        },\n\n\t        _modelCanceled: noop,\n\n\t        _submit: function(promises, data) {\n\t            var that = this;\n\n\t            that.trigger(REQUESTSTART, { type: \"submit\" });\n\n\t            that.trigger(PROGRESS);\n\n\t            that.transport.submit(extend({\n\t                success: function(response, type) {\n\t                    var promise = $.grep(promises, function(x) {\n\t                        return x.type == type;\n\t                    })[0];\n\n\t                    if (promise) {\n\t                        promise.resolve({\n\t                            response: response,\n\t                            models: promise.models,\n\t                            type: type\n\t                        });\n\t                    }\n\t                },\n\t                error: function(response, status, error) {\n\t                    for (var idx = 0; idx < promises.length; idx++) {\n\t                        promises[idx].reject(response);\n\t                    }\n\n\t                    that.error(response, status, error);\n\t                }\n\t            }, data));\n\t        },\n\n\t        _sendSubmit: function(created, updated, destroyed) {\n\t            var that = this,\n\t                promises = [];\n\n\t            if (that.options.batch) {\n\t                if (created.length) {\n\t                    promises.push($.Deferred(function(deferred) {\n\t                        deferred.type = \"create\";\n\t                        deferred.models = created;\n\t                    }));\n\t                }\n\n\t                if (updated.length) {\n\t                    promises.push($.Deferred(function(deferred) {\n\t                        deferred.type = \"update\";\n\t                        deferred.models = updated;\n\t                    }));\n\t                }\n\n\t                if (destroyed.length) {\n\t                    promises.push($.Deferred(function(deferred) {\n\t                        deferred.type = \"destroy\";\n\t                        deferred.models = destroyed;\n\t                    }));\n\t                }\n\n\t                that._submit(promises, {\n\t                    data: {\n\t                        created: that.reader.serialize(toJSON(created)),\n\t                        updated: that.reader.serialize(toJSON(updated)),\n\t                        destroyed: that.reader.serialize(toJSON(destroyed))\n\t                    }\n\t                });\n\t            }\n\n\t            return promises;\n\t        },\n\n\t        _promise: function(data, models, type) {\n\t            var that = this;\n\n\t            return $.Deferred(function(deferred) {\n\t                that.trigger(REQUESTSTART, { type: type });\n\n\t                that.trigger(PROGRESS);\n\n\t                that.transport[type].call(that.transport, extend({\n\t                    success: function(response) {\n\t                        deferred.resolve({\n\t                            response: response,\n\t                            models: models,\n\t                            type: type\n\t                        });\n\t                    },\n\t                    error: function(response, status, error) {\n\t                        deferred.reject(response);\n\t                        that.error(response, status, error);\n\t                    }\n\t                }, data));\n\t            }).promise();\n\t        },\n\n\t        _send: function(method, data) {\n\t            var that = this,\n\t                idx,\n\t                length,\n\t                promises = [],\n\t                converted = that.reader.serialize(toJSON(data));\n\n\t            if (that.options.batch) {\n\t                if (data.length) {\n\t                    promises.push(that._promise( { data: { models: converted } }, data , method));\n\t                }\n\t            } else {\n\t                for (idx = 0, length = data.length; idx < length; idx++) {\n\t                    promises.push(that._promise( { data: converted[idx] }, [ data[idx] ], method));\n\t                }\n\t            }\n\n\t            return promises;\n\t        },\n\n\t        read: function(data) {\n\t            var that = this, params = that._params(data);\n\t            var deferred = $.Deferred();\n\n\t            that._queueRequest(params, function() {\n\t                var isPrevented = that.trigger(REQUESTSTART, { type: \"read\" });\n\t                if (!isPrevented) {\n\t                    that.trigger(PROGRESS);\n\n\t                    that._ranges = [];\n\t                    that.trigger(\"reset\");\n\t                    if (that.online()) {\n\t                        that.transport.read({\n\t                            data: params,\n\t                            success: function(data) {\n\t                                that._ranges = [];\n\t                                that.success(data, params);\n\n\t                                deferred.resolve();\n\t                            },\n\t                            error: function() {\n\t                                var args = slice.call(arguments);\n\n\t                                that.error.apply(that, args);\n\n\t                                deferred.reject.apply(deferred, args);\n\t                            }\n\t                        });\n\t                    } else if (that.options.offlineStorage != null){\n\t                        that.success(that.offlineData(), params);\n\n\t                        deferred.resolve();\n\t                    }\n\t                } else {\n\t                    that._dequeueRequest();\n\n\t                    deferred.resolve(isPrevented);\n\t                }\n\t            });\n\n\t            return deferred.promise();\n\t        },\n\n\t        _readAggregates: function(data) {\n\t            return this.reader.aggregates(data);\n\t        },\n\n\t        success: function(data) {\n\t            var that = this,\n\t                options = that.options,\n\t                items,\n\t                replaceSubset;\n\n\t            that.trigger(REQUESTEND, { response: data, type: \"read\" });\n\n\t            if (that.online()) {\n\t                data = that.reader.parse(data);\n\n\t                if (that._handleCustomErrors(data)) {\n\t                    that._dequeueRequest();\n\t                    return;\n\t                }\n\n\t                that._total = that.reader.total(data);\n\t                if (that._pageSize > that._total) {\n\t                    that._pageSize = that._total;\n\t                    if (that.options.pageSize && that.options.pageSize > that._pageSize) {\n\t                        that._pageSize = that.options.pageSize;\n\t                    }\n\t                }\n\n\t                if (that._aggregate && options.serverAggregates) {\n\t                    that._aggregateResult = that._readAggregates(data);\n\t                }\n\n\t                data = that._readData(data);\n\n\t                that._destroyed = [];\n\t            } else {\n\t                data = that._readData(data);\n\n\t                items = [];\n\t                var itemIds = {};\n\t                var model = that.reader.model;\n\t                var idField = model ? model.idField : \"id\";\n\t                var idx;\n\n\t                for (idx = 0; idx < this._destroyed.length; idx++) {\n\t                    var id = this._destroyed[idx][idField];\n\t                    itemIds[id] = id;\n\t                }\n\n\t                for (idx = 0; idx < data.length; idx++) {\n\t                    var item = data[idx];\n\t                    var state = item.__state__;\n\t                    if (state == \"destroy\") {\n\t                        if (!itemIds[item[idField]]) {\n\t                            this._destroyed.push(this._createNewModel(item));\n\t                        }\n\t                    } else {\n\t                        items.push(item);\n\t                    }\n\t                }\n\n\t                data = items;\n\n\t                that._total = data.length;\n\t            }\n\n\t            that._pristineTotal = that._total;\n\t            replaceSubset = that._skip && that._data.length && that._skip < that._data.length;\n\n\t            if (that.options.endless) {\n\t                if (replaceSubset) {\n\t                    that._pristineData.splice(that._skip, that._pristineData.length);\n\t                }\n\t                items = data.slice(0);\n\t                for (var j = 0; j < items.length; j++) {\n\t                    that._pristineData.push(items[j]);\n\t                }\n\t            } else {\n\t                that._pristineData = data.slice(0);\n\t            }\n\n\t            that._detachObservableParents();\n\n\t            if (that.options.endless) {\n\t                that._data.unbind(CHANGE, that._changeHandler);\n\n\t                if (that._isServerGrouped() && that._data[that._data.length - 1].value === data[0].value) {\n\t                    fillLastGroup(that._data[that._data.length - 1], data[0]);\n\t                    data.shift();\n\t                }\n\n\t                data = that._observe(data);\n\t                if (replaceSubset) {\n\t                    that._data.splice(that._skip, that._data.length);\n\t                }\n\t                for (var i = 0; i < data.length; i++) {\n\t                    that._data.push(data[i]);\n\t                }\n\t                that._data.bind(CHANGE, that._changeHandler);\n\t            } else {\n\t                that._data = that._observe(data);\n\t            }\n\n\t            that._markOfflineUpdatesAsDirty();\n\n\t            that._storeData();\n\n\t            that._addRange(that._data);\n\n\t            that._process(that._data);\n\n\t            that._dequeueRequest();\n\t        },\n\n\t        _detachObservableParents: function() {\n\t            if (this._data && this._shouldDetachObservableParents) {\n\t                for (var idx = 0; idx < this._data.length; idx++) {\n\t                    if (this._data[idx].parent) {\n\t                        this._data[idx].parent = noop;\n\t                    }\n\t                }\n\t            }\n\t        },\n\n\t        _storeData: function(updatePristine) {\n\t            var serverGrouping = this._isServerGrouped();\n\t            var model = this.reader.model;\n\n\t            function items(data) {\n\t                var state = [];\n\n\t                for (var idx = 0; idx < data.length; idx++) {\n\t                    var dataItem = data.at(idx);\n\t                    var item = dataItem.toJSON();\n\n\t                    if (serverGrouping && dataItem.items) {\n\t                        item.items = items(dataItem.items);\n\t                    } else {\n\t                        item.uid = dataItem.uid;\n\n\t                        if (model) {\n\t                            if (dataItem.isNew()) {\n\t                                item.__state__ = \"create\";\n\t                            } else if (dataItem.dirty) {\n\t                                item.__state__ = \"update\";\n\t                            }\n\t                        }\n\t                    }\n\t                    state.push(item);\n\t                }\n\n\t                return state;\n\t            }\n\n\t            if (this.options.offlineStorage != null) {\n\t                var state = items(this._data);\n\n\t                var destroyed = [];\n\n\t                for (var idx = 0; idx < this._destroyed.length; idx++) {\n\t                    var item = this._destroyed[idx].toJSON();\n\t                    item.__state__ = \"destroy\";\n\t                    destroyed.push(item);\n\t                }\n\n\t                this.offlineData(state.concat(destroyed));\n\n\t                if (updatePristine) {\n\t                    this._pristineData = this.reader.reader ? this.reader.reader._wrapDataAccessBase(state) : this.reader._wrapDataAccessBase(state);\n\t                }\n\t            }\n\t        },\n\n\t        _addRange: function(data, skip) {\n\t            var that = this,\n\t                start = typeof(skip) !== \"undefined\" ? skip : (that._skip || 0),\n\t                end = start + that._flatData(data, true).length;\n\n\t            that._ranges.push({\n\t                start: start,\n\t                end: end,\n\t                data: data,\n\t                pristineData: data.toJSON(),\n\t                timestamp: that._timeStamp()\n\t            });\n\n\t            that._sortRanges();\n\t        },\n\n\t        _sortRanges: function() {\n\t            this._ranges.sort(function(x, y) {\n\t                return x.start - y.start;\n\t            });\n\t        },\n\n\t        error: function(xhr, status, errorThrown) {\n\t            this._dequeueRequest();\n\t            this.trigger(REQUESTEND, { });\n\t            this.trigger(ERROR, { xhr: xhr, status: status, errorThrown: errorThrown });\n\t        },\n\n\t        _params: function(data) {\n\t            var that = this,\n\t                options =  extend({\n\t                    take: that.take(),\n\t                    skip: that.skip(),\n\t                    page: that.page(),\n\t                    pageSize: that.pageSize(),\n\t                    sort: that._sort,\n\t                    filter: that._filter,\n\t                    group: that._group,\n\t                    aggregate: that._aggregate\n\t                }, data);\n\n\t            if (!that.options.serverPaging) {\n\t                delete options.take;\n\t                delete options.skip;\n\t                delete options.page;\n\t                delete options.pageSize;\n\t            }\n\n\t            if (!that.options.serverGrouping) {\n\t                delete options.group;\n\t            } else if (that.reader.model && options.group) {\n\t                options.group = convertDescriptorsField(options.group, that.reader.model);\n\t            }\n\n\t            if (!that.options.serverFiltering) {\n\t                delete options.filter;\n\t            } else if (that.reader.model && options.filter) {\n\t               options.filter = convertFilterDescriptorsField(options.filter, that.reader.model);\n\t            }\n\n\t            if (!that.options.serverSorting) {\n\t                delete options.sort;\n\t            } else if (that.reader.model && options.sort) {\n\t                options.sort = convertDescriptorsField(options.sort, that.reader.model);\n\t            }\n\n\t            if (!that.options.serverAggregates) {\n\t                delete options.aggregate;\n\t            } else if (that.reader.model && options.aggregate) {\n\t                options.aggregate = convertDescriptorsField(options.aggregate, that.reader.model);\n\t            }\n\n\t            return options;\n\t        },\n\n\t        _queueRequest: function(options, callback) {\n\t            var that = this;\n\t            if (!that._requestInProgress) {\n\t                that._requestInProgress = true;\n\t                that._pending = undefined;\n\t                callback();\n\t            } else {\n\t                that._pending = { callback: proxy(callback, that), options: options };\n\t            }\n\t        },\n\n\t        _dequeueRequest: function() {\n\t            var that = this;\n\t            that._requestInProgress = false;\n\t            if (that._pending) {\n\t                that._queueRequest(that._pending.options, that._pending.callback);\n\t            }\n\t        },\n\n\t        _handleCustomErrors: function(response) {\n\t            if (this.reader.errors) {\n\t                var errors = this.reader.errors(response);\n\t                if (errors) {\n\t                    this.trigger(ERROR, { xhr: null, status: \"customerror\", errorThrown: \"custom error\", errors: errors });\n\t                    return true;\n\t                }\n\t            }\n\t            return false;\n\t        },\n\n\t        _shouldWrap: function(data) {\n\t            var model = this.reader.model;\n\n\t            if (model && data.length) {\n\t                return !(data[0] instanceof model);\n\t            }\n\n\t            return false;\n\t        },\n\n\t        _observe: function(data) {\n\t            var that = this,\n\t                model = that.reader.model;\n\n\t            that._shouldDetachObservableParents = true;\n\n\t            if (data instanceof ObservableArray) {\n\t                that._shouldDetachObservableParents = false;\n\t                if (that._shouldWrap(data)) {\n\t                    data.type = that.reader.model;\n\t                    data.wrapAll(data, data);\n\t                }\n\t            } else {\n\t                var arrayType = that.pageSize() && !that.options.serverPaging ? LazyObservableArray : ObservableArray;\n\t                data = new arrayType(data, that.reader.model);\n\t                data.parent = function() { return that.parent(); };\n\t            }\n\n\t            if (that._isServerGrouped()) {\n\t                wrapGroupItems(data, model);\n\t            }\n\n\t            if (that._changeHandler && that._data && that._data instanceof ObservableArray) {\n\t                that._data.unbind(CHANGE, that._changeHandler);\n\t            } else {\n\t                that._changeHandler = proxy(that._change, that);\n\t            }\n\n\t            return data.bind(CHANGE, that._changeHandler);\n\t        },\n\n\t        _updateTotalForAction: function(action, items) {\n\t            var that = this;\n\n\t            var total = parseInt(that._total, 10);\n\n\t            if (!isNumber(that._total)) {\n\t                total = parseInt(that._pristineTotal, 10);\n\t            }\n\t            if (action === \"add\") {\n\t                total += items.length;\n\t            } else if (action === \"remove\") {\n\t                total -= items.length;\n\t            } else if (action !== \"itemchange\" && action !== \"sync\" && !that.options.serverPaging) {\n\t                total = that._pristineTotal;\n\t            } else if (action === \"sync\") {\n\t                total = that._pristineTotal = parseInt(that._total, 10);\n\t            }\n\n\t            that._total = total;\n\t        },\n\n\t        _change: function(e) {\n\t            var that = this, idx, length, action = e ? e.action : \"\";\n\n\t            if (action === \"remove\") {\n\t                for (idx = 0, length = e.items.length; idx < length; idx++) {\n\t                    if (!e.items[idx].isNew || !e.items[idx].isNew()) {\n\t                        that._destroyed.push(e.items[idx]);\n\t                    }\n\t                }\n\t            }\n\n\t            if (that.options.autoSync && (action === \"add\" || action === \"remove\" || action === \"itemchange\")) {\n\n\t                var handler = function(args) {\n\t                    if (args.action === \"sync\") {\n\t                        that.unbind(\"change\", handler);\n\t                        that._updateTotalForAction(action, e.items);\n\t                    }\n\t                };\n\n\t                that.first(\"change\", handler);\n\n\t                that.sync();\n\n\t            } else {\n\t                that._updateTotalForAction(action, e ? e.items : []);\n\n\t                that._process(that._data, e);\n\t            }\n\t        },\n\n\t        _calculateAggregates: function (data, options) {\n\t            options = options || {};\n\n\t            var query = new Query(data),\n\t                aggregates = options.aggregate,\n\t                filter = options.filter;\n\n\t            if (filter) {\n\t                query = query.filter(filter);\n\t            }\n\n\t            return query.aggregate(aggregates);\n\t        },\n\n\t        _process: function (data, e) {\n\t            var that = this,\n\t                options = {},\n\t                result;\n\n\t            if (that.options.serverPaging !== true) {\n\t                options.skip = that._skip;\n\t                options.take = that._take || that._pageSize;\n\n\t                if(options.skip === undefined && that._page !== undefined && that._pageSize !== undefined) {\n\t                    options.skip = (that._page - 1) * that._pageSize;\n\t                }\n\n\t                if (that.options.useRanges) {\n\t                    options.skip = that.currentRangeStart();\n\t                }\n\t            }\n\n\t            if (that.options.serverSorting !== true) {\n\t                options.sort = that._sort;\n\t            }\n\n\t            if (that.options.serverFiltering !== true) {\n\t                options.filter = that._filter;\n\t            }\n\n\t            if (that.options.serverGrouping !== true) {\n\t                options.group = that._group;\n\t            }\n\n\t            if (that.options.serverAggregates !== true) {\n\t                options.aggregate = that._aggregate;\n\t            }\n\n\t            if (that.options.serverGrouping) {\n\t                that._clearEmptyGroups(data);\n\t            }\n\n\t            result = that._queryProcess(data, options);\n\n\t            if (that.options.serverAggregates !== true) {\n\t                // for performance reasons, calculate aggregates for part of the data only after query process\n\t                // this is necessary in the TreeList when paging\n\t                that._aggregateResult = that._calculateAggregates(result.dataToAggregate || data, options);\n\t            }\n\n\t            that.view(result.data);\n\n\t            that._setFilterTotal(result.total, false);\n\n\t            e = e || {};\n\n\t            e.items = e.items || that._view;\n\n\t            that.trigger(CHANGE, e);\n\t        },\n\n\t        _clearEmptyGroups: function(data) {\n\t            for (var idx = data.length - 1; idx >=0; idx--) {\n\t                var group = data[idx];\n\t                if (group.hasSubgroups) {\n\t                    this._clearEmptyGroups(group.items);\n\t                } else {\n\t                    if (group.items && !group.items.length) {\n\t                        splice.apply(group.parent(), [idx, 1]);\n\t                    }\n\t                }\n\t            }\n\t        },\n\n\t        _queryProcess: function(data, options) {\n\t            if (this.options.inPlaceSort) {\n\t                return Query.process(data, options, this.options.inPlaceSort);\n\t            }\n\t            else {\n\t                return Query.process(data, options);\n\t            }\n\t        },\n\n\t        _mergeState: function(options) {\n\t            var that = this;\n\n\t            if (options !== undefined) {\n\t                that._pageSize = options.pageSize;\n\t                that._page = options.page;\n\t                that._sort = options.sort;\n\t                that._filter = options.filter;\n\t                that._group = options.group;\n\t                that._aggregate = options.aggregate;\n\t                that._skip = that._currentRangeStart = options.skip;\n\t                that._take = options.take;\n\n\t                if(that._skip === undefined) {\n\t                    that._skip = that._currentRangeStart = that.skip();\n\t                    options.skip = that.skip();\n\t                }\n\n\t                if(that._take === undefined && that._pageSize !== undefined) {\n\t                    that._take = that._pageSize;\n\t                    options.take = that._take;\n\t                }\n\n\t                if (options.sort) {\n\t                    that._sort = options.sort = normalizeSort(options.sort);\n\t                }\n\n\t                if (options.filter) {\n\t                    that._filter = options.filter = normalizeFilter(options.filter);\n\t                }\n\n\t                if (options.group) {\n\t                    that._group = options.group = normalizeGroup(options.group);\n\t                }\n\t                if (options.aggregate) {\n\t                    that._aggregate = options.aggregate = normalizeAggregate(options.aggregate);\n\t                }\n\t            }\n\t            return options;\n\t        },\n\n\t        query: function(options) {\n\t            var result;\n\t            var remote = this.options.serverSorting || this.options.serverPaging || this.options.serverFiltering || this.options.serverGrouping || this.options.serverAggregates;\n\n\t            if (remote || ((this._data === undefined || this._data.length === 0) && !this._destroyed.length)) {\n\t                if (this.options.endless) {\n\t                    var moreItemsCount = options.pageSize - this.pageSize();\n\t                    if (moreItemsCount > 0) {\n\t                        moreItemsCount = this.pageSize();\n\t                        options.page = options.pageSize / moreItemsCount;\n\t                        options.pageSize = moreItemsCount;\n\t                    } else {\n\t                        options.page = 1;\n\t                        this.options.endless = false;\n\t                    }\n\t                }\n\t                return this.read(this._mergeState(options));\n\t            }\n\n\t            var isPrevented = this.trigger(REQUESTSTART, { type: \"read\" });\n\t            if (!isPrevented) {\n\t                this.trigger(PROGRESS);\n\n\t                result = this._queryProcess(this._data, this._mergeState(options));\n\n\t                this._setFilterTotal(result.total, true);\n\n\t                this._aggregateResult = this._calculateAggregates(result.dataToAggregate || this._data, options);\n\t                this.view(result.data);\n\t                this.trigger(REQUESTEND, { type: \"read\" });\n\t                this.trigger(CHANGE, { items: result.data });\n\t            }\n\n\t            return $.Deferred().resolve(isPrevented).promise();\n\t        },\n\n\t        _setFilterTotal: function(filterTotal, setDefaultValue) {\n\t            var that = this;\n\n\t            if (!that.options.serverFiltering) {\n\t                if (filterTotal !== undefined) {\n\t                    that._total = filterTotal;\n\t                } else if (setDefaultValue) {\n\t                    that._total = that._data.length;\n\t                }\n\t            }\n\t        },\n\n\t        fetch: function(callback) {\n\t            var that = this;\n\t            var fn = function(isPrevented) {\n\t                if (isPrevented !== true && isFunction(callback)) {\n\t                    callback.call(that);\n\t                }\n\t            };\n\n\t            return this._query().then(fn);\n\t        },\n\n\t        _query: function(options) {\n\t            var that = this;\n\n\t            return that.query(extend({}, {\n\t                page: that.page(),\n\t                pageSize: that.pageSize(),\n\t                sort: that.sort(),\n\t                filter: that.filter(),\n\t                group: that.group(),\n\t                aggregate: that.aggregate()\n\t            }, options));\n\t        },\n\n\t        next: function(options) {\n\t            var that = this,\n\t                page = that.page(),\n\t                total = that.total();\n\n\t            options = options || {};\n\n\t            if (!page || (total && page + 1 > that.totalPages())) {\n\t                return;\n\t            }\n\n\t            that._skip = that._currentRangeStart = page * that.take();\n\n\t            page += 1;\n\t            options.page = page;\n\n\t            that._query(options);\n\n\t            return page;\n\t        },\n\n\t        prev: function(options) {\n\t            var that = this,\n\t                page = that.page();\n\n\t            options = options || {};\n\n\t            if (!page || page === 1) {\n\t                return;\n\t            }\n\n\t            that._skip = that._currentRangeStart = that._skip - that.take();\n\n\t            page -= 1;\n\t            options.page = page;\n\n\t            that._query(options);\n\n\t            return page;\n\t        },\n\n\t        page: function(val) {\n\t            var that = this,\n\t            skip;\n\n\t            if(val !== undefined) {\n\t                val = math.max(math.min(math.max(val, 1), that.totalPages()), 1);\n\t                that._query(that._pageableQueryOptions({ page: val }));\n\t                return;\n\t            }\n\t            skip = that.skip();\n\n\t            return skip !== undefined ? math.round((skip || 0) / (that.take() || 1)) + 1 : undefined;\n\t        },\n\n\t        pageSize: function(val) {\n\t            var that = this;\n\n\t            if (val !== undefined) {\n\t                that._query(that._pageableQueryOptions({ pageSize: val, page: 1 }));\n\t                return;\n\t            }\n\n\t            return that.take();\n\t        },\n\n\t        sort: function(val) {\n\t            var that = this;\n\n\t            if(val !== undefined) {\n\t                that._query({ sort: val });\n\t                return;\n\t            }\n\n\t            return that._sort;\n\t        },\n\n\t        filter: function(val) {\n\t            var that = this;\n\n\t            if (val === undefined) {\n\t                return that._filter;\n\t            }\n\n\t            that.trigger(\"reset\");\n\t            that._query({ filter: val, page: 1 });\n\t        },\n\n\t        group: function(val) {\n\t            var that = this;\n\n\t            if(val !== undefined) {\n\t                that._query({ group: val });\n\t                return;\n\t            }\n\n\t            return that._group;\n\t        },\n\n\t        total: function() {\n\t            return parseInt(this._total || 0, 10);\n\t        },\n\n\t        aggregate: function(val) {\n\t            var that = this;\n\n\t            if(val !== undefined) {\n\t                that._query({ aggregate: val });\n\t                return;\n\t            }\n\n\t            return that._aggregate;\n\t        },\n\n\t        aggregates: function() {\n\t            var result = this._aggregateResult;\n\n\t            if (isEmptyObject(result)) {\n\t                result = this._emptyAggregates(this.aggregate());\n\t            }\n\n\t            return result;\n\t        },\n\n\t        _emptyAggregates: function(aggregates) {\n\t            var result = {};\n\n\t            if (!isEmptyObject(aggregates)) {\n\t                var aggregate = {};\n\n\t                if (!isArray(aggregates)){\n\t                    aggregates = [aggregates];\n\t                }\n\n\t                for (var idx = 0; idx <aggregates.length; idx++) {\n\t                    aggregate[aggregates[idx].aggregate] = 0;\n\t                    result[aggregates[idx].field] = aggregate;\n\t                }\n\t            }\n\n\t            return result;\n\t        },\n\n\t        _pageableQueryOptions: function(options) {\n\t            return options;\n\t        },\n\n\t        _wrapInEmptyGroup: function(model) {\n\t            var groups = this.group(),\n\t                parent,\n\t                group,\n\t                idx,\n\t                length;\n\n\t            for (idx = groups.length-1, length = 0; idx >= length; idx--) {\n\t                group = groups[idx];\n\t                parent = {\n\t                    value: model.get ? model.get(group.field) : model[group.field],\n\t                    field: group.field,\n\t                    items: parent ? [parent] : [model],\n\t                    hasSubgroups: !!parent,\n\t                    aggregates: this._emptyAggregates(group.aggregates)\n\t                };\n\t            }\n\n\t            return parent;\n\t        },\n\n\t        totalPages: function() {\n\t            var that = this,\n\t            pageSize = that.pageSize() || that.total();\n\n\t            return math.ceil((that.total() || 0) / pageSize);\n\t        },\n\n\t        inRange: function(skip, take) {\n\t            var that = this,\n\t                end = math.min(skip + take, that.total());\n\n\t            if (!that.options.serverPaging && that._data.length > 0) {\n\t                return true;\n\t            }\n\n\t            return that._findRange(skip, end).length > 0;\n\t        },\n\n\t        lastRange: function() {\n\t            var ranges = this._ranges;\n\t            return ranges[ranges.length - 1] || { start: 0, end: 0, data: [] };\n\t        },\n\n\t        firstItemUid: function() {\n\t            var ranges = this._ranges;\n\t            return ranges.length && ranges[0].data.length && ranges[0].data[0].uid;\n\t        },\n\n\t        enableRequestsInProgress: function() {\n\t            this._skipRequestsInProgress = false;\n\t        },\n\n\t        _timeStamp: function() {\n\t            return new Date().getTime();\n\t        },\n\n\t        range: function(skip, take, callback) {\n\t            this._currentRequestTimeStamp = this._timeStamp();\n\t            this._skipRequestsInProgress = true;\n\n\t            skip = math.min(skip || 0, this.total());\n\t            callback = isFunction(callback) ? callback : noop;\n\n\t            var that = this,\n\t                pageSkip = math.max(math.floor(skip / take), 0) * take,\n\t                size = math.min(pageSkip + take, that.total()),\n\t                data;\n\n\t            data = that._findRange(skip, math.min(skip + take, that.total()));\n\n\t            if (data.length || that.total() === 0) {\n\t                that._processRangeData(data, skip, take, pageSkip, size);\n\t                callback();\n\t                return;\n\t            }\n\n\t            if (take !== undefined) {\n\t                if (!that._rangeExists(pageSkip, size)) {\n\t                    that.prefetch(pageSkip, take, function() {\n\t                        if (skip > pageSkip && size < that.total() && !that._rangeExists(size, math.min(size + take, that.total()))) {\n\t                            that.prefetch(size, take, function() {\n\t                                that.range(skip, take, callback );\n\t                            });\n\t                        } else {\n\t                            that.range(skip, take, callback);\n\t                        }\n\t                    });\n\t                } else if (pageSkip < skip) {\n\t                    that.prefetch(size, take, function() {\n\t                        that.range(skip, take, callback );\n\t                    });\n\t                }\n\t            }\n\t        },\n\n\t        _findRange: function(start, end) {\n\t            var that = this,\n\t                ranges = that._ranges,\n\t                range,\n\t                data = [],\n\t                skipIdx,\n\t                takeIdx,\n\t                startIndex,\n\t                endIndex,\n\t                rangeData,\n\t                rangeEnd,\n\t                processed,\n\t                options = that.options,\n\t                remote = options.serverSorting || options.serverPaging || options.serverFiltering || options.serverGrouping || options.serverAggregates,\n\t                flatData,\n\t                count,\n\t                length;\n\n\t            for (skipIdx = 0, length = ranges.length; skipIdx < length; skipIdx++) {\n\t                range = ranges[skipIdx];\n\t                if (start >= range.start && start <= range.end) {\n\t                    count = 0;\n\n\t                    for (takeIdx = skipIdx; takeIdx < length; takeIdx++) {\n\t                        range = ranges[takeIdx];\n\t                        flatData = that._flatData(range.data, true);\n\n\t                        if (flatData.length && start + count >= range.start) {\n\t                            rangeData = range.data;\n\t                            rangeEnd = range.end;\n\n\t                            if (!remote) {\n\t                                if (options.inPlaceSort) {\n\t                                    processed = that._queryProcess(range.data, { filter: that.filter() });\n\t                                } else {\n\t                                    var sort = normalizeGroup(that.group() || []).concat(normalizeSort(that.sort() || []));\n\t                                    processed = that._queryProcess(range.data, { sort: sort, filter: that.filter() });\n\t                                }\n\t                                flatData = rangeData = processed.data;\n\n\t                                if (processed.total !== undefined) {\n\t                                    rangeEnd = processed.total;\n\t                                }\n\t                            }\n\n\t                            startIndex = 0;\n\t                            if (start + count > range.start) {\n\t                                startIndex = (start + count) - range.start;\n\t                            }\n\t                            endIndex = flatData.length;\n\t                            if (rangeEnd > end) {\n\t                                endIndex = endIndex - (rangeEnd - end);\n\t                            }\n\t                            count += endIndex - startIndex;\n\t                            data = that._mergeGroups(data, rangeData, startIndex, endIndex);\n\n\t                            if (end <= range.end && count == end - start) {\n\t                                return data;\n\t                            }\n\t                        }\n\t                    }\n\t                    break;\n\t                }\n\t            }\n\t            return [];\n\t        },\n\n\t        _mergeGroups: function(data, range, skip, take) {\n\t            if (this._isServerGrouped()) {\n\t                var temp = range.toJSON(),\n\t                    prevGroup;\n\n\t                if (data.length) {\n\t                    prevGroup = data[data.length - 1];\n\t                }\n\n\t                mergeGroups(prevGroup, temp, skip, take);\n\n\t                return data.concat(temp);\n\t            }\n\t            return data.concat(range.slice(skip, take));\n\t        },\n\n\t        _processRangeData: function(data, skip, take, pageSkip, size) {\n\t            var that = this;\n\n\t            that._pending = undefined;\n\n\t            that._skip = skip > that.skip() ? math.min(size, (that.totalPages() - 1) * that.take()) : pageSkip;\n\n\t            that._currentRangeStart = skip;\n\n\t            that._take = take;\n\n\t            var paging = that.options.serverPaging;\n\t            var sorting = that.options.serverSorting;\n\t            var filtering = that.options.serverFiltering;\n\t            var aggregates = that.options.serverAggregates;\n\t            try {\n\t                that.options.serverPaging = true;\n\t                if (!that._isServerGrouped() && !(that.group() && that.group().length)) {\n\t                    that.options.serverSorting = true;\n\t                }\n\t                that.options.serverFiltering = true;\n\t                that.options.serverPaging = true;\n\t                that.options.serverAggregates = true;\n\n\t                if (paging) {\n\t                    that._detachObservableParents();\n\t                    that._data = data = that._observe(data);\n\t                }\n\t                that._process(data);\n\t            } finally {\n\t                that.options.serverPaging = paging;\n\t                that.options.serverSorting = sorting;\n\t                that.options.serverFiltering = filtering;\n\t                that.options.serverAggregates = aggregates;\n\t            }\n\t        },\n\n\t        skip: function() {\n\t            var that = this;\n\n\t            if (that._skip === undefined) {\n\t                return (that._page !== undefined ? (that._page  - 1) * (that.take() || 1) : undefined);\n\t            }\n\t            return that._skip;\n\t        },\n\n\t        currentRangeStart: function() {\n\t            return this._currentRangeStart || 0;\n\t        },\n\n\t        take: function() {\n\t            return this._take || this._pageSize;\n\t        },\n\n\t        _prefetchSuccessHandler: function (skip, size, callback, force) {\n\t            var that = this;\n\t            var timestamp = that._timeStamp();\n\n\t            return function(data) {\n\t                var found = false,\n\t                    range = { start: skip, end: size, data: [], timestamp: that._timeStamp() },\n\t                    idx,\n\t                    length,\n\t                    temp;\n\n\t                that._dequeueRequest();\n\n\t                that.trigger(REQUESTEND, { response: data, type: \"read\" });\n\n\t                data = that.reader.parse(data);\n\n\t                temp = that._readData(data);\n\n\t                if (temp.length) {\n\t                    for (idx = 0, length = that._ranges.length; idx < length; idx++) {\n\t                        if (that._ranges[idx].start === skip) {\n\t                            found = true;\n\t                            range = that._ranges[idx];\n\n\t                            range.pristineData = temp;\n\t                            range.data = that._observe(temp);\n\t                            range.end = range.start + that._flatData(range.data, true).length;\n\t                            that._sortRanges();\n\n\t                            break;\n\t                        }\n\t                    }\n\n\t                    if (!found) {\n\t                        that._addRange(that._observe(temp), skip);\n\t                    }\n\t                }\n\n\t                that._total = that.reader.total(data);\n\n\t                if (force || (timestamp >= that._currentRequestTimeStamp || !that._skipRequestsInProgress)) {\n\t                    if (callback && temp.length) {\n\t                        callback();\n\t                    } else {\n\t                        that.trigger(CHANGE, {});\n\t                    }\n\t                }\n\t            };\n\t        },\n\n\t        prefetch: function(skip, take, callback) {\n\t            var that = this,\n\t                size = math.min(skip + take, that.total()),\n\t                options = {\n\t                    take: take,\n\t                    skip: skip,\n\t                    page: skip / take + 1,\n\t                    pageSize: take,\n\t                    sort: that._sort,\n\t                    filter: that._filter,\n\t                    group: that._group,\n\t                    aggregate: that._aggregate\n\t                };\n\n\t            if (!that._rangeExists(skip, size)) {\n\t                clearTimeout(that._timeout);\n\n\t                that._timeout = setTimeout(function() {\n\t                    that._queueRequest(options, function() {\n\t                        if (!that.trigger(REQUESTSTART, { type: \"read\" })) {\n\t                            that.transport.read({\n\t                                data: that._params(options),\n\t                                success: that._prefetchSuccessHandler(skip, size, callback),\n\t                                error: function() {\n\t                                    var args = slice.call(arguments);\n\t                                    that.error.apply(that, args);\n\t                                }\n\t                            });\n\t                        } else {\n\t                            that._dequeueRequest();\n\t                        }\n\t                    });\n\t                }, 100);\n\t            } else if (callback) {\n\t                callback();\n\t            }\n\t        },\n\n\t        _multiplePrefetch: function(skip, take, callback) {\n\t            var that = this,\n\t                size = math.min(skip + take, that.total()),\n\t                options = {\n\t                    take: take,\n\t                    skip: skip,\n\t                    page: skip / take + 1,\n\t                    pageSize: take,\n\t                    sort: that._sort,\n\t                    filter: that._filter,\n\t                    group: that._group,\n\t                    aggregate: that._aggregate\n\t                };\n\n\t            if (!that._rangeExists(skip, size)) {\n\t                if (!that.trigger(REQUESTSTART, { type: \"read\" })) {\n\t                    that.transport.read({\n\t                        data: that._params(options),\n\t                        success: that._prefetchSuccessHandler(skip, size, callback, true)\n\t                    });\n\t                }\n\t            } else if (callback) {\n\t                callback();\n\t            }\n\t        },\n\n\t        _rangeExists: function(start, end) {\n\t            var that = this,\n\t                ranges = that._ranges,\n\t                idx,\n\t                length;\n\n\t            for (idx = 0, length = ranges.length; idx < length; idx++) {\n\t                if (ranges[idx].start <= start && ranges[idx].end >= end) {\n\t                    return true;\n\t                }\n\t            }\n\n\t            return false;\n\t        },\n\n\t        _getCurrentRangeSpan: function() {\n\t            var that = this;\n\t            var ranges = that._ranges;\n\t            var start = that.currentRangeStart();\n\t            var end = start + (that.take() || 0);\n\t            var rangeSpan = [];\n\t            var range;\n\t            var idx;\n\t            var length = ranges.length;\n\n\t            for (idx = 0; idx < length; idx++) {\n\t                range = ranges[idx];\n\n\t                if ((range.start <= start && range.end >= start) || (range.start >= start && range.start <= end)) {\n\t                    rangeSpan.push(range);\n\t                }\n\t            }\n\n\t            return rangeSpan;\n\t        },\n\n\t        _removeModelFromRanges: function(model) {\n\t            var that = this;\n\t            var result,\n\t                range;\n\n\t            for (var idx = 0, length = this._ranges.length; idx < length; idx++) {\n\t                range = this._ranges[idx];\n\n\t                this._eachItem(range.data, function(items) {\n\t                    result = removeModel(items, model);\n\t                });\n\n\t                if (result) {\n\t                    break;\n\t                }\n\t            }\n\n\t            that._updateRangesLength();\n\t        },\n\n\t        _insertModelInRange: function(index, model) {\n\t            var that = this;\n\t            var ranges = that._ranges || [];\n\t            var rangesLength = ranges.length;\n\t            var range;\n\t            var i;\n\n\t            for (i = 0; i < rangesLength; i++) {\n\t                range = ranges[i];\n\n\t                if (range.start <= index && range.end >= index) {\n\t                    if (!that._getByUid(model.uid, range.data)) {\n\t                        if (that._isServerGrouped()) {\n\t                            range.data.splice(index, 0, that._wrapInEmptyGroup(model));\n\t                        } else {\n\t                            range.data.splice(index, 0, model);\n\t                        }\n\t                    }\n\n\t                    break;\n\t                }\n\t            }\n\n\t            that._updateRangesLength();\n\t        },\n\n\t        _updateRangesLength: function() {\n\t            var that = this;\n\t            var ranges = that._ranges || [];\n\t            var rangesLength = ranges.length;\n\t            var mismatchFound = false;\n\t            var mismatchLength = 0;\n\t            var lengthDifference = 0;\n\t            var range;\n\t            var i;\n\n\t            for (i = 0; i < rangesLength; i++) {\n\t                range = ranges[i];\n\t                lengthDifference = that._flatData(range.data, true).length - math.abs(range.end - range.start);\n\n\t                if (!mismatchFound && lengthDifference !== 0) {\n\t                    mismatchFound = true;\n\t                    mismatchLength = lengthDifference;\n\t                    range.end += mismatchLength;\n\t                    continue;\n\t                }\n\n\t                if (mismatchFound) {\n\t                    range.start += mismatchLength;\n\t                    range.end += mismatchLength;\n\t                }\n\t            }\n\t        }\n\t    });\n\n\t    var Transport = {};\n\n\t    Transport.create = function(options, data, dataSource) {\n\t        var transport,\n\t            transportOptions = options.transport ? $.extend({}, options.transport) : null;\n\n\t        if (transportOptions) {\n\t            transportOptions.read = typeof transportOptions.read === STRING ? { url: transportOptions.read } : transportOptions.read;\n\n\t            if (options.type === \"jsdo\") {\n\t                transportOptions.dataSource = dataSource;\n\t            }\n\n\t            if (options.type) {\n\t                kendo.data.transports = kendo.data.transports || {};\n\t                kendo.data.schemas = kendo.data.schemas || {};\n\n\t                if (!kendo.data.transports[options.type]) {\n\t                    kendo.logToConsole(\"Unknown DataSource transport type '\" + options.type + \"'.\\nVerify that registration scripts for this type are included after Kendo UI on the page.\", \"warn\");\n\t                } else if (!isPlainObject(kendo.data.transports[options.type])) {\n\t                    transport = new kendo.data.transports[options.type](extend(transportOptions, { data: data }));\n\t                } else {\n\t                    transportOptions = extend(true, {}, kendo.data.transports[options.type], transportOptions);\n\t                }\n\n\t                options.schema = extend(true, {}, kendo.data.schemas[options.type], options.schema);\n\t            }\n\n\t            if (!transport) {\n\t                transport = isFunction(transportOptions.read) ? transportOptions : new RemoteTransport(transportOptions);\n\t            }\n\t        } else {\n\t            transport = new LocalTransport({ data: options.data || [] });\n\t        }\n\t        return transport;\n\t    };\n\n\t    DataSource.create = function(options) {\n\t        if (isArray(options) || options instanceof ObservableArray) {\n\t           options = { data: options };\n\t        }\n\n\t        var dataSource = options || {},\n\t            data = dataSource.data,\n\t            fields = dataSource.fields,\n\t            table = dataSource.table,\n\t            select = dataSource.select,\n\t            idx,\n\t            length,\n\t            model = {},\n\t            field;\n\n\t        if (!data && fields && !dataSource.transport) {\n\t            if (table) {\n\t                data = inferTable(table, fields);\n\t            } else if (select) {\n\t                data = inferSelect(select, fields);\n\n\t                if (dataSource.group === undefined && data[0] && data[0].optgroup !== undefined) {\n\t                    dataSource.group = \"optgroup\";\n\t                }\n\t            }\n\t        }\n\n\t        if (kendo.data.Model && fields && (!dataSource.schema || !dataSource.schema.model)) {\n\t            for (idx = 0, length = fields.length; idx < length; idx++) {\n\t                field = fields[idx];\n\t                if (field.type) {\n\t                    model[field.field] = field;\n\t                }\n\t            }\n\n\t            if (!isEmptyObject(model)) {\n\t                dataSource.schema = extend(true, dataSource.schema, { model:  { fields: model } });\n\t            }\n\t        }\n\n\t        dataSource.data = data;\n\n\t        select = null;\n\t        dataSource.select = null;\n\t        table = null;\n\t        dataSource.table = null;\n\n\t        return dataSource instanceof DataSource ? dataSource : new DataSource(dataSource);\n\t    };\n\n\t    function inferSelect(select, fields) {\n\t        select = $(select)[0];\n\t        var options = select.options;\n\t        var firstField = fields[0];\n\t        var secondField = fields[1];\n\n\t        var data = [];\n\t        var idx, length;\n\t        var optgroup;\n\t        var option;\n\t        var record;\n\t        var value;\n\n\t        for (idx = 0, length = options.length; idx < length; idx++) {\n\t            record = {};\n\t            option = options[idx];\n\t            optgroup = option.parentNode;\n\n\t            if (optgroup === select) {\n\t                optgroup = null;\n\t            }\n\n\t            if (option.disabled || (optgroup && optgroup.disabled)) {\n\t                continue;\n\t            }\n\n\t            if (optgroup) {\n\t                record.optgroup = optgroup.label;\n\t            }\n\n\t            record[firstField.field] = option.text;\n\n\t            value = option.attributes.value;\n\n\t            if (value && value.specified) {\n\t                value = option.value;\n\t            } else {\n\t                value = option.text;\n\t            }\n\n\t            record[secondField.field] = value;\n\n\t            data.push(record);\n\t        }\n\n\t        return data;\n\t    }\n\n\t    function inferTable(table, fields) {\n\t        var tbody = $(table)[0].tBodies[0],\n\t        rows = tbody ? tbody.rows : [],\n\t        idx,\n\t        length,\n\t        fieldIndex,\n\t        fieldCount = fields.length,\n\t        data = [],\n\t        cells,\n\t        record,\n\t        cell,\n\t        empty;\n\n\t        for (idx = 0, length = rows.length; idx < length; idx++) {\n\t            record = {};\n\t            empty = true;\n\t            cells = rows[idx].cells;\n\n\t            for (fieldIndex = 0; fieldIndex < fieldCount; fieldIndex++) {\n\t                cell = cells[fieldIndex];\n\t                if(cell.nodeName.toLowerCase() !== \"th\") {\n\t                    empty = false;\n\t                    record[fields[fieldIndex].field] = cell.innerHTML;\n\t                }\n\t            }\n\t            if(!empty) {\n\t                data.push(record);\n\t            }\n\t        }\n\n\t        return data;\n\t    }\n\n\t    var Node = Model.define({\n\t        idField: \"id\",\n\n\t        init: function(value) {\n\t            var that = this,\n\t                hasChildren = that.hasChildren || value && value.hasChildren,\n\t                childrenField = \"items\",\n\t                childrenOptions = {};\n\n\t            kendo.data.Model.fn.init.call(that, value);\n\n\t            if (typeof that.children === STRING) {\n\t                childrenField = that.children;\n\t            }\n\n\t            childrenOptions = {\n\t                schema: {\n\t                    data: childrenField,\n\t                    model: {\n\t                        hasChildren: hasChildren,\n\t                        id: that.idField,\n\t                        fields: that.fields\n\t                    }\n\t                }\n\t            };\n\n\t            if (typeof that.children !== STRING) {\n\t                extend(childrenOptions, that.children);\n\t            }\n\n\t            childrenOptions.data = value;\n\n\t            if (!hasChildren) {\n\t                hasChildren = childrenOptions.schema.data;\n\t            }\n\n\t            if (typeof hasChildren === STRING) {\n\t                hasChildren = kendo.getter(hasChildren);\n\t            }\n\n\t            if (isFunction(hasChildren)) {\n\t                var hasChildrenObject = hasChildren.call(that, that);\n\n\t                if(hasChildrenObject && hasChildrenObject.length === 0){\n\t                    that.hasChildren = false;\n\t                } else{\n\t                    that.hasChildren = !!hasChildrenObject;\n\t                }\n\t            }\n\n\t            that._childrenOptions = childrenOptions;\n\n\t            if (that.hasChildren) {\n\t                that._initChildren();\n\t            }\n\n\t            that._loaded = !!(value && value._loaded);\n\t        },\n\n\t        _initChildren: function() {\n\t            var that = this;\n\t            var children, transport, parameterMap;\n\n\t            if (!(that.children instanceof HierarchicalDataSource)) {\n\t                children = that.children = new HierarchicalDataSource(that._childrenOptions);\n\n\t                transport = children.transport;\n\t                parameterMap = transport.parameterMap;\n\n\t                transport.parameterMap = function(data, type) {\n\t                    data[that.idField || \"id\"] = that.id;\n\n\t                    if (parameterMap) {\n\t                        data = parameterMap(data, type);\n\t                    }\n\n\t                    return data;\n\t                };\n\n\t                children.parent = function(){\n\t                    return that;\n\t                };\n\n\t                children.bind(CHANGE, function(e){\n\t                    e.node = e.node || that;\n\t                    that.trigger(CHANGE, e);\n\t                });\n\n\t                children.bind(ERROR, function(e){\n\t                    var collection = that.parent();\n\n\t                    if (collection) {\n\t                        e.node = e.node || that;\n\t                        collection.trigger(ERROR, e);\n\t                    }\n\t                });\n\n\t                that._updateChildrenField();\n\t            }\n\t        },\n\n\t        append: function(model) {\n\t            this._initChildren();\n\t            this.loaded(true);\n\t            this.children.add(model);\n\t        },\n\n\t        hasChildren: false,\n\n\t        level: function() {\n\t            var parentNode = this.parentNode(),\n\t                level = 0;\n\n\t            while (parentNode && parentNode.parentNode) {\n\t                level++;\n\t                parentNode = parentNode.parentNode ? parentNode.parentNode() : null;\n\t            }\n\n\t            return level;\n\t        },\n\n\t        _updateChildrenField: function() {\n\t            var fieldName = this._childrenOptions.schema.data;\n\n\t            this[fieldName || \"items\"] = this.children.data();\n\t        },\n\n\t        _childrenLoaded: function() {\n\t            this._loaded = true;\n\n\t            this._updateChildrenField();\n\t        },\n\n\t        load: function() {\n\t            var options = {};\n\t            var method = \"_query\";\n\t            var children, promise;\n\n\t            if (this.hasChildren) {\n\t                this._initChildren();\n\n\t                children = this.children;\n\n\t                options[this.idField || \"id\"] = this.id;\n\n\t                if (!this._loaded) {\n\t                    children._data = undefined;\n\t                    method = \"read\";\n\t                }\n\n\t                children.one(CHANGE, proxy(this._childrenLoaded, this));\n\n\t                if(this._matchFilter){\n\t                    options.filter = { field: '_matchFilter', operator: 'eq', value: true };\n\t                }\n\n\t                promise = children[method](options);\n\t            } else {\n\t                this.loaded(true);\n\t            }\n\n\t            return promise || $.Deferred().resolve().promise();\n\t        },\n\n\t        parentNode: function() {\n\t            var array = this.parent();\n\n\t            return array.parent();\n\t        },\n\n\t        loaded: function(value) {\n\t            if (value !== undefined) {\n\t                this._loaded = value;\n\t            } else {\n\t                return this._loaded;\n\t            }\n\t        },\n\n\t        shouldSerialize: function(field) {\n\t            return Model.fn.shouldSerialize.call(this, field) &&\n\t                    field !== \"children\" &&\n\t                    field !== \"_loaded\" &&\n\t                    field !== \"hasChildren\" &&\n\t                    field !== \"_childrenOptions\";\n\t        }\n\t    });\n\n\t    function dataMethod(name) {\n\t        return function() {\n\t            var data = this._data,\n\t                result = DataSource.fn[name].apply(this, slice.call(arguments));\n\n\t            if (this._data != data) {\n\t                this._attachBubbleHandlers();\n\t            }\n\n\t            return result;\n\t        };\n\t    }\n\n\t    var HierarchicalDataSource = DataSource.extend({\n\t        init: function(options) {\n\t            var node = Node.define({\n\t                children: options\n\t            });\n\n\t            if(options.filter && !options.serverFiltering){\n\t                this._hierarchicalFilter = options.filter;\n\t                options.filter = null;\n\t            }\n\n\t            DataSource.fn.init.call(this, extend(true, {}, { schema: { modelBase: node, model: node } }, options));\n\n\t            this._attachBubbleHandlers();\n\t        },\n\n\t        _attachBubbleHandlers: function() {\n\t            var that = this;\n\n\t            that._data.bind(ERROR, function(e) {\n\t                that.trigger(ERROR, e);\n\t            });\n\t        },\n\n\t        read: function(data) {\n\t            var result = DataSource.fn.read.call(this, data);\n\n\t            if(this._hierarchicalFilter){\n\t                if(this._data && this._data.length > 0){\n\t                    this.filter(this._hierarchicalFilter);\n\t                }else{\n\t                    this.options.filter = this._hierarchicalFilter;\n\t                    this._filter = normalizeFilter(this.options.filter);\n\t                    this._hierarchicalFilter = null;\n\t                }\n\t            }\n\n\t            return result;\n\t        },\n\n\t        remove: function(node){\n\t            var parentNode = node.parentNode(),\n\t                dataSource = this,\n\t                result;\n\n\t            if (parentNode && parentNode._initChildren) {\n\t                dataSource = parentNode.children;\n\t            }\n\n\t            result = DataSource.fn.remove.call(dataSource, node);\n\n\t            if (parentNode && !dataSource.data().length) {\n\t                parentNode.hasChildren = false;\n\t            }\n\n\t            return result;\n\t        },\n\n\t        success: dataMethod(\"success\"),\n\n\t        data: dataMethod(\"data\"),\n\n\t        insert: function(index, model) {\n\t            var parentNode = this.parent();\n\n\t            if (parentNode && parentNode._initChildren) {\n\t                parentNode.hasChildren = true;\n\t                parentNode._initChildren();\n\t            }\n\n\t            return DataSource.fn.insert.call(this, index, model);\n\t        },\n\n\t        filter: function(val) {\n\t            if (val === undefined) {\n\t                 return this._filter;\n\t            }\n\n\t            if(!this.options.serverFiltering && this._markHierarchicalQuery(val)){\n\t                val = { logic: \"or\", filters: [val, {field:'_matchFilter', operator: 'equals', value: true }]};\n\t            }\n\n\t            this.trigger(\"reset\");\n\t            this._query({ filter: val, page: 1 });\n\t        },\n\n\t        _markHierarchicalQuery: function(expressions){\n\t            var compiled;\n\t            var predicate;\n\t            var fields;\n\t            var operators;\n\t            var filter;\n\n\t            expressions = normalizeFilter(expressions);\n\n\t            if (!expressions || expressions.filters.length === 0) {\n\t                this._updateHierarchicalFilter(function(){return true;});\n\t                return false;\n\t            }\n\n\t            compiled = Query.filterExpr(expressions);\n\t            fields = compiled.fields;\n\t            operators = compiled.operators;\n\n\t            predicate = filter = new Function(\"d, __f, __o\", \"return \" + compiled.expression);\n\n\t            if (fields.length || operators.length) {\n\t                filter = function(d) {\n\t                    return predicate(d, fields, operators);\n\t                };\n\t            }\n\n\t            this._updateHierarchicalFilter(filter);\n\t            return true;\n\t        },\n\n\t         _updateHierarchicalFilter: function(filter){\n\t            var current;\n\t            var data = this._data;\n\t            var result = false;\n\n\t            for (var idx = 0; idx < data.length; idx++) {\n\t                 current = data[idx];\n\n\t                 if(current.hasChildren){\n\t                     current._matchFilter = current.children._updateHierarchicalFilter(filter);\n\t                    if(!current._matchFilter){\n\t                        current._matchFilter = filter(current);\n\t                    }\n\t                }else{\n\t                    current._matchFilter = filter(current);\n\t                }\n\n\t                if(current._matchFilter){\n\t                    result = true;\n\t                }\n\t            }\n\t            return result;\n\t        },\n\n\t        _find: function(method, value) {\n\t            var idx, length, node, children;\n\t            var data = this._data;\n\n\t            if (!data) {\n\t                return;\n\t            }\n\n\t            node = DataSource.fn[method].call(this, value);\n\n\t            if (node) {\n\t                return node;\n\t            }\n\n\t            data = this._flatData(this._data);\n\n\t            for (idx = 0, length = data.length; idx < length; idx++) {\n\t                children = data[idx].children;\n\n\t                if (!(children instanceof HierarchicalDataSource)) {\n\t                    continue;\n\t                }\n\n\t                node = children[method](value);\n\n\t                if (node) {\n\t                    return node;\n\t                }\n\t            }\n\t        },\n\n\t        get: function(id) {\n\t            return this._find(\"get\", id);\n\t        },\n\n\t        getByUid: function(uid) {\n\t            return this._find(\"getByUid\", uid);\n\t        }\n\t    });\n\n\t    function inferList(list, fields) {\n\t        var items = $(list).children(),\n\t            idx,\n\t            length,\n\t            data = [],\n\t            record,\n\t            textField = fields[0].field,\n\t            urlField = fields[1] && fields[1].field,\n\t            spriteCssClassField = fields[2] && fields[2].field,\n\t            imageUrlField = fields[3] && fields[3].field,\n\t            item,\n\t            id,\n\t            textChild,\n\t            className,\n\t            children;\n\n\t        function elements(collection, tagName) {\n\t            return collection.filter(tagName).add(collection.find(tagName));\n\t        }\n\n\t        for (idx = 0, length = items.length; idx < length; idx++) {\n\t            record = { _loaded: true };\n\t            item = items.eq(idx);\n\n\t            textChild = item[0].firstChild;\n\t            children = item.children();\n\t            list = children.filter(\"ul\");\n\t            children = children.filter(\":not(ul)\");\n\n\t            id = item.attr(\"data-id\");\n\n\t            if (id) {\n\t                record.id = id;\n\t            }\n\n\t            if (textChild) {\n\t                record[textField] = textChild.nodeType == 3 ? textChild.nodeValue : children.text();\n\t            }\n\n\t            if (urlField) {\n\t                record[urlField] = elements(children, \"a\").attr(\"href\");\n\t            }\n\n\t            if (imageUrlField) {\n\t                record[imageUrlField] = elements(children, \"img\").attr(\"src\");\n\t            }\n\n\t            if (spriteCssClassField) {\n\t                className = elements(children, \".k-sprite\").prop(\"className\");\n\t                record[spriteCssClassField] = className && $.trim(className.replace(\"k-sprite\", \"\"));\n\t            }\n\n\t            if (list.length) {\n\t                record.items = inferList(list.eq(0), fields);\n\t            }\n\n\t            if (item.attr(\"data-hasChildren\") == \"true\") {\n\t                record.hasChildren = true;\n\t            }\n\n\t            data.push(record);\n\t        }\n\n\t        return data;\n\t    }\n\n\t    HierarchicalDataSource.create = function(options) {\n\t        options = options && options.push ? { data: options } : options;\n\n\t        var dataSource = options || {},\n\t            data = dataSource.data,\n\t            fields = dataSource.fields,\n\t            list = dataSource.list;\n\n\t        if (data && data._dataSource) {\n\t            return data._dataSource;\n\t        }\n\n\t        if (!data && fields && !dataSource.transport) {\n\t            if (list) {\n\t                data = inferList(list, fields);\n\t            }\n\t        }\n\n\t        dataSource.data = data;\n\n\t        return dataSource instanceof HierarchicalDataSource ? dataSource : new HierarchicalDataSource(dataSource);\n\t    };\n\n\t    var Buffer = kendo.Observable.extend({\n\t        init: function(dataSource, viewSize, disablePrefetch) {\n\t            kendo.Observable.fn.init.call(this);\n\n\t            this._prefetching = false;\n\t            this.dataSource = dataSource;\n\t            this.prefetch = !disablePrefetch;\n\n\t            var buffer = this;\n\n\t            dataSource.bind(\"change\", function() {\n\t                buffer._change();\n\t            });\n\n\t            dataSource.bind(\"reset\", function() {\n\t                buffer._reset();\n\t            });\n\n\t            this._syncWithDataSource();\n\n\t            this.setViewSize(viewSize);\n\t        },\n\n\t        setViewSize: function(viewSize) {\n\t            this.viewSize = viewSize;\n\t            this._recalculate();\n\t        },\n\n\t        at: function(index)  {\n\t            var pageSize = this.pageSize,\n\t                itemPresent = true;\n\n\t            if (index >= this.total()) {\n\t                this.trigger(\"endreached\", {index: index });\n\t                return null;\n\t            }\n\n\t            if (!this.useRanges) {\n\t               return this.dataSource.view()[index];\n\t            }\n\t            if (this.useRanges) {\n\t                // out of range request\n\t                if (index < this.dataOffset || index >= this.skip + pageSize) {\n\t                    itemPresent = this.range(Math.floor(index / pageSize) * pageSize);\n\t                }\n\n\t                // prefetch\n\t                if (index === this.prefetchThreshold) {\n\t                    this._prefetch();\n\t                }\n\n\t                // mid-range jump - prefetchThreshold and nextPageThreshold may be equal, do not change to else if\n\t                if (index === this.midPageThreshold) {\n\t                    this.range(this.nextMidRange, true);\n\t                }\n\t                // next range jump\n\t                else if (index === this.nextPageThreshold) {\n\t                    this.range(this.nextFullRange);\n\t                }\n\t                // pull-back\n\t                else if (index === this.pullBackThreshold) {\n\t                    if (this.offset === this.skip) { // from full range to mid range\n\t                        this.range(this.previousMidRange);\n\t                    } else { // from mid range to full range\n\t                        this.range(this.previousFullRange);\n\t                    }\n\t                }\n\n\t                if (itemPresent) {\n\t                    return this.dataSource.at(index - this.dataOffset);\n\t                } else {\n\t                    this.trigger(\"endreached\", { index: index });\n\t                    return null;\n\t                }\n\t            }\n\t        },\n\n\t        indexOf: function(item) {\n\t            return this.dataSource.data().indexOf(item) + this.dataOffset;\n\t        },\n\n\t        total: function() {\n\t            return parseInt(this.dataSource.total(), 10);\n\t        },\n\n\t        next: function() {\n\t            var buffer = this,\n\t                pageSize = buffer.pageSize,\n\t                offset = buffer.skip - buffer.viewSize + pageSize,\n\t                pageSkip = math.max(math.floor(offset / pageSize), 0) * pageSize;\n\n\t            this.offset = offset;\n\t            this.dataSource.prefetch(pageSkip, pageSize, function() {\n\t                buffer._goToRange(offset, true);\n\t            });\n\t        },\n\n\t        range: function(offset, nextRange) {\n\t            if (this.offset === offset) {\n\t                return true;\n\t            }\n\n\t            var buffer = this,\n\t                pageSize = this.pageSize,\n\t                pageSkip = math.max(math.floor(offset / pageSize), 0) * pageSize,\n\t                dataSource = this.dataSource;\n\n\t            if (nextRange) {\n\t                pageSkip += pageSize;\n\t            }\n\n\t            if (dataSource.inRange(offset, pageSize)) {\n\t                this.offset = offset;\n\t                this._recalculate();\n\t                this._goToRange(offset);\n\t                return true;\n\t            } else if (this.prefetch) {\n\t                dataSource.prefetch(pageSkip, pageSize, function() {\n\t                    buffer.offset = offset;\n\t                    buffer._recalculate();\n\t                    buffer._goToRange(offset, true);\n\t                });\n\t                return false;\n\t            }\n\n\t            return true;\n\t        },\n\n\t        syncDataSource: function() {\n\t            var offset = this.offset;\n\t            this.offset = null;\n\t            this.range(offset);\n\t        },\n\n\t        destroy: function() {\n\t            this.unbind();\n\t        },\n\n\t        _prefetch: function() {\n\t            var buffer = this,\n\t                pageSize = this.pageSize,\n\t                prefetchOffset = this.skip + pageSize,\n\t                dataSource = this.dataSource;\n\n\t            if (!dataSource.inRange(prefetchOffset, pageSize) && !this._prefetching && this.prefetch) {\n\t                this._prefetching = true;\n\t                this.trigger(\"prefetching\", { skip: prefetchOffset, take: pageSize });\n\n\t                dataSource.prefetch(prefetchOffset, pageSize, function() {\n\t                    buffer._prefetching = false;\n\t                    buffer.trigger(\"prefetched\", { skip: prefetchOffset, take: pageSize });\n\t                });\n\t            }\n\t        },\n\n\t        _goToRange: function(offset, expanding) {\n\t            if (this.offset !== offset) {\n\t                return;\n\t            }\n\n\t            this.dataOffset = offset;\n\t            this._expanding = expanding;\n\t            this.dataSource.range(offset, this.pageSize);\n\t            this.dataSource.enableRequestsInProgress();\n\t        },\n\n\t        _reset: function() {\n\t            this._syncPending = true;\n\t        },\n\n\t        _change: function() {\n\t            var dataSource = this.dataSource;\n\n\t            this.length = this.useRanges ? dataSource.lastRange().end : dataSource.view().length;\n\n\t            if (this._syncPending) {\n\t                this._syncWithDataSource();\n\t                this._recalculate();\n\t                this._syncPending = false;\n\t                this.trigger(\"reset\", { offset: this.offset });\n\t            }\n\n\t            this.trigger(\"resize\");\n\n\t            if (this._expanding) {\n\t                this.trigger(\"expand\");\n\t            }\n\n\t            delete this._expanding;\n\t        },\n\n\t        _syncWithDataSource: function() {\n\t            var dataSource = this.dataSource;\n\n\t            this._firstItemUid = dataSource.firstItemUid();\n\t            this.dataOffset = this.offset = dataSource.skip() || 0;\n\t            this.pageSize = dataSource.pageSize();\n\t            this.useRanges = dataSource.options.serverPaging;\n\t        },\n\n\t        _recalculate: function() {\n\t            var pageSize = this.pageSize,\n\t                offset = this.offset,\n\t                viewSize = this.viewSize,\n\t                skip = Math.ceil(offset / pageSize) * pageSize;\n\n\t            this.skip = skip;\n\t            this.midPageThreshold = skip + pageSize - 1;\n\t            this.nextPageThreshold = skip + viewSize - 1;\n\t            this.prefetchThreshold = skip + Math.floor(pageSize / 3 * 2);\n\t            this.pullBackThreshold = this.offset - 1;\n\n\t            this.nextMidRange = skip + pageSize - viewSize;\n\t            this.nextFullRange = skip;\n\t            this.previousMidRange = offset - viewSize;\n\t            this.previousFullRange = skip - pageSize;\n\t        }\n\t    });\n\n\t    var BatchBuffer = kendo.Observable.extend({\n\t        init: function(dataSource, batchSize) {\n\t            var batchBuffer = this;\n\n\t            kendo.Observable.fn.init.call(batchBuffer);\n\n\t            this.dataSource = dataSource;\n\t            this.batchSize = batchSize;\n\t            this._total = 0;\n\n\t            this.buffer = new Buffer(dataSource, batchSize * 3);\n\n\t            this.buffer.bind({\n\t                \"endreached\": function (e) {\n\t                    batchBuffer.trigger(\"endreached\", { index: e.index });\n\t                },\n\t                \"prefetching\": function (e) {\n\t                    batchBuffer.trigger(\"prefetching\", { skip: e.skip, take: e.take });\n\t                },\n\t                \"prefetched\": function (e) {\n\t                    batchBuffer.trigger(\"prefetched\", { skip: e.skip, take: e.take });\n\t                },\n\t                \"reset\": function () {\n\t                    batchBuffer._total = 0;\n\t                    batchBuffer.trigger(\"reset\");\n\t                },\n\t                \"resize\": function () {\n\t                    batchBuffer._total = Math.ceil(this.length / batchBuffer.batchSize);\n\t                    batchBuffer.trigger(\"resize\", { total: batchBuffer.total(), offset: this.offset });\n\t                }\n\t            });\n\t        },\n\n\t        syncDataSource: function() {\n\t            this.buffer.syncDataSource();\n\t        },\n\n\t        at: function(index) {\n\t            var buffer = this.buffer,\n\t                skip = index * this.batchSize,\n\t                take = this.batchSize,\n\t                view = [],\n\t                item;\n\n\t            if (buffer.offset > skip) {\n\t                buffer.at(buffer.offset - 1);\n\t            }\n\n\t            for (var i = 0; i < take; i++) {\n\t                item = buffer.at(skip + i);\n\n\t                if (item === null) {\n\t                    break;\n\t                }\n\n\t                view.push(item);\n\t            }\n\n\t            return view;\n\t        },\n\n\t        total: function() {\n\t            return this._total;\n\t        },\n\n\t        destroy: function() {\n\t            this.buffer.destroy();\n\t            this.unbind();\n\t        }\n\t    });\n\n\t    extend(true, kendo.data, {\n\t        readers: {\n\t            json: DataReader\n\t        },\n\t        Query: Query,\n\t        DataSource: DataSource,\n\t        HierarchicalDataSource: HierarchicalDataSource,\n\t        Node: Node,\n\t        ObservableObject: ObservableObject,\n\t        ObservableArray: ObservableArray,\n\t        LazyObservableArray: LazyObservableArray,\n\t        LocalTransport: LocalTransport,\n\t        RemoteTransport: RemoteTransport,\n\t        Cache: Cache,\n\t        DataReader: DataReader,\n\t        Model: Model,\n\t        Buffer: Buffer,\n\t        BatchBuffer: BatchBuffer\n\t    });\n\t})(window.kendo.jQuery);\n\n\treturn window.kendo;\n\n\t}, __webpack_require__(3));\n\n\n/***/ }),\n\n/***/ 1047:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.data.odata */ \"c4b523a40f8c9d1f237b\");\n\n/***/ }),\n\n/***/ 1048:\n/***/ (function(module, exports) {\n\n\tmodule.exports = __webpack_require__(/*! ./kendo.data.xml */ \"f1f6d1b513a156927c9d\");\n\n/***/ })\n\n/******/ });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///f78db54954381e284430\n");

/***/ })

/******/ });