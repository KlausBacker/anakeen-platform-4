<migration xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xsi:noNamespaceSchemaLocation="migrationRules.xsd">

    <action id="docLog" label="Rename arg column to data column on doclog table">
        <condition>
            <sql-assert-empty label="verify column data of table doclog not exists">
                select * from information_schema.columns where table_schema = 'public'  and table_name = 'doclog' and column_name='data';
            </sql-assert-empty>
            <sql-assert-not-empty label="verify column arg of table doclog exists">
                select * from information_schema.columns where table_schema = 'public' and table_name = 'doclog' and column_name='arg';
            </sql-assert-not-empty>
        </condition>
        <process>
            <sql-query label="Add data column">
                alter table doclog add column data jsonb;
            </sql-query>
        </process>
        <check>
            <sql-assert-not-empty label="verify column data of table doclog has been created">
                select * from information_schema.columns where table_schema = 'public'   and table_name = 'doclog' and column_name='data';
            </sql-assert-not-empty>
        </check>
    </action>
    <action id="docTimer" label="Add donestatus column on doctimer table">
        <condition>
            <sql-assert-empty label="verify column donestatus of table doclog not exists">
                select * from information_schema.columns where table_schema = 'public' and table_name = 'doctimer' and column_name='donestatus';
            </sql-assert-empty>
        </condition>
        <process>
            <sql-query label="Add doctimer column">
                alter table doctimer add column donestatus text;
            </sql-query>
        </process>
        <check>
            <sql-assert-not-empty label="verify column donestatus of table doctimer has been created">
                select * from information_schema.columns where table_schema = 'public'  and table_name = 'doctimer' and column_name='donestatus';
            </sql-assert-not-empty>
        </check>
    </action>
    <action id="defaultParameter" label="Delete default values for smart parameters">
        <condition>
            <sql-assert-not-empty label="verify default paramaters values exists">
                select a1.id, a2.type, docfam.defaultvalues->>a1.id as defval from docfam, docattr a1, docattr a2 where
                a1.docid= docfam.id and a1.usefor = 'Q' and a1.frameid = a2.id and docfam.defaultvalues->>a1.id is not
                null and a2.type !~ 'array';
            </sql-assert-not-empty>
        </condition>
        <process>
            <php label="Delete default parameters"
                 callable="Anakeen\Database\Migration\DefaultParameterValues::removeValues()"/>
        </process>
        <check>
            <sql-assert-empty label="verify default paramaters values not exists anymore">
                select a1.id, a2.type, docfam.defaultvalues->>a1.id as defval from docfam, docattr a1, docattr a2 where
                a1.docid= docfam.id and a1.usefor = 'Q' and a1.frameid = a2.id and docfam.defaultvalues->>a1.id is not
                null and a2.type !~ 'array';
            </sql-assert-empty>
        </check>
    </action>

</migration>