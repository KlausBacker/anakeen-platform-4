{"version":3,"sources":["webpack:///./src/Apps/DOCUMENT/IHM/document.js?52d5","webpack:///./src/Apps/DOCUMENT/IHM/widgets/attributes/docid/wCreateDocument.js"],"names":["root","factory","__WEBPACK_AMD_DEFINE_ARRAY__","__webpack_require__","undefined","__WEBPACK_AMD_DEFINE_RESULT__","__WEBPACK_AMD_DEFINE_FACTORY__","apply","exports","module","window","$","_","eventList","ErrorNotLoaded","message","this","name","prototype","Object","create","Error","constructor","widget","_template","template","defaults","resizeMarginHeight","resizeMarginWidth","resizeDebounceTime","withoutResize","iframeName","uniqueId","noRouter","eventPrefix","_create","options","extend","eventListener","constraintList","cssToInject","jsToInject","_render","_bindEvents","$iframe","documentWindow","options_encode","currentWidget","JSON","stringify","omit","element","empty","append","json_encode","find","length","contentWindow","location","href","data","on","documentLoaded","domNode","viewData","_bindInternalWidget","call","initid","_unbindInternalWidget","dcp","triggerReload","documentReady","_resize","_trigger","rebindEvents","internalController","each","currentEvent","addEventListener","currentConstaint","addConstraint","reinjectCSSAndJS","injectCSS","injectJS","e","voidLoaded","isEmpty","eventNamespace","debounce","bind","parseInt","event","$documentWrapper","height","innerHeight","width","innerWidth","defer","tryToDestroy","Promise","resolve","reject","isLoaded","then","_destroy","errorMessage","off","_super","_checkEventName","eventName","isString","indexOf","currentEventType","join","fetchDocument","values","internalWidget","fetchPromise","initWidget","pick","value","key","success","wrap","rest","arguments","error","catch","eventType","callback","isUndefined","isFunction","isObject","eventCallback","externalEvent","once","console","removeEventListener","listEventListeners","newList","removed","testRegExp","RegExp","filter","test","push","parameters","documentCheck","attributeCheck","constraintCheck","externalConstraint","removeConstraint","listConstraints","constraintName","newConstraintList","currentConstraint","isArray","union","fn","document","initialDocumentBridge","methodName","charAt","Mustache","i18n","attributeTemplate","title","attributeId","originDocumentModel","index","open","wWidget","config","createLabel","currentValue","$createDocument","attributeModel","get","getValue","$dialog","renderTitle","render","windowTitle","dw","dcpWindow","windowWidth","windowHeight","content","iframe","close","closeDialog","kendoWindow","center","addClass","viewId","familyName","documentInfo","menuItem","wOrigin","$document","proxyTrigger","getFormValues","formValues","setFormValues","customFormValues","setFormValue","documentController","hide","setLabel","attributes","updateLabel","documentObject","eventId","preventDefault","currentDocumentObject","newValue","newOneValue","displayValue","familyRelation","family","icon","attributeValue","hasMultipleOption","clone","setValue","$subDoc","documentModel","tplData","getTemplateModelInfo","attrValue","attrId","rValue","isAttr","exec","triggerName","listener","args","dialogWindow","prevent","confirmClose","targetProperties","dcpConfirm","___","maxWidth","messages","okMessage","cancelMessage","htmlMessage","textMessage","confirm","cancel","askConfirm","isPrevented","kDialog","isModified","log","destroy"],"mappings":"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","file":"wCreateDocument-437b2dcf17ae14632ec8.js","sourcesContent":["/*global define, console*/\n(function umdRequire(root, factory)\n{\n    'use strict';\n\n    if (typeof define === 'function' && define.amd) {\n        define([\n            'jquery',\n            'underscore',\n            'dcpDocument/widgets/widget'\n        ], factory);\n    } else {\n        factory(window.jQuery, window._);\n    }\n}(window, function require_document($, _)\n{\n    'use strict';\n\n    var eventList = [\"beforeRender\", \"ready\", \"change\", \"displayMessage\", \"displayError\", \"validate\",\n        \"attributeBeforeRender\", \"attributeReady\",\n        \"attributeHelperSearch\", \"attributeHelperResponse\", \"attributeHelperSelect\",\n        \"attributeArrayChange\", \"actionClick\",\n        \"attributeAnchorClick\",\n        \"beforeClose\", \"close\",\n        \"beforeSave\", \"afterSave\", \"attributeDownloadFile\", \"attributeUploadFile\", \"attributeUploadFileDone\",\n        \"beforeDelete\", \"afterDelete\",\n        \"beforeRestore\", \"afterRestore\",\n        \"failTransition\", \"successTransition\",\n        \"beforeDisplayTransition\", \"afterDisplayTransition\",\n        \"beforeTransition\", \"beforeTransitionClose\",\n        \"destroy\", \"attributeCreateDialogDocumentBeforeSetFormValues\",\n        \"attributeCreateDialogDocumentBeforeSetTargetValue\", \"attributeCreateDialogDocumentReady\",\n        \"attributeCreateDialogDocumentBeforeClose\", \"attributeCreateDialogDocumentBeforeDestroy\"\n    ];\n\n    //Create a new kind of event\n    var ErrorNotLoaded = function dcpDocument_ErrorNotLoaded(message)\n    {\n        this.name = 'WidgetDocumentNotLoaded';\n        this.message = message || 'The document widget is not loaded, wait for the documentloaded event';\n    };\n    ErrorNotLoaded.prototype = Object.create(Error.prototype);\n    ErrorNotLoaded.prototype.constructor = ErrorNotLoaded;\n\n    $.widget(\"dcp.document\", {\n\n        _template: _.template('<iframe class=\"dcpDocumentWrapper\" name=\"<%- options.iframeName %>\" style=\"border : 0;\" data-src=\"api/v1/documents/0.html#widgetValue<%- options.json_encode %>\"></iframe>'),\n\n        defaults: {\n            \"resizeMarginHeight\": 3,\n            \"resizeMarginWidth\": 0,\n            \"resizeDebounceTime\": 50,\n            \"withoutResize\": false,\n            \"iframeName\": _.uniqueId(\"documentFrame\"),\n            \"noRouter\": true,\n            \"eventPrefix\": \"document\"\n        },\n\n        /**\n         * Create the widget\n         *\n         * Check if initid is present\n         */\n        _create: function dcpDocument_create()\n        {\n            this.options = _.extend({}, this.defaults, this.options);\n            this.options.eventListener = {};\n            this.options.constraintList = {};\n            this.options.cssToInject = [];\n            this.options.jsToInject = [];\n            this._render();\n            this._bindEvents();\n        },\n\n        /**\n         * Create the iframe with the content and register to load event\n         */\n        _render: function dcpDocument_render()\n        {\n            var $iframe, currentWidget = this, documentWindow, options_encode;\n            //inject the iframe\n            options_encode = JSON.stringify(_.omit(this.options,\n                \"resizeMarginHeight\", \"resizeMarginWidth\", \"resizeDebounceTime\",\n                \"withoutResize\", \"iframeName\", \"eventPrefix\", \"eventListener\",\n                \"constraintList\"\n            ));\n            this.element.empty().append(this._template({options:  {\n                iframeName : this.options.iframeName,\n                json_encode: options_encode\n            }}));\n            //bind the internal controller to the documentWidget\n            $iframe = this.element.find(\".dcpDocumentWrapper\");\n            //Listen the load to the iframe (initial JS added and page loaded)\n\n            if ($iframe.length > 0) {\n                documentWindow = $iframe[0].contentWindow;\n                //Use this way to set url for firefox (when the document is in iframe in another document)\n                documentWindow.location.href = $iframe.data(\"src\");\n                // This event is used when use a hard link (aka href anchor) to change document\n                // It is load also the first time\n                $iframe.on(\"load\", function dcpDocument_setReadyEvent()\n                {\n                    documentWindow.documentLoaded = function dcpDocument_loadedCallback(domNode, viewData)\n                    {\n                        // Re Bind the internalController function to the current widget\n                        currentWidget._bindInternalWidget.call(currentWidget, domNode.data(\"dcpDocumentController\"), viewData);\n                        // voidLoaded is true when document 0 is loaded\n                        currentWidget.element.data(\"voidLoaded\", !viewData || !viewData.initid );\n                    };\n\n                    $(documentWindow).on(\"unload\", function dcpDocument_setUnloadEvent()\n                    {\n                        currentWidget._unbindInternalWidget.call(currentWidget);\n                    });\n                    if (documentWindow.dcp && documentWindow.dcp.triggerReload && documentWindow.dcp.documentReady === false) {\n                        documentWindow.dcp.triggerReload();\n                    }\n                });\n\n            }\n            this._resize();\n        },\n\n        /**\n         * Suppress internal widget reference\n         */\n        _unbindInternalWidget: function dcpDocument_unbindInternalWidget()\n        {\n            this.element.data(\"internalWidgetInitialised\", false);\n            this.element.data(\"internalWidget\", false);\n            this._trigger(\"internalWidgetUnloaded\");\n            this._trigger(\"unloaded\");\n        },\n\n        rebindEvents: function dcpDocument_rebindEvents()\n        {\n            var internalController = this.element.data(\"internalWidget\");\n            if (internalController) {\n\n                //Rebind event\n                _.each(this.options.eventListener, function dcpDocument_bindEvent(currentEvent)\n                {\n                    internalController.addEventListener(currentEvent);\n                });\n                //Rebind constraint\n                _.each(this.options.constraintList, function dcpDocument_bindEvent(currentConstaint)\n                {\n                    internalController.addConstraint(currentConstaint);\n                });\n            }\n        },\n\n        reinjectCSSAndJS: function dcpDocument_reinjectCSSAndJS()\n        {\n            var internalController = this.element.data(\"internalWidget\");\n            if (internalController) {\n                try {\n                    internalController.injectCSS(this.options.cssToInject);\n                    internalController.injectJS(this.options.jsToInject);\n                } catch(e) {\n\n                }\n            }\n        },\n\n        /**\n         * Bind the internal controller to the current widget\n         * Reinit the constraint and the event\n         *\n         * @param internalController\n         * @param voidLoaded\n         */\n        _bindInternalWidget: function dcpDocument_bindInternalWidget(internalController, voidLoaded)\n        {\n            this.element.data(\"internalWidget\", internalController);\n            if (!voidLoaded) {\n                this.rebindEvents();\n                this.reinjectCSSAndJS();\n            }\n            this.element.data(\"internalWidgetInitialised\", true);\n            if (voidLoaded) {\n                this._trigger(\"loaded\", {}, {\"isEmpty\": true});\n                return this;\n            }\n            this._trigger(\"loaded\");\n            return this;\n        },\n\n        /**\n         * Add resize event\n         */\n        _bindEvents: function dcpDocument_bindEvents()\n        {\n            if (!this.options.withoutResize) {\n                $(window).on(\"resize\" + this.eventNamespace, _.debounce(_.bind(this._resize, this), parseInt(this.options.resizeDebounceTime, 10)));\n                this._resize();\n            }\n        },\n\n        /**\n         * Compute the size of the widget\n         */\n        _resize: function dcpDocument_resize()\n        {\n            var event = this._trigger(\"autoresize\"),\n                $documentWrapper = this.element.find(\".dcpDocumentWrapper\"),\n                currentWidget = this,\n                element = this.element;\n            //the computation can be done by an external function and default prevented\n            if (!this.options.withoutResize && event) {\n                //compute two times height (one for disapear horizontal scrollbar, two to get the actual size)\n                //noinspection JSValidateTypes\n                $documentWrapper.height(element.innerHeight() - parseInt(currentWidget.options.resizeMarginHeight, 10));\n                //noinspection JSValidateTypes\n                $documentWrapper.width(element.innerWidth() - parseInt(currentWidget.options.resizeMarginWidth, 10));\n                //defer height computation to let the time to scrollbar disapear\n                _.defer(function dcpDocument_computeHeight()\n                {\n                    //noinspection JSValidateTypes\n                    $documentWrapper.height(element.innerHeight() - parseInt(currentWidget.options.resizeMarginHeight, 10));\n                });\n            }\n        },\n\n        tryToDestroy: function dcpDocument_tryToDestroy() {\n            var currentWidget = this;\n            return new Promise(function dcpDocument_tryToDestroy_promise(resolve, reject) {\n                var internalWidget;\n                if (currentWidget.isLoaded()) {\n                    internalWidget = currentWidget.element.data(\"internalWidget\");\n                    internalWidget.tryToDestroy().then(function dcpDocument_destroy_then() {\n                        resolve();\n                        currentWidget._destroy();\n                    })[\"catch\"](function dcpDocument_destroy_catch(errorMessage) {\n                        reject(errorMessage);\n                    });\n                    return;\n                }\n                resolve();\n                currentWidget._destroy();\n            });\n        },\n\n        /**\n         * Destroy the widget\n         */\n        _destroy: function dcpDocument_destroy()\n        {\n            $(window).off(this.eventNamespace);\n            this.element.empty();\n            this._unbindInternalWidget();\n            this._trigger(\"destroy\");\n            this._super();\n        },\n\n        /**\n         * Check if event name is valid\n         *\n         * @param eventName string\n         * @private\n         */\n        _checkEventName: function documentController_checkEventName(eventName)\n        {\n            if (_.isString(eventName) &&\n                (eventName.indexOf(\"custom:\") === 0 ||\n                    _.find(eventList, function documentController_CheckEventType(currentEventType)\n                    {\n                        return currentEventType === eventName;\n                    })\n                )) {\n                return true;\n            }\n            throw new Error(\"The event type \" + eventName + \" is not known. It must be one of \" + eventList.join(\" ,\"));\n        },\n\n        /**\n         * Update options\n         */\n        options: function dcpDocument_options()\n        {\n            throw new Error(\"You cannot modify the options, you need to suppress the widget\");\n        },\n\n        /**\n         * Fetch a new document\n         *\n         * Use internal controller if ready\n         * Re-render the widget if internal is not ready\n         *\n         * @param values\n         * @param options\n         */\n        fetchDocument: function dcpDocument_fetchDocument(values, options)\n        {\n            var internalWidget,\n                currentWidget = this,\n                fetchPromise = null,\n                initWidget = function dpcDocument_successWidget()\n                {\n                    currentWidget.rebindEvents.call(currentWidget);\n                    currentWidget.element.data(\"voidLoaded\", false);\n                };\n            options = options || {};\n\n            if (!values.initid) {\n                throw new Error(\"You need to set the initid to fetch the document\");\n            }\n            _.each(_.pick(values, \"initid\", \"revision\", \"viewId\", \"customClientData\"), function dcpDocument_setNewOptions(value, key)\n            {\n                currentWidget.options[key] = value;\n            });\n\n            if (this.element.data(\"internalWidgetInitialised\")) {\n                internalWidget = this.element.data(\"internalWidget\");\n\n                if (options.success) {\n                    // @deprecated : use promise instead\n                    options.success = _.wrap(options.success, function dcpDocument_success(success)\n                    {\n                        initWidget.apply(this, _.rest(arguments));\n                        return success.apply(this, _.rest(arguments));\n                    });\n                }\n                if (options.error) {\n                    // @deprecated : use promise instead\n                    options.error = _.wrap(options.error, function dcpDocument_error(error)\n                    {\n                        initWidget.apply(this, _.rest(arguments));\n                        return error.apply(this, _.rest(arguments));\n                    });\n                }\n                fetchPromise = internalWidget.fetchDocument.call(internalWidget, values, options);\n\n                if (!options.success) {\n                    fetchPromise.then(initWidget);\n                }\n                if (!options.error) {\n                    fetchPromise.catch(initWidget);\n                }\n                return fetchPromise;\n            } else {\n                this._render();\n            }\n        },\n\n        /**\n         * Add a new external event\n         * The event is added in the widget and is auto-rebinded when the internal widget is reloaded\n         *\n         * @param eventType string|object type of the widget or an object event\n         * @param options object|function conf of the event or callback\n         * @param callback function callback\n         * @returns {*}\n         */\n        addEventListener: function dcpDocument_addEventListener(eventType, options, callback)\n        {\n            var currentEvent, currentWidget = this;\n            if (_.isUndefined(callback) && _.isFunction(options)) {\n                callback = options;\n                options = {};\n            }\n            // the first parameters can be the final object (chain removeEvent and addEvent)\n            if (_.isObject(eventType) && _.isUndefined(options) && _.isUndefined(callback)) {\n                currentEvent = eventType;\n                if (!currentEvent.name) {\n                    throw new Error(\"When an event is initiated with a single object, this object needs to have the name property \".JSON.stringify(currentEvent));\n                }\n            } else {\n                currentEvent = _.defaults(options, {\n                    \"name\": _.uniqueId(\"event_\" + eventType),\n                    \"eventType\": eventType,\n                    \"eventCallback\": callback,\n                    \"externalEvent\": true,\n                    \"once\": false\n                });\n            }\n            // the eventType must be one the list\n            this._checkEventName(currentEvent.eventType);\n            if (currentEvent.once === true) {\n                currentEvent.eventCallback = _.wrap(currentEvent.eventCallback, function dcpDocument_onceWrapper(callback)\n                {\n                    try {\n                        callback.apply(this, _.rest(arguments));\n                    } catch (e) {\n                        console.error(e);\n                    }\n                    currentWidget.removeEventListener(currentEvent.name);\n                });\n            }\n            //Remove once property because already wrapped\n            currentEvent.once = false;\n            this.options.eventListener[currentEvent.name] = currentEvent;\n            if (this.element.data(\"internalWidgetInitialised\") && !this.element.data(\"voidLoaded\")) {\n                this.element.data(\"internalWidget\").addEventListener(currentEvent);\n            }\n            return currentEvent.name;\n        },\n\n        /**\n         * List of the events of the current widget\n         *\n         * @returns {*}\n         */\n        listEventListeners: function documentControllerListEvents()\n        {\n            if (this.element.data(\"internalWidgetInitialised\") && !this.element.data(\"voidLoaded\")) {\n                return this.element.data(\"internalWidget\").listEventListeners();\n            } else {\n                return this.options.eventListener;\n            }\n        },\n\n        /**\n         * Remove the event of the widget list and the internal list (if internal is ready)\n         *\n         * @param eventName\n         * @returns {Array}\n         */\n        removeEventListener: function dcpDocument_removeEventListener(eventName)\n        {\n            var removed = [],\n                testRegExp = new RegExp(\"\\\\\" + eventName + \"$\"), newList, eventList;\n            newList = _.filter(this.options.eventListener, function dcpDocument_removeCurrentEvent(currentEvent)\n            {\n                if (currentEvent.name === eventName || testRegExp.test(currentEvent.name)) {\n                    removed.push(currentEvent);\n                    return false;\n                }\n                return true;\n            });\n            eventList = {};\n            _.each(newList, function dcp_documentIterateEach(currentEvent)\n            {\n                eventList[currentEvent.name] = currentEvent;\n            });\n            this.options.eventListener = eventList;\n            if (this.element.data(\"internalWidgetInitialised\") && !this.element.data(\"voidLoaded\")) {\n                this.element.data(\"internalWidget\").removeEventListener(eventName, true);\n            }\n            return removed;\n        },\n\n        /**\n         * Add a constraint\n         * The constraint is added in the widget and is auto-rebinded when the internal widget is reloaded\n         *\n         * @param options\n         * @param callback\n         * @returns {*}\n         */\n        addConstraint: function dcpDocument_addConstraint(options, callback)\n        {\n            var parameters, currentWidget = this;\n            if (_.isUndefined(callback) && _.isFunction(options)) {\n                callback = options;\n                options = {};\n            }\n            if (_.isObject(options) && _.isUndefined(callback)) {\n                if (!options.name) {\n                    throw new Error(\"When a constraint is initiated with a single object, this object needs to have the name property \".JSON.stringify(options));\n                }\n            } else {\n                parameters = _.defaults(options, {\n                    \"documentCheck\": function dcpDocument_defaultDocumentCheck()\n                    {\n                        return true;\n                    },\n                    \"attributeCheck\": function dcpDocument_defaultAttributeCheck()\n                    {\n                        return true;\n                    },\n                    \"constraintCheck\": callback,\n                    \"name\": _.uniqueId(\"constraint\"),\n                    \"externalConstraint\": false,\n                    \"once\": false\n                });\n            }\n            if (!_.isFunction(parameters.constraintCheck)) {\n                throw new Error(\"An event need a callback\");\n            }\n            if (parameters.once === true) {\n                parameters.eventCallback = _.wrap(parameters.constraintCheck, function dcpDocument_onceWrapper(callback)\n                {\n                    try {\n                        callback.apply(this, _.rest(arguments));\n                    } catch (e) {\n                        console.error(e);\n                    }\n                    currentWidget.removeConstraint(parameters.name, parameters.externalConstraint);\n                });\n            }\n            this.options.constraintList[parameters.name] = parameters;\n            if (this.element.data(\"internalWidgetInitialised\") && !this.element.data(\"voidLoaded\")) {\n                this.element.data(\"internalWidget\").addConstraint(parameters);\n            }\n            return parameters.name;\n        },\n        /**\n         * List the constraint of the widget\n         *\n         * @returns {*}\n         */\n        listConstraints: function documentControllerListConstraint()\n        {\n            if (this.element.data(\"internalWidgetInitialised\") && !this.element.data(\"voidLoaded\")) {\n                return this.element.data(\"internalWidget\").listConstraints();\n            } else {\n                return this.options.constraintList;\n            }\n        },\n        /**\n         * Remove the constraint of the widget\n         *\n         * @param constraintName\n         * @returns {Array}\n         */\n        removeConstraint: function dcpDocument_removeConstraint(constraintName)\n        {\n            var removed = [], newConstraintList, constraintList,\n                testRegExp = new RegExp(\"\\\\\" + constraintName + \"$\");\n            newConstraintList = _.filter(this.options.constraintList, function dcpDocument_removeConstraint(currentConstraint)\n            {\n                if (currentConstraint.name === constraintName || testRegExp.test(currentConstraint.name)) {\n                    removed.push(currentConstraint);\n                    return false;\n                }\n                return true;\n            });\n            constraintList = {};\n            _.each(newConstraintList, function dcpDocument_reinitConstraint(currentConstraint)\n            {\n                constraintList[currentConstraint.name] = currentConstraint;\n            });\n            this.options.constraintList = constraintList;\n            if (this.element.data(\"internalWidgetInitialised\") && !this.element.data(\"voidLoaded\")) {\n                this.element.data(\"internalWidget\").removeConstraint(constraintName, true);\n            }\n            return removed;\n        },\n\n        isLoaded: function dcpDocument_isLoaded()\n        {\n            return this.element.data(\"internalWidgetInitialised\") && !this.element.data(\"voidLoaded\");\n        },\n\n        injectCSS: function documentController_injectCSS(cssToInject)\n        {\n            if (!_.isArray(cssToInject) && !_.isString(cssToInject)) {\n                throw new Error(\"The css to inject must be an array string or a string\");\n            }\n            if (_.isString(cssToInject)) {\n                cssToInject = [cssToInject];\n            }\n\n            this.options.cssToInject = _.union(this.options.cssToInject, cssToInject);\n\n            if (this.element.data(\"internalWidgetInitialised\") && !this.element.data(\"voidLoaded\")) {\n                this.element.data(\"internalWidget\").injectCSS(cssToInject);\n            }\n        },\n\n        injectJS: function documentController_injectCSS(jsToInject)\n        {\n            if (!_.isArray(jsToInject) && !_.isString(jsToInject)) {\n                throw new Error(\"The js to inject must be an array string or a string\");\n            }\n            if (_.isString(jsToInject)) {\n                jsToInject = [jsToInject];\n            }\n\n            this.options.jsToInject = _.union(this.options.jsToInject, jsToInject);\n\n            if (this.element.data(\"internalWidgetInitialised\") && !this.element.data(\"voidLoaded\")) {\n                this.element.data(\"internalWidget\").injectJS(jsToInject);\n            }\n        }\n\n    });\n\n    //noinspection JSValidateJSDoc\n    /**\n     * Wrap the bridge that find the function to be executed\n     * Search in the current widget if the function is here\n     * Search in the internal widget (if ready to find the widget)\n     *\n     * @type {Function|function(): Function|function(): _Chain<T>|*}\n     */\n    //noinspection JSUnresolvedVariable\n    $.fn.document = _.wrap($.fn.document, function dcpDocument_wrap(initialDocumentBridge, methodName)\n    { // jshint ignore:line\n        var isMethodCall, internalWidget;\n        try {\n            return initialDocumentBridge.apply(this, _.rest(arguments));\n        } catch (error) {\n            if (error.name === \"noSuchMethodError\") {\n                isMethodCall = typeof methodName === \"string\";\n                if (isMethodCall && !this.data(\"internalWidgetInitialised\")) {\n                    throw new ErrorNotLoaded();\n                }\n                internalWidget = this.data(\"internalWidget\");\n                if (_.isFunction(internalWidget[methodName]) && methodName.charAt(0) !== \"_\") {\n                    return internalWidget[methodName].apply(internalWidget, _.rest(arguments, 2));\n                }\n            }\n            throw error;\n        }\n    });\n\n}));\n\n\n\n// WEBPACK FOOTER //\n// ./src/Apps/DOCUMENT/IHM/document.js","define([\n    'underscore',\n    'jquery',\n    \"mustache\",\n    'dcpDocument/i18n/documentCatalog',\n    'dcpDocument/views/document/attributeTemplate',\n    'dcpDocument/document'\n], function wCreateDocument(_, $, Mustache, i18n, attributeTemplate) {\n    'use strict';\n\n    $.widget(\"dcp.dcpCreateDocument\", {\n        options: {\n            title: \"Document\",\n            width: \"300px\",\n            height: \"400px\",\n            attributeId: null,\n            originDocumentModel: null,\n            index: -1\n\n        },\n\n        _create: function wcdCreate() {\n            this.element.data(\"dcpCreateDocument\", this);\n        },\n\n        open: function wcdOpen() {\n            var wWidget = this;\n            var config = this.options;\n            var index = config.index;\n            if (config.createLabel) {\n                var documentModel = config.originDocumentModel;\n                var attributeModel = documentModel.get('attributes').get(config.attributeId);\n                var currentValue;\n                var url = \"about:blank\";\n                var $createDocument;\n\n                if (index >= 0) {\n                    currentValue = attributeModel.getValue()[index];\n                } else {\n                    currentValue = attributeModel.getValue();\n                }\n\n                this.$dialog = $('<div class=\"dcpDocid-create-window\"/>');\n                $('body').append(this.$dialog);\n                var renderTitle = Mustache.render(config.windowTitle || \"\", currentValue);\n                var dw = this.$dialog.dcpWindow({\n                    title: renderTitle,\n                    width: config.windowWidth,\n                    height: config.windowHeight,\n                    content: url,\n                    iframe: true,\n                    close: function wcdClose(event) {\n                        wWidget.closeDialog(event, true);\n                    }\n                }).data('dcpWindow');\n                dw.kendoWindow().center();\n                dw.open();\n\n                $createDocument = dw.currentWidget;\n                $createDocument.on(\"documentcreate\", function wAttributeCreateDocumentCreation() {\n                    dw.currentWidget.find(\"> iframe\").addClass(\"k-content-frame\");\n                });\n\n                if (currentValue.value) {\n                    $createDocument.document({\n                        initid: currentValue.value,\n                        viewId: \"!defaultEdition\",\n                        withoutResize: true\n                    });\n                } else {\n                    $createDocument.document({\n                        initid: config.familyName || attributeModel.get(\"typeFormat\"),\n                        viewId: \"!defaultCreation\",\n                        withoutResize: true\n                    });\n                }\n\n                $createDocument.on(\"documentloaded\", function () {\n                    $(this).document(\"addEventListener\", \"ready\",\n                        {name: \"ddui:create:ready\"},\n                        function wDocidCreateDocumentReady(event, documentInfo) {\n                            var wOrigin = this;\n                            var isPrevented;\n                            var menuItem;\n                            wWidget.$document = this;\n\n                            isPrevented = wWidget.proxyTrigger(event, \"ready\", {});\n                            if (!isPrevented) {\n                                if (documentInfo.viewId === \"!defaultCreation\") {\n                                    // Set form values\n                                    isPrevented = wWidget.proxyTrigger(event, \"beforeSetFormValues\",\n                                        {\n                                            getFormValues: function wcdCustomGetFormValues() {\n                                                return config.formValues;\n                                            },\n                                            setFormValues: function wcdCustomSetFormValues(customFormValues) {\n                                                wWidget.setFormValue(customFormValues, wOrigin);\n                                            }\n                                        }\n                                    );\n\n                                    if (!isPrevented) {\n                                        wWidget.setFormValue(config.formValues, this);\n                                    }\n                                }\n                                menuItem = this.documentController(\"getMenu\", \"createAndClose\");\n                                if (menuItem) {\n                                    menuItem.hide();\n                                }\n                                menuItem = this.documentController(\"getMenu\", \"saveAndClose\");\n                                if (menuItem) {\n                                    menuItem.hide();\n                                }\n                                menuItem = this.documentController(\"getMenu\", \"create\");\n                                if (menuItem) {\n                                    menuItem.setLabel(Mustache.render(config.createLabel, attributeModel.attributes));\n                                }\n                                menuItem = this.documentController(\"getMenu\", \"save\");\n                                if (menuItem) {\n                                    menuItem.setLabel(Mustache.render(config.updateLabel, attributeModel.attributes));\n                                }\n                            }\n\n\n                        });\n\n                    $(this).document(\"addEventListener\",\n                        \"actionClick\",\n                        {\n                            name: \"ddui:create:close\"\n                        },\n                        function wAttributeCreateDocumentbeforeClose(event, documentObject, options) {\n                            if (options.eventId === \"document.close\") {\n                                event.preventDefault();\n                                wWidget.closeDialog(event, true);\n                            }\n                        }\n                    );\n\n                    $(this).document(\"addEventListener\",\n                        \"afterSave\",\n                        {\n                            name: \"ddui:create:record\"\n                        },\n                        function wAttributeCreateDocumentRecord(event, currentDocumentObject) {\n                            var newOneValue = {\n                                value: currentDocumentObject.initid,\n                                displayValue: currentDocumentObject.title,\n                                familyRelation: currentDocumentObject.family.name,\n                                icon: currentDocumentObject.icon\n                            };\n                            var newValue;\n                            var isPrevented;\n                            isPrevented = wWidget.proxyTrigger(event, \"beforeSetTargetValue\",\n                                {\n                                    attributeValue: newOneValue\n                                }\n                            );\n                            if (isPrevented) {\n                                return;\n                            }\n\n                            if (attributeModel.hasMultipleOption()) {\n                                newValue = attributeModel.getValue();\n                                if (index >= 0) {\n                                    newValue = newValue[index];\n                                }\n                                if (_.isArray(newValue)) {\n                                    newValue = _.clone(newValue); // need to clone to trigger backbone change\n                                    newValue.push(newOneValue);\n                                } else {\n                                    newValue = [newOneValue];\n                                }\n                            } else {\n                                newValue = newOneValue;\n                            }\n                            attributeModel.setValue(newValue, index);\n\n                            isPrevented = wWidget.proxyTrigger(event, \"beforeClose\", {\n                                attributeValue: newValue\n                            });\n                            if (!isPrevented) {\n                                dw.close();\n                            }\n                        }\n                    );\n                });\n            }\n        },\n        setFormValue: function wcdSetFormValue(formValues, $subDoc) {\n\n            var documentModel = this.options.originDocumentModel;\n            var tplData = attributeTemplate.getTemplateModelInfo(documentModel);\n            // Set form values\n            _.each(formValues, function wDocidFormValues(attrValue, attrId) {\n                var rValue;\n                if (_.isObject(attrValue)) {\n                    $subDoc.documentController(\"setValue\", attrId, attrValue);\n                } else {\n                    var isAttr = new RegExp(\"^{{attributes\\.(.+)\\.attributeValue}}$\").exec(attrValue);\n\n                    if (isAttr && documentModel.get(\"attributes\").get(isAttr[1])) {\n                        rValue = documentModel.get(\"attributes\").get(isAttr[1]).getValue();\n                        $subDoc.documentController(\"setValue\", attrId, rValue);\n                    } else {\n                        rValue = Mustache.render(attrValue, tplData);\n                        $subDoc.documentController(\"setValue\", attrId, {\n                            value: rValue,\n                            displayValue: rValue\n                        });\n                    }\n                }\n            });\n        },\n\n        proxyTrigger: function wcdTrigger(event, triggerName, options) {\n            var listener, args;\n            if (this.options[triggerName]) {\n                listener = this.options[triggerName];\n                args = [event, options];\n            } else\n                if (this.options.listener) {\n                    listener = this.options.listener;\n                    args = [event, triggerName, options];\n                }\n            if (listener) {\n                options.index = this.options.index;\n                options.dialogWindow = this.$dialog;\n                listener.apply(this.$document, args);\n                return (event.prevent === true);\n            }\n            return false;\n        },\n\n        confirmClose: function wcdConfirmClose() {\n            var targetProperties = this.$document.documentController(\"getProperties\");\n            return new Promise(function wsdAskConfirmation(resolve, reject) {\n                var confirmWindow = $('body').dcpConfirm({\n                    title: Mustache.render(i18n.___(\"Confirm close form \\\"{{title}}\\\"\", \"ddui\"), targetProperties),\n                    width: \"510px\",\n                    height: \"150px\",\n                    maxWidth: $(window).width(),\n                    messages: {\n                        okMessage: i18n.___(\"Abord modification\", \"ddui\"),\n                        cancelMessage: i18n.___(\"Stay on the form\", \"ddui\"),\n                        htmlMessage: i18n.___(\"The form has been modified without saving\", \"ddui\"),\n                        textMessage: ''\n                    },\n                    confirm: resolve,\n                    cancel: reject\n                });\n                confirmWindow.data('dcpWindow').open();\n            });\n        },\n\n        closeDialog: function wcdcloseDialog(event, askConfirm) {\n            var wWidget = this;\n            var isPrevented = false;\n            var kDialog = this.$dialog.data(\"dcpWindow\");\n            if (this.$document) {\n\n                var targetProperties = this.$document.documentController(\"getProperties\");\n                isPrevented = this.proxyTrigger(event, \"beforeClose\", {});\n\n                if (!isPrevented && askConfirm && targetProperties && targetProperties.isModified) {\n                    console.log(\"modified\", targetProperties);\n                    wWidget.confirmClose().then(function wcdConfirmClose() {\n                        wWidget.closeDialog(event, false);\n                    });\n                    isPrevented = true;\n                }\n            }\n            if (!isPrevented) {\n                isPrevented = wWidget.proxyTrigger(event, \"beforeDestroy\", {});\n                if (!isPrevented) {\n                    kDialog.destroy();\n                }\n            } else {\n                event.preventDefault();\n            }\n        }\n    });\n});\n\n\n// WEBPACK FOOTER //\n// ./src/Apps/DOCUMENT/IHM/widgets/attributes/docid/wCreateDocument.js"],"sourceRoot":""}