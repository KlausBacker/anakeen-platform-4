<?php

namespace {{VENDOR}}\{{MODULE}}\Routes\V1\{{classSubNs}};

use Anakeen\Router\ApiV2Response;
use Demat\Crud\V1v2;
/**
 *
 * @description {{description}}
 * @use by route GET /api/v1/{{classSubDir}}
 */
class {{className}}
{
 /** @var \{{classSubNs}}\{{className}} */
 protected $crudObject;
 protected $identifier;

    public function __invoke(\Slim\Http\request $request, \Slim\Http\response $response, $args)
    {
    $this->crudObject=new \{{classSubNs}}\{{className}}();
        $this->initParameters($args, $request);
$data = $this->doRequest($request);
return ApiV2Response::withData($response,$data,V1v2::convertMsgs($this->crudObject) );
}


protected function initParameters($args, \Slim\Http\request $request)
{
    //@FIXME HERE set parameters in protected fields
    $this->identifier = $args["identifier"] ?? "";
    $this->crudObject->setContentParameters($request->getQueryParams());
    $this->crudObject->setUrlParameters($args);
}

protected function doRequest(\Slim\Http\request $request)
{
// @FIXME Choose the good method and realize the action
$data = [];
switch ($request->getMethod()) {
case "GET":
$data = $this->crudObject->read($this->identifier);
break;
case "POST":
$data = $this->crudObject->create();
break;
case "PUT":
$data = $this->crudObject->update($this->identifier);
break;
case "DELETE":
$data = $this->crudObject->delete($this->identifier);
break;
}
return $data;
}

}
